{"version":3,"file":"integrations.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/webpack/runtime/compat get default export","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/script-loader\"","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/adyenv2/adyenv2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"lodash\"","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/utils/is-card-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-invalid-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv2/adyenv2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/utils/is-account-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv2/create-adyenv2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/adyenv3/adyenv3-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv3/adyenv3-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/utils/is-boleto-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv3/create-adyenv3-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/items-require-shipping.ts","webpack://@bigcommerce/checkout-sdk/./packages/affirm-integration/src/affirm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/affirm-integration/src/affirm.ts","webpack://@bigcommerce/checkout-sdk/./packages/affirm-integration/src/affirm-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/affirm-integration/src/affirmJs.ts","webpack://@bigcommerce/checkout-sdk/./packages/affirm-integration/src/create-affirm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/afterpay-integration/src/afterpay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/afterpay-integration/src/afterpay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/afterpay-integration/src/is-afterpay-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/afterpay-integration/src/create-afterpay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/util-types/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getShippableItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getLineItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/isInternalCheckoutSelectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/create-amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/isAmazonPayAdditionalActionError.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/create-amazon-pay-v2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/request-sender\"","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-verison.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-version-manager.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-scripts-integrity.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/loading-indicator/loading-indicator.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-constants.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/form-poster\"","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/cart/cart-source.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/create-bigcommerce-payments-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/bigcommerce-payments-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-bigcommerce-payments-provider-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/create-bigcommerce-payments-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/paypal-sdk-helper.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/create-bigcommerce-payments-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/storage/src/cookie-storage.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/bigcommerce-payments-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/bigcommerce-payments-fastlane-utils.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/create-bigcommerce-payments-fastlane-utils.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/get-fastlane-styles.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-paypal-fastlane-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/bigcommerce-payments-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-bigcommerce-fastlane-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/create-bigcommerce-payments-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/get-paypal-messages-styles-from-bnpl-config.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/bigcommerce-payments-paylater-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/create-bigcommerce-payments-paylater-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-ratepay/bigcommerce-payments-ratepay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-ratepay/create-bigcommerce-payments-ratepay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/hosted-form/hosted-field-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/hosted-form/is-credit-card-form-fields.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/hosted-form/is-credit-card-vaulted-form-fields.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-credit-cards/bigcommerce-payments-credit-cards-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-bigcommerce-payments-fastlane-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-credit-cards/create-bigcommerce-payments-credit-cards-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/bigcommerce-payments-alternative-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/create-bigcommerce-payments-alternative-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/bigcommerce-payments-venmo-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/create-bigcommerce-payments-venmo-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-3ds.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/utils/is-hosted-card-field-options-map.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/utils/is-hosted-stored-card-field-options-map.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-constants.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-hosted-form.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/utils/is-bluesnap-direct-input-validation-error-description.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-hosted-input-validator.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-name-on-card-input.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/utils/is-array-of-allowed-props.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/create-bluesnap-direct-credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-apm/bluesnap-direct-apm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/utils/is-bluesnap-direct-provider-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/utils/is-bluesnap-direct-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-apm/create-bluesnap-direct-apm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/cancellable-promise/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnapv2/bluesnapv2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnapv2/create-bluesnapv2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"local-storage-fallback\"","webpack://@bigcommerce/checkout-sdk/./packages/analytics/src/analytics-extra-items-manager.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-with-account-creation.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/is-bolt-payment-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/analytics/src/is-analytics-step-tracker-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/create-bolt-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/is-us-bank-account-instrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-ach/braintree-ach-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-ach/create-braintree-ach-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/create-braintree-sdk.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@braintree/browser-detection\"","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/paypal.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-messages.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/overlay/overlay.ts","webpack://@bigcommerce/checkout-sdk/./packages/ui/src/overlay/overlay-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-constants.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/map-to-braintree-shipping-address-override.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/braintree-paypal-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/is-braintree-paypal-provider-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-local-payment-methods/braintree-local-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-local-payment-methods/create-braintree-local-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/get-fastlane-styles.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-accelerated-checkout-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/braintree-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/braintree-fastlane-utils.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/create-braintree-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-custom-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-sepa/checkoutcom-fawry-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-sepa/create-checkoutcom-fawry-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/isThreeDSecureRequiredError.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/create-checkoutcom-credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-sepa/checkoutcom-sepa-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-sepa/create-checkoutcom-sepa-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-ideal/checkoutcom-ideal-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-ideal/create-checkoutcom-ideal-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-apm/checkoutcom-apm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/checkoutcom-custom-integration/src/checkoutcom-apm/create-checkoutcom-apm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/clearpay-integration/src/clearpay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/clearpay-integration/src/clearpay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/clearpay-integration/src/create-clearpay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/create-credit-card-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-three-d-secure-flow.ts","webpack://@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal.ts","webpack://@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/cybersource-integration/src/cybersource/cybersource-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/cybersource-integration/src/cybersource/create-cybersource-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-three-d-secure-flow-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-credit-card-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/cybersource-integration/src/cybersourcev2/cybersourcev2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/cybersource-integration/src/cybersourcev2/create-cybersourcev2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/external-integration/src/external-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/external-integration/src/is-additional-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/external-integration/src/create-external-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/adyen-utils/src/utils/is-additional-action-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/bind-decorator/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-card-network-key.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/create-currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-adyenv2-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-additional-action-processable.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-error-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-initialize-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-key.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/create-google-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-adyenv2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-adyenv3-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-adyenv3-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-authorizenet-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-authorizenet-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-authorizenet-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-checkoutcom-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-checkoutcom-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-threedsecure-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-checkoutcom-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-cybersource-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-cybersource-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-orbital-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-orbital-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/google-pay-stripe-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/stripe-upe-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripe-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-worldpayaccess-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-worldpayaccess-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-braintree-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-braintree-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-braintree-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-paypal-commerce-payment-method.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/google-pay-bigcommerce-payments-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/google-pay-bigcommerce-payments-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/create-google-pay-bigcommerce-payments-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-tdonlinemart-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-td-online-mart-additional-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-tdonlinemart-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-execute-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/humm-integration/src/humm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/humm-integration/src/create-humm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarnav2/klarna-supported-countries.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarna/klarna-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarna/klarna-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarna/create-klarna-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarnav2/klarnav2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarnav2/klarnav2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarnav2/klarnav2-token-updater.ts","webpack://@bigcommerce/checkout-sdk/./packages/klarna-integration/src/klarnav2/create-klarnav2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/legacy-integration/src/legacy-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/legacy-integration/src/create-legacy-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/mollie-integration/src/mollie-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/mollie-integration/src/mollie-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/mollie-integration/src/is-mollie-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/mollie-integration/src/create-mollie-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/moneris-integration/src/moneris-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/moneris-integration/src/create-moneris-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/no-payment-integration/src/no-payment-data-required-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/no-payment-integration/src/create-no-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/offline-integration/src/offline-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/offline-integration/src/create-offline-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/offsite-integration/src/offsite-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/offsite-integration/src/create-offsite-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/create-paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-constants.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/get-paypal-messages-styles-from-bnpl-config.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/is-redirect-action-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/is-paypal-commerce-provider-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/create-paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/paypal-commerce-alternative-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/create-paypal-commerce-alternative-methods-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-fastlane-utils.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/create-paypal-commerce-fastlane-utils.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit-card/paypal-commerce-credit-cards-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/is-paypal-commerce-accelerated-checkout-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit-card/create-paypal-commerce-credit-cards-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-ratepay/paypal-commerce-ratepay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-ratepay/create-paypal-commerce-ratepay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/get-fastlane-styles.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/is-paypal-fastlane-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-fastlane/paypal-commerce-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/is-paypal-fastlane-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-fastlane/create-paypal-commerce-fastlane-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-pro-integration/src/paypal-pro-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-pro-integration/src/create-paypal-pro-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/sagepay-integration/src/sage-pay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/sagepay-integration/src/create-sage-pay-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/sezzle-integration/src/sezzle-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/sezzle-integration/src/create-sezzle-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs/operators\"","webpack://@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/enums.ts","webpack://@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/squarev2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/squarev2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/squarev2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/is-squarev2-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/create-squarev2-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/is-individual-card-element-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/stripev3.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/stripev3-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/stripev3-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/billing/is-billing-address-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/stripev3-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/create-stripev3-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/stripe-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/stripe.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/stripe-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/is-stripe-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/is-stripe-payment-method-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/stripe-supported-locales.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/format-locale.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/is-stripe-accelerated-checkout-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/stripe-upe-constants.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/stripe-upe-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/create-stripe-upe-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-utils/is-stripe-payment-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-ocs/stripe-ocs-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-ocs/create-stripe-ocs-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/td-online-mart.ts","webpack://@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/td-online-mart-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/isTdOnlineMartAdditionalAction.ts","webpack://@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/is-create-token-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/td-online-mart-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/create-td-online-mart-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/worldpayaccess-integration/src/worldpayaccess-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/worldpayaccess-integration/src/create-worldpayaccess-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/storefront-payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/zip-integration/src/zip-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/zip-integration/src/create-zip-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/create-amazon-pay-v2-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/checkout-buttons/default-checkout-button-height.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/bigcommerce-payments-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/create-bigcommerce-payments-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/bigcommerce-payments-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/create-bigcommerce-payments-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/bigcommerce-payments-paylater-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/create-bigcommerce-payments-paylater-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/bigcommerce-payments-venmo-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/create-bigcommerce-payments-venmo-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/custom-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/create-bolt-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/braintree-paypal-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/braintree-paypal-credit-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/create-braintree-paypal-credit-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/braintree-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/create-braintree-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/braintree-visa-checkout-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/create-braintree-visa-checkout-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-adyenv2-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-adyenv3-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-authorizenet-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-checkoutcom-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-cybersource-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-bnz-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-orbital-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripe-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripeupe-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-worldpayaccess-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-braintree-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/create-google-pay-bigcommerce-payments-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-tdonlinemart-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-fastlane/paypal-commerce-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-fastlane/create-paypal-commerce-fastlane-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/stripe-upe-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/create-stripe-upe-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-ocs/constants.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-ocs/stripe-link-v2-customer-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-ocs/create-stripe-link-v2-customer-strategy.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/script-loader\");","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenV2HostWindow } from '../types';\n\nexport default class AdyenV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenV2HostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.css`,\n                {\n                    prepend: false,\n                    attributes: {\n                        integrity:\n                            'sha384-8ofgICZZ/k5cC5N7xegqFZOA73H9RQ7H13439JfAZW8Gj3qjuKL2isaTD3GMIhDE',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity:\n                            'sha384-wG2z9zSQo61EIvyXmiFCo+zB3y0ZB4hsrXVcANmpP8HLthjoQJQPBh7tZKJSV8jA',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return new this._window.AdyenCheckout(configuration);\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash\");","export enum AdyenV3ActionType {\n    /*\n     * The payment qualifies for 3D Secure 2, and will go through either the frictionless\n     * or the challenge flow.\n     * */\n    ThreeDS2Fingerprint = 'threeDS2Fingerprint',\n\n    /*\n     * The payment qualifies for 3D Secure 2, and the issuer is initiating a challenge flow.\n     * */\n    ThreeDS2 = 'threeDS2',\n\n    /*\n     * We will initiate a 3D Secure 1 fallback, because the issuer does not support 3D Secure 2.\n     * */\n    Redirect = 'redirect',\n\n    /*\n     * The Component presents the QR code and calls the onAdditionalDetails event.\n     * */\n    QRCode = 'qrCode',\n\n    /*\n     * The Component displays the voucher which the shopper uses to complete the payment.\n     * */\n    Voucher = 'voucher',\n\n    /*\n     * The Component displays the widget which the shopper uses to complete the payment.\n     * */\n    Sdk = 'sdk',\n}\n\nexport enum AdyenV2ActionType {\n    /*\n     * The payment qualifies for 3D Secure 2, and will go through either the frictionless\n     * or the challenge flow.\n     * */\n    ThreeDS2Fingerprint = 'threeDS2Fingerprint',\n\n    /*\n     * The payment qualifies for 3D Secure 2, and the issuer is initiating a challenge flow.\n     * */\n    ThreeDS2Challenge = 'threeDS2Challenge',\n\n    /*\n     * We will initiate a 3D Secure 1 fallback, because the issuer does not support 3D Secure 2.\n     * */\n    Redirect = 'redirect',\n\n    /*\n     * The Component presents the QR code and calls the onAdditionalDetails event.\n     * */\n    QRCode = 'qrCode',\n\n    /*\n     * The Component displays the voucher which the shopper uses to complete the payment.\n     * */\n    Voucher = 'voucher',\n}\n\nexport enum AdyenComponentType {\n    SecuredFields = 'securedfields',\n}\n\nexport enum AdyenPaymentMethodType {\n    ACH = 'ach',\n    AliPay = 'alipay',\n    Bancontact = 'bcmc',\n    CreditCard = 'scheme',\n    Klarna = 'klarna',\n    KlarnaPayNow = 'klarna_paynow',\n    KlarnaAccount = 'klarna_account',\n    IDEAL = 'ideal',\n    GiroPay = 'giropay',\n    GooglePay = 'paywithgoogle',\n    SEPA = 'sepadirectdebit',\n    Sofort = 'directEbanking',\n    Vipps = 'vipps',\n    WeChatPayQR = 'wechatpayQR',\n}\n\nexport enum HTTPMethod {\n    POST = 'POST',\n}\n\nexport enum ResultCode {\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n}\n\ninterface AdyenPaymentMethodState {\n    type: string;\n}\n\ninterface WechatDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\ninterface BoletoDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n    shopperName?: {\n        firstName?: string;\n        lastName?: string;\n    };\n    socialSecurityNumber?: string;\n}\n\ninterface CardPaymentMethodState extends AdyenPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName: string;\n}\n\nexport interface AdyenV2Action {\n    method: HTTPMethod;\n\n    /**\n     * Value that you need to submit in your /payments/details request when handling\n     * the redirect.\n     */\n    paymentData: string;\n\n    paymentMethodType: AdyenPaymentMethodType;\n\n    /*\n     * The Component performs additional front-end actions depending on the action.type.\n     * Your next steps depend on the type of action that the Component performs.\n     */\n    type: AdyenV2ActionType;\n\n    /**\n     * The HTTP request method that you should use. After the shopper completes the payment,\n     * they will be redirected back to your returnURL using the same method.\n     */\n    url: string;\n}\n\nexport interface AdyenV3Action {\n    method: HTTPMethod;\n\n    /**\n     * Value that you need to submit in your /payments/details request when handling\n     * the redirect.\n     */\n    paymentData: string;\n\n    paymentMethodType: AdyenPaymentMethodType;\n\n    /*\n     * The Component performs additional front-end actions depending on the action.type.\n     * Your next steps depend on the type of action that the Component performs.\n     */\n    type: AdyenV3ActionType;\n\n    /**\n     * The HTTP request method that you should use. After the shopper completes the payment,\n     * they will be redirected back to your returnURL using the same method.\n     */\n    url: string;\n}\n\nexport type AdyenAction = AdyenV2Action | AdyenV3Action;\n\nexport interface AdyenAdditionalAction {\n    resultCode: ResultCode;\n    action: string;\n}\n\nexport interface AdyenAdditionalActionCallbacks {\n    /**\n     * A callback that gets called before adyen component is loaded\n     */\n    onBeforeLoad?(shopperInteraction?: boolean): void;\n\n    /**\n     * A callback that gets called when adyen component is loaded\n     */\n    onLoad?(cancel?: () => void): void;\n\n    /**\n     * A callback that gets called when adyen component verification\n     * is completed\n     */\n    onComplete?(): void;\n\n    /**\n     * A callback that gets called when an action, for example a QR code or 3D Secure 2 authentication screen, is shown to the shopper\n     */\n    onActionHandled?(): void;\n}\n\nexport interface AdyenAdditionalActionErrorResponse {\n    provider_data: AdyenAdditionalAction;\n    errors: [{ code: string }];\n}\n\nexport interface AdyenAdditionalActionOptions extends AdyenAdditionalActionCallbacks {\n    /**\n     * The location to insert the additional action component.\n     */\n    containerId: string;\n\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface AdyenAdditionalActionState {\n    data: AdyenAdditionalAction;\n    isValid?: boolean;\n}\n\nexport interface AdyenBaseCardComponentOptions {\n    /**\n     * Array of card brands that will be recognized by the component.\n     *\n     */\n    brands?: string[];\n\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: StyleOptions;\n\n    showBrandsUnderCardNumber?: boolean;\n}\n\nexport interface AdyenComponentEvents {\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenComponentEventState, component: AdyenComponent): void;\n\n    /**\n     * Called when the shopper selects the Pay button and payment details are valid.\n     */\n    onSubmit?(state: AdyenComponentEventState, component: AdyenComponent): void;\n\n    /**\n     * Called in case of an invalid card number, invalid expiry date, or\n     *  incomplete field. Called again when errors are cleared.\n     */\n    onError?(state: AdyenValidationState, component: AdyenComponent): void;\n\n    onFieldValid?(state: AdyenValidationState, component: AdyenComponent): void;\n}\n\nexport interface AdyenClient {\n    create(type: string, componentOptions?: AdyenComponentOptions): AdyenComponent;\n\n    createFromAction(\n        action: AdyenV2Action | AdyenV3Action,\n        componentOptions?:\n            | ThreeDS2DeviceFingerprintComponentOptions\n            | AdyenV3ThreeDS2ChallengeComponentOptions\n            | AdyenV2ThreeDS2ChallengeComponentOptions,\n    ): AdyenComponent;\n}\n\nexport interface AdyenComponent {\n    componentRef?: {\n        showValidation(): void;\n    };\n    props?: {\n        type?: string;\n    };\n    state?: AdyenComponentState;\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n    submit(): void;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey?: string;\n\n    /*\n     * The Client Key of your Adyen account.\n     */\n    clientKey?: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /**\n     * Configuration for specific payment methods.\n     */\n    paymentMethodsConfiguration?: {\n        klarna: {\n            useKlarnaWidget: boolean;\n        };\n        klarna_account: {\n            useKlarnaWidget: boolean;\n        };\n        klarna_paynow: {\n            useKlarnaWidget: boolean;\n        };\n        card?: {\n            installmentOptions?: {\n                card?: {\n                    values: number[];\n                    plans?: string[];\n                };\n                visa?: {\n                    values: number[];\n                    plans?: string[];\n                };\n                mc?: {\n                    values: number[];\n                    plans?: string[];\n                };\n                diners?: {\n                    values: number[];\n                    plans?: string[];\n                };\n                jcb?: {\n                    values: number[];\n                    plans?: string[];\n                };\n                showInstallmentAmounts?: boolean;\n            };\n        };\n    };\n\n    showPayButton?: boolean;\n\n    /**\n     * If your shoppers use a language that isn't supported by the Components, you can create your own localization.\n     * To create a localization:\n     * Add a translations object to your payment page, specifying:\n     * The localization you want to create.\n     * An object containing the fields that are used in the Components, as well as the text you want displayed for each field.\n     *\n     * \"en\": {\n     *  \"paymentMethods.moreMethodsButton\": \"More payment methods\",\n     *  \"payButton\": \"Pay\",\n     *  \"storeDetails\": \"Save for my next payment\",\n     *   ...\n     * }\n     */\n    translations?: {\n        [index: string]: {\n            [index: string]: string;\n        };\n    };\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: AdyenComponentEventState, component?: AdyenComponent): void;\n\n    onAdditionalDetails?(state: AdyenComponentEventState, component?: AdyenComponent): void;\n}\n\nexport interface AdyenPlaceholderData {\n    firstName?: string;\n    lastName?: string;\n    holderName?: string;\n    prefillCardHolderName?: boolean;\n    billingAddress?: {\n        street: string;\n        houseNumberOrName: string;\n        postalCode: string;\n        city: string;\n        stateOrProvince: string;\n        country: string;\n    };\n}\n\nexport interface AdyenCreditCardComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Information to prefill fields.\n     */\n    data?: AdyenPlaceholderData;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n}\n\nexport interface AdyenCustomCardComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Specify aria attributes for the input fields for web accessibility.\n     */\n    ariaLabels?: CustomCardAriaLabels;\n\n    /**\n     * Automatically shift the focus from date field to the CVC field.\n     */\n    autofocus?: boolean;\n}\n\ntype AdyenClientConstructor = (configuration: AdyenConfiguration) => Promise<AdyenClient>;\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface AdyenV3HostWindow extends Window {\n    AdyenCheckout?: AdyenClientConstructor;\n}\n\nexport interface AdyenV2HostWindow extends Window {\n    AdyenCheckout?: new (configuration: AdyenConfiguration) => AdyenClient;\n}\n\nexport interface AdyenIdealComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Optional. Set to **false** to remove the bank logos from the iDEAL form.\n     */\n    showImage?: boolean;\n}\n\nexport interface AdyenBoletoComponentOptions extends AdyenComponentEvents {\n    personalDetailsRequired?: boolean;\n    billingAddressRequired?: boolean;\n    showEmailAddress?: boolean;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface AdyenThreeDS2Options extends AdyenAdditionalActionCallbacks {\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CardState {\n    data: CardDataPaymentMethodState;\n    isValid?: boolean;\n    valid?: { [key: string]: boolean };\n    errors?: CardStateErrors;\n}\n\ninterface IdealStateData {\n    issuer: string;\n}\n\ninterface SepaStateData {\n    ownerName: string;\n    ibanNumber: string;\n}\n\ninterface CardStateData {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName: string;\n}\n\nexport interface AdyenComponentState {\n    data?: CardStateData | IdealStateData | SepaStateData;\n    issuer?: string;\n    isValid?: boolean;\n    valid?: { [key: string]: boolean };\n    errors?: CardStateErrors;\n}\n\ninterface CardDataPaymentMethodState {\n    paymentMethod: CardPaymentMethodState;\n    installments?: { value: number; plan?: 'string' };\n}\n\nexport interface CardStateErrors {\n    [key: string]: string;\n}\n\nexport interface WechatState {\n    data: WechatDataPaymentMethodState;\n}\n\nexport interface BoletoState {\n    data: BoletoDataPaymentMethodState;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\ninterface AccountDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\nexport interface AccountState {\n    data: AccountDataPaymentMethodState;\n}\n\nexport interface CssProperties {\n    background?: string;\n    caretColor?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface CustomCardAriaLabel {\n    label?: string;\n    iframeTitle?: string;\n}\n\nexport interface CustomCardAriaLabels {\n    lang?: string;\n    encryptedCardNumber?: CustomCardAriaLabel;\n    encryptedExpiryDate?: CustomCardAriaLabel;\n    encryptedSecurityCode?: CustomCardAriaLabel;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface PaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface PaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: PaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: PaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface RecurringDetail extends PaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface StyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface AdyenV3ThreeDS2ChallengeComponentOptions {\n    challengeWindowSize?: string;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onActionHandled?(rtnObj: ActionHandledReturnObject): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenV2ThreeDS2ChallengeComponentOptions {\n    size?: string;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onActionHandled?(rtnObj: ActionHandledReturnObject): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface ActionHandledReturnObject {\n    componentType: string;\n    actionDescription: string;\n}\n\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    onActionHandled?(rtnObj: ActionHandledReturnObject): void;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenValidationState {\n    valid: boolean;\n    fieldType?: AdyenCardFields;\n    endDigits?: string;\n    encryptedFieldName?: string;\n    i18n?: string;\n    error?: string;\n    errorKey?: string;\n}\n\nexport enum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport type AdyenComponentEventState = CardState | BoletoState | WechatState;\n\nexport type AdyenComponentOptions =\n    | AdyenCreditCardComponentOptions\n    | AdyenIdealComponentOptions\n    | AdyenBoletoComponentOptions\n    | AdyenCustomCardComponentOptions;\n\nexport interface AdyenV3PaymentMethodInitializationData {\n    clientKey?: string;\n    environment?: string;\n    paymentMethodsResponse?: PaymentMethodsResponse;\n    prefillCardHolderName?: boolean;\n    installmentOptions?: null | {\n        card?: {\n            values: number[];\n            plans?: string[];\n        };\n        visa?: {\n            values: number[];\n            plans?: string[];\n        };\n        mc?: {\n            values: number[];\n            plans?: string[];\n        };\n        diners?: {\n            values: number[];\n            plans?: string[];\n        };\n        jcb?: {\n            values: number[];\n            plans?: string[];\n        };\n    };\n}\n\nexport interface AdyenV2PaymentMethodInitializationData {\n    originKey?: string;\n    clientKey?: string;\n    environment?: string;\n    paymentMethodsResponse?: PaymentMethodsResponse;\n    prefillCardHolderName?: boolean;\n}\n","import { AdyenComponentEventState, CardState } from '../types';\n\nexport default function isCardState(param: AdyenComponentEventState): param is CardState {\n    return (\n        (typeof param === 'object' &&\n            typeof (param as CardState).data.paymentMethod.encryptedSecurityCode === 'string') ||\n        typeof (param as CardState).data.paymentMethod.encryptedExpiryMonth === 'string'\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import StandardError from './standard-error';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","import { some } from 'lodash';\n\nimport {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenComponent,\n    AdyenComponentEventState,\n    AdyenComponentType,\n    AdyenError,\n    AdyenPaymentMethodType,\n    AdyenPlaceholderData,\n    AdyenV2ActionType,\n    AdyenV2PaymentInitializeOptions,\n    AdyenV2PaymentMethodInitializationData,\n    AdyenV2ScriptLoader,\n    CardStateErrors,\n    isAccountState,\n    isCardState,\n    WithAdyenV2PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    BillingAddress,\n    getBrowserInfo,\n    HostedInstrument,\n    InvalidArgumentError,\n    isRequestError,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenClient?: AdyenClient;\n    private _cardVerificationComponent?: AdyenComponent;\n    private _componentState?: AdyenComponentEventState;\n    private _paymentComponent?: AdyenComponent;\n    private _paymentInitializeOptions?: AdyenV2PaymentInitializeOptions;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _scriptLoader: AdyenV2ScriptLoader,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithAdyenV2PaymentInitializeOptions,\n    ): Promise<void> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.adyenv2\" argument is not provided.',\n            );\n        }\n\n        this._paymentInitializeOptions = adyenv2;\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<AdyenV2PaymentMethodInitializationData>(options.methodId);\n        const { originKey, clientKey, environment, paymentMethodsResponse } =\n            paymentMethod.initializationData || {};\n        const clientSideAuthentication = {\n            key: '',\n            value: '',\n        };\n\n        if (originKey) {\n            clientSideAuthentication.key = 'originKey';\n            clientSideAuthentication.value = originKey;\n        } else {\n            clientSideAuthentication.key = 'clientKey';\n            clientSideAuthentication.value = clientKey || '';\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment,\n            locale: this._paymentIntegrationService.getState().getLocale(),\n            [clientSideAuthentication.key]: clientSideAuthentication.value,\n            paymentMethodsResponse,\n            translations: {\n                es: { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-AR': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-ES': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-MX': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CL': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CO': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-PE': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n            },\n        });\n\n        this._paymentComponent = await this._mountPaymentComponent(paymentMethod);\n\n        if (\n            paymentMethod.method === AdyenPaymentMethodType.CreditCard ||\n            paymentMethod.method === AdyenPaymentMethodType.Bancontact\n        ) {\n            this._cardVerificationComponent = await this._mountCardVerificationComponent();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument =\n            paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n        const shouldSetAsDefaultInstrument =\n            paymentData && (paymentData as HostedInstrument).shouldSetAsDefaultInstrument;\n\n        if (!payment) {\n            return Promise.reject(new PaymentArgumentInvalidError(['payment']));\n        }\n\n        this._validateCardData();\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        const componentState = this._componentState;\n\n        if (!componentState) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            let bigpayToken = {};\n\n            if (isCardState(componentState)) {\n                const {\n                    encryptedCardNumber,\n                    encryptedSecurityCode,\n                    encryptedExpiryMonth,\n                    encryptedExpiryYear,\n                } = componentState.data.paymentMethod;\n\n                bigpayToken = {\n                    credit_card_number_confirmation: encryptedCardNumber,\n                    expiry_month: encryptedExpiryMonth,\n                    expiry_year: encryptedExpiryYear,\n                    verification_value: encryptedSecurityCode,\n                };\n            }\n\n            if (isCardState(componentState) || isAccountState(componentState)) {\n                try {\n                    await this._paymentIntegrationService.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            formattedPayload: {\n                                bigpay_token: {\n                                    ...bigpayToken,\n                                    token: paymentData.instrumentId,\n                                },\n                                origin: window.location.origin,\n                                browser_info: getBrowserInfo(),\n                                set_as_default_stored_instrument:\n                                    shouldSetAsDefaultInstrument || null,\n                            },\n                        },\n                    });\n\n                    return;\n                } catch (error) {\n                    await this._processAdditionalAction(\n                        error,\n                        shouldSaveInstrument,\n                        shouldSetAsDefaultInstrument,\n                    );\n\n                    return;\n                }\n            }\n        }\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData: {\n                    formattedPayload: {\n                        credit_card_token: {\n                            token: JSON.stringify({\n                                ...componentState.data.paymentMethod,\n                                origin: window.location.origin,\n                            }),\n                        },\n                        browser_info: getBrowserInfo(),\n                        vault_payment_instrument: shouldSaveInstrument || null,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                },\n            });\n        } catch (error) {\n            await this._processAdditionalAction(\n                error,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this._componentState = undefined;\n\n        if (this._paymentComponent) {\n            this._paymentComponent.unmount();\n            this._paymentComponent = undefined;\n        }\n\n        if (this._cardVerificationComponent) {\n            this._cardVerificationComponent.unmount();\n            this._cardVerificationComponent = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n\n    private _getPaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._paymentInitializeOptions) {\n            throw new InvalidArgumentError(\n                '\"options.adyenv2\" argument was not provided during initialization.',\n            );\n        }\n\n        return this._paymentInitializeOptions;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { additionalActionOptions, threeDS2Options } = this._getPaymentInitializeOptions();\n        const widgetSize = additionalActionOptions.widgetSize || threeDS2Options?.widgetSize;\n\n        if (!widgetSize) {\n            return '05';\n        }\n\n        return widgetSize;\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const { threeDS2ContainerId, additionalActionOptions } =\n                this._getPaymentInitializeOptions();\n            const { onBeforeLoad, containerId, onLoad, onComplete } = additionalActionOptions;\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    if (onComplete) {\n                        onComplete();\n                    }\n\n                    resolve(paymentPayload);\n                },\n                size: this._getThreeDS2ChallengeWidgetSize(),\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            if (onBeforeLoad) {\n                onBeforeLoad(\n                    adyenAction.type === AdyenV2ActionType.ThreeDS2Challenge ||\n                        adyenAction.type === AdyenV2ActionType.QRCode,\n                );\n            }\n\n            additionalActionComponent.mount(`#${containerId || threeDS2ContainerId}`);\n\n            if (onLoad) {\n                onLoad(() => {\n                    reject(new PaymentMethodCancelledError());\n                    additionalActionComponent.unmount();\n                });\n            }\n        });\n    }\n\n    private _mapAdyenPlaceholderData(\n        billingAddress?: BillingAddress,\n        prefillCardHolderName?: boolean,\n    ): AdyenPlaceholderData {\n        if (!billingAddress) {\n            return {};\n        }\n\n        const {\n            firstName,\n            lastName,\n            address1: street,\n            address2: houseNumberOrName,\n            postalCode,\n            city,\n            stateOrProvinceCode: stateOrProvince,\n            countryCode: country,\n        } = billingAddress;\n\n        return {\n            holderName: prefillCardHolderName ? `${firstName} ${lastName}` : '',\n            billingAddress: {\n                street,\n                houseNumberOrName,\n                postalCode,\n                city,\n                stateOrProvince,\n                country,\n            },\n        };\n    }\n\n    private _mountCardVerificationComponent(): Promise<AdyenComponent> {\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n        let cardVerificationComponent: AdyenComponent;\n\n        return new Promise((resolve, reject) => {\n            if (adyenv2.cardVerificationContainerId) {\n                cardVerificationComponent = adyenClient.create(AdyenComponentType.SecuredFields, {\n                    ...adyenv2.options,\n                    styles: {\n                        ...adyenv2.options?.styles,\n                        placeholder: {\n                            color: 'transparent',\n                            caretColor: '#000',\n                            ...adyenv2.options?.styles?.placeholder,\n                        },\n                    },\n                    onChange: (componentState) => this._updateComponentState(componentState),\n                    onError: (validateState) => adyenv2.validateCardFields(validateState),\n                    onFieldValid: (validateState) => adyenv2.validateCardFields(validateState),\n                });\n\n                try {\n                    cardVerificationComponent.mount(`#${adyenv2.cardVerificationContainerId}`);\n                } catch (error) {\n                    reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                }\n            }\n\n            resolve(cardVerificationComponent);\n        });\n    }\n\n    private _mountPaymentComponent(paymentMethod: PaymentMethod): Promise<AdyenComponent> {\n        let paymentComponent: AdyenComponent;\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n\n        return new Promise((resolve, reject) => {\n            switch (paymentMethod.method) {\n                case AdyenPaymentMethodType.CreditCard:\n                case AdyenPaymentMethodType.ACH:\n                case AdyenPaymentMethodType.Bancontact: {\n                    const billingAddress = this._paymentIntegrationService\n                        .getState()\n                        .getBillingAddress();\n                    const { prefillCardHolderName } = paymentMethod.initializationData;\n\n                    paymentComponent = adyenClient.create(paymentMethod.method, {\n                        ...adyenv2.options,\n                        onChange: (componentState) => this._updateComponentState(componentState),\n                        data: this._mapAdyenPlaceholderData(billingAddress, prefillCardHolderName),\n                    });\n\n                    try {\n                        paymentComponent.mount(`#${adyenv2.containerId}`);\n                    } catch (error) {\n                        reject(\n                            new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                        );\n                    }\n\n                    break;\n                }\n\n                case AdyenPaymentMethodType.IDEAL:\n                case AdyenPaymentMethodType.SEPA:\n                    if (!adyenv2.hasVaultedInstruments) {\n                        paymentComponent = adyenClient.create(paymentMethod.method, {\n                            ...adyenv2.options,\n                            onChange: (componentState) =>\n                                this._updateComponentState(componentState),\n                        });\n\n                        try {\n                            paymentComponent.mount(`#${adyenv2.containerId}`);\n                        } catch (error) {\n                            reject(\n                                new NotInitializedError(\n                                    NotInitializedErrorType.PaymentNotInitialized,\n                                ),\n                            );\n                        }\n                    } else {\n                        this._updateComponentState({\n                            data: {\n                                paymentMethod: {\n                                    type: paymentMethod.method,\n                                },\n                            },\n                        });\n                    }\n\n                    break;\n\n                case AdyenPaymentMethodType.AliPay:\n                case AdyenPaymentMethodType.GiroPay:\n                case AdyenPaymentMethodType.Sofort:\n                case AdyenPaymentMethodType.Klarna:\n                case AdyenPaymentMethodType.KlarnaPayNow:\n                case AdyenPaymentMethodType.KlarnaAccount:\n                case AdyenPaymentMethodType.Vipps:\n                case AdyenPaymentMethodType.WeChatPayQR:\n                    this._updateComponentState({\n                        data: {\n                            paymentMethod: {\n                                type: paymentMethod.method,\n                            },\n                        },\n                    });\n            }\n\n            resolve(paymentComponent);\n        });\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        shouldSaveInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): Promise<PaymentIntegrationSelectors | void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...payment.paymentData,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                },\n            });\n        } catch (paymentError) {\n            return this._processAdditionalAction(\n                paymentError,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private _updateComponentState(componentState: AdyenComponentEventState) {\n        this._componentState = componentState;\n    }\n\n    private _validateCardData(): void {\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const cardComponent = adyenv2.hasVaultedInstruments\n            ? this._cardVerificationComponent\n            : this._paymentComponent;\n        const isEmptyString = (value: string) => value.toString().trim().length === 0;\n\n        if (!cardComponent?.componentRef?.showValidation || !cardComponent.state) {\n            return;\n        }\n\n        cardComponent.componentRef.showValidation();\n\n        /**\n         * For some reason adyen sdk doesn't return isValid for payment methods with select field in form(iDeal for example)\n         * so we need to check state issuer field\n         */\n        if (\n            Object.keys(cardComponent.state).length === 0 ||\n            (!cardComponent.state.isValid && !cardComponent.state.issuer) ||\n            // prevent empty sepa fields from being sent\n            (cardComponent.props?.type === 'sepadirectdebit' &&\n                cardComponent.state.data &&\n                Object.values(cardComponent.state.data).some(isEmptyString))\n        ) {\n            throw new PaymentInvalidFormError(this._mapCardErrors(cardComponent.state.errors));\n        }\n    }\n\n    private _mapCardErrors(cardStateErrors: CardStateErrors = {}): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        Object.keys(cardStateErrors).forEach((key) => {\n            errors[key] = [\n                {\n                    message: cardStateErrors[key],\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n}\n","import { AccountState, AdyenComponentEventState } from '../types';\n\nexport default function isAccountState(param: AdyenComponentEventState): param is AccountState {\n    const bankSupported = ['ideal', 'sepadirectdebit', 'directEbanking', 'giropay'];\n\n    return bankSupported.indexOf((param as AccountState).data.paymentMethod.type) !== -1;\n}\n","import { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV2ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AdyenV2PaymentStrategy from './adyenv2-payment-strategy';\n\nconst createAdyenV2PaymentStrategy: PaymentStrategyFactory<AdyenV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AdyenV2PaymentStrategy(\n        paymentIntegrationService,\n        new AdyenV2ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n    );\n};\n\nexport default toResolvableModule(createAdyenV2PaymentStrategy, [{ gateway: 'adyenv2' }]);\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenV3HostWindow } from '../types';\n\nexport default class AdyenV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenV3HostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.71.1/adyen.css`,\n                {\n                    prepend: false,\n                    attributes: {\n                        integrity:\n                            'sha384-5MvB4RnzvviA3VBT4KYABZ4HXNZG5LRqREEgd41xt/pf/QvKmsj2O9GuNuywRXx9',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.71.1/adyen.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity:\n                            'sha384-yvY2yFNR4WqIjPqP9MzjI+gJimmaJnAvj4rLHKvgJbgFD5fMuf8zIJrFJOW8Lhhf',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const checkout = await this._window.AdyenCheckout(configuration);\n\n        return checkout;\n    }\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import { some } from 'lodash';\n\nimport {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenComponent,\n    AdyenComponentEventState,\n    AdyenComponentType,\n    AdyenError,\n    AdyenPaymentMethodType,\n    AdyenPlaceholderData,\n    AdyenV3ActionType,\n    AdyenV3PaymentInitializeOptions,\n    AdyenV3PaymentMethodInitializationData,\n    AdyenV3ScriptLoader,\n    CardStateErrors,\n    isBoletoState,\n    isCardState,\n    WithAdyenV3PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    BillingAddress,\n    getBrowserInfo,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class Adyenv3PaymentStrategy implements PaymentStrategy {\n    private _adyenClient?: AdyenClient;\n    private _cardVerificationComponent?: AdyenComponent;\n    private _componentState?: AdyenComponentEventState;\n    private _paymentComponent?: AdyenComponent;\n    private _paymentInitializeOptions?: AdyenV3PaymentInitializeOptions;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _scriptLoader: AdyenV3ScriptLoader,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithAdyenV3PaymentInitializeOptions,\n    ): Promise<void> {\n        const { adyenv3 } = options;\n\n        if (!adyenv3) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.adyenv3\" argument is not provided.',\n            );\n        }\n\n        this._paymentInitializeOptions = adyenv3;\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<AdyenV3PaymentMethodInitializationData>(options.methodId);\n        const { environment, clientKey, paymentMethodsResponse, installmentOptions } =\n            paymentMethod.initializationData || {};\n\n        this._adyenClient = await this._scriptLoader.load({\n            paymentMethodsConfiguration: {\n                klarna: {\n                    useKlarnaWidget: true,\n                },\n                klarna_account: {\n                    useKlarnaWidget: true,\n                },\n                klarna_paynow: {\n                    useKlarnaWidget: true,\n                },\n                ...(installmentOptions\n                    ? {\n                          card: {\n                              installmentOptions: {\n                                  showInstallmentAmounts: true,\n                                  ...installmentOptions,\n                              },\n                          },\n                      }\n                    : {}),\n            },\n            environment,\n            locale: this._getLocale(),\n            clientKey,\n            paymentMethodsResponse,\n            showPayButton: false,\n            translations: {\n                es: { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-AR': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-ES': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-MX': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CL': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CO': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-PE': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n            },\n        });\n\n        this._paymentComponent = await this._mountPaymentComponent(paymentMethod);\n\n        if (\n            paymentMethod.method === AdyenPaymentMethodType.CreditCard ||\n            paymentMethod.method === AdyenPaymentMethodType.Bancontact\n        ) {\n            this._cardVerificationComponent = await this._mountCardVerificationComponent();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const paymentData = payment.paymentData;\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        this._validateCardData();\n\n        if (\n            payment.methodId === 'klarna' ||\n            payment.methodId === 'klarna_account' ||\n            payment.methodId === 'klarna_paynow'\n        ) {\n            this._paymentComponent?.submit();\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        const componentState = this._componentState || {\n            data: { paymentMethod: { type: payment.methodId } },\n        };\n\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            let bigpayToken = {};\n\n            if (isCardState(componentState)) {\n                const {\n                    encryptedCardNumber,\n                    encryptedSecurityCode,\n                    encryptedExpiryMonth,\n                    encryptedExpiryYear,\n                } = componentState.data.paymentMethod;\n\n                bigpayToken = {\n                    credit_card_number_confirmation: encryptedCardNumber,\n                    expiry_month: encryptedExpiryMonth,\n                    expiry_year: encryptedExpiryYear,\n                    verification_value: encryptedSecurityCode,\n                };\n            }\n\n            try {\n                await this._paymentIntegrationService.submitPayment({\n                    ...payment,\n                    paymentData: {\n                        formattedPayload: {\n                            bigpay_token: {\n                                ...bigpayToken,\n                                token: paymentData.instrumentId,\n                            },\n                            origin: window.location.origin,\n                            browser_info: getBrowserInfo(),\n                            set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                        },\n                    },\n                });\n\n                return;\n            } catch (error) {\n                await this._processAdditionalAction(\n                    error,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                );\n\n                return;\n            }\n        }\n\n        let paymentToken = JSON.stringify({\n            ...componentState.data.paymentMethod,\n            type: payment.methodId,\n            origin: window.location.origin,\n        });\n\n        if (payment.methodId === 'boletobancario' && isBoletoState(componentState)) {\n            paymentToken = JSON.stringify({\n                socialSecurityNumber: componentState.data.socialSecurityNumber,\n                ...componentState.data.shopperName,\n                type: payment.methodId,\n                origin: window.location.origin,\n            });\n        }\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData: {\n                    formattedPayload: {\n                        credit_card_token: {\n                            token: paymentToken,\n                        },\n                        ...(isCardState(componentState) && componentState.data.installments\n                            ? {\n                                  installments: {\n                                      value: componentState.data.installments.value,\n                                      plan: componentState.data.installments.plan || 'regular',\n                                  },\n                              }\n                            : {}),\n                        browser_info: getBrowserInfo(),\n                        vault_payment_instrument: shouldSaveInstrument || null,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                },\n            });\n        } catch (error) {\n            await this._processAdditionalAction(\n                error,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this._componentState = undefined;\n\n        if (this._paymentComponent) {\n            this._paymentComponent.unmount();\n            this._paymentComponent = undefined;\n        }\n\n        if (this._cardVerificationComponent) {\n            this._cardVerificationComponent.unmount();\n            this._cardVerificationComponent = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _updateComponentState(componentState: AdyenComponentEventState) {\n        this._componentState = componentState;\n    }\n\n    private _getLocale(): string | undefined {\n        const locale = this._paymentIntegrationService.getState().getLocale();\n\n        if (locale && locale.substring(0, 2) === 'es') {\n            return 'es';\n        }\n\n        return locale;\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n\n    private _getPaymentInitializeOptions(): AdyenV3PaymentInitializeOptions {\n        if (!this._paymentInitializeOptions) {\n            throw new InvalidArgumentError(\n                '\"options.adyenv3\" argument was not provided during initialization.',\n            );\n        }\n\n        return this._paymentInitializeOptions;\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const { additionalActionOptions } = this._getPaymentInitializeOptions();\n            const { onBeforeLoad, containerId, onLoad, onComplete, widgetSize, onActionHandled } =\n                additionalActionOptions;\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onActionHandled: (additionalActionState) => {\n                    if (\n                        onActionHandled &&\n                        typeof onActionHandled === 'function' &&\n                        additionalActionState.componentType !== '3DS2Fingerprint'\n                    ) {\n                        onActionHandled();\n                    }\n                },\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    if (onComplete && typeof onComplete === 'function') {\n                        onComplete();\n                    }\n\n                    resolve(paymentPayload);\n                },\n                challengeWindowSize: widgetSize || '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            if (onBeforeLoad && typeof onBeforeLoad === 'function') {\n                onBeforeLoad(\n                    adyenAction.type === AdyenV3ActionType.ThreeDS2 ||\n                        adyenAction.type === AdyenV3ActionType.QRCode ||\n                        adyenAction.type === AdyenV3ActionType.Sdk,\n                );\n            }\n\n            this._mountElement(additionalActionComponent, containerId);\n\n            if (onLoad && typeof onLoad === 'function') {\n                onLoad(() => {\n                    reject(new PaymentMethodCancelledError());\n                    additionalActionComponent.unmount();\n                });\n            }\n        });\n    }\n\n    private _mapAdyenPlaceholderData(\n        billingAddress?: BillingAddress,\n        prefillCardHolderName?: boolean,\n    ): AdyenPlaceholderData {\n        if (!billingAddress) {\n            return {};\n        }\n\n        const {\n            firstName,\n            lastName,\n            address1: street,\n            address2: houseNumberOrName,\n            postalCode,\n            city,\n            stateOrProvinceCode: stateOrProvince,\n            countryCode: country,\n        } = billingAddress;\n\n        return {\n            holderName: prefillCardHolderName ? `${firstName} ${lastName}` : '',\n            firstName: prefillCardHolderName ? firstName : '',\n            lastName: prefillCardHolderName ? lastName : '',\n            billingAddress: {\n                street,\n                houseNumberOrName,\n                postalCode,\n                city,\n                stateOrProvince,\n                country,\n            },\n        };\n    }\n\n    private _mountCardVerificationComponent(): Promise<AdyenComponent> {\n        const adyenv3 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n        let cardVerificationComponent: AdyenComponent;\n\n        return new Promise((resolve, reject) => {\n            if (adyenv3.cardVerificationContainerId) {\n                cardVerificationComponent = adyenClient.create(AdyenComponentType.SecuredFields, {\n                    ...adyenv3.options,\n                    styles: {\n                        ...adyenv3.options?.styles,\n                        placeholder: {\n                            color: 'transparent',\n                            caretColor: '#000',\n                            ...adyenv3.options?.styles?.placeholder,\n                        },\n                    },\n                    onChange: (componentState) => this._updateComponentState(componentState),\n                    onError: (validateState) => adyenv3.validateCardFields(validateState),\n                    onFieldValid: (validateState) => adyenv3.validateCardFields(validateState),\n                });\n\n                try {\n                    this._mountElement(\n                        cardVerificationComponent,\n                        adyenv3.cardVerificationContainerId,\n                    );\n                } catch (error) {\n                    reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                }\n            }\n\n            resolve(cardVerificationComponent);\n        });\n    }\n\n    private _mountPaymentComponent(paymentMethod: PaymentMethod): Promise<AdyenComponent> {\n        let paymentComponent: AdyenComponent;\n        const adyenv3 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._paymentIntegrationService.getState().getBillingAddress();\n\n            const { prefillCardHolderName } = paymentMethod.initializationData;\n\n            paymentComponent = adyenClient.create(paymentMethod.method, {\n                ...adyenv3.options,\n                showBrandsUnderCardNumber: false,\n                billingAddressRequired: false,\n                showEmailAddress: false,\n                onChange: (componentState) => this._updateComponentState(componentState),\n                onSubmit: (componentState) => this._updateComponentState(componentState),\n                ...(billingAddress\n                    ? { data: this._mapAdyenPlaceholderData(billingAddress, prefillCardHolderName) }\n                    : {}),\n            });\n\n            try {\n                this._mountElement(paymentComponent, adyenv3.containerId);\n            } catch (error) {\n                reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            resolve(paymentComponent);\n        });\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        shouldSaveInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): Promise<PaymentIntegrationSelectors | void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...payment.paymentData,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                },\n            });\n        } catch (paymentError) {\n            return this._processAdditionalAction(\n                paymentError,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private _validateCardData(): void {\n        const adyenv3 = this._getPaymentInitializeOptions();\n        const cardComponent = adyenv3.hasVaultedInstruments\n            ? this._cardVerificationComponent\n            : this._paymentComponent;\n\n        if (!cardComponent?.componentRef?.showValidation || !cardComponent.state) {\n            return;\n        }\n\n        cardComponent.componentRef.showValidation();\n\n        if (Object.keys(cardComponent.state).length === 0 || !cardComponent.state.isValid) {\n            throw new PaymentInvalidFormError(this._mapCardErrors(cardComponent.state.errors));\n        }\n    }\n\n    private _mapCardErrors(cardStateErrors: CardStateErrors = {}): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        Object.keys(cardStateErrors).forEach((key) => {\n            errors[key] = [\n                {\n                    message: cardStateErrors[key],\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n\n    private _mountElement(adyenComponent: AdyenComponent, containerId: string): void {\n        if (!document.getElementById(containerId)) {\n            return;\n        }\n\n        adyenComponent.mount(`#${containerId}`);\n    }\n}\n","import { AdyenComponentEventState, BoletoState } from '../types';\n\nexport default function isBoletoState(param: AdyenComponentEventState): param is BoletoState {\n    return (\n        (typeof param === 'object' && typeof (param as BoletoState).data.socialSecurityNumber) ===\n            'string' &&\n        typeof (param as BoletoState).data.shopperName?.firstName === 'string' &&\n        typeof (param as BoletoState).data.shopperName?.lastName === 'string'\n    );\n}\n","import { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV3ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AdyenV3PaymentStrategy from './adyenv3-payment-strategy';\n\nconst createAdyenV3PaymentStrategy: PaymentStrategyFactory<AdyenV3PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AdyenV3PaymentStrategy(\n        paymentIntegrationService,\n        new AdyenV3ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n    );\n};\n\nexport default toResolvableModule(createAdyenV3PaymentStrategy, [{ gateway: 'adyenv3' }]);\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * 10 ** this._decimalPlaces);\n    }\n}\n","import { Cart } from '../cart';\nimport { StoreConfig } from '../config';\n\nconst itemsRequireShipping = (cart?: Cart, config?: StoreConfig) => {\n    if (!cart) {\n        return false;\n    }\n\n    if (cart.lineItems.physicalItems.some((lineItem) => lineItem.isShippingRequired)) {\n        return true;\n    }\n\n    if (config && cart.lineItems.customItems) {\n        return cart.lineItems.customItems.length > 0;\n    }\n\n    return false;\n};\n\nexport default itemsRequireShipping;\n","import {\n    AmountTransformer,\n    Consignment,\n    itemsRequireShipping,\n    LineItemCategory,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Order,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    Affirm,\n    AffirmAddress,\n    AffirmDiscount,\n    AffirmFailResponse,\n    AffirmItem,\n    AffirmRequestData,\n    AffirmSuccessResponse,\n} from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private affirm?: Affirm;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private affirmScriptLoader: AffirmScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await this.paymentIntegrationService.loadPaymentMethod(options.methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const {\n            clientToken,\n            config: { testMode },\n        } = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.affirm = await this.affirmScriptLoader.load(clientToken, testMode);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const methodId = payload.payment?.methodId;\n        const { useStoreCredit } = payload;\n\n        if (!this.affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this.paymentIntegrationService.submitOrder({ useStoreCredit }, options);\n\n        const affirmCheckout = await this.initializeAffirmCheckout();\n\n        const paymentPayload = {\n            methodId,\n            paymentData: { nonce: affirmCheckout.checkout_token },\n        };\n\n        await this.paymentIntegrationService.submitPayment(paymentPayload);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.affirm) {\n            this.affirm = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private initializeAffirmCheckout(): Promise<AffirmSuccessResponse> {\n        this.affirm?.checkout(this.getCheckoutInformation());\n\n        return new Promise((resolve, reject) => {\n            this.affirm?.checkout.open({\n                onFail: (failObject: AffirmFailResponse) => {\n                    if (failObject.reason === 'canceled') {\n                        reject(new PaymentMethodCancelledError());\n                    } else {\n                        reject(new PaymentMethodInvalidError());\n                    }\n                },\n                onSuccess: (successObject) => {\n                    resolve(successObject);\n                },\n            });\n            this.affirm?.ui.error.on('close', () => {\n                reject(new PaymentMethodCancelledError());\n            });\n        });\n    }\n\n    private getCheckoutInformation(): AffirmRequestData {\n        const state = this.paymentIntegrationService.getState();\n        const config = state.getStoreConfig();\n        const consignments = state.getConsignments();\n        const order = state.getOrder();\n        const cart = state.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this.getBillingAddress();\n\n        const retrievedShippingAddress = this.getShippingAddress();\n        const shippingAddress =\n            itemsRequireShipping(cart, config) && retrievedShippingAddress\n                ? retrievedShippingAddress\n                : billingAddress;\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: shippingAddress,\n            billing: billingAddress,\n            items: this.getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this.getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this.getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        return consignment?.selectedShippingOption ? consignment.selectedShippingOption.type : '';\n    }\n\n    private getBillingAddress(): AffirmAddress {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private getShippingAddress(): AffirmAddress | undefined {\n        const state = this.paymentIntegrationService.getState();\n        const shippingAddress = state.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        order.lineItems.physicalItems.forEach((item) => {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this.getCategories(item.categories),\n            });\n        });\n\n        order.lineItems.digitalItems.forEach((item) => {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this.getCategories(item.categories),\n            });\n        });\n\n        order.lineItems.giftCertificates.forEach((item) => {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        });\n\n        if (order.lineItems.customItems) {\n            order.lineItems.customItems.forEach((item) => {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            });\n        }\n\n        return items;\n    }\n\n    private getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        order.coupons.forEach((line) => {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        });\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return [[]];\n        }\n\n        return categories.map((categoryTree) => categoryTree.map((category) => category.name));\n    }\n}\n","export interface Affirm {\n    checkout: AffirmCheckout;\n    ui: {\n        error: {\n            on(event: string, callback: () => void): void;\n        };\n        ready(callback: () => void): void;\n    };\n}\n\nexport interface AffirmCheckout {\n    (options: AffirmRequestData): void;\n    open(modalOptions: AffirmCallback): void;\n    init(): void;\n}\n\ninterface AffirmCallback {\n    onFail(onFail: AffirmFailResponse): void;\n    onSuccess(success: AffirmSuccessResponse): void;\n}\n\nexport interface AffirmHostWindow extends Window {\n    affirm?: Affirm;\n}\n\nexport interface AffirmSuccessResponse {\n    checkout_token: string;\n    created: string;\n}\n\nexport interface AffirmFailResponse {\n    reason: string;\n}\n\nexport interface AffirmRequestData {\n    merchant: {\n        user_confirmation_url: string;\n        user_cancel_url: string;\n        user_confirmation_url_action?: string;\n        name?: string;\n    };\n    shipping: AffirmAddress;\n    billing?: AffirmAddress;\n    items: AffirmItem[];\n    discounts: AffirmDiscount;\n    metadata: {\n        shipping_type: string;\n        entity_name?: string;\n        webhook_session_id?: string;\n        mode?: string;\n        platform_type: string;\n        platform_version: string;\n        platform_affirm: string;\n    };\n    order_id?: string;\n    shipping_amount: number;\n    tax_amount: number;\n    total: number;\n}\n\nexport interface AffirmItem {\n    display_name: string;\n    sku: string;\n    unit_price: number;\n    qty: number;\n    item_image_url: string;\n    item_url: string;\n    categories?: string[][];\n}\n\nexport interface AffirmDiscount {\n    [key: string]: {\n        discount_amount: number;\n        discount_display_name: string;\n    };\n}\n\nexport interface AffirmAddress {\n    name: {\n        first: string;\n        last: string;\n        full?: string;\n    };\n    address: {\n        line1: string;\n        line2?: string;\n        city: string;\n        state: string;\n        zipcode: string;\n        country?: string;\n    };\n    phone_number?: string;\n    email?: string;\n}\n\nexport enum AFFIRM_SCRIPTS {\n    PROD = '//cdn1.affirm.com/js/v2/affirm.js',\n    SANDBOX = '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n}\n","import { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Affirm, AFFIRM_SCRIPTS, AffirmHostWindow } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(public affirmWindow: AffirmHostWindow = window) {}\n\n    load(apikey = '', testMode?: boolean): Promise<Affirm> {\n        const scriptURI = testMode ? AFFIRM_SCRIPTS.SANDBOX : AFFIRM_SCRIPTS.PROD;\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this.affirmWindow.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this.affirmWindow.affirm);\n    }\n}\n","/* istanbul ignore file */\n\n/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable no-plusplus */\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-underscore-dangle */\n/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nimport { Affirm, AffirmHostWindow } from './affirm';\n\ninterface AffirmConfig {\n    public_api_key: string;\n    script: string;\n}\n\nexport default function loadAffirmJS(apiKey: string, scriptURL: string) {\n    const _AFFIRM_CONFIG: AffirmConfig = {\n        public_api_key: apiKey,\n        script: scriptURL,\n    };\n\n    (function foo(\n        m: AffirmHostWindow | any,\n        g: AffirmConfig,\n        n: 'affirm',\n        d: 'checkout',\n        a: 'ui',\n        e: 'script',\n        h: 'ready',\n        c: 'jsReady',\n    ) {\n        const b = m[n] || {};\n        const k = document.createElement(e);\n        const p = document.getElementsByTagName(e)[0];\n        const l = function bar(a: Affirm | any, b: keyof Affirm, c: string) {\n            return function baz() {\n                a[b]._.push([c, arguments]);\n            };\n        };\n\n        b[d] = l(b, d, 'set');\n\n        const f = b[d];\n\n        b[a] = {};\n        b[a]._ = [];\n        f._ = [];\n        b._ = [];\n        b[a][h] = l(b, a, h);\n\n        b[c] = function qux() {\n            b._.push([h, arguments]);\n        };\n\n        let a1 = 0;\n\n        for (\n            const c1 = 'set add save post open empty reset on off trigger ready setProduct'.split(\n                ' ',\n            );\n            a1 < c1.length;\n            a1++\n        ) {\n            f[c1[a1]] = l(b, d, c1[a1]);\n        }\n\n        let a2 = 0;\n\n        for (const c2 = ['get', 'token', 'url', 'items']; a2 < c2.length; a2++) {\n            f[c2[a2]] = function foobar() {};\n        }\n\n        k.async = !0;\n        k.src = g[e];\n\n        if (p.parentNode) {\n            p.parentNode.insertBefore(k, p);\n        }\n\n        delete (g as Partial<AffirmConfig>)[e];\n        f(g);\n        m[n] = b;\n    })(window, _AFFIRM_CONFIG, 'affirm', 'checkout', 'ui', 'script', 'ready', 'jsReady');\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AffirmPaymentStrategy from './affirm-payment-strategy';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nconst createAffirmPaymentStrategy: PaymentStrategyFactory<AffirmPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AffirmPaymentStrategy(paymentIntegrationService, new AffirmScriptLoader());\n};\n\nexport default toResolvableModule(createAffirmPaymentStrategy, [{ id: 'affirm' }]);\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the order finalization request\n * was not completed successfully.\n */\nexport default class OrderFinalizationNotCompletedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The current order could not be finalized successfully');\n\n        this.name = 'OrderFinalizationNotCompletedError';\n        this.type = 'order_finalization_not_completed';\n    }\n}\n","import {\n    InvalidArgumentError,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotCompletedError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    RequestError,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _afterpayScriptLoader: AfterpayScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(options.methodId, options.gatewayId);\n        const currencyCode = state.getCart()?.currency.code || '';\n        const countryCode = this._mapCurrencyToISO2(currencyCode);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, countryCode);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        if (!payload.payment) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId', 'payment.methodId']);\n        }\n\n        const { gatewayId, methodId } = payload.payment;\n\n        if (!gatewayId || !methodId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId', 'payment.methodId']);\n        }\n\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            await this._paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        }\n\n        await this._loadPaymentMethod(gatewayId, methodId, options);\n\n        const state = this._paymentIntegrationService.getState();\n\n        await this._paymentIntegrationService.validateCheckout(state.getCheckout(), options);\n\n        const currencyCode = state.getCart()?.currency.code || '';\n        const countryCode = this._mapCurrencyToISO2(currencyCode);\n\n        this._redirectToAfterpay(countryCode, state.getPaymentMethod(methodId, gatewayId));\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<void> {\n        const state = this._paymentIntegrationService.getState();\n        const payment = state.getPaymentId();\n        const config = state.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config?.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._paymentIntegrationService.submitOrder({}, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            await this._paymentIntegrationService.forgetCheckout(payment.providerId);\n            await this._paymentIntegrationService.loadPaymentMethods();\n\n            if (isRequestError(error)) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-member-access\n                throw new OrderFinalizationNotCompletedError(error.body?.errors?.[0]?.message);\n            }\n        }\n    }\n\n    private _redirectToAfterpay(countryCode: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod?.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode });\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCurrencyToISO2(currencyCode: string): string {\n        const countryByCurrency: { [key: string]: string } = {\n            AUD: 'AU',\n            NZD: 'NZ',\n            CAD: 'CA',\n            USD: 'US',\n        };\n\n        return countryByCurrency[currencyCode] || 'AU';\n    }\n\n    private async _loadPaymentMethod(\n        gatewayId: string,\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        try {\n            return await this._paymentIntegrationService.loadPaymentMethod(gatewayId, {\n                ...options,\n                params: { ...options?.params, method: methodId },\n            });\n        } catch (error) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (error instanceof RequestError && error.body?.status === 422) {\n                throw new InvalidArgumentError(\n                    \"Afterpay can't process your payment for this order, please try another payment method\",\n                );\n            }\n\n            throw error;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport isAfterpayWindow from './is-afterpay-window';\n\nenum SCRIPTS_DEFAULT {\n    PROD = '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX = '//portal-sandbox.afterpay.com/afterpay-async.js',\n}\n\nenum SCRIPTS_US {\n    PROD = '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX = '//portal.sandbox.afterpay.com/afterpay-async.js',\n}\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     *\n     * @param {PaymentMethod} method the payment method data\n     */\n    async load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI).then(() => {\n            if (!isAfterpayWindow(window)) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return window.AfterPay;\n        });\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import AfterpayWindow from './afterpay-window';\n\nexport default function isAfterpayWindow(window: Window): window is AfterpayWindow {\n    return 'AfterPay' in window;\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AfterpayPaymentStrategy from './afterpay-payment-strategy';\nimport AfterpayScriptLoader from './afterpay-script-loader';\n\nconst createAfterpayPaymentStrategy: PaymentStrategyFactory<AfterpayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AfterpayPaymentStrategy(\n        paymentIntegrationService,\n        new AfterpayScriptLoader(createScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createAfterpayPaymentStrategy, [\n    { gateway: 'afterpay' },\n    { id: 'afterpay' },\n]);\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import {\n    Cart,\n    Checkout,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Pay: AmazonPayV2Client;\n}\n\nexport interface RequestConfig {\n    createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\n    estimatedOrderAmount?: AmazonPayV2Price;\n    productType?: AmazonPayV2PayOptions;\n}\n\nexport interface AmazonPayV2Button {\n    /**\n     * Allows you to define custom actions.\n     */\n    onClick: (callback: () => void | Promise<void>) => void;\n\n    /**\n     * Initiates the Amazon Pay checkout.\n     */\n    initCheckout(requestConfig: RequestConfig): void;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n\n    /**\n     * Sets Amazon Pay button design.\n     */\n    design?: AmazonPayV2ButtonDesign;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * It does not have to match the final order amount if the buyer updates\n     * their order after starting checkout. Amazon Pay will use this value to\n     * assess transaction risk and prevent buyers from selecting payment methods\n     * that can't be used to process the order.\n     */\n    estimatedOrderAmount?: AmazonPayV2Price;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport interface AmazonPayV2Price {\n    /**\n     * Transaction amount.\n     */\n    amount: string;\n\n    /**\n     * Transaction currency code in ISO 4217 format. Example: USD.\n     */\n    currencyCode: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport const amazonPayV2Regions: { [key: string]: string } = {\n    de: 'eu',\n    jp: 'fe',\n    uk: 'eu',\n    us: 'na',\n};\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/* eslint-disable @typescript-eslint/no-shadow */\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n/* eslint-enable @typescript-eslint/no-shadow */\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n\nexport enum AmazonPayV2ButtonDesign {\n    C0001 = 'C0001',\n}\n\n// TODO: after migration AmazonPay strategies to integration package\n// <InternalCheckoutSelectors> should be removed\n// and replaced usage with <PaymentIntegrationService>\nexport interface InternalCheckoutSelectors {\n    cart: {\n        getCart: () => Cart | undefined;\n    };\n    checkout: {\n        getCheckout: () => Checkout | undefined;\n    };\n    config: {\n        getStoreConfigOrThrow: () => StoreConfig;\n    };\n    paymentMethods: {\n        getPaymentMethodOrThrow: <T>(methodId: string) => PaymentMethod<T>;\n    };\n}\n\nexport interface AmazonPayV2InitializeOptions {\n    buttonColor?: AmazonPayV2ButtonColor;\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n    checkoutSessionMethod?: 'GET' | 'POST';\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n    extractAmazonCheckoutSessionId?: string;\n    ledgerCurrency?: AmazonPayV2LedgerCurrency;\n    publicKeyId?: string;\n    region?: string;\n    isButtonMicroTextDisabled?: boolean;\n    paymentToken?: string;\n}\n\nexport interface AmazonPayV2ButtonRenderingOptions {\n    checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors;\n    containerId: string;\n    decoupleCheckoutInitiation?: boolean;\n    methodId: string;\n    buttonColor?: AmazonPayV2ButtonColor;\n    options?: AmazonPayV2ButtonParameters;\n    placement: AmazonPayV2Placement;\n    isButtonMicroTextDisabled?: boolean;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface AmazonPayAdditionalActionErrorBody {\n    status: string;\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n    };\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n","import {\n    CheckoutSettings,\n    getShippableItemsCount,\n    guard,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreProfile,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2Button,\n    AmazonPayV2ButtonColor,\n    AmazonPayV2ButtonConfig,\n    AmazonPayV2ButtonDesign,\n    AmazonPayV2ButtonParameters,\n    AmazonPayV2ButtonRenderingOptions,\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2NewButtonParams,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n    AmazonPayV2Price,\n    AmazonPayV2SDK,\n    InternalCheckoutSelectors,\n    RequestConfig,\n} from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\nimport { isInternalCheckoutSelectors } from './isInternalCheckoutSelectors';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private amazonPayV2SDK?: AmazonPayV2SDK;\n    private buttonParentContainer?: HTMLDivElement;\n    private amazonPayV2Button?: AmazonPayV2Button;\n    private isBuyNowFlow?: boolean;\n\n    constructor(private amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader) {}\n\n    async initialize(paymentMethod: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<void> {\n        this.amazonPayV2SDK = await this.amazonPayV2ScriptLoader.load(paymentMethod);\n        this.buttonParentContainer =\n            this.buttonParentContainer || this.createAmazonPayButtonParentContainer();\n    }\n\n    deinitialize(): Promise<void> {\n        this.amazonPayV2Button = undefined;\n        this.buttonParentContainer?.remove();\n        this.buttonParentContainer = undefined;\n        this.amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n    ): void {\n        this.getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\n        this.amazonPayV2Button = this.getAmazonPayV2SDK().Pay.renderButton(\n            `#${containerId}`,\n            options,\n        );\n    }\n\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>) {\n        const requestConfig = this.prepareRequestConfig(createCheckoutSessionConfig);\n\n        this.getAmazonPayV2Button().onClick(() => {\n            this.getAmazonPayV2Button().initCheckout(requestConfig);\n        });\n    }\n\n    prepareCheckoutWithCreationRequestConfig(\n        createCheckoutConfig: () => Promise<\n            | {\n                  createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>;\n                  estimatedOrderAmount: AmazonPayV2Price;\n                  productType: AmazonPayV2PayOptions;\n              }\n            | undefined\n        >,\n    ) {\n        this.getAmazonPayV2Button().onClick(async () => {\n            const config = await createCheckoutConfig();\n\n            if (config) {\n                const requestConfig = this.prepareRequestConfig(\n                    config.createCheckoutSessionConfig,\n                    config.estimatedOrderAmount,\n                    config.productType,\n                );\n\n                this.getAmazonPayV2Button().initCheckout(requestConfig);\n            }\n        });\n    }\n\n    async signout(): Promise<void> {\n        if (this.amazonPayV2SDK) {\n            this.amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton({\n        buttonColor,\n        checkoutState,\n        containerId,\n        decoupleCheckoutInitiation = false,\n        methodId,\n        options,\n        placement,\n        isButtonMicroTextDisabled = false,\n    }: AmazonPayV2ButtonRenderingOptions): HTMLDivElement | undefined {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            return;\n        }\n\n        const { id: parentContainerId } = container.appendChild(this.getButtonParentContainer());\n\n        if (options && isButtonMicroTextDisabled) {\n            options.design = AmazonPayV2ButtonDesign.C0001;\n        }\n\n        const amazonPayV2ButtonOptions =\n            options ??\n            this.getAmazonPayV2ButtonOptions(\n                checkoutState,\n                methodId,\n                placement,\n                decoupleCheckoutInitiation,\n                buttonColor,\n            );\n\n        this.createButton(parentContainerId, amazonPayV2ButtonOptions);\n\n        return this.getButtonParentContainer();\n    }\n\n    updateBuyNowFlowFlag(isBuyNowFlow?: boolean) {\n        this.isBuyNowFlow = Boolean(isBuyNowFlow);\n    }\n\n    /**\n     * @internal\n     */\n    isPh4Enabled(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        const isPh4Enabled = !!features['PROJECT-3483.amazon_pay_ph4'];\n        const isPh4UsOnly = !!features['INT-6885.amazon_pay_ph4_us_only'];\n\n        if (isPh4Enabled && isPh4UsOnly) {\n            return storeCountryCode === 'US';\n        }\n\n        return isPh4Enabled;\n    }\n\n    private prepareRequestConfig(\n        createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>,\n        estimatedOrderAmount?: AmazonPayV2Price,\n        productType?: AmazonPayV2PayOptions,\n    ): RequestConfig {\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\n\n        return {\n            createCheckoutSessionConfig: this.isEnvironmentSpecific(publicKeyId)\n                ? signedPayload\n                : createCheckoutSessionConfig,\n            ...(estimatedOrderAmount && { estimatedOrderAmount }),\n            ...(productType && { productType }),\n        };\n    }\n\n    private createAmazonPayButtonParentContainer(): HTMLDivElement {\n        const uid = Math.random().toString(16).substr(-4);\n        const parentContainer = document.createElement('div');\n\n        parentContainer.id = `amazonpay_button_parent_container_${uid}`;\n\n        return parentContainer;\n    }\n\n    private getAmazonPayV2ButtonOptions(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        decoupleCheckoutInitiation = false,\n        buttonColor = AmazonPayV2ButtonColor.Gold,\n    ): AmazonPayV2ButtonParameters {\n        const { getCart, getCheckout, getStoreConfigOrThrow, getPaymentMethodOrThrow } =\n            this.getCheckoutState(checkoutState);\n        const {\n            config: { merchantId, testMode },\n            initializationData,\n        } = getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n\n        if (!initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            checkoutLanguage,\n            checkoutSessionMethod,\n            createCheckoutSessionConfig,\n            extractAmazonCheckoutSessionId,\n            ledgerCurrency,\n            publicKeyId = '',\n            isButtonMicroTextDisabled,\n        } = initializationData;\n\n        if (!merchantId || !ledgerCurrency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig: AmazonPayV2ButtonConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            placement,\n            buttonColor,\n            ...(isButtonMicroTextDisabled ? { design: AmazonPayV2ButtonDesign.C0001 } : {}),\n        };\n\n        if (this.isBuyNowFlow) {\n            return {\n                ...buttonBaseConfig,\n                sandbox: !!testMode,\n            };\n        }\n\n        const cart = getCart();\n\n        buttonBaseConfig.productType =\n            cart && getShippableItemsCount(cart) === 0\n                ? AmazonPayV2PayOptions.PayOnly\n                : AmazonPayV2PayOptions.PayAndShip;\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath, storeCountryCode },\n        } = getStoreConfigOrThrow();\n\n        if (this.isPh4Enabled(features, storeCountryCode)) {\n            if (!createCheckoutSessionConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            const amount = getCheckout()?.outstandingBalance.toString();\n            const currencyCode = cart?.currency.code;\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\n\n            if (this.isEnvironmentSpecific(publicKeyId)) {\n                buttonOptions.publicKeyId = publicKeyId;\n                tmpConfig = createCheckoutSessionConfig;\n            } else {\n                buttonOptions.sandbox = !!testMode;\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\n            }\n\n            if (!decoupleCheckoutInitiation) {\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\n            }\n\n            if (amount && currencyCode) {\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\n            }\n\n            return buttonOptions;\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private isEnvironmentSpecific(publicKeyId: string): boolean {\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\n    }\n\n    private getAmazonPayV2SDK(): AmazonPayV2SDK {\n        return this.getOrThrow(this.amazonPayV2SDK);\n    }\n\n    private getButtonParentContainer(): HTMLDivElement {\n        return this.getOrThrow(this.buttonParentContainer);\n    }\n\n    private getAmazonPayV2Button(): AmazonPayV2Button {\n        return this.getOrThrow(this.amazonPayV2Button);\n    }\n\n    private getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    // INFO: need this mapping while we have strategies in core and in integration package at the same time\n    private getCheckoutState(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n    ): Pick<\n        PaymentIntegrationSelectors,\n        'getCart' | 'getCheckout' | 'getStoreConfigOrThrow' | 'getPaymentMethodOrThrow'\n    > {\n        if (isInternalCheckoutSelectors(checkoutState)) {\n            return {\n                getCart: checkoutState.cart.getCart,\n                getCheckout: checkoutState.checkout.getCheckout,\n                getStoreConfigOrThrow: checkoutState.config.getStoreConfigOrThrow,\n                getPaymentMethodOrThrow: <T>(methodId: string) =>\n                    checkoutState.paymentMethods.getPaymentMethodOrThrow<T>(methodId),\n            };\n        }\n\n        return checkoutState;\n    }\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item: LineItem) => total + item.quantity, 0);\n}\n","import { InternalCheckoutSelectors } from './amazon-pay-v2';\n\nexport function isInternalCheckoutSelectors(\n    checkoutSelectors: unknown,\n): checkoutSelectors is InternalCheckoutSelectors {\n    return (\n        typeof checkoutSelectors === 'object' &&\n        checkoutSelectors !== null &&\n        'cart' in checkoutSelectors &&\n        'checkout' in checkoutSelectors &&\n        'config' in checkoutSelectors &&\n        'paymentMethods' in checkoutSelectors\n    );\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2HostWindow,\n    AmazonPayV2InitializeOptions,\n    amazonPayV2Regions,\n    AmazonPayV2SDK,\n} from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private windowWithAmazonPay: AmazonPayV2HostWindow = window,\n    ) {}\n\n    async load(method: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<AmazonPayV2SDK> {\n        const { initializationData } = method;\n        const region = initializationData?.region || 'us';\n\n        const amazonPayV2Region = amazonPayV2Regions[region];\n\n        await this.scriptLoader.loadScript(\n            `https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`,\n        );\n\n        if (!this.windowWithAmazonPay.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.windowWithAmazonPay.amazon;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(new AmazonPayV2ScriptLoader(getScriptLoader()));\n}\n","import { noop } from 'lodash';\n\nimport {\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2Placement,\n    isAmazonPayAdditionalActionErrorBody,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CheckoutSettings,\n    guard,\n    InvalidArgumentError,\n    isRequestError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    StoreProfile,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithAmazonPayV2PaymentInitializeOptions } from './amazon-pay-v2-payment-initialize-options';\n\nexport default class AmazonPayV2PaymentStrategy implements PaymentStrategy {\n    private _amazonPayButton?: HTMLDivElement;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithAmazonPayV2PaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, amazonpay } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const { features } = state.getStoreConfigOrThrow().checkoutSettings;\n        const paymentMethod = state.getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n        const initializationData = paymentMethod.initializationData || {};\n        const { paymentToken = '', region = '', isButtonMicroTextDisabled } = initializationData;\n\n        await this.amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        if (this._isReadyToPay(paymentToken)) {\n            if (amazonpay?.editButtonId) {\n                this._bindEditButton(\n                    amazonpay.editButtonId,\n                    paymentToken,\n                    'changePayment',\n                    this._isModalFlow(region),\n                );\n            }\n        } else {\n            const { id: containerId } = this._createContainer();\n\n            this._amazonPayButton = this.amazonPayV2PaymentProcessor.renderAmazonPayButton({\n                checkoutState: state,\n                containerId,\n                decoupleCheckoutInitiation: this._isOneTimeTransaction(\n                    features,\n                    region.toUpperCase(),\n                ),\n                methodId,\n                placement: AmazonPayV2Placement.Checkout,\n                isButtonMicroTextDisabled,\n            });\n\n            if (!this._amazonPayButton) {\n                throw new InvalidArgumentError(\n                    'Unable to render the Amazon Pay button to an invalid HTML container element.',\n                );\n            }\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n        const state = this.paymentIntegrationService.getState();\n        const { features } = state.getStoreConfigOrThrow().checkoutSettings;\n        const paymentMethod = state.getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n        const initializationData = paymentMethod.initializationData || {};\n        const { paymentToken = '', region = '' } = initializationData;\n\n        if (\n            this._isReadyToPay(paymentToken) ||\n            this._isOneTimeTransaction(features, region.toUpperCase())\n        ) {\n            const paymentPayload = {\n                methodId,\n                paymentData: { nonce: paymentToken || 'apb' },\n            };\n\n            await this.paymentIntegrationService.submitOrder(payload, options);\n\n            try {\n                await this.paymentIntegrationService.submitPayment(paymentPayload);\n\n                return;\n            } catch (error) {\n                if (!isRequestError(error) || !isAmazonPayAdditionalActionErrorBody(error.body)) {\n                    throw error;\n                }\n\n                const { additional_action_required: additionalAction } = error.body;\n                const { redirect_url } = additionalAction.data;\n\n                if (paymentToken) {\n                    return new Promise(() => window.location.assign(redirect_url));\n                }\n\n                this.amazonPayV2PaymentProcessor.prepareCheckout(\n                    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                    JSON.parse(redirect_url) as Required<AmazonPayV2CheckoutSessionConfig>,\n                );\n            }\n        }\n\n        this._getAmazonPayButton().click();\n\n        // Focus of parent window used to try and detect the user cancelling the Amazon log in modal\n        // Should be refactored if/when Amazon add a modal close hook to their SDK\n        if (this._isModalFlow(region)) {\n            return new Promise((_, reject) => {\n                const onFocus = () => {\n                    window.removeEventListener('focus', onFocus);\n                    reject(\n                        new PaymentMethodCancelledError(\n                            'Shopper needs to login to Amazonpay to continue',\n                        ),\n                    );\n                };\n\n                window.addEventListener('focus', onFocus);\n            });\n        }\n\n        return new Promise<never>(noop);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.amazonPayV2PaymentProcessor.deinitialize();\n\n        this._amazonPayButton = undefined;\n    }\n\n    private _bindEditButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n        isModalFlow: boolean,\n    ): void {\n        const button = document.getElementById(buttonId);\n\n        if (!button || !button.parentNode) {\n            return;\n        }\n\n        if (!isModalFlow) {\n            const clone = button.cloneNode(true);\n\n            button.parentNode.replaceChild(clone, button);\n\n            clone.addEventListener('click', () => {\n                void this._showLoadingSpinner();\n            });\n        }\n\n        this.amazonPayV2PaymentProcessor.bindButton(buttonId, sessionId, changeAction);\n    }\n\n    private _isModalFlow(region: string) {\n        return region === 'us';\n    }\n\n    private async _showLoadingSpinner(): Promise<void> {\n        await this.paymentIntegrationService.widgetInteraction(() => new Promise(noop));\n    }\n\n    private _createContainer(): HTMLElement {\n        let container = document.getElementById('AmazonPayButton');\n\n        if (container) {\n            return container;\n        }\n\n        container = document.createElement('div');\n        container.id = 'AmazonPayButton';\n        container.style.display = 'none';\n\n        return document.body.appendChild(container);\n    }\n\n    private _getAmazonPayButton() {\n        return guard(\n            this._amazonPayButton,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _isOneTimeTransaction(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        return (\n            this.amazonPayV2PaymentProcessor.isPh4Enabled(features, storeCountryCode) &&\n            features['INT-6399.amazon_pay_apb']\n        );\n    }\n\n    private _isReadyToPay(paymentToken?: string): boolean {\n        return !!paymentToken;\n    }\n}\n","import { AmazonPayAdditionalActionErrorBody } from './amazon-pay-v2';\n\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\nexport function isAmazonPayAdditionalActionErrorBody(\n    errorBody: unknown,\n): errorBody is AmazonPayAdditionalActionErrorBody {\n    return (\n        typeof errorBody === 'object' &&\n        errorBody !== null &&\n        'status' in errorBody &&\n        'additional_action_required' in errorBody &&\n        (errorBody as AmazonPayAdditionalActionErrorBody).status === 'additional_action_required' &&\n        'data' in (errorBody as AmazonPayAdditionalActionErrorBody).additional_action_required &&\n        'redirect_url' in\n            (errorBody as AmazonPayAdditionalActionErrorBody).additional_action_required.data &&\n        typeof (errorBody as AmazonPayAdditionalActionErrorBody).additional_action_required.data\n            .redirect_url === 'string'\n    );\n}\n/* eslint-enable @typescript-eslint/consistent-type-assertions */\n","import { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AmazonPayV2PaymentStrategy from './amazon-pay-v2-payment-strategy';\n\nconst createAmazonPayV2PaymentStrategy: PaymentStrategyFactory<AmazonPayV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AmazonPayV2PaymentStrategy(\n        paymentIntegrationService,\n        createAmazonPayV2PaymentProcessor(),\n    );\n};\n\nexport default toResolvableModule(createAmazonPayV2PaymentStrategy, [{ id: 'amazonpay' }]);\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/request-sender\");","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(features: Features, experimentName: string): boolean {\n    return features[experimentName] ?? true;\n}\n","export const BRAINTREE_SDK_DEFAULT_VERSION = '3.123.2';\nexport const BRAINTREE_SDK_STABLE_VERSION = '3.106.0';\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport default class BraintreeSDKVersionManager {\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    getSDKVersion() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n        const features = storeConfig?.checkoutSettings.features || {};\n\n        if (isExperimentEnabled(features, 'PAYPAL-5636.update_braintree_sdk_version')) {\n            return BRAINTREE_SDK_DEFAULT_VERSION;\n        }\n\n        return BRAINTREE_SDK_STABLE_VERSION;\n    }\n}\n","import { StandardError } from './index';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","export * from './braintree';\nexport * from './paypal';\nexport * from './visacheckout';\n\n/**\n *\n * Braintree Module\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string; // Info: authorization uses clientToken as a value\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\n/**\n *\n * Braintree Window\n *\n */\nexport interface BraintreeWindow extends Window {\n    client?: BraintreeClientCreator;\n    braintreeFastlane?: BraintreeFastlane;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeClientRequestPayload): Promise<BraintreeClientRequestResponse>;\n}\n\nexport interface BraintreeClientRequestPayload {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeClientRequestResponse {\n    creditCards: BraintreeHostedFieldsTokenizePayload[];\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean; // Info: this param is needed for fraud detection (should always be 'true')\n    paypal?: boolean; // TODO: based on braintree documentation, this param is deprecated, so we dont need it anymore\n    riskCorrelationId?: string; // Info: the option is needed for PayPal Analytics\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n// TODO: remove this interface when BraintreeIntegrationService will be removed\nexport interface BraintreeDataCollectors {\n    default?: BraintreeDataCollector;\n    paypal?: BraintreeDataCollector;\n}\n\n/**\n *\n * Braintree Google Payment\n *\n */\ntype BraintreeGooglePaymentAddressFormat = 'FULL' | 'MIN';\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport interface BraintreeGooglePaymentDataRequestOptions {\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: TotalPriceStatusType;\n        totalPrice: string;\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean;\n        billingAddressFormat: BraintreeGooglePaymentAddressFormat;\n    };\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    shippingAddressRequired?: boolean;\n}\n\nexport interface BraintreeGooglePaymentDataRequest {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    environment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n        merchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport type BraintreeGooglePaymentCreator = BraintreeModuleCreator<BraintreeGooglePayment>;\n\nexport interface BraintreeGooglePayment extends BraintreeModule {\n    createPaymentDataRequest(\n        options?: BraintreeGooglePaymentDataRequestOptions,\n    ): BraintreeGooglePaymentDataRequest;\n}\n\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    bin: string;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(\n        options: BraintreeThreeDSecureOptions,\n        callback?: Braintree3DSVerifyCardCallback,\n    ): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n    on<K extends keyof BraintreeThreeDSecureEventMap>(\n        event: K,\n        handler: BraintreeThreeDSecureEventMap[K],\n    ): void;\n}\n\nexport type Braintree3DSVerifyCardCallback = (\n    verifyError: Braintree3DSVerifyCardError,\n    payload: Braintree3DSVerifyCardPayload,\n) => void;\n\nexport interface BraintreeThreeDSecureEventMap {\n    'customer-canceled': () => void;\n}\n\nexport interface Braintree3DSVerifyCardError {\n    code: string;\n}\n\nexport interface Braintree3DSVerifyCardPayload {\n    nonce: string;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number | string;\n    challengeRequested?: boolean;\n    showLoader?: boolean;\n    bin?: string;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n    collectDeviceData?: boolean;\n    addFrame?(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n    removeFrame?(): void;\n    onLookupComplete?(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\nexport enum BraintreeOrderStatus {\n    Completed = 'COMPLETED',\n    Pending = 'PENDING',\n    Failed = 'FAILED',\n}\n\nexport interface BraintreeOrderStatusData {\n    status: BraintreeOrderStatus;\n}\n\n/**\n *\n * Braintree US Bank Account (ACH)\n *\n */\nexport type BraintreeUsBankAccountCreator = BraintreeModuleCreator<BraintreeUsBankAccount>;\n\nexport interface BraintreeUsBankAccount {\n    tokenize(\n        options: BraintreeUsBankAccountTokenizationOptions,\n    ): Promise<BraintreeUsBankAccountTokenizationResponse>;\n}\n\nexport interface BraintreeUsBankAccountTokenizationOptions {\n    bankDetails: BraintreeUsBankAccountDetails;\n    mandateText: string;\n}\n\nexport interface BraintreeUsBankAccountTokenizationResponse {\n    nonce: string;\n    details: BraintreeTokenizationDetails;\n}\n\nexport interface BraintreeUsBankAccountDetails {\n    accountNumber: string;\n    routingNumber: string;\n    ownershipType: string;\n    accountType: string;\n    firstName?: string;\n    lastName?: string;\n    businessName?: string;\n    billingAddress: {\n        streetAddress: string;\n        extendedAddress: string;\n        locality: string;\n        region: string;\n        postalCode: string;\n    };\n}\n\n// TODO: move this interface in separate types group if it will be used in another (not ACH) strategies\n// This seems to be an interface which will be used in different places\nexport interface BraintreeTokenizationDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\n/**\n *\n * Braintree non-instant payment methods\n *\n */\nexport enum NonInstantLocalPaymentMethods {\n    TRUSTLY = 'trustly',\n}\n\nexport interface BraintreeLocalPaymentMethodRedirectAction {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport interface BraintreeOrderSavedResponse {\n    body: {\n        additional_action_required: {\n            data: {\n                order_id_saved_successfully: string;\n            };\n        };\n    };\n}\n\n/**\n *\n * Braintree Fastlane\n *\n */\nexport type BraintreeFastlaneCreator = BraintreeModuleCreator<\n    BraintreeFastlane,\n    BraintreeFastlaneConfig\n>;\n\nexport interface BraintreeFastlaneConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlane {\n    identity: BraintreeFastlaneIdentity;\n    profile: BraintreeFastlaneProfile;\n    FastlaneCardComponent: (\n        options: BraintreeFastlaneCardComponentOptions,\n    ) => Promise<BraintreeFastlaneCardComponent>;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeFastlaneProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<BraintreeFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface BraintreeFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: BraintreeFastlaneShippingAddress;\n}\n\nexport interface BraintreeFastlaneShippingAddress {\n    name: BraintreeFastlaneProfileName;\n    phoneNumber: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n}\n\nexport interface BraintreeFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface BraintreeFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: BraintreeFastlaneVaultedInstrument;\n}\n\nexport interface BraintreeFastlaneWindow extends Window {\n    braintreeFastlane: BraintreeFastlane;\n}\n\nexport interface BraintreeFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeFastlaneAuthenticationOptions,\n    ): Promise<BraintreeFastlaneAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeFastlaneAuthenticationOptions {\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport enum BraintreeFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface BraintreeFastlaneAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeFastlaneProfileData;\n}\n\nexport interface BraintreeFastlaneProfileData {\n    fastlaneCustomerAuthAssertionToken: string;\n    fastlaneCustomerId: string;\n    shippingAddress: BraintreeFastlaneAddress;\n    card: BraintreeFastlaneVaultedInstrument;\n    name: BraintreeFastlaneName;\n}\n\nexport interface BraintreeFastlaneName {\n    firstName: string;\n    lastName: string;\n}\n\nexport interface BraintreeFastlaneAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeFastlaneCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeFastlaneAddress;\n    binDetails?: {\n        bin: string;\n    };\n}\n\nexport interface BraintreeFastlanePaymentSource {\n    card: BraintreeFastlaneCardPaymentSource;\n}\n\nexport interface BraintreeFastlaneVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeFastlanePaymentSource;\n}\n\nexport interface BraintreeFastlaneCardComponentOptions {\n    styles: BraintreeFastlaneStylesOption;\n    fields: BraintreeFastlaneCardComponentFields;\n}\n\nexport interface BraintreeFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n\nexport interface BraintreeFastlaneTokenizeOptions {\n    name?: {\n        fullName: string;\n    };\n    billingAddress?: BraintreeFastlaneAddress;\n    shippingAddress?: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlaneEvents {\n    apmSelected: (options: BraintreeFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: BraintreeFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: BraintreeFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface BraintreeFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface BraintreeFastlaneApmSelectedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface BraintreeFastlaneEmailEnteredEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface BraintreeFastlaneOrderPlacedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface BraintreeFastlaneCardComponent {\n    (options: BraintreeFastlaneCardComponentOptions): BraintreeFastlaneCardComponent;\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>;\n    render(element: string): void;\n}\n\n/**\n *\n * Braintree Payload Verification\n *\n */\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\n/**\n *\n * Braintree Errors\n *\n */\nexport enum BraintreeErrorType {\n    Customer = 'CUSTOMER',\n    Merchant = 'MERCHANT',\n    Network = 'NETWORK',\n    Internal = 'INTERNAL',\n    Unknown = 'UNKNOWN',\n}\n\nexport enum BraintreeErrorCode {\n    KountNotEnabled = 'DATA_COLLECTOR_KOUNT_NOT_ENABLED',\n}\n\nexport interface BraintreeError extends Error {\n    type: BraintreeErrorType;\n    code: string | BraintreeErrorCode.KountNotEnabled;\n    details?: unknown;\n}\n\nexport interface BraintreeRedirectError {\n    body: {\n        additional_action_required: {\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n","import { BraintreeError } from '../types';\n\nexport default function isBraintreeError(error: unknown): error is BraintreeError {\n    return Boolean(\n        typeof error === 'object' &&\n            error !== null &&\n            ('type' in error || 'message' in error || 'code' in error),\n    );\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeError,\n    BraintreeErrorCode,\n    BraintreeGooglePayment,\n    BraintreeLocalPayment,\n    BraintreeModule,\n    BraintreeThreeDSecure,\n    BraintreeUsBankAccount,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeSdk {\n    private braintreeVenmo?: BraintreeVenmoCheckout;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private client?: BraintreeClient;\n    private clientToken?: string;\n    private dataCollector?: BraintreeDataCollector;\n    private googlePayment?: BraintreeGooglePayment;\n    private threeDS?: BraintreeThreeDSecure;\n    private visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private visaCheckoutSDK?: VisaCheckoutSDK;\n    private usBankAccount?: BraintreeUsBankAccount;\n\n    constructor(private braintreeScriptLoader: BraintreeScriptLoader) {}\n\n    initialize(clientToken: string): void {\n        this.setClientToken(clientToken);\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.teardownModule(this.dataCollector);\n\n        this.dataCollector = undefined;\n    }\n\n    /**\n     *\n     * Braintree Client\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_client.html\n     *\n     */\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = await clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    /**\n     *\n     * Braintree Data collector\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_data-collector.html\n     *\n     */\n    async getDataCollectorOrThrow(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const emptyDataCollector = {\n            deviceData: undefined,\n            teardown: () => Promise.resolve(),\n        };\n\n        if (!this.dataCollector) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                this.dataCollector = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === BraintreeErrorCode.KountNotEnabled) {\n                    return emptyDataCollector;\n                }\n\n                throw error;\n            }\n        }\n\n        return this.dataCollector;\n    }\n\n    /**\n     *\n     * Braintree Google Payment\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_google-payment.html\n     *\n     */\n    async getBraintreeGooglePayment(): Promise<BraintreeGooglePayment> {\n        if (!this.googlePayment) {\n            const [client, braintreeGooglePayment] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadGooglePayment(),\n            ]);\n\n            this.googlePayment = await braintreeGooglePayment.create({ client });\n        }\n\n        return this.googlePayment;\n    }\n\n    /**\n     *\n     * Braintree 3DS\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_three-d-secure.html\n     *\n     */\n    async getBraintreeThreeDS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            const [client, threeDSecure] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]);\n\n            this.threeDS = await threeDSecure.create({ client, version: 2 });\n        }\n\n        return this.threeDS;\n    }\n\n    /**\n     *\n     * Braintree Local Payment Methods\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_local-payment.html\n     *\n     */\n    async getBraintreeLocalPayment(\n        merchantAccountId: string,\n    ): Promise<BraintreeLocalPayment | undefined> {\n        if (!this.braintreeLocalPayment) {\n            const [client, localPaymentCreator] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadLocalPayment(),\n            ]);\n\n            this.braintreeLocalPayment = await new Promise(\n                (\n                    resolve: (braintreeLocalPayment: BraintreeLocalPayment) => void,\n                    reject: (error: BraintreeError) => void,\n                ) => {\n                    void localPaymentCreator.create(\n                        { client, merchantAccountId },\n                        (\n                            error: BraintreeError | undefined,\n                            braintreeLocalPayment: BraintreeLocalPayment,\n                        ) => {\n                            if (error) {\n                                reject(error);\n                            }\n\n                            resolve(braintreeLocalPayment);\n                        },\n                    );\n                },\n            );\n        }\n\n        return this.braintreeLocalPayment;\n    }\n\n    /**\n     *\n     * Braintree UsBankAccount\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_us-bank-account.html\n     *\n     */\n    async getUsBankAccount() {\n        if (!this.usBankAccount) {\n            const client = await this.getClient();\n            const usBankAccount = await this.braintreeScriptLoader.loadUsBankAccount();\n\n            this.usBankAccount = await usBankAccount.create({ client });\n        }\n\n        return this.usBankAccount;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_visa-checkout.html\n     *\n     */\n    getBraintreeVisaCheckout() {\n        if (!this.visaCheckout) {\n            this.visaCheckout = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.visaCheckout;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout SDK\n     * visa checkout doc: https://developer.visa.com/capabilities/visa_checkout/docs-how-to\n     *\n     */\n    async getVisaCheckoutSdk(testMode?: boolean) {\n        if (!this.visaCheckoutSDK) {\n            this.visaCheckoutSDK = await this.braintreeScriptLoader.loadVisaCheckoutSdk(testMode);\n        }\n\n        return this.visaCheckoutSDK;\n    }\n\n    /**\n     *\n     * Braintree Venmo Checkout\n     * braintree venmo checkout doc: https://braintree.github.io/braintree-web/current/module-braintree-web_venmo.html\n     *\n     */\n    async getVenmoCheckoutOrThrow() {\n        if (!this.braintreeVenmo) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const braintreeVenmoCheckout = await venmoCheckout.create(venmoCheckoutConfig);\n\n            if (braintreeVenmoCheckout.isBrowserSupported()) {\n                this.braintreeVenmo = braintreeVenmoCheckout;\n            } else {\n                throw new UnsupportedBrowserError();\n            }\n        }\n\n        return this.braintreeVenmo;\n    }\n\n    /**\n     *\n     * Private methods\n     *\n     */\n    private setClientToken(clientToken: string): void {\n        this.clientToken = clientToken;\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private teardownModule(module?: BraintreeModule): Promise<void> {\n        return module ? module.teardown() : Promise.resolve();\n    }\n}\n","import { Omit } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonOptions,\n    PaypalButtonRender,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeError,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsTokenizePayload,\n    BraintreeModule,\n    BraintreeModuleCreator,\n    BraintreeModuleCreatorConfig,\n    BraintreeThreeDSecureCreator,\n    BraintreeTokenizationDetails,\n    BraintreeUsBankAccountCreator,\n    BraintreeWindow,\n    FastlaneStylesSettings,\n    VisaCheckoutSDK,\n} from './types';\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport enum BraintreeEnv {\n    Sandbox = 'sandbox',\n    Production = 'production',\n}\n\n/**\n *\n * Common\n *\n */\nexport enum BraintreeModuleName {\n    Client = 'client',\n    DataCollector = 'dataCollector',\n    Fastlane = 'fastlane',\n    GooglePayment = 'googlePayment',\n    HostedFields = 'hostedFields',\n    LocalPayment = 'localPayment',\n    Paypal = 'paypal',\n    PaypalCheckout = 'paypalCheckout',\n    ThreeDSecure = 'threeDSecure',\n    UsBankAccount = 'usBankAccount',\n    Venmo = 'venmo',\n    VisaCheckout = 'visaCheckout',\n}\n\nexport type BraintreeModuleCreators =\n    | BraintreeClientCreator\n    | BraintreeFastlaneCreator\n    | BraintreeDataCollectorCreator\n    | BraintreeGooglePaymentCreator\n    | BraintreeHostedFieldsCreator\n    | BraintreePaypalCreator\n    | BraintreePaypalCheckoutCreator\n    | BraintreeThreeDSecureCreator\n    | BraintreeVenmoCheckoutCreator\n    | BraintreeVisaCheckoutCreator\n    | BraintreeUsBankAccountCreator\n    | BraintreeLocalPaymentCreator;\n\n// TODO: rename to BraintreeSdkModules\nexport interface BraintreeSDK {\n    [BraintreeModuleName.Client]?: BraintreeClientCreator;\n    [BraintreeModuleName.Fastlane]?: BraintreeFastlaneCreator;\n    [BraintreeModuleName.DataCollector]?: BraintreeDataCollectorCreator;\n    [BraintreeModuleName.GooglePayment]?: BraintreeGooglePaymentCreator;\n    [BraintreeModuleName.HostedFields]?: BraintreeHostedFieldsCreator;\n    [BraintreeModuleName.Paypal]?: BraintreePaypalCreator;\n    [BraintreeModuleName.PaypalCheckout]?: BraintreePaypalCheckoutCreator;\n    [BraintreeModuleName.ThreeDSecure]?: BraintreeThreeDSecureCreator;\n    [BraintreeModuleName.Venmo]?: BraintreeVenmoCheckoutCreator;\n    [BraintreeModuleName.VisaCheckout]?: BraintreeVisaCheckoutCreator;\n    [BraintreeModuleName.UsBankAccount]?: BraintreeUsBankAccountCreator;\n    [BraintreeModuleName.LocalPayment]?: BraintreeLocalPaymentCreator;\n}\n\nexport type BraintreeLocalPaymentCreator = BraintreeModuleCreator<\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentCreateConfig,\n    BraintreeError | undefined\n>;\n\nexport interface BraintreeLocalPaymentCreateConfig extends BraintreeModuleCreatorConfig {\n    merchantAccountId: string;\n}\n\nexport interface BraintreeInitializationData {\n    clientToken: string;\n    enableCheckoutPaywallBanner?: boolean;\n    intent?: 'authorize' | 'order' | 'sale';\n    isCreditEnabled?: boolean;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isFastlaneStylingEnabled?: boolean;\n    isFastlaneEnabled?: boolean;\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean;\n    fastlaneStyles?: FastlaneStylesSettings;\n    isBraintreeAnalyticsV2Enabled?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: only for BT AXO A/B testing purposes, hence should be removed after testing\n    paymentButtonStyles?: Record<string, PaypalStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[] | null;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeTokenizationDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    getState(): BraintreeHostedFieldsState;\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n        cardholderName?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface TokenizationPayload {\n    nonce: string;\n    bin: string;\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\n// export interface BraintreeThreeDSecureOptions {\n//     /**\n//      * A callback that gets called when the iframe is ready to be added to the\n//      * current page. It is responsible for determining where the iframe should\n//      * be inserted in the DOM.\n//      *\n//      * @param error - Any error raised during the verification process;\n//      * undefined if there is none.\n//      * @param iframe - The iframe element containing the verification web page\n//      * provided by the card issuer.\n//      * @param cancel - A function, when called, will cancel the verification\n//      * process and remove the iframe.\n//      */\n//     addFrame(\n//         error: Error | undefined,\n//         iframe: HTMLIFrameElement,\n//         cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n//     ): void;\n//\n//     /**\n//      * A callback that gets called when the iframe is about to be removed from\n//      * the current page.\n//      */\n//     removeFrame(): void;\n// }\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n    commit?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => unknown): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop: boolean;\n    paymentMethodUsage: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Braintree BNPL Configurator related types\n *\n */\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * Braintree Local Methods\n *\n */\nexport interface BraintreeLocalPaymentConfig {\n    paymentType: string;\n    amount: number;\n    fallback: {\n        url: string;\n        buttonText: string;\n    };\n    currencyCode: string;\n    shippingAddressRequired: boolean;\n    email: string;\n    givenName: string;\n    surname: string;\n    address: {\n        countryCode: string;\n    };\n    onPaymentStart(data: BraintreeLPMPaymentStartData, start: () => Promise<void>): Promise<void>;\n}\n\nexport interface BraintreeLPMStartPaymentError {\n    code: string;\n}\n\nexport interface BraintreeLPMPaymentStartData {\n    paymentId: string;\n}\n\nexport interface BraintreeLocalPaymentsPayload {\n    nonce: string;\n}\n\nexport interface BraintreeLocalPayment extends BraintreeModule {\n    startPayment(\n        config: BraintreeLocalPaymentConfig,\n        callback: (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payload: BraintreeLocalPaymentsPayload,\n        ) => Promise<void>,\n    ): void;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends BraintreeWindow {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n    V?: VisaCheckoutSDK;\n}\n","import { BraintreeModuleName } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport const BRAINTREE_SDK_SCRIPTS_INTEGRITY = {\n    [BRAINTREE_SDK_STABLE_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O',\n        [BraintreeModuleName.Paypal]:\n            'sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT',\n        [BraintreeModuleName.Venmo]:\n            'sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa',\n    },\n    [BRAINTREE_SDK_DEFAULT_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/',\n        [BraintreeModuleName.Paypal]:\n            'sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS',\n        [BraintreeModuleName.Venmo]:\n            'sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y',\n    },\n};\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreeLocalPaymentCreator,\n    BraintreeModuleCreators,\n    BraintreeModuleName,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeUsBankAccountCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './types';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async loadClient(): Promise<BraintreeClientCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeClientCreator>(\n            BraintreeModuleName.Client,\n            'client.min.js',\n        );\n    }\n\n    async loadFastlane(): Promise<BraintreeFastlaneCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeFastlaneCreator>(\n            BraintreeModuleName.Fastlane,\n            'fastlane.min.js',\n        );\n    }\n\n    async loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCheckoutCreator>(\n            BraintreeModuleName.PaypalCheckout,\n            'paypal-checkout.min.js',\n        );\n    }\n\n    async loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCreator>(\n            BraintreeModuleName.Paypal,\n            'paypal.min.js',\n        );\n    }\n\n    async loadLocalPayment(): Promise<BraintreeLocalPaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeLocalPaymentCreator>(\n            BraintreeModuleName.LocalPayment,\n            'local-payment.min.js',\n        );\n    }\n\n    async loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeDataCollectorCreator>(\n            BraintreeModuleName.DataCollector,\n            'data-collector.min.js',\n        );\n    }\n\n    async loadUsBankAccount(): Promise<BraintreeUsBankAccountCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeUsBankAccountCreator>(\n            BraintreeModuleName.UsBankAccount,\n            'us-bank-account.min.js',\n        );\n    }\n\n    async loadGooglePayment(): Promise<BraintreeGooglePaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeGooglePaymentCreator>(\n            BraintreeModuleName.GooglePayment,\n            'google-payment.min.js',\n        );\n    }\n\n    async load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeThreeDSecureCreator>(\n            BraintreeModuleName.ThreeDSecure,\n            'three-d-secure.min.js',\n        );\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVisaCheckoutCreator>(\n            BraintreeModuleName.VisaCheckout,\n            'visa-checkout.min.js',\n        );\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVenmoCheckoutCreator>(\n            BraintreeModuleName.Venmo,\n            'venmo.min.js',\n        );\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeHostedFieldsCreator>(\n            BraintreeModuleName.HostedFields,\n            'hosted-fields.min.js',\n        );\n    }\n\n    async loadVisaCheckoutSdk(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        if (this.braintreeHostWindow.V) {\n            return this.braintreeHostWindow.V;\n        }\n\n        const hash = testMode\n            ? 'sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm'\n            : 'sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6';\n\n        return this.scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity: hash,\n                        crossorigin: 'anonymous',\n                    },\n                },\n            )\n            .then(() => {\n                if (!this.braintreeHostWindow.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this.braintreeHostWindow.V;\n            });\n    }\n\n    private async loadBraintreeModuleOrThrow<T extends BraintreeModuleCreators>(\n        braintreeModuleName: BraintreeModuleName,\n        fileName: string,\n    ): Promise<T> {\n        let module = this.getBraintreeModule(braintreeModuleName);\n\n        if (module) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return module as T;\n        }\n\n        const braintreeSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n\n        const scriptPath = `//js.braintreegateway.com/web/${braintreeSdkVersion}/js/${fileName}`;\n\n        const integrity = this.getIntegrityValuesByModuleName(\n            braintreeModuleName,\n            braintreeSdkVersion,\n        );\n\n        await this.scriptLoader.loadScript(\n            scriptPath,\n            integrity\n                ? {\n                      async: true,\n                      attributes: {\n                          integrity,\n                          crossorigin: 'anonymous',\n                      },\n                  }\n                : undefined,\n        );\n\n        module = this.getBraintreeModule(braintreeModuleName);\n\n        if (!module) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return module as T;\n    }\n\n    private getBraintreeModule(\n        braintreeModuleName: BraintreeModuleName,\n    ): BraintreeModuleCreators | undefined {\n        return this.braintreeHostWindow.braintree?.[braintreeModuleName];\n    }\n\n    private getIntegrityValuesByModuleName(\n        moduleName: BraintreeModuleName,\n        version: keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY,\n    ): string {\n        const integrity = BRAINTREE_SDK_SCRIPTS_INTEGRITY[version][moduleName];\n\n        if (!integrity) {\n            throw new Error('Unexpected fileName value');\n        }\n\n        return integrity;\n    }\n}\n","export enum ApplePayGatewayType {\n    BRAINTREE = 'braintree',\n    BRAINTREE_FASTLANE = 'braintreeacceleratedcheckout',\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport { WithApplePayPaymentInitializeOptions } from './apple-pay-payment-initialize-options';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\ninterface ApplePayPromise {\n    resolve(): void;\n    reject(reason?: Error): void;\n}\n\nenum DefaultLabels {\n    Shipping = 'Shipping',\n    Subtotal = 'Subtotal',\n    StoreCredit = 'Store Credit',\n}\n\nexport default class ApplePayPaymentStrategy implements PaymentStrategy {\n    private _shippingLabel: string = DefaultLabels.Shipping;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _storeCreditLabel: string = DefaultLabels.StoreCredit;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithApplePayPaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const { methodId } = options;\n\n        this._shippingLabel = options.applepay?.shippingLabel || DefaultLabels.Shipping;\n        this._subTotalLabel = options.applepay?.subtotalLabel || DefaultLabels.Subtotal;\n        this._storeCreditLabel = options.applepay?.storeCreditLabel || DefaultLabels.StoreCredit;\n\n        const state = await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const paymentMethod: PaymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment } = payload;\n        const state = this._paymentIntegrationService.getState();\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const request = this._getBaseRequest(state, paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        await this._paymentIntegrationService.submitOrder(\n            {\n                useStoreCredit: payload.useStoreCredit,\n            },\n            options,\n        );\n\n        applePaySession.begin();\n\n        return new Promise((resolve, reject) => {\n            this._handleApplePayEvents(applePaySession, paymentMethod, {\n                resolve,\n                reject,\n            });\n        });\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _getBaseRequest(\n        state: PaymentIntegrationSelectors,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const checkout = state.getCheckoutOrThrow();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const { grandTotal, isStoreCreditApplied, outstandingBalance } = checkout;\n\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        if (isStoreCreditApplied) {\n            const { storeCredit } = state.getCustomerOrThrow();\n\n            lineItems.push({\n                label: this._storeCreditLabel,\n                amount: `-${Math.min(grandTotal, storeCredit).toFixed(decimalPlaces)}`,\n            });\n        }\n\n        return {\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems,\n            total: {\n                label: storeName,\n                amount: `${outstandingBalance.toFixed(decimalPlaces)}`,\n                type: 'final',\n            },\n        };\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        promise: ApplePayPromise,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (err) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.oncancel = async () =>\n            promise.reject(new PaymentMethodCancelledError('Continue with applepay'));\n\n        applePaySession.onpaymentauthorized = (event: ApplePayJS.ApplePayPaymentAuthorizedEvent) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod, promise);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        promise: ApplePayPromise,\n    ) {\n        const { token } = event.payment;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        try {\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return promise.resolve();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            return promise.reject(\n                new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n            );\n        }\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        const state = this._paymentIntegrationService.getState();\n        let braintreePaymentMethod =\n            state.getPaymentMethod(ApplePayGatewayType.BRAINTREE_FASTLANE) ||\n            state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (!braintreePaymentMethod) {\n            await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n            braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n        }\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayPaymentStrategy from './apple-pay-payment-strategy';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayPaymentStrategy: PaymentStrategyFactory<ApplePayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayPaymentStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n    );\n};\n\nexport default toResolvableModule(createApplePayPaymentStrategy, [{ id: 'applepay' }]);\n","import {\n    LoadingIndicatorContainerStyles,\n    LoadingIndicatorStyles,\n} from './loading-indicator-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nexport const DEFAULT_CONTAINER_STYLES = {\n    position: 'fixed',\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\ninterface LoadingIndicatorOptions {\n    styles?: LoadingIndicatorStyles;\n    containerStyles?: LoadingIndicatorContainerStyles;\n}\n\nexport default class LoadingIndicator {\n    private container: HTMLElement;\n    private indicator: HTMLElement;\n    private styles: LoadingIndicatorStyles;\n    private containerStyles: LoadingIndicatorContainerStyles;\n\n    constructor(options?: LoadingIndicatorOptions) {\n        this.styles = { ...DEFAULT_STYLES, ...(options && options.styles) };\n        this.containerStyles = { ...(options && options.containerStyles) };\n\n        this.defineAnimation();\n\n        this.container = this.buildContainer();\n        this.indicator = this.buildIndicator();\n\n        this.container.appendChild(this.indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error(\n                    'Unable to attach the loading indicator because the parent ID is not valid.',\n                );\n            }\n\n            parent.appendChild(this.container);\n        }\n\n        this.container.style.visibility = 'visible';\n        this.container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this.container.style.visibility = 'hidden';\n\n            this.container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this.container.addEventListener('transitionend', handleTransitionEnd);\n\n        this.container.style.opacity = '0';\n    }\n\n    private buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        this.setStyleAttribute(container, this.containerStyles);\n\n        return container;\n    }\n\n    private buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this.styles.size}px`;\n        indicator.style.height = `${this.styles.size}px`;\n        indicator.style.borderRadius = `${this.styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private setStyleAttribute(element: HTMLElement, attrs: { [key: string]: string }): void {\n        Object.keys(attrs).forEach((k) => {\n            element.style.setProperty(k, attrs[k]);\n        });\n    }\n\n    private defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        document.head?.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(\n                `\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `,\n                0,\n            );\n        }\n    }\n}\n","export const LOADING_INDICATOR_STYLES = {\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/form-poster\");","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","export enum CartSource {\n    BuyNow = 'BUY_NOW',\n}\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * BigCommerce Payments Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n// TODO: rename BigCommercePaymentsSDKFunding to PayPalSDKFunding\nexport interface BigCommercePaymentsSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * BigCommerce Payments SDK\n *\n */\n\nexport interface BigCommercePaymentsCardFieldsConfig {\n    inputEvents: {\n        onChange(data: BigCommercePaymentsCardFieldsState): void;\n        onFocus(data: BigCommercePaymentsCardFieldsState): void;\n        onBlur(data: BigCommercePaymentsCardFieldsState): void;\n        onInputSubmitRequest(data: BigCommercePaymentsCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: BigCommercePaymentsCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: BigCommercePaymentsHostedFieldsRenderOptions['styles'];\n    onApprove(data: BigCommercePaymentsCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\nexport interface BigCommercePaymentsCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n    liabilityShift?: LiabilityShiftEnum;\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\ninterface BigCommercePaymentsCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype BigCommercePaymentsCardFieldsCard = BigCommercePaymentsHostedFieldsCard;\n\nexport interface BigCommercePaymentsCardFieldsState {\n    cards: BigCommercePaymentsCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: BigCommercePaymentsCardFieldsFieldData;\n        cardNumberField: BigCommercePaymentsCardFieldsFieldData;\n        cardNameField?: BigCommercePaymentsCardFieldsFieldData;\n        cardExpiryField: BigCommercePaymentsCardFieldsFieldData;\n    };\n}\n\nexport interface BigCommercePaymentsFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\ninterface BigCommercePaymentsFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface BigCommercePaymentsCardFields {\n    isEligible(): boolean;\n    CVVField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    ExpiryField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    NameField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    NumberField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    submit(config?: BigCommercePaymentsCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<BigCommercePaymentsCardFieldsState>;\n}\n\nexport interface BigCommercePaymentsCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalSDK {\n    CardFields: (\n        data: BigCommercePaymentsCardFieldsConfig,\n    ) => Promise<BigCommercePaymentsCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: BigCommercePaymentsSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(\n            data: BigCommercePaymentsHostedFieldsRenderOptions,\n        ): Promise<BigCommercePaymentsHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: BigCommercePaymentsButtonsOptions): BigCommercePaymentsButtons;\n    PaymentFields(\n        options: BigCommercePaymentsPaymentFieldsOptions,\n    ): BigCommercePaymentsPaymentFields;\n    Messages(options: BigCommercePaymentsMessagesOptions): BigCommercePaymentsMessages;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\nexport interface BirthDate {\n    getFullYear(): number;\n    getDate(): number;\n    getMonth(): number;\n}\n\nexport interface BigCommercePaymentsScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: BigCommercePaymentsIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n    };\n}\n\nexport enum BigCommercePaymentsIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport interface BigCommercePaymentsHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\n/**\n *\n * BigCommerce Payments Initialization Data\n *\n */\nexport interface BigCommercePaymentsInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\n/**\n *\n * BigCommerce Payments BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * BigCommerce Payments Hosted Fields\n *\n */\nexport interface BigCommercePaymentsHostedFieldsRenderOptions {\n    fields?: {\n        number?: BigCommercePaymentsHostedFieldOption;\n        cvv?: BigCommercePaymentsHostedFieldOption;\n        expirationDate?: BigCommercePaymentsHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface BigCommercePaymentsHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface BigCommercePaymentsHostedFields {\n    submit(\n        options?: BigCommercePaymentsHostedFieldsSubmitOptions,\n    ): Promise<BigCommercePaymentsHostedFieldsApprove>;\n    getState(): BigCommercePaymentsHostedFieldsState;\n    on(eventName: string, callback: (event: BigCommercePaymentsHostedFieldsState) => void): void;\n}\n\nexport interface BigCommercePaymentsHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface BigCommercePaymentsHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface BigCommercePaymentsHostedFieldsState {\n    cards: BigCommercePaymentsHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationDate?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationMonth?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationYear?: BigCommercePaymentsHostedFieldsFieldData;\n        cvv?: BigCommercePaymentsHostedFieldsFieldData;\n        postalCode?: BigCommercePaymentsHostedFieldsFieldData;\n    };\n}\n\nexport interface BigCommercePaymentsHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface BigCommercePaymentsHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * BigCommerce Payments Buttons\n *\n */\nexport interface BigCommercePaymentsButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface BigCommercePaymentsButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    countryCode: string;\n    postalCode: string;\n    state: string;\n}\n\nexport interface PaypalAddressCallbackData {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n        phone?: {\n            phone_number: {\n                national_number: string;\n            };\n        };\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n            name: {\n                full_name: string;\n            };\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    address_line_2: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * BigCommerce Payments Payment fields\n *\n */\nexport interface BigCommercePaymentsPaymentFields {\n    render(id: string): void;\n}\n\nexport interface BigCommercePaymentsPaymentFieldsOptions {\n    style?: BigCommercePaymentsFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface BigCommercePaymentsFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * BigCommercePayments Messages\n */\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessages {\n    render(id: string): void;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: BigCommercePaymentsMessagesStyleOptions;\n    fundingSource?: string;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n    fastlaneToken?: string;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsRequestSender from './bigcommerce-payments-request-sender';\nimport BigCommercePaymentsScriptLoader from './bigcommerce-payments-script-loader';\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCreateOrderCardFieldsResponse,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsRequestSender: BigCommercePaymentsRequestSender,\n        private bigCommercePaymentsScriptLoader: BigCommercePaymentsScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        this.paypalSdk = await this.bigCommercePaymentsScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n            forceLoad,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.bigCommercePaymentsRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async createOrderCardFields(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalCreateOrderCardFieldsResponse> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId, setupToken } = await this.bigCommercePaymentsRequestSender.createOrder(\n            providerId,\n            {\n                cartId,\n                ...requestBody,\n            },\n        );\n\n        return { orderId, ...(setupToken ? { setupToken } : {}) };\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.bigCommercePaymentsRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(methodId?: string, options?: RequestOptions): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.bigCommercePaymentsRequestSender.getOrderStatus(\n                methodId,\n                options,\n            );\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string, gatewayId?: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({\n            methodId,\n            paymentData,\n            ...(gatewayId ? { gatewayId } : {}),\n        });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: address?.phone || '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: address?.address2 || '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            address2: payer.address.address_line_2,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n            phone: payer.phone?.phone_number?.national_number,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const {\n            address,\n            name: { full_name },\n        } = purchase_units[0].shipping;\n\n        const [firstName, ...lastName] = full_name.split(' ');\n\n        return this.getAddress({\n            firstName,\n            lastName: lastName.join(' '),\n            email: payer.email_address,\n            address1: address.address_line_1,\n            address2: address.address_line_2,\n            city: address.admin_area_2,\n            countryCode: address.country_code,\n            postalCode: address.postal_code,\n            stateOrProvinceCode: address.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            // For now this is a temporary solution, further removeElement method will be removed\n            element.style.display = 'none';\n        }\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/bigcommerce_payments`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(\n        methodId = 'bigcommerce_payments',\n        options?: RequestOptions,\n    ): Promise<PayPalOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsHostWindow,\n    BigCommercePaymentsInitializationData,\n    BigCommercePaymentsScriptParams,\n    ComponentsScriptType,\n    FundingType,\n    PayPalSDK,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsScriptLoader {\n    private window: BigCommercePaymentsHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: BigCommercePaymentsScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<BigCommercePaymentsScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<BigCommercePaymentsScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): BigCommercePaymentsScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'bigcommerce_payments_creditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsIntegrationService,\n    BigCommercePaymentsRequestSender,\n    BigCommercePaymentsScriptLoader,\n} from './index';\n\nconst createBigCommercePaymentsIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new BigCommercePaymentsIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new BigCommercePaymentsRequestSender(createRequestSender({ host: getHost() })),\n        new BigCommercePaymentsScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createBigCommercePaymentsIntegrationService;\n","import { isBigCommercePaymentsProviderError } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    HostedInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentInstrumentPayload,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ClickCallbackActions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPaymentInitializeOptions, {\n    WithBigCommercePaymentsPaymentInitializeOptions,\n} from './bigcommerce-payments-payment-initialize-options';\n\nexport default class BigCommercePaymentsPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: BigCommercePaymentsButtons;\n    private bigcommerce_payments?: BigCommercePaymentsPaymentInitializeOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithBigCommercePaymentsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments } = options || {};\n\n        this.bigcommerce_payments = bigcommerce_payments;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        this.loadingIndicatorContainer = bigcommerce_payments.container.split('#')[1];\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (paymentMethod.initializationData?.orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (bigcommerce_payments.onInit && typeof bigcommerce_payments.onInit === 'function') {\n            bigcommerce_payments.onInit(() => this.renderButton(methodId, bigcommerce_payments));\n        }\n\n        if (\n            bigcommerce_payments.shouldRenderPayPalButtonOnInitialization === undefined ||\n            bigcommerce_payments.shouldRenderPayPalButtonOnInitialization\n        ) {\n            this.renderButton(methodId, bigcommerce_payments);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { onError } = this.bigcommerce_payments || {};\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const shouldHandleInstrumentDeclinedError =\n            features && features['PAYPAL-3438.handling_instrument_declined_error_ppc'];\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, paymentData } = payment;\n\n        if (this.isPayPalVaultedInstrumentPaymentData(paymentData) && !this.orderId) {\n            this.orderId = await this.createOrder();\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        const paymentPayload = this.isPayPalVaultedInstrumentPaymentData(paymentData)\n            ? this.prepareVaultedInstrumentPaymentPayload(methodId, this.orderId, paymentData)\n            : this.preparePaymentPayload(methodId, this.orderId, paymentData);\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error: unknown) {\n            if (this.isProviderError(error) && shouldHandleInstrumentDeclinedError) {\n                await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(payment.methodId);\n\n                await new Promise((_resolve, reject) => {\n                    if (this.bigcommerce_payments) {\n                        this.paypalButton?.close();\n                        this.renderButton(payment.methodId, this.bigcommerce_payments);\n                        this.handleError(new Error('INSTRUMENT_DECLINED'), onError);\n                    }\n\n                    reject();\n                });\n            }\n\n            this.handleError(error, onError);\n\n            return Promise.reject();\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    private prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: VaultedInstrument & HostedInstrument,\n    ): Payment {\n        const { instrumentId, shouldSetAsDefaultInstrument } = paymentData;\n\n        const shouldConfirmInstrument = !this.isTrustedVaultingFlow(paymentData);\n\n        if (shouldConfirmInstrument) {\n            return {\n                methodId,\n                paymentData: {\n                    shouldSaveInstrument: shouldConfirmInstrument,\n                    shouldSetAsDefaultInstrument,\n                    formattedPayload: {\n                        paypal_account: {\n                            order_id: paypalOrderId,\n                        },\n                    },\n                },\n            };\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                    bigpay_token: {\n                        token: instrumentId,\n                    },\n                },\n            },\n        };\n    }\n\n    private preparePaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments: BigCommercePaymentsPaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n        const { container, onError, onRenderButton, onValidate, submitForm } = bigcommerce_payments;\n\n        const buttonOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () => this.createOrder(),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onError: (error) => this.handleError(error, onError),\n            onCancel: () => this.toggleLoadingIndicator(false),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: BigCommercePaymentsPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        await onValidate(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n    }\n\n    private handleError(\n        error: unknown,\n        onError: BigCommercePaymentsPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private async createOrder(): Promise<string> {\n        const fieldsValues = this.getFieldsValues();\n\n        return this.bigCommercePaymentsIntegrationService.createOrder(\n            'bigcommerce_paymentscheckout',\n            {\n                shouldSaveInstrument: fieldsValues?.shouldSaveInstrument || false,\n            },\n        );\n    }\n\n    /**\n     *\n     * Vaulting flow methods\n     *\n     * */\n    private getFieldsValues(): HostedInstrument | undefined {\n        const { getFieldsValues } = this.bigcommerce_payments || {};\n\n        return typeof getFieldsValues === 'function' ? getFieldsValues() : undefined;\n    }\n\n    private isTrustedVaultingFlow(paymentData?: PaymentInstrumentPayload): boolean {\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            const state = this.paymentIntegrationService.getState();\n\n            const instruments = state.getInstruments();\n\n            const { trustedShippingAddress } =\n                instruments?.find(({ bigpayToken }) => bigpayToken === paymentData.instrumentId) ||\n                {};\n\n            return !!trustedShippingAddress;\n        }\n\n        return false;\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Guards\n     *\n     */\n    private isPayPalVaultedInstrumentPaymentData(\n        paymentData?: PaymentInstrumentPayload,\n    ): paymentData is VaultedInstrument & HostedInstrument {\n        return (\n            !!paymentData && isVaultedInstrument(paymentData) && isHostedInstrumentLike(paymentData)\n        );\n    }\n\n    private isProviderError(error: unknown): boolean {\n        if (isBigCommercePaymentsProviderError(error)) {\n            const paypalProviderError = error?.errors?.filter((e) => e.provider_error) || [];\n\n            return paypalProviderError[0]?.provider_error?.code === 'INSTRUMENT_DECLINED';\n        }\n\n        return false;\n    }\n}\n","export interface ProviderError extends Error {\n    errors?: ErrorElement[];\n    status?: string;\n    three_ds_result?: {\n        acs_url: unknown;\n        payer_auth_request: unknown;\n        merchant_data: unknown;\n        callback_url: unknown;\n    };\n}\n\nexport interface ErrorElement {\n    code: string;\n    message: string;\n    provider_error?: {\n        code: string;\n    };\n}\n\nexport default function isBigCommercePaymentsProviderError(error: unknown): error is ProviderError {\n    return typeof error === 'object' && error !== null && 'errors' in error;\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPaymentStrategy from './bigcommerce-payments-payment-strategy';\n\nconst createBigCommercePaymentsPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPaymentStrategy, [\n    { id: 'bigcommerce_payments' },\n]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalHostWindow,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './bigcommerce-payments-types';\n\nexport default class PayPalSdkHelper {\n    private window: PayPalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: ['fastlane', 'three-domain-secure'],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalSdkHelper from './paypal-sdk-helper';\n\nexport default function createBigCommercePaymentsSdk(): PayPalSdkHelper {\n    return new PayPalSdkHelper(createScriptLoader());\n}\n","type PaymentInstrument = CardInstrument | AccountInstrument;\n\nexport default PaymentInstrument;\n\ninterface BaseInstrument {\n    bigpayToken: string;\n    defaultInstrument: boolean;\n    provider: string;\n    trustedShippingAddress: boolean;\n    method: string;\n    type: string;\n}\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport interface CardInstrument extends BaseInstrument {\n    brand: string;\n    expiryMonth: string;\n    expiryYear: string;\n    iin: string;\n    last4: string;\n    type: 'card';\n    untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType;\n}\n\ninterface BaseAccountInstrument extends BaseInstrument {\n    method: string;\n    type: 'account' | 'bank';\n}\n\nexport interface PayPalInstrument extends BaseAccountInstrument {\n    externalId: string;\n    method: 'paypal';\n}\n\nexport interface AchInstrument extends BaseAccountInstrument {\n    issuer: string;\n    accountNumber: string;\n    type: 'bank';\n    method: 'ach' | 'ecp';\n}\n\nexport interface BankInstrument extends BaseAccountInstrument {\n    accountNumber: string;\n    issuer: string;\n    iban: string;\n    method: string;\n    type: 'bank';\n}\n\nexport type AccountInstrument = PayPalInstrument | BankInstrument | AchInstrument;\n\nexport interface VaultAccessToken {\n    vaultAccessToken: string;\n    vaultAccessExpiry: number;\n}\n\nexport interface SessionContext {\n    customerId: number;\n    storeId: string;\n    currencyCode?: string;\n}\n\nexport interface InstrumentRequestContext extends SessionContext {\n    authToken: string;\n}\n","interface CookieOptions {\n    expires?: Date;\n    path?: string;\n    domain?: string;\n    secure?: boolean;\n}\n\nexport default class CookieStorage {\n    static get(name: string): string | null {\n        const cookieKey = `${encodeURIComponent(`${name}`)}=`;\n        const cookie = document.cookie;\n\n        let value = null;\n\n        const firstIndex = cookie.indexOf(cookieKey);\n\n        if (firstIndex > -1) {\n            let lastIndex = cookie.indexOf(';', firstIndex);\n\n            if (lastIndex === -1) {\n                lastIndex = cookie.length;\n            }\n\n            value = decodeURIComponent(cookie.substring(firstIndex + cookieKey.length, lastIndex));\n        }\n\n        return value;\n    }\n\n    static set(name: string, value: string, options: CookieOptions = { secure: true }) {\n        let cookieText = `${encodeURIComponent(name)}=${encodeURIComponent(value)}`;\n\n        const { expires, path, domain, secure } = options;\n\n        if (expires) {\n            cookieText += `; expires=${expires.toUTCString()}`;\n        } else {\n            const now = new Date();\n            // info: default cookie expiration time after setup\n            const minutes = 60;\n\n            now.setTime(now.getTime() + minutes * 60 * 1000);\n\n            cookieText += `; expires=${now.toUTCString()}`;\n        }\n\n        if (path) {\n            cookieText += `; path=${path}`;\n        }\n\n        if (domain) {\n            cookieText += `; domain=${domain}`;\n        }\n\n        if (secure) {\n            cookieText += '; secure';\n        }\n\n        document.cookie = cookieText;\n    }\n\n    static remove(name: string, options?: CookieOptions) {\n        CookieStorage.set(name, '', { expires: new Date(0), ...options });\n    }\n}\n","import { CardInstrument, CustomerAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * BigCommerce Payments Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\n/**\n *\n * BigCommerce Payments Initialization Data\n *\n */\nexport interface BigCommercePaymentsInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    fastlaneStyles?: FastlaneStylesSettings;\n    connectClientToken?: string; // TODO: remove when BCP Fastlane A/B test will be finished\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isAcceleratedCheckoutEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneStylingEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isBigCommercePaymentsAnalyticsV2Enabled?: boolean; // PayPal Fastlane related\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: remove when BCP Fastlane A/B test will be finished\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[];\n    threeDSVerificationMethod?: string;\n}\n\n/**\n *\n * PayPalHostWindow contains different\n * PayPal Sdk instances for different purposes\n *\n */\nexport interface PayPalHostWindow extends Window {\n    paypalFastlane?: PayPalFastlane;\n    paypalFastlaneSdk?: PayPalFastlaneSdk;\n    paypalMessages?: PayPalMessagesSdk;\n    paypalApms?: PayPalApmSdk;\n    paypalGooglePay?: PayPalGooglePaySdk;\n}\n\n/**\n *\n * PayPal SDK config\n *\n */\nexport interface PayPalSdkConfig {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'enable-funding'?: EnableFundingType;\n        'disable-funding'?: FundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: BigCommercePaymentsIntent;\n        components?: PayPalSdkComponents;\n    };\n    attributes: {\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n        'data-namespace'?: string;\n        'data-client-token'?: string;\n        'data-sdk-client-token'?: string;\n    };\n}\n\nexport enum BigCommercePaymentsIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type PayPalSdkComponents = Array<\n    'fastlane' | 'messages' | 'buttons' | 'payment-fields' | 'googlepay' | 'three-domain-secure'\n>;\n\n/**\n *\n * PayPal Sdk instances\n *\n */\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\nexport interface threeDSecureParameters {\n    amount: string;\n    currency: string;\n    nonce: string;\n    threeDSRequested: boolean;\n    transactionContext: {\n        experience_context: {\n            brand_name?: string;\n            locale: string;\n            return_url: string;\n            cancel_url: string;\n        };\n    };\n}\n\nexport interface PayPalFastlaneSdk {\n    ThreeDomainSecureClient: {\n        isEligible(params: threeDSecureParameters): Promise<boolean>;\n        show(): Promise<ThreeDomainSecureClientShowResponse>;\n    };\n    Fastlane(options?: PayPalFastlaneOptions): Promise<PayPalFastlane>;\n}\n\ninterface ThreeDomainSecureClientShowResponse {\n    liabilityShift: LiabilityShiftEnum;\n    authenticationState: TDSecureAuthenticationState;\n    nonce: string; // Enriched nonce or the original nonce\n}\n\nexport interface PayPalMessagesSdk {\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PayPalApmSdk {\n    Buttons(options: BigCommercePaymentsButtonsOptions): BigCommercePaymentsButtons;\n    PaymentFields(\n        options: BigCommercePaymentsPaymentFieldsOptions,\n    ): BigCommercePaymentsPaymentFields;\n}\n\nexport interface PayPalGooglePaySdk {\n    Googlepay(): GooglePay;\n}\n\nexport enum TDSecureAuthenticationState {\n    Succeeded = 'succeeded',\n    Cancelled = 'cancelled',\n    Errored = 'errored',\n}\n\n/**\n *\n * Google Pay related types\n *\n */\n\ninterface GooglePay {\n    config: () => Promise<GooglePayConfig>;\n    confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n    initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\n/**\n *\n * BigCommerce Payments Buttons\n *\n */\nexport interface BigCommercePaymentsButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface BigCommercePaymentsButtonsOptions {\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: PayPalButtonApproveCallbackPayload,\n        actions: PayPalButtonApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(\n        data: PayPalButtonInitCallbackPayload,\n        actions: PayPalButtonInitCallbackActions,\n    ): Promise<void>;\n    onClick?(\n        data: PayPalButtonClickCallbackPayload,\n        actions: PayPalButtonClickCallbackActions,\n    ): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n}\n\nexport interface PayPalButtonClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface PayPalButtonClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface PayPalButtonInitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface PayPalButtonInitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalButtonApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface PayPalButtonApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * BigCommerce Payments PaymentFields fields\n *\n */\nexport interface BigCommercePaymentsPaymentFields {\n    render(id: string): void;\n}\n\nexport interface BigCommercePaymentsPaymentFieldsOptions {\n    style?: BigCommercePaymentsFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface BigCommercePaymentsFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayLater Messages related types\n * doc: https://developer.paypal.com/docs/checkout/pay-later/us/integrate/reference\n */\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagesStyleOptions {\n    color?: string; // 'blue' | 'black' | 'white' | 'white-no-border' | 'gray' | 'monochrome' | 'grayscale'\n    layout?: string; // 'text' | 'flex'\n    logo?: {\n        type?: string; // 'primary' | 'alternative' | 'inline' | 'none'\n        position?: string; // 'left' | 'right' | 'top'\n    };\n    ratio?: string; // '1x1' | '1x4' | '8x1' | '20x1'\n    text?: {\n        align?: string; // 'left' | 'right' | 'center'\n        color?: string; // 'black' | 'white' | 'monochrome' | 'grayscale'\n        size?: number; // from 10 to 16\n    };\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * PayPal Fastlane related types\n *\n */\nexport interface PayPalFastlane {\n    identity: PayPalFastlaneIdentity;\n    events: PayPalFastlaneEvents;\n    profile: PayPalFastlaneProfile;\n    FastlaneCardComponent(\n        options: PayPalFastlaneCardComponentOptions,\n    ): Promise<PayPalFastlaneCardComponentMethods>;\n}\n\nexport interface PayPalFastlaneOptions {\n    styles?: PayPalFastlaneStylesOption;\n}\n\nexport interface PayPalFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerContextId: string,\n    ): Promise<PayPalFastlaneAuthenticationResult>;\n}\n\nexport interface PayPalFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface PayPalFastlaneAuthenticationResult {\n    authenticationState?: PayPalFastlaneAuthenticationState;\n    profileData?: PayPalFastlaneProfileData;\n}\n\nexport enum PayPalFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'canceled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface PayPalFastlaneProfileData {\n    name: PayPalFastlaneProfileName;\n    shippingAddress: PayPalFastlaneShippingAddress;\n    card: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface PayPalFastlaneProfilePhone {\n    countryCode: string;\n    nationalNumber: string;\n}\n\nexport interface PayPalFastlaneShippingAddress {\n    name: PayPalFastlaneProfileName;\n    phoneNumber: PayPalFastlaneProfilePhone;\n    address: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneProfileCard {\n    id: string; // nonce / token\n    paymentSource: PayPalFastlanePaymentSource;\n}\n\nexport interface PayPalFastlanePaymentSource {\n    card: PayPalFastlaneCardSource;\n}\n\nexport interface PayPalFastlaneCardSource {\n    brand: string;\n    expiry: string; // \"YYYY-MM\"\n    lastDigits: string; // \"1111\"\n    name: string;\n    billingAddress: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneAddress {\n    company?: string;\n    addressLine1: string;\n    addressLine2?: string;\n    adminArea1: string; // State\n    adminArea2: string; // City\n    postalCode: string;\n    countryCode?: string;\n}\n\nexport interface PayPalFastlaneProfileToBcCustomerDataMappingResult {\n    authenticationState: PayPalFastlaneAuthenticationState;\n    addresses: CustomerAddress[];\n    billingAddress?: CustomerAddress;\n    shippingAddress?: CustomerAddress;\n    instruments: CardInstrument[];\n}\n\nexport interface PayPalFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport interface PayPalFastlaneProfile {\n    showCardSelector(): Promise<PayPalFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<PayPalFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface PayPalFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: PayPalFastlaneShippingAddress;\n}\n\nexport interface PayPalFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneCardComponentMethods {\n    getPaymentToken(\n        options: PayPalFastlaneGetPaymentTokenOptions,\n    ): Promise<PayPalFastlaneProfileCard>;\n    render(element: string): void;\n}\n\nexport interface PayPalFastlaneGetPaymentTokenOptions {\n    name?: PayPalFastlaneProfileName;\n    billingAddress?: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneCardComponentOptions {\n    fields?: PayPalFastlaneCardComponentFields;\n}\n\nexport interface PayPalFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface PayPalFastlaneEvents {\n    apmSelected: (options: PayPalFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: PayPalFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: PayPalFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface PayPalFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface PayPalFastlaneApmSelectedEventOptions extends PayPalFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface PayPalFastlaneEmailEnteredEventOptions extends PayPalFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface PayPalFastlaneOrderPlacedEventOptions extends PayPalFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface PayPalFastlanePaymentFormattedPayload {\n    paypal_connect_token?: {\n        order_id?: string;\n        token: string;\n    };\n    paypal_fastlane_token?: {\n        order_id?: string;\n        token: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n","import { isEqual, omit } from 'lodash';\n\nimport {\n    Address,\n    CardInstrument,\n    CustomerAddress,\n    PaymentMethodClientUnavailableError,\n    UntrustedShippingCardVerificationType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { CookieStorage } from '@bigcommerce/checkout-sdk/storage';\n\nimport {\n    PayPalFastlane,\n    PayPalFastlaneAddress,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneLookupCustomerByEmailResult,\n    PayPalFastlaneProfileCard,\n    PayPalFastlaneProfileName,\n    PayPalFastlaneProfilePhone,\n    PayPalFastlaneProfileToBcCustomerDataMappingResult,\n    PayPalFastlaneSdk,\n    PayPalFastlaneStylesOption,\n    PayPalHostWindow,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsFastlaneUtils {\n    private window: PayPalHostWindow;\n\n    constructor() {\n        this.window = window;\n    }\n\n    async initializePayPalFastlane(\n        paypalFastlaneSdk: PayPalFastlaneSdk,\n        isTestModeEnabled: boolean,\n        styles?: PayPalFastlaneStylesOption,\n    ): Promise<PayPalFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n            window.localStorage.setItem('axoEnv', 'sandbox'); // TODO: remove if this key does not use on PayPal side\n        }\n\n        if (!this.window.paypalFastlane) {\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.window.paypalFastlane = await paypalFastlaneSdk.Fastlane({\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    getPayPalFastlaneOrThrow(): PayPalFastlane {\n        if (!this.window.paypalFastlane) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    /**\n     *\n     * Detects the customer to PayPal Fastlane relation and\n     * returns customerContextId to use it for authentication\n     *\n     */\n    async lookupCustomerOrThrow(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult> {\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.lookupCustomerByEmail(email);\n    }\n\n    /**\n     *\n     * Triggers authentication flow (shows OTP popup) if the customer recognised as PayPal Fastlane user\n     * and returns PayPal Fastlane Profile data to use it in BC checkout\n     *\n     */\n    async triggerAuthenticationFlowOrThrow(\n        customerContextId?: string,\n    ): Promise<PayPalFastlaneAuthenticationResult> {\n        if (!customerContextId) {\n            return {};\n        }\n\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.triggerAuthenticationFlow(customerContextId);\n    }\n\n    /**\n     *\n     * 'updateStorageSessionId' method is used to:\n     * - set session id after user was authenticated (or unrecognised) to trigger authentication after page refresh\n     *\n     * Flow info:\n     * If user unrecognised then the lookup method will be working but the OTP will not be shown\n     * If user recognised and not canceled then the lookup method will be working and the OTP will be shown only if needed\n     * If user cancels the OPT then OTP will not be triggered after page refresh\n     *\n     */\n    updateStorageSessionId(sessionId: string): void {\n        const expires = new Date();\n        expires.setDate(expires.getDate() + 14); // 2 weeks expiry\n\n        const cookiesOption = {\n            expires,\n            secure: true,\n        };\n\n        CookieStorage.set('bc-fastlane-sessionId', sessionId, cookiesOption);\n    }\n\n    removeStorageSessionId(): void {\n        CookieStorage.remove('bc-fastlane-sessionId');\n    }\n\n    getStorageSessionId(): string {\n        return CookieStorage.get('bc-fastlane-sessionId') || '';\n    }\n\n    /**\n     *\n     * 'mapPayPalFastlaneProfileToBcCustomerData' method is responsible for:\n     * - mapping PayPal Fastlane Profile data to BC data shape\n     * - returning mapped data to use for updating PaymentProviderCustomer state and\n     * update shipping and billing addresses\n     *\n     */\n    mapPayPalFastlaneProfileToBcCustomerData(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): PayPalFastlaneProfileToBcCustomerDataMappingResult {\n        const { authenticationState, profileData } = authenticationResult;\n\n        const paypalBillingAddress = profileData?.card?.paymentSource?.card?.billingAddress;\n        const paypalShippingAddress = profileData?.shippingAddress;\n        const paypalProfileName = profileData?.name;\n        const paypalInstrument = profileData?.card;\n\n        const shippingAddress = paypalShippingAddress\n            ? this.mapPayPalToBcAddress(\n                  paypalShippingAddress.address,\n                  paypalShippingAddress.name,\n                  paypalShippingAddress.phoneNumber,\n              )\n            : undefined;\n        const billingAddress =\n            paypalBillingAddress && paypalProfileName\n                ? this.mapPayPalToBcAddress(\n                      paypalBillingAddress,\n                      paypalProfileName,\n                      paypalShippingAddress?.phoneNumber,\n                  )\n                : undefined;\n        const instruments = paypalInstrument\n            ? this.mapPayPalToBcInstrument(methodId, paypalInstrument)\n            : [];\n\n        const addresses = this.filterAddresses([shippingAddress, billingAddress]);\n\n        return {\n            authenticationState:\n                authenticationState || PayPalFastlaneAuthenticationState.UNRECOGNIZED,\n            addresses,\n            billingAddress,\n            shippingAddress,\n            instruments,\n        };\n    }\n\n    mapPayPalToBcInstrument(\n        methodId: string,\n        instrument: PayPalFastlaneProfileCard,\n    ): CardInstrument[] {\n        const { id, paymentSource } = instrument;\n        const { brand, expiry, lastDigits } = paymentSource.card;\n\n        const [expiryYear, expiryMonth] = expiry.split('-');\n\n        return [\n            {\n                bigpayToken: id,\n                brand,\n                defaultInstrument: false,\n                expiryMonth,\n                expiryYear,\n                iin: '',\n                last4: lastDigits,\n                method: methodId,\n                provider: methodId,\n                trustedShippingAddress: false,\n                untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType.PAN,\n                type: 'card',\n            },\n        ];\n    }\n\n    mapBcToPayPalAddress(address?: Address): PayPalFastlaneAddress {\n        return {\n            company: address?.company || '',\n            addressLine1: address?.address1 || '',\n            addressLine2: address?.address2 || '',\n            adminArea1: address?.stateOrProvinceCode || address?.stateOrProvince || '',\n            adminArea2: address?.city || '',\n            postalCode: address?.postalCode || '',\n            countryCode: address?.countryCode || '',\n        };\n    }\n\n    mapPayPalToBcAddress(\n        address: PayPalFastlaneAddress,\n        profileName: PayPalFastlaneProfileName,\n        phone?: PayPalFastlaneProfilePhone,\n        customFields?: CustomerAddress['customFields'],\n    ): CustomerAddress {\n        const [firstName, lastName] = profileName.fullName.split(' ');\n\n        const phoneData = {\n            nationalNumber: phone?.nationalNumber || '',\n            countryCode: phone?.countryCode || '',\n        };\n\n        return {\n            id: Date.now(),\n            type: 'paypal-address',\n            firstName: profileName.firstName || firstName || '',\n            lastName: profileName.lastName || lastName || '',\n            company: address.company || '',\n            address1: address.addressLine1,\n            address2: address.addressLine2 || '',\n            city: address.adminArea2,\n            stateOrProvince: address.adminArea1,\n            stateOrProvinceCode: address.adminArea1,\n            country: address.countryCode || '', // TODO: update country with valid naming\n            countryCode: address.countryCode || '',\n            postalCode: address.postalCode,\n            phone: phoneData.countryCode + phoneData.nationalNumber,\n            customFields: customFields || [],\n        };\n    }\n\n    /**\n     *\n     * This method is responsible for filtering PayPal Fastlane addresses if they are the same\n     * and returns an array of addresses to use them for shipping and/or billing address selections\n     * so the customer will be able to use addresses from PayPal Fastlane in checkout flow\n     *\n     */\n    filterAddresses(addresses: Array<CustomerAddress | undefined>): CustomerAddress[] {\n        return addresses.reduce(\n            (customerAddresses: CustomerAddress[], currentAddress: CustomerAddress | undefined) => {\n                if (!currentAddress) {\n                    return customerAddresses;\n                }\n\n                const sameAddressInTheArray = customerAddresses.some((customerAddress) =>\n                    this.isEqualAddresses(customerAddress, currentAddress),\n                );\n\n                return sameAddressInTheArray\n                    ? customerAddresses\n                    : [...customerAddresses, currentAddress];\n            },\n            [],\n        );\n    }\n\n    private isEqualAddresses(\n        firstAddress: CustomerAddress,\n        secondAddress: CustomerAddress,\n    ): boolean {\n        return isEqual(this.normalizeAddress(firstAddress), this.normalizeAddress(secondAddress));\n    }\n\n    private normalizeAddress(address: CustomerAddress) {\n        return omit(address, ['id', 'phone']);\n    }\n}\n","import BigCommercePaymentsFastlaneUtils from './bigcommerce-payments-fastlane-utils';\n\nexport default function createBigCommercePaymentsFastlaneUtils(): BigCommercePaymentsFastlaneUtils {\n    return new BigCommercePaymentsFastlaneUtils();\n}\n","import { omitBy } from 'lodash';\n\nimport { FastlaneStylesSettings, PayPalFastlaneStylesOption } from '../index';\n\nfunction isInvalidStyleOption(styleOption: unknown) {\n    return typeof styleOption !== 'string';\n}\n\nexport default function getFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n) {\n    if (!uiStyles && !styleSettings) {\n        return undefined;\n    }\n\n    return cleanUpFastlaneStyles(mergeFastlaneStyles(styleSettings, uiStyles));\n}\n\nfunction mergeFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n): PayPalFastlaneStylesOption {\n    return {\n        root: {\n            backgroundColorPrimary:\n                styleSettings?.fastlaneRootSettingsBackgroundColor ||\n                uiStyles?.root?.backgroundColorPrimary,\n            errorColor: styleSettings?.fastlaneRootSettingsErrorColor || uiStyles?.root?.errorColor,\n            fontFamily: styleSettings?.fastlaneRootSettingsFontFamily || uiStyles?.root?.fontFamily,\n            fontSizeBase:\n                styleSettings?.fastlaneRootSettingsFontSize || uiStyles?.root?.fontSizeBase,\n            padding: styleSettings?.fastlaneRootSettingsPadding || uiStyles?.root?.padding,\n            primaryColor:\n                styleSettings?.fastlaneRootSettingsPrimaryColor || uiStyles?.root?.primaryColor,\n        },\n        input: {\n            borderRadius:\n                styleSettings?.fastlaneInputSettingsBorderRadius || uiStyles?.input?.borderRadius,\n            borderColor:\n                styleSettings?.fastlaneInputSettingsBorderColor || uiStyles?.input?.borderColor,\n            focusBorderColor:\n                styleSettings?.fastlaneInputSettingsFocusBorderBase ||\n                uiStyles?.input?.focusBorderColor,\n            backgroundColor:\n                styleSettings?.fastlaneInputSettingsBackgroundColor ||\n                uiStyles?.input?.backgroundColor,\n            borderWidth:\n                styleSettings?.fastlaneInputSettingsBorderWidth || uiStyles?.input?.borderWidth,\n            textColorBase:\n                styleSettings?.fastlaneInputSettingsTextColorBase || uiStyles?.input?.textColorBase,\n        },\n        toggle: {\n            colorPrimary:\n                styleSettings?.fastlaneToggleSettingsColorPrimary || uiStyles?.toggle?.colorPrimary,\n            colorSecondary:\n                styleSettings?.fastlaneToggleSettingsColorSecondary ||\n                uiStyles?.toggle?.colorSecondary,\n        },\n        text: {\n            body: {\n                color: styleSettings?.fastlaneTextBodySettingsColor || uiStyles?.text?.body?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextBodySettingsFontSize ||\n                    uiStyles?.text?.body?.fontSize,\n            },\n            caption: {\n                color:\n                    styleSettings?.fastlaneTextCaptionSettingsColor ||\n                    uiStyles?.text?.caption?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextCaptionSettingsFontSize ||\n                    uiStyles?.text?.caption?.fontSize,\n            },\n        },\n        branding: styleSettings?.fastlaneBrandingSettings || uiStyles?.branding,\n    };\n}\n\nfunction cleanUpFastlaneStyles(styles: PayPalFastlaneStylesOption) {\n    const fastlaneStyles: PayPalFastlaneStylesOption = {};\n\n    const root = omitBy(styles.root, isInvalidStyleOption);\n    const input = omitBy(styles.input, isInvalidStyleOption);\n    const toggle = omitBy(styles.toggle, isInvalidStyleOption);\n    const textBody = omitBy(styles.text?.body, isInvalidStyleOption);\n    const textCaption = omitBy(styles.text?.caption, isInvalidStyleOption);\n    const branding = styles.branding;\n\n    if (Object.keys(root).length) {\n        fastlaneStyles.root = root;\n    }\n\n    if (Object.keys(input).length) {\n        fastlaneStyles.input = input;\n    }\n\n    if (Object.keys(toggle).length) {\n        fastlaneStyles.toggle = toggle;\n    }\n\n    if (Object.keys(textBody).length) {\n        fastlaneStyles.text = {};\n        fastlaneStyles.text.body = textBody;\n    }\n\n    if (Object.keys(textCaption).length) {\n        fastlaneStyles.text = {\n            ...fastlaneStyles.text,\n        };\n        fastlaneStyles.text.caption = textCaption;\n    }\n\n    if (branding) {\n        fastlaneStyles.branding = branding;\n    }\n\n    return fastlaneStyles;\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n// TODO: update PayPalConnectCustomer with PayPalFastlaneCustomer\nexport default function isPayPalFastlaneCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    BigCommercePaymentsFastlaneUtils,\n    BigCommercePaymentsInitializationData,\n    getFastlaneStyles,\n    isBigcommerceFastlaneRequestError,\n    isPayPalFastlaneCustomer,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneCardComponentMethods,\n    PayPalFastlaneCardComponentOptions,\n    PayPalFastlanePaymentFormattedPayload,\n    PayPalFastlaneSdk,\n    PayPalSdkHelper,\n    TDSecureAuthenticationState,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CardInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsRequestSender from '../bigcommerce-payments-request-sender';\n\nimport BigCommercePaymentsFastlanePaymentInitializeOptions, {\n    WithBigCommercePaymentsFastlanePaymentInitializeOptions,\n} from './bigcommerce-payments-fastlane-payment-initialize-options';\nimport { LiabilityShiftEnum } from '../bigcommerce-payments-types';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nexport default class BigCommercePaymentsFastlanePaymentStrategy implements PaymentStrategy {\n    private paypalComponentMethods?: PayPalFastlaneCardComponentMethods;\n    private threeDSVerificationMethod?: string;\n    private paypalFastlaneSdk?: PayPalFastlaneSdk;\n    private bigcommerce_payments_fastlane?: BigCommercePaymentsFastlanePaymentInitializeOptions;\n    private methodId?: string;\n    private orderId?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsRequestSender: BigCommercePaymentsRequestSender,\n        private bigCommercePaymentsSdk: PayPalSdkHelper,\n        private bigCommercePaymentsFastlaneUtils: BigCommercePaymentsFastlaneUtils,\n    ) {}\n\n    /**\n     *\n     * Default methods\n     *\n     * */\n    async initialize(\n        options: PaymentInitializeOptions & WithBigCommercePaymentsFastlanePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_fastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        this.methodId = methodId;\n\n        if (!bigcommerce_payments_fastlane) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_fastlane\" argument is not provided.',\n            );\n        }\n\n        this.bigcommerce_payments_fastlane = bigcommerce_payments_fastlane;\n\n        if (\n            !bigcommerce_payments_fastlane.onInit ||\n            typeof bigcommerce_payments_fastlane.onInit !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_fastlane.onInit\" argument is not provided or it is not a function.',\n            );\n        }\n\n        if (\n            !bigcommerce_payments_fastlane.onChange ||\n            typeof bigcommerce_payments_fastlane.onChange !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_fastlane.onChange\" argument is not provided or it is not a function.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isDeveloperModeApplicable, isFastlaneStylingEnabled } =\n            paymentMethod.initializationData || {};\n\n        this.threeDSVerificationMethod =\n            paymentMethod.initializationData?.threeDSVerificationMethod;\n\n        this.paypalFastlaneSdk = await this.bigCommercePaymentsSdk.getPayPalFastlaneSdk(\n            paymentMethod,\n            cart.currency.code,\n            cart.id,\n        );\n\n        const paypalFastlaneStyling = isFastlaneStylingEnabled\n            ? paymentMethod?.initializationData?.fastlaneStyles\n            : {};\n\n        const fastlaneStyles = getFastlaneStyles(\n            paypalFastlaneStyling,\n            bigcommerce_payments_fastlane?.styles,\n        );\n\n        await this.bigCommercePaymentsFastlaneUtils.initializePayPalFastlane(\n            this.paypalFastlaneSdk,\n            !!isDeveloperModeApplicable,\n            fastlaneStyles,\n        );\n\n        if (this.shouldRunAuthenticationFlow()) {\n            await this.runPayPalAuthenticationFlowOrThrow(methodId);\n        }\n\n        await this.initializePayPalPaymentComponent();\n\n        bigcommerce_payments_fastlane.onInit((container: string) =>\n            this.renderPayPalPaymentComponent(container),\n        );\n        bigcommerce_payments_fastlane.onChange(() =>\n            this.handlePayPalStoredInstrumentChange(methodId),\n        );\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { paymentData, methodId } = payment;\n\n        const isVaultedFlow = paymentData && isVaultedInstrument(paymentData);\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n            const paymentPayload = isVaultedFlow\n                ? await this.prepareVaultedInstrumentPaymentPayload(methodId, paymentData)\n                : await this.preparePaymentPayload(methodId, paymentData);\n\n            await this.paymentIntegrationService.submitPayment<PayPalFastlanePaymentFormattedPayload>(\n                paymentPayload,\n            );\n\n            this.bigCommercePaymentsFastlaneUtils.removeStorageSessionId();\n        } catch (error) {\n            if (\n                isBigcommerceFastlaneRequestError(error) &&\n                error.response.name === 'INVALID_REQUEST'\n            ) {\n                const invalidRequestError = {\n                    translationKey: 'payment.errors.invalid_request_error',\n                };\n\n                this.handleError(invalidRequestError);\n\n                return Promise.reject();\n            }\n\n            if (error instanceof Error && error.name !== 'FastlaneError') {\n                throw error;\n            }\n\n            return Promise.reject();\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    private shouldRunAuthenticationFlow(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const customer = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n            ? paymentProviderCustomer\n            : {};\n\n        const paypalFastlaneSessionId = this.bigCommercePaymentsFastlaneUtils.getStorageSessionId();\n\n        if (\n            !customer.isGuest ||\n            paypalFastlaneCustomer?.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED\n        ) {\n            return false;\n        }\n\n        return !paypalFastlaneCustomer?.authenticationState && paypalFastlaneSessionId === cart.id;\n    }\n\n    private async runPayPalAuthenticationFlowOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const customer = state.getCustomer();\n            const billingAddress = state.getBillingAddress();\n            const customerEmail = customer?.email || billingAddress?.email || '';\n\n            const { customerContextId } =\n                await this.bigCommercePaymentsFastlaneUtils.lookupCustomerOrThrow(customerEmail);\n\n            const authenticationResult =\n                await this.bigCommercePaymentsFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                    customerContextId,\n                );\n\n            const { authenticationState, addresses, instruments } =\n                this.bigCommercePaymentsFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                    methodId,\n                    authenticationResult,\n                );\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                authenticationState,\n                addresses,\n                instruments,\n            });\n\n            const isAuthenticationFlowCanceled =\n                authenticationResult.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED;\n\n            if (isAuthenticationFlowCanceled) {\n                this.bigCommercePaymentsFastlaneUtils.removeStorageSessionId();\n            } else {\n                this.bigCommercePaymentsFastlaneUtils.updateStorageSessionId(cart.id);\n            }\n        } catch (error) {\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n    }\n\n    /**\n     *\n     * BigCommercePayments Fastlane Card Component rendering method\n     *\n     */\n    private async initializePayPalPaymentComponent(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const phone = billingAddress.phone;\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const paypalFastlane = this.bigCommercePaymentsFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const cardComponentOptions: PayPalFastlaneCardComponentOptions = {\n            fields: {\n                cardholderName: {\n                    prefill: fullName,\n                    enabled: true,\n                },\n                ...(phone && {\n                    phoneNumber: {\n                        prefill: phone,\n                    },\n                }),\n            },\n        };\n\n        this.paypalComponentMethods = await paypalFastlane.FastlaneCardComponent(\n            cardComponentOptions,\n        );\n    }\n\n    private renderPayPalPaymentComponent(container?: string): void {\n        const paypalComponentMethods = this.getPayPalComponentMethodsOrThrow();\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render card component because \"container\" argument is not provided.',\n            );\n        }\n\n        paypalComponentMethods.render(container);\n    }\n\n    private getPayPalComponentMethodsOrThrow(): PayPalFastlaneCardComponentMethods {\n        if (!this.paypalComponentMethods) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalComponentMethods;\n    }\n\n    /**\n     *\n     * Payment Payload preparation methods\n     *\n     */\n    private async prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paymentData: VaultedInstrument,\n    ): Promise<Payment<PayPalFastlanePaymentFormattedPayload>> {\n        const { instrumentId } = paymentData;\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        const is3DSEnabled =\n            this.isBigcommercePaymentsFastlaneThreeDSAvailable() &&\n            paymentMethod.config.is3dsEnabled;\n\n        if (!is3DSEnabled) {\n            await this.createOrder(instrumentId);\n        }\n\n        const fastlaneToken = is3DSEnabled ? await this.get3DSNonce(instrumentId) : instrumentId;\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: this.orderId,\n                        token: fastlaneToken,\n                    },\n                },\n            },\n        };\n    }\n\n    private async preparePaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Promise<Payment<PayPalFastlanePaymentFormattedPayload>> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const { getPaymentToken } = this.getPayPalComponentMethodsOrThrow();\n\n        const { id } = await getPaymentToken({\n            name: { fullName },\n            billingAddress:\n                this.bigCommercePaymentsFastlaneUtils.mapBcToPayPalAddress(billingAddress),\n        });\n\n        const is3DSEnabled =\n            this.isBigcommercePaymentsFastlaneThreeDSAvailable() &&\n            paymentMethod.config.is3dsEnabled;\n\n        if (!is3DSEnabled) {\n            await this.createOrder(id);\n        }\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const fastlaneToken = is3DSEnabled ? await this.get3DSNonce(id) : id;\n\n        return {\n            methodId,\n            paymentData: {\n                ...paymentData,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: this.orderId,\n                        token: fastlaneToken,\n                    },\n                },\n            },\n        };\n    }\n\n    private async createOrder(id: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        if (this.methodId) {\n            const { orderId } = await this.bigCommercePaymentsRequestSender.createOrder(\n                this.methodId,\n                {\n                    cartId,\n                    fastlaneToken: id,\n                },\n            );\n\n            this.orderId = orderId;\n        }\n    }\n\n    /**\n     *\n     * 3DSecure methods\n     *\n     * */\n    private async get3DSNonce(paypalNonce: string): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const order = state.getOrderOrThrow();\n        const checkoutUrl = state.getStoreConfigOrThrow().links.checkoutLink;\n\n        const threeDomainSecureComponent = this.paypalFastlaneSdk?.ThreeDomainSecureClient;\n\n        if (!threeDomainSecureComponent) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const threeDomainSecureParameters = {\n            amount: order.orderAmount.toFixed(2),\n            currency: cart.currency.code,\n            nonce: paypalNonce,\n            threeDSRequested: this.threeDSVerificationMethod === 'SCA_ALWAYS',\n            transactionContext: {\n                experience_context: {\n                    locale: 'en-US',\n                    return_url: checkoutUrl,\n                    cancel_url: checkoutUrl,\n                },\n            },\n        };\n\n        const isThreeDomainSecureEligible = await threeDomainSecureComponent.isEligible(\n            threeDomainSecureParameters,\n        );\n\n        if (isThreeDomainSecureEligible) {\n            const { liabilityShift, authenticationState, nonce } =\n                await threeDomainSecureComponent.show();\n\n            if (\n                liabilityShift === LiabilityShiftEnum.No ||\n                liabilityShift === LiabilityShiftEnum.Unknown\n            ) {\n                throw new PaymentMethodInvalidError();\n            }\n\n            await this.createOrder(paypalNonce);\n\n            if (authenticationState === TDSecureAuthenticationState.Succeeded) {\n                return nonce;\n            }\n\n            // Cancelled or errored, merchant can choose to send the customer back to 3D Secure or submit a payment and or vault the payment token.\n            if (authenticationState === TDSecureAuthenticationState.Errored) {\n                throw new PaymentMethodInvalidError();\n            }\n\n            if (authenticationState === TDSecureAuthenticationState.Cancelled) {\n                console.error('3DS check was canceled');\n                throw new PaymentMethodInvalidError();\n            }\n        }\n\n        return paypalNonce;\n    }\n\n    /**\n     *\n     * BigCommercePayments Fastlane instrument change\n     *\n     */\n    private async handlePayPalStoredInstrumentChange(\n        methodId: string,\n    ): Promise<CardInstrument | undefined> {\n        const paypalAxoSdk = this.bigCommercePaymentsFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const { selectionChanged, selectedCard } = await paypalAxoSdk.profile.showCardSelector();\n\n        if (selectionChanged) {\n            const state = this.paymentIntegrationService.getState();\n            const paymentProviderCustomer = state.getPaymentProviderCustomer();\n            const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n                ? paymentProviderCustomer\n                : {};\n\n            const selectedInstrument =\n                this.bigCommercePaymentsFastlaneUtils.mapPayPalToBcInstrument(\n                    methodId,\n                    selectedCard,\n                )[0];\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                ...paypalFastlaneCustomer,\n                instruments: [selectedInstrument],\n            });\n\n            return selectedInstrument;\n        }\n\n        return undefined;\n    }\n\n    /**\n     *\n     * Bigcommerce Payments Fastlane experiments handling\n     *\n     */\n    private isBigcommercePaymentsFastlaneThreeDSAvailable(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        return isExperimentEnabled(features, 'PROJECT-7080.bcp_fastlane_three_ds');\n    }\n\n    private handleError(error: unknown): void {\n        if (\n            this.bigcommerce_payments_fastlane?.onError &&\n            typeof this.bigcommerce_payments_fastlane.onError === 'function'\n        ) {\n            this.bigcommerce_payments_fastlane.onError(error);\n        }\n    }\n}\n","export interface BigcommerceFastlaneRequestError {\n    name: string;\n    message: string;\n    response: {\n        name: string;\n    };\n}\n\nexport default function isBigcommerceFastlaneRequestError(\n    error: unknown,\n): error is BigcommerceFastlaneRequestError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'message' in error &&\n        'response' in error &&\n        'name' in (error as BigcommerceFastlaneRequestError).response\n    );\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    createBigCommercePaymentsFastlaneUtils,\n    createBigCommercePaymentsSdk,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsRequestSender from '../bigcommerce-payments-request-sender';\n\nimport BigCommercePaymentsFastlanePaymentStrategy from './bigcommerce-payments-fastlane-payment-strategy';\n\nconst createBigCommercePaymentsFastlanePaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsFastlanePaymentStrategy\n> = (paymentIntegrationService) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new BigCommercePaymentsFastlanePaymentStrategy(\n        paymentIntegrationService,\n        new BigCommercePaymentsRequestSender(createRequestSender({ host: getHost() })),\n        createBigCommercePaymentsSdk(),\n        createBigCommercePaymentsFastlaneUtils(),\n    );\n};\n\nexport default toResolvableModule(createBigCommercePaymentsFastlanePaymentStrategy, [\n    { id: 'bigcommerce_payments_fastlane' }, // BigCommercePayments Fastlane relates to 'bigcommerce_payments_fastlane' method id\n]);\n","import { MessagesStyleOptions, PayPalBNPLConfigurationItem } from '../bigcommerce-payments-types';\n\nfunction getPaypalMessagesStylesFromBNPLConfig({\n    styles,\n}: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n    const messagesStyles: MessagesStyleOptions = {};\n\n    if (styles.color) {\n        messagesStyles.color = styles.color;\n    }\n\n    if (styles.layout) {\n        messagesStyles.layout = styles.layout;\n    }\n\n    if (styles['logo-type'] || styles['logo-position']) {\n        messagesStyles.logo = {};\n\n        if (styles['logo-type']) {\n            messagesStyles.logo.type = styles['logo-type'];\n        }\n\n        if (styles['logo-position']) {\n            messagesStyles.logo.position = styles['logo-position'];\n        }\n    }\n\n    if (styles.ratio) {\n        messagesStyles.ratio = styles.ratio;\n    }\n\n    if (styles['text-color'] || styles['text-size']) {\n        messagesStyles.text = {};\n\n        if (styles['text-color']) {\n            messagesStyles.text.color = styles['text-color'];\n        }\n\n        if (styles['text-size']) {\n            messagesStyles.text.size = +styles['text-size'];\n        }\n    }\n\n    return messagesStyles;\n}\n\nexport default getPaypalMessagesStylesFromBNPLConfig;\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import {\n    BigCommercePaymentsInitializationData,\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalMessagesSdk,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    ClickCallbackActions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPayLaterPaymentInitializeOptions, {\n    WithBigCommercePaymentsPayLaterPaymentInitializeOptions,\n} from './bigcommerce-payments-paylater-payment-initialize-options';\n\nexport default class BigCommercePaymentsPayLaterPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private bigCommercePaymentsButtons?: BigCommercePaymentsButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n        private paypalSdkHelper: PayPalSdkHelper,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions &\n            WithBigCommercePaymentsPayLaterPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_paylater } = options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_paylater) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paypalBNPLConfiguration = [], orderId } = paymentMethod.initializationData || {};\n        const { bannerContainerId, container } = bigcommerce_payments_paylater;\n\n        if (bannerContainerId !== undefined) {\n            if (!document.getElementById(bannerContainerId)) {\n                // eslint-disable-next-line no-console\n                console.error('Unable to create banner without valid banner container ID.');\n\n                return;\n            }\n\n            const bannerConfiguration =\n                paypalBNPLConfiguration &&\n                paypalBNPLConfiguration.find(({ id }) => id === 'checkout');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            const paypalMessages = await this.paypalSdkHelper.getPayPalMessages(\n                paymentMethod,\n                state.getCartOrThrow().currency.code,\n            );\n\n            return this.renderMessages(paypalMessages, bannerContainerId, bannerConfiguration);\n        }\n\n        // Info:\n        // The BigCommercePayments button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render BigCommercePayments button.\n        if (orderId) {\n            this.orderId = orderId;\n\n            return;\n        }\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = container?.split('#')[1];\n\n        this.renderButton(methodId, bigcommerce_payments_paylater);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.bigCommercePaymentsIntegrationService.submitPayment(\n            payment.methodId,\n            this.orderId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.bigCommercePaymentsButtons?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments_paylater: BigCommercePaymentsPayLaterPaymentInitializeOptions,\n    ): void {\n        if (!bigcommerce_payments_paylater?.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        const bigCommerceSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } =\n            bigcommerce_payments_paylater;\n\n        const fundingSources = [bigCommerceSdk.FUNDING.PAYLATER, bigCommerceSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (hasRenderedSmartButton) {\n                return;\n            }\n\n            const buttonOptions: BigCommercePaymentsButtonsOptions = {\n                fundingSource,\n                style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(\n                    checkoutPaymentButtonStyles,\n                ),\n                createOrder: () =>\n                    this.bigCommercePaymentsIntegrationService.createOrder(\n                        'bigcommerce_payments_paylater',\n                    ),\n                onClick: (_, actions) => this.handleClick(actions, onValidate),\n                onApprove: (data) => this.handleApprove(data, submitForm),\n                onCancel: () => this.toggleLoadingIndicator(false),\n                onError: (error) => this.handleError(error, onError),\n            };\n\n            this.bigCommercePaymentsButtons = bigCommerceSdk.Buttons(buttonOptions);\n\n            if (\n                !this.bigCommercePaymentsButtons.isEligible() &&\n                fundingSource === bigCommerceSdk.FUNDING.PAYLATER\n            ) {\n                return;\n            }\n\n            if (\n                !this.bigCommercePaymentsButtons.isEligible() &&\n                fundingSource === bigCommerceSdk.FUNDING.CREDIT\n            ) {\n                throw new NotImplementedError(\n                    `BigCommercePayments ${fundingSource} is not available for your region. Please use BigCommercePayments Checkout instead.`,\n                );\n            }\n\n            if (onRenderButton && typeof onRenderButton === 'function') {\n                onRenderButton();\n            }\n\n            this.bigCommercePaymentsButtons.render(container);\n            hasRenderedSmartButton = true;\n        });\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: BigCommercePaymentsPayLaterPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        if (onValidate && typeof onValidate === 'function') {\n            await onValidate(onValidationPassed, reject);\n        }\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsPayLaterPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        if (submitForm && typeof submitForm === 'function') {\n            submitForm();\n        }\n    }\n\n    private handleError(\n        error: Error,\n        onError: BigCommercePaymentsPayLaterPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Render Pay Later Messages\n     *\n     * */\n    private renderMessages(\n        paypalMessages: PayPalMessagesSdk,\n        bannerContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'payment',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        paypalMessages.Messages(paypalMessagesOptions).render(`#${bannerContainerId}`);\n    }\n}\n","import { createBigCommercePaymentsSdk } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPayLaterPaymentStrategy from './bigcommerce-payments-paylater-payment-strategy';\n\nconst createBigCommercePaymentsPayLaterPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsPayLaterPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPayLaterPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n        createBigCommercePaymentsSdk(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPayLaterPaymentStrategy, [\n    { id: 'bigcommerce_payments_paylater' },\n]);\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { noop } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    BigCommercePaymentsInitializationData,\n    BirthDate,\n    PayPalOrderStatus,\n} from '../bigcommerce-payments-types';\n\nimport {\n    BigCommercePaymentsRatePayPaymentInitializeOptions,\n    WithBigCommercePaymentsRatePayPaymentInitializeOptions,\n} from './bigcommerce-payments-ratepay-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class BigCommercePaymentsRatePayPaymentStrategy implements PaymentStrategy {\n    private guid?: string;\n    private bigcommerce_payments_ratepay?: BigCommercePaymentsRatePayPaymentInitializeOptions;\n    private loadingIndicatorContainer?: string;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBigCommercePaymentsRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, bigcommerce_payments_ratepay } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_ratepay) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_ratepay\" argument is not provided.`,\n            );\n        }\n\n        const { legalTextContainer, container, loadingContainerId } = bigcommerce_payments_ratepay;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.container\" argument is not provided.`,\n            );\n        }\n\n        if (!legalTextContainer) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.legalTextContainer\" argument is not provided.`,\n            );\n        }\n\n        if (!loadingContainerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.loadingContainerId\" argument is not provided.`,\n            );\n        }\n\n        this.loadingIndicatorContainer = loadingContainerId;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { merchantId } = paymentMethod.initializationData || {};\n\n        if (!merchantId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because merchantId argument is not provided.`,\n            );\n        }\n\n        this.bigcommerce_payments_ratepay = bigcommerce_payments_ratepay;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        this.createFraudNetScript(merchantId, methodId, gatewayId);\n\n        this.loadFraudnetConfig();\n\n        this.renderLegalText(legalTextContainer, container);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        const { getFieldsValues } = this.bigcommerce_payments_ratepay || {};\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!getFieldsValues || typeof getFieldsValues !== 'function') {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.getFieldsValues\" argument is not provided.`,\n            );\n        }\n\n        this.toggleLoadingIndicator(true);\n\n        try {\n            const orderId = await this.bigCommercePaymentsIntegrationService.createOrder(\n                'bigcommerce_payments_apmscheckout',\n                { metadataId: this.guid },\n            );\n\n            const { ratepayBirthDate, ratepayPhoneNumber, ratepayPhoneCountryCode } =\n                getFieldsValues();\n\n            const paymentData = {\n                formattedPayload: {\n                    vault_payment_instrument: null,\n                    set_as_default_stored_instrument: null,\n                    device_info: null,\n                    method_id: payment.methodId,\n                    rate_pay: {\n                        birth_date: this.normalizeDate(ratepayBirthDate),\n                        phone: {\n                            national_number: ratepayPhoneNumber,\n                            country_code: ratepayPhoneCountryCode.split('+')[1],\n                        },\n                    },\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n\n            return await new Promise((resolve, reject) => {\n                this.initializePollingMechanism(\n                    payment.methodId,\n                    resolve,\n                    reject,\n                    payment.gatewayId,\n                );\n            });\n        } catch (error: unknown) {\n            this.handleError(error);\n\n            return new Promise((_resolve, reject) => reject());\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        const { legalTextContainer } = this.bigcommerce_payments_ratepay || {};\n        const fraudNetScript = document.querySelectorAll('[data-id=\"fraudnetScript\"]')[0];\n        const fraudNetConfig = document.querySelectorAll('[data-id=\"fraudnetConfig\"]')[0];\n\n        this.deinitializePollingMechanism();\n\n        fraudNetScript.remove();\n        fraudNetConfig.remove();\n\n        if (legalTextContainer) {\n            const legalTextContainerElement = document.getElementById(legalTextContainer);\n\n            legalTextContainerElement?.remove();\n        }\n\n        return Promise.resolve();\n    }\n\n    private normalizeDate(date: BirthDate) {\n        const formattedDate = this.formatDate(date.getDate());\n        const formattedMonth = this.formatDate(date.getMonth() + 1);\n\n        return `${date.getFullYear()}-${formattedMonth}-${formattedDate}`;\n    }\n\n    private formatDate(date: number): string {\n        return `${date < 10 ? 0 : ''}${date}`;\n    }\n\n    private renderLegalText(legalTextContainerElementId: string, container: string) {\n        const legalTextContainerId = legalTextContainerElementId;\n        const buttonContainerId = container.split('#')[1];\n        const buttonContainer = document.getElementById(buttonContainerId);\n        const buttonContainerParent = buttonContainer?.parentNode;\n        const legalTextContainer = document.createElement('div');\n\n        legalTextContainer.style.marginBottom = '20px';\n        legalTextContainer.setAttribute('id', legalTextContainerId);\n        buttonContainerParent?.prepend(legalTextContainer);\n\n        const bigCommercePaymentsSdk =\n            this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const ratePayButton = bigCommercePaymentsSdk.Legal({\n            fundingSource: bigCommercePaymentsSdk.Legal.FUNDING.PAY_UPON_INVOICE,\n        });\n        const legalTextContainerElement = document.getElementById(legalTextContainerId);\n\n        if (legalTextContainerElement) {\n            ratePayButton.render(`#${legalTextContainerId}`);\n        } else {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"legalTextContainerElement\" argument is not found.`,\n            );\n        }\n    }\n\n    private handleError(error: unknown): void {\n        const { onError } = this.bigcommerce_payments_ratepay || {};\n\n        this.resetPollingMechanism();\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private createFraudNetScript(merchantId: string, methodId: string, gatewayId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n        const { testMode } = paymentMethod.config;\n        const scriptElement = document.createElement('script');\n\n        scriptElement.setAttribute('type', 'application/json');\n        scriptElement.setAttribute('fncls', 'fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99');\n        scriptElement.setAttribute('data-id', 'fraudnetScript');\n        this.guid = this.generateGUID();\n\n        const fraudNetConfig = {\n            f: this.guid,\n            s: `${merchantId}_checkout-page`,\n            sandbox: testMode,\n        };\n\n        scriptElement.innerHTML = JSON.stringify(fraudNetConfig);\n        document.body.appendChild(scriptElement);\n    }\n\n    private generateGUID() {\n        let guid = '';\n        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        for (let i = 0; i < 32; i += 1) {\n            const randomIndex = Math.floor(Math.random() * characters.length);\n\n            guid += characters[randomIndex];\n        }\n\n        return guid;\n    }\n\n    private loadFraudnetConfig() {\n        const script = document.createElement('script');\n\n        script.setAttribute('data-id', 'fraudnetConfig');\n        script.src = 'https://c.paypal.com/da/r/fb.js';\n        document.body.appendChild(script);\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions & WithBigCommercePaymentsRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: () => void,\n        rejectPromise: () => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.bigCommercePaymentsIntegrationService.getOrderStatus(\n                'bigcommerce_payments_apms',\n                {\n                    params: {\n                        useMetadata: true,\n                    },\n                },\n            );\n\n            const isOrderApproved = orderStatus === PayPalOrderStatus.PollingStop;\n            const isPollingError = orderStatus === PayPalOrderStatus.PollingError;\n\n            if (isOrderApproved) {\n                this.deinitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (!isOrderApproved && this.pollingTimer < this.maxPollingIntervalTime) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                bigcommerce_payments_ratepay: this.bigcommerce_payments_ratepay,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            this.handleError(error);\n            rejectPromise();\n        }\n    }\n\n    private deinitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deinitializePollingMechanism();\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsRatePayPaymentStrategy from './bigcommerce-payments-ratepay-payment-strategy';\n\nconst createBigCommercePaymentsRatePayPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsRatePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsRatePayPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: { ...LOADING_INDICATOR_STYLES, position: 'fixed' },\n        }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsRatePayPaymentStrategy, [\n    { gateway: 'bigcommerce_payments_apms', id: 'ratepay' },\n]);\n","// copied from packages/core/src/hosted-form/hosted-field-type.ts\n\nenum HostedFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n    CardExpiryVerification = 'cardExpiryVerification',\n}\n\nexport default HostedFieldType;\n","import HostedFieldType from './hosted-field-type';\nimport { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\n\nexport default function isCreditCardFormFields(\n    fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n): fields is HostedCardFieldOptionsMap {\n    return (\n        HostedFieldType.CardNumber in fields &&\n        HostedFieldType.CardName in fields &&\n        HostedFieldType.CardExpiry in fields\n    );\n}\n","import HostedFieldType from './hosted-field-type';\nimport { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\n\nexport default function isCreditCardVaultedFormFields(\n    fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n): fields is HostedStoredCardFieldOptionsMap {\n    return (\n        HostedFieldType.CardNumberVerification in fields &&\n        HostedFieldType.CardCodeVerification in fields &&\n        HostedFieldType.CardExpiryVerification in fields\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport {\n    BigCommercePaymentsFastlaneUtils,\n    BigCommercePaymentsInitializationData,\n    isBigCommercePaymentsFastlaneCustomer,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    HostedCardFieldOptions,\n    HostedCardFieldOptionsMap,\n    HostedFieldBlurEventData,\n    HostedFieldEnterEventData,\n    HostedFieldFocusEventData,\n    HostedFieldStylesMap,\n    HostedFieldType,\n    HostedFieldValidateEventData,\n    HostedFormOptions,\n    HostedInputValidateErrorData,\n    HostedInputValidateErrorDataMap,\n    HostedInstrument,\n    HostedStoredCardFieldOptionsMap,\n    InvalidArgumentError,\n    isCreditCardFormFields,\n    isCreditCardVaultedFormFields,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    BigCommercePaymentsCardFields,\n    BigCommercePaymentsCardFieldsConfig,\n    BigCommercePaymentsCardFieldsOnApproveData,\n    BigCommercePaymentsCardFieldsState,\n    BigCommercePaymentsFields,\n    BigCommercePaymentsHostedFieldsRenderOptions,\n    LiabilityShiftEnum,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsCreditCardsPaymentInitializeOptions, {\n    WithBigCommercePaymentsCreditCardsPaymentInitializeOptions,\n} from './bigcommerce-payments-credit-cards-payment-initialize-options';\n\nexport default class BigCommercePaymentsCreditCardsPaymentStrategy implements PaymentStrategy {\n    private executionPaymentData?: OrderPaymentRequestBody['paymentData'];\n    private isCreditCardForm?: boolean;\n    private isCreditCardVaultedForm?: boolean;\n\n    private cardFields?: BigCommercePaymentsCardFields;\n    private cvvField?: BigCommercePaymentsFields;\n    private expiryField?: BigCommercePaymentsFields;\n    private numberField?: BigCommercePaymentsFields;\n    private nameField?: BigCommercePaymentsFields;\n\n    private hostedFormOptions?: HostedFormOptions;\n    private returnedOrderId?: string;\n    private returnedVaultedToken?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private bigCommercePaymentsSdk: PayPalSdkHelper,\n        private bigCommercePaymentsFastlaneUtils: BigCommercePaymentsFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions &\n            WithBigCommercePaymentsCreditCardsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_creditcards } = options;\n        const bigCommercePaymentsInitializationOptions = bigcommerce_payments_creditcards;\n\n        const { form, onCreditCardFieldsRenderingError } =\n            bigCommercePaymentsInitializationOptions || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!form) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.bigcommerce_payments_creditcards.form\" argument is not provided.',\n            );\n        }\n\n        this.hostedFormOptions = form;\n\n        this.isCreditCardForm = isCreditCardFormFields(form.fields);\n        this.isCreditCardVaultedForm =\n            isCreditCardVaultedFormFields(form.fields) && !this.hasUndefinedValues();\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            undefined,\n            true,\n            true,\n        );\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.initializeFields(form, onCreditCardFieldsRenderingError);\n        }\n\n        if (this.shouldInitializePayPalFastlane(methodId)) {\n            await this.initializePayPalFastlaneOrThrow(methodId);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { methodId, paymentData } = payment || {};\n\n        if (!payment || !methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        this.executionPaymentData = paymentData;\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.validateHostedFormOrThrow();\n            await this.submitHostedForm();\n        } else {\n            // The condition gets triggered when customer pays with vaulted instrument and shipping address is trusted\n            const { orderId } =\n                await this.bigCommercePaymentsIntegrationService.createOrderCardFields(\n                    'bigcommerce_payments_creditcardscheckout',\n                    this.getInstrumentParams(),\n                );\n\n            this.returnedOrderId = orderId;\n        }\n\n        const submitPaymentPayload = this.preparePaymentPayload(\n            methodId,\n            paymentData,\n            this.returnedOrderId,\n            this.returnedVaultedToken,\n        );\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paymentIntegrationService.submitPayment(submitPaymentPayload);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.cvvField?.close();\n        await this.expiryField?.close();\n        await this.numberField?.close();\n        await this.nameField?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Submit Payment Payload preparing method\n     *\n     * `vaultedToken` is used when we pay with vaulted instrument (with trusted shipping address and untrusted)\n     * `setupToken` is used when we pay with vaulted instrument (untrusted shipping address)\n     * `orderId` is used in every case (basic card payment, trusted shipping address and untrusted)\n     */\n    private preparePaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n        orderId?: string,\n        nonce?: string,\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const instrumentId =\n            paymentData && isVaultedInstrument(paymentData) ? paymentData.instrumentId : undefined;\n\n        const bigpay_token = omitBy(\n            {\n                verification_nonce: nonce,\n                token: instrumentId,\n            },\n            isNil,\n        );\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                instrumentId,\n                formattedPayload: {\n                    ...(nonce || instrumentId ? { bigpay_token } : {}),\n                    ...(orderId ? { card_with_order: { order_id: orderId } } : {}),\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Card fields initialize\n     *\n     */\n    private async initializeFields(\n        formOptions: HostedFormOptions,\n        onCreditCardFieldsRenderingError?: BigCommercePaymentsCreditCardsPaymentInitializeOptions['onCreditCardFieldsRenderingError'],\n    ): Promise<void> {\n        const { fields, styles } = formOptions;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const executeCallback = this.getExecuteCallback(fields);\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        const cardFieldsConfig: BigCommercePaymentsCardFieldsConfig = {\n            style: this.getInputStyles(styles),\n            onApprove: ({\n                orderID,\n                vaultSetupToken,\n                liabilityShift,\n            }: BigCommercePaymentsCardFieldsOnApproveData) => {\n                if (\n                    features?.['PAYPAL-4591.paypal_commerce_3ds_verification'] &&\n                    (liabilityShift === LiabilityShiftEnum.No ||\n                        liabilityShift === LiabilityShiftEnum.Unknown)\n                ) {\n                    throw new Error();\n                }\n\n                return this.handleApprove({ orderID, vaultSetupToken });\n            },\n            onError: () => {\n                throw new PaymentMethodFailedError();\n            },\n            inputEvents: {\n                onChange: (event) => this.onChangeHandler(formOptions, event),\n                onFocus: (event) => this.onFocusHandler(formOptions, event),\n                onBlur: (event) => this.onBlurHandler(formOptions, event),\n                onInputSubmitRequest: (event) => this.onInputSubmitRequest(formOptions, event),\n            },\n            ...executeCallback,\n        };\n\n        this.cardFields = await paypalSdk.CardFields(cardFieldsConfig);\n\n        if (!this.cardFields.isEligible()) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            this.stylizeInputContainers(fields);\n\n            if (isCreditCardFormFields(fields)) {\n                await this.renderFields(fields);\n            }\n\n            if (isCreditCardVaultedFormFields(fields)) {\n                await this.renderVaultedFields(fields);\n            }\n        } catch (error: unknown) {\n            if (typeof onCreditCardFieldsRenderingError === 'function') {\n                onCreditCardFieldsRenderingError(error);\n            }\n        }\n    }\n\n    /**\n     *\n     * Get execute callback method\n     * Depends on shipping address is trusted or not we should pass to PP\n     * `createVaultSetupToken` callback if address is untrusted or\n     * `createOrder` if address is trusted\n     *\n     */\n    private getExecuteCallback(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ) {\n        const isVaultedForm = isCreditCardVaultedFormFields(fields);\n\n        return isVaultedForm ? this.createVaultSetupTokenCallback() : this.createOrderCallback();\n    }\n\n    private createVaultSetupTokenCallback() {\n        return {\n            createVaultSetupToken: async () => {\n                const { setupToken } =\n                    (await this.bigCommercePaymentsIntegrationService.createOrderCardFields(\n                        'bigcommerce_payments_creditcardscheckout',\n                        {\n                            ...this.getInstrumentParams(),\n                            setupToken: true,\n                        },\n                    )) || {};\n\n                return setupToken;\n            },\n        };\n    }\n\n    private createOrderCallback() {\n        return {\n            createOrder: async () => {\n                const { orderId } =\n                    (await this.bigCommercePaymentsIntegrationService.createOrderCardFields(\n                        'bigcommerce_payments_creditcardscheckout',\n                        this.getInstrumentParams(),\n                    )) || {};\n\n                return orderId;\n            },\n        };\n    }\n\n    /**\n     *\n     * onApprove method\n     * When submitting a form with a `submitHostedForm` method if there is no error\n     * then onApprove callback is triggered and depends on the flow\n     * we will receive an `orderID` if it's basic paying and `vaultSetupToken` if we are paying\n     * with vaulted instrument and shipping address is untrusted\n     *\n     */\n    private handleApprove({\n        orderID,\n        vaultSetupToken,\n    }: BigCommercePaymentsCardFieldsOnApproveData) {\n        if (orderID) {\n            this.returnedOrderId = orderID;\n        }\n\n        if (vaultSetupToken) {\n            this.returnedVaultedToken = vaultSetupToken;\n        }\n    }\n\n    /**\n     *\n     * Rendering Card Fields methods\n     *\n     */\n    private async renderFields(fieldsOptions: HostedCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCode?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCode.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiry?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiry.containerId}`);\n        }\n\n        if (fieldsOptions.cardName?.containerId) {\n            this.nameField = cardFields.NameField({\n                placeholder: '',\n            });\n            await this.nameField.render(`#${fieldsOptions.cardName.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumber?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumber.containerId}`);\n        }\n    }\n\n    private async renderVaultedFields(fieldsOptions: HostedStoredCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCodeVerification?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCodeVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiryVerification?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiryVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumberVerification?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumberVerification.containerId}`);\n        }\n    }\n\n    /**\n     *\n     * Instrument params method\n     *\n     */\n    private getInstrumentParams(): HostedInstrument | VaultedInstrument {\n        if (!this.executionPaymentData) {\n            return {};\n        }\n\n        if (isHostedInstrumentLike(this.executionPaymentData)) {\n            const { shouldSaveInstrument, shouldSetAsDefaultInstrument } =\n                this.executionPaymentData;\n\n            return {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            };\n        }\n\n        if (isVaultedInstrument(this.executionPaymentData)) {\n            const { instrumentId } = this.executionPaymentData;\n\n            return {\n                instrumentId,\n            };\n        }\n\n        return {};\n    }\n\n    private getFieldTypeByEmittedField({\n        emittedBy,\n    }: BigCommercePaymentsCardFieldsState):\n        | HostedFieldBlurEventData\n        | HostedFieldEnterEventData\n        | HostedFieldFocusEventData {\n        return {\n            fieldType: this.mapFieldType(emittedBy),\n        };\n    }\n\n    /**\n     *\n     * Form submit method\n     * Triggers a form submit\n     *\n     * */\n    private async submitHostedForm() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n\n        const submitConfig = {\n            billingAddress: {\n                company: billingAddress.company,\n                addressLine1: billingAddress.address1,\n                addressLine2: billingAddress.address2,\n                adminArea1: billingAddress.stateOrProvinceCode,\n                adminArea2: billingAddress.city,\n                postalCode: billingAddress.postalCode,\n                countryCode: billingAddress.countryCode,\n            },\n        };\n\n        try {\n            if (this.isCreditCardVaultedForm) {\n                await cardFields.submit();\n            } else {\n                await cardFields.submit(submitConfig);\n            }\n        } catch (_) {\n            throw new PaymentMethodFailedError(\n                'Failed authentication. Please try to authorize again.',\n            );\n        }\n    }\n\n    /**\n     *\n     * Validation and errors\n     *\n     */\n    private async validateHostedFormOrThrow() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const cardFieldsState = await cardFields.getState().then((data) => data);\n        const validationData = this.getValidityData(cardFieldsState);\n\n        if (validationData.isValid) {\n            return;\n        }\n\n        this.hostedFormOptions?.onValidate?.(validationData);\n\n        throw new PaymentInvalidFormError(this.mapValidationErrors(validationData.errors));\n    }\n\n    private getValidityData({\n        fields,\n    }: BigCommercePaymentsCardFieldsState): HostedFieldValidateEventData {\n        const updatedFields = { ...fields };\n\n        delete updatedFields.cardNameField;\n\n        const fieldsKeys = Object.keys(updatedFields) as Array<\n            keyof BigCommercePaymentsCardFieldsState['fields']\n        >;\n\n        const isValid = fieldsKeys.every((key) => updatedFields[key]?.isValid);\n\n        const errors = fieldsKeys.reduce((fieldsErrors, key) => {\n            const fieldType = this.mapFieldType(key);\n\n            return {\n                ...fieldsErrors,\n                [fieldType]: updatedFields[key]?.isValid\n                    ? undefined\n                    : [this.getInvalidErrorByFieldType(fieldType)],\n            };\n        }, {});\n\n        return { isValid, errors };\n    }\n\n    private getInvalidErrorByFieldType(fieldType: string): HostedInputValidateErrorData {\n        switch (fieldType) {\n            case HostedFieldType.CardCode:\n            case HostedFieldType.CardCodeVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                };\n\n            case HostedFieldType.CardNumber:\n            case HostedFieldType.CardNumberVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                };\n\n            case HostedFieldType.CardExpiry:\n            case HostedFieldType.CardExpiryVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card expiry',\n                    type: 'invalid_card_expiry',\n                };\n\n            default:\n                return {\n                    fieldType,\n                    message: 'Invalid field',\n                    type: 'invalid',\n                };\n        }\n    }\n\n    private mapValidationErrors(\n        validationErrors: HostedInputValidateErrorDataMap = {},\n    ): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n        const validationErrorsKeys = Object.keys(validationErrors) as Array<\n            keyof HostedInputValidateErrorDataMap\n        >;\n\n        validationErrorsKeys.forEach((key) => {\n            errors[key] = [\n                {\n                    message: validationErrors[key]?.[0]?.message || '',\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n\n    /**\n     *\n     * Fields mappers\n     *\n     */\n    private mapFieldType(type: string): HostedFieldType {\n        switch (type) {\n            case 'name':\n                return HostedFieldType.CardName;\n\n            case 'cardNumberField':\n            case 'number':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardNumber\n                    : HostedFieldType.CardNumberVerification;\n\n            case 'cardExpiryField':\n            case 'expiry':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardExpiry\n                    : HostedFieldType.CardExpiryVerification;\n\n            case 'cardCvvField':\n            case 'cvv':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardCode\n                    : HostedFieldType.CardCodeVerification;\n\n            default:\n                throw new Error('Unexpected field type');\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     */\n    private getCardFieldsOrThrow(): BigCommercePaymentsCardFields {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.cardFields;\n    }\n\n    private getInputStyles(\n        styles?: HostedFieldStylesMap,\n    ): BigCommercePaymentsHostedFieldsRenderOptions['styles'] {\n        const commonStyles = {\n            'font-size': styles?.default?.fontSize || '1rem',\n            'font-family':\n                styles?.default?.fontFamily || 'Montserrat, Arial, Helvetica, sans-serif',\n            'font-weight': styles?.default?.fontWeight || '400',\n            outline: 'none',\n            padding: '9px 13px',\n        };\n\n        const defaultStyles = { ...commonStyles, color: '#333333' };\n        const errorStyles = { ...commonStyles, color: 'red' };\n\n        return {\n            input: defaultStyles,\n            '.invalid': errorStyles,\n            '.valid': defaultStyles,\n            ':focus': defaultStyles,\n        };\n    }\n\n    private stylizeInputContainers(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ): void {\n        Object.values(fields || {}).forEach((id: HostedCardFieldOptions) => {\n            const element = document.getElementById(`${id?.containerId || ''}`);\n\n            if (element) {\n                element.style.padding = '0px';\n                element.style.boxShadow = 'none';\n                element.style.border = 'none';\n                element.style.background = 'transparent';\n                element.style.marginBottom = '10px';\n                element.style.marginLeft = '-5px';\n            }\n        });\n    }\n\n    private hasUndefinedValues() {\n        if (this.hostedFormOptions) {\n            return Object.values(this.hostedFormOptions.fields).some(\n                (value) => value === undefined,\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     *\n     * Input events methods\n     *\n     */\n    private onChangeHandler(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onValidate?.(this.getValidityData(event));\n    }\n\n    private onFocusHandler(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onFocus?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onBlurHandler(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onBlur?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onInputSubmitRequest(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onEnter?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    /**\n     *\n     * BigCommercePayments Accelerated checkout related methods\n     *\n     */\n    // TODO: remove this part when BCP Fastlane A/B testing will be finished\n    private shouldInitializePayPalFastlane(methodId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const bigCommercePaymentsPaymentProviderCustomer = isBigCommercePaymentsFastlaneCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        return (\n            paymentMethod?.initializationData?.isAcceleratedCheckoutEnabled &&\n            paymentMethod?.initializationData?.isBigCommercePaymentsAnalyticsV2Enabled &&\n            !bigCommercePaymentsPaymentProviderCustomer?.authenticationState\n        );\n    }\n\n    // TODO: remove this part when BCP Fastlane A/B testing will be finished\n    private async initializePayPalFastlaneOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n            const { initializationData } = paymentMethod;\n\n            if (!initializationData?.connectClientToken) {\n                return;\n            }\n\n            const payPalFastlaneSdk = await this.bigCommercePaymentsSdk.getPayPalFastlaneSdk(\n                paymentMethod,\n                cart.currency.code,\n                cart.id,\n            );\n\n            await this.bigCommercePaymentsFastlaneUtils.initializePayPalFastlane(\n                payPalFastlaneSdk,\n                !!initializationData?.isDeveloperModeApplicable,\n            );\n        } catch (_: unknown) {\n            // We should avoid throwing any error from this flow to do no brake default flow\n            // This flow is optional\n        }\n    }\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isBigCommercePaymentsFastlaneCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    createBigCommercePaymentsFastlaneUtils,\n    createBigCommercePaymentsSdk,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsCreditCardsPaymentStrategy from './bigcommerce-payments-credit-cards-payment-strategy';\n\nconst createBigCommercePaymentsCreditCardsPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsCreditCardsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsCreditCardsPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        createBigCommercePaymentsSdk(),\n        createBigCommercePaymentsFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsCreditCardsPaymentStrategy, [\n    { id: 'bigcommerce_payments_creditcards' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    PayPalApmSdk,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    NonInstantAlternativePaymentMethods,\n    PayPalOrderStatus,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions, {\n    WithBigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n} from './bigcommerce-payments-alternative-methods-payment-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class BigCommercePaymentsAlternativeMethodsPaymentStrategy\n    implements PaymentStrategy\n{\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private bigCommercePaymentsButton?: BigCommercePaymentsButtons;\n    private paypalApms?: PayPalApmSdk;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n    private isPollingEnabled = false;\n    private bigCommercePaymentsAlternativeMethods?: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private bigCommercePaymentsSdkHelper: PayPalSdkHelper,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions &\n            WithBigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, bigcommerce_payments_apms } = options;\n\n        this.bigCommercePaymentsAlternativeMethods = bigcommerce_payments_apms;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_apms) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms\" argument is not provided.`,\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { orderId, shouldRenderFields } = paymentMethod.initializationData || {};\n\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        this.isPollingEnabled = isExperimentEnabled(features, 'PAYPAL-5624.bcp_ideal_polling');\n\n        // Info:\n        // The APM button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render the button.\n        if (orderId) {\n            this.orderId = orderId;\n\n            return;\n        }\n\n        this.paypalApms = await this.bigCommercePaymentsSdkHelper.getPayPalApmsSdk(\n            paymentMethod,\n            state.getCartOrThrow().currency.code,\n        );\n\n        this.loadingIndicatorContainer = bigcommerce_payments_apms.container.split('#')[1];\n\n        this.renderButton(methodId, gatewayId, bigcommerce_payments_apms);\n\n        if (shouldRenderFields) {\n            this.renderFields(methodId, bigcommerce_payments_apms);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, gatewayId } = payment;\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        if (this.isPollingEnabled && methodId === 'ideal') {\n            await new Promise((resolve, reject) => {\n                void this.initializePollingMechanism(methodId, resolve, reject, gatewayId);\n            });\n        }\n\n        if (!this.isNonInstantPaymentMethod(methodId)) {\n            await this.paymentIntegrationService.submitOrder(order, options);\n        }\n\n        await this.bigCommercePaymentsIntegrationService.submitPayment(\n            methodId,\n            this.orderId,\n            gatewayId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.bigCommercePaymentsButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: (value?: unknown) => void,\n        rejectPromise: (value?: unknown) => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.bigCommercePaymentsIntegrationService.getOrderStatus(\n                gatewayId,\n            );\n\n            const isOrderApproved = orderStatus === PayPalOrderStatus.Approved;\n            const isPollingError = orderStatus === PayPalOrderStatus.PollingError;\n\n            if (isOrderApproved) {\n                this.deInitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (!isOrderApproved && this.pollingTimer < this.maxPollingIntervalTime) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                bigCommercePaymentsAlternativeMethods: this.bigCommercePaymentsAlternativeMethods,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            rejectPromise();\n        }\n    }\n\n    private deInitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deInitializePollingMechanism();\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions &\n            WithBigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ) {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n\n    private handleError(error: unknown) {\n        const { onError } = this.bigCommercePaymentsAlternativeMethods || {};\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        gatewayId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): void {\n        const paypalAmpsSdk = this.getPaypalAmpsSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { buttonStyle } = paymentMethod.initializationData || {};\n\n        const { container, onError, onRenderButton, submitForm } = bigcommerce_payments_apms;\n\n        const buttonOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: methodId,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(buttonStyle),\n            onInit: (_, actions) => bigcommerce_payments_apms.onInitButton(actions),\n            createOrder: () => this.onCreateOrder(methodId, gatewayId, bigcommerce_payments_apms),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => {\n                this.toggleLoadingIndicator(false);\n                this.deInitializePollingMechanism();\n            },\n            onError: (error) => {\n                this.deInitializePollingMechanism();\n                this.handleFailure(error, onError);\n            },\n            onClick: async (_, actions) =>\n                bigcommerce_payments_apms.onValidate(actions.resolve, actions.reject),\n        };\n\n        this.bigCommercePaymentsButton = paypalAmpsSdk.Buttons(buttonOptions);\n\n        if (!this.bigCommercePaymentsButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.bigCommercePaymentsButton.render(container);\n    }\n\n    private async onCreateOrder(\n        methodId: string,\n        gatewayId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): Promise<string> {\n        const { onValidate } = bigcommerce_payments_apms;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return () => Promise.resolve();\n        };\n\n        await onValidate(onValidationPassed, noop);\n\n        const orderId = await this.bigCommercePaymentsIntegrationService.createOrder(\n            'bigcommerce_payments_apms',\n        );\n\n        if (this.isNonInstantPaymentMethod(methodId)) {\n            const order = { useStoreCredit: false };\n            const options = {\n                params: {\n                    methodId,\n                    gatewayId,\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.bigCommercePaymentsIntegrationService.submitPayment(\n                methodId,\n                orderId,\n                gatewayId,\n            );\n        }\n\n        return orderId;\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n    }\n\n    private handleFailure(\n        error: Error,\n        onError: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Fields methods\n     *\n     * */\n    private renderFields(\n        methodId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): void {\n        const paypalAmpsSdk = this.getPaypalAmpsSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const { firstName, lastName, email } = state.getBillingAddressOrThrow();\n\n        const { apmFieldsContainer, apmFieldsStyles } = bigcommerce_payments_apms;\n\n        if (!apmFieldsContainer) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_apms\" argument should contain \"apmFieldsContainer\".',\n            );\n        }\n\n        const fieldContainerElement = document.querySelector(apmFieldsContainer);\n\n        if (fieldContainerElement) {\n            fieldContainerElement.innerHTML = '';\n        }\n\n        const fieldsOptions = {\n            fundingSource: methodId,\n            style: apmFieldsStyles || {},\n            fields: {\n                name: {\n                    value: `${firstName} ${lastName}`,\n                },\n                email: {\n                    value: email,\n                },\n            },\n        };\n\n        const paypalPaymentFields = paypalAmpsSdk.PaymentFields(fieldsOptions);\n\n        paypalPaymentFields.render(apmFieldsContainer);\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     * */\n    private isNonInstantPaymentMethod(methodId: string): boolean {\n        return methodId.toUpperCase() in NonInstantAlternativePaymentMethods;\n    }\n\n    private getPaypalAmpsSdkOrThrow() {\n        if (!this.paypalApms) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalApms;\n    }\n}\n","import { createBigCommercePaymentsSdk } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsAlternativeMethodsPaymentStrategy from './bigcommerce-payments-alternative-methods-payment-strategy';\n\nconst createBigCommercePaymentsAlternativeMethodsPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsAlternativeMethodsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsAlternativeMethodsPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        createBigCommercePaymentsSdk(),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsAlternativeMethodsPaymentStrategy, [\n    { gateway: 'bigcommerce_payments_apms' },\n]);\n","import {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ClickCallbackActions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsVenmoPaymentInitializeOptions, {\n    WithBigCommercePaymentsVenmoPaymentInitializeOptions,\n} from './bigcommerce-payments-venmo-payment-initialize-options';\n\nexport default class BigCommercePaymentsVenmoPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: BigCommercePaymentsButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithBigCommercePaymentsVenmoPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_venmo } = options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_venmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (paymentMethod.initializationData?.orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = bigcommerce_payments_venmo.container.split('#')[1];\n\n        this.renderButton(methodId, bigcommerce_payments_venmo);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.bigCommercePaymentsIntegrationService.submitPayment(\n            payment.methodId,\n            this.orderId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments_venmo: BigCommercePaymentsVenmoPaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } =\n            bigcommerce_payments_venmo;\n\n        const buttonOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_venmo_checkout',\n                ),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => this.toggleLoadingIndicator(false),\n            onError: (error) => this.handleError(error, onError),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            throw new NotImplementedError(\n                `Venmo is not available for your region. Please another payment method instead.`,\n            );\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: BigCommercePaymentsVenmoPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        await onValidate(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsVenmoPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n        this.toggleLoadingIndicator(false);\n    }\n\n    private handleError(\n        error: Error,\n        onError: BigCommercePaymentsVenmoPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsVenmoPaymentStrategy from './bigcommerce-payments-venmo-payment-strategy';\n\nconst createBigCommercePaymentsVenmoPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsVenmoPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsVenmoPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsVenmoPaymentStrategy, [\n    { id: 'bigcommerce_payments_venmo' },\n]);\n","import {\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapDirectPreviouslyUsedCard, BlueSnapDirectSdk } from '../types';\n\nexport default class BlueSnapDirect3ds {\n    private _blueSnapSdk?: BlueSnapDirectSdk;\n\n    initialize(blueSnapSdk: BlueSnapDirectSdk) {\n        this._blueSnapSdk = blueSnapSdk;\n    }\n\n    async initialize3ds(\n        token: string,\n        cardData: BlueSnapDirectPreviouslyUsedCard,\n    ): Promise<string> {\n        const blueSnapSdk = this._getBlueSnapSdk();\n\n        return new Promise((resolve, reject) => {\n            blueSnapSdk.threeDsPaymentsSetup(token, (sdkResponse) => {\n                const code = sdkResponse.code;\n\n                if (code === '1') {\n                    return resolve(sdkResponse.threeDSecure.threeDSecureReferenceId);\n                }\n\n                return reject(new PaymentMethodFailedError());\n            });\n\n            blueSnapSdk.threeDsPaymentsSubmitData(cardData);\n        });\n    }\n\n    private _getBlueSnapSdk(): BlueSnapDirectSdk {\n        return guard(\n            this._blueSnapSdk,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import {\n    HostedCardFieldOptionsMap,\n    HostedFieldOptionsMap,\n    HostedFieldType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isHostedCardFieldOptionsMap(\n    fields: HostedFieldOptionsMap,\n): fields is HostedCardFieldOptionsMap {\n    return HostedFieldType.CardNumber in fields;\n}\n","import {\n    HostedFieldOptionsMap,\n    HostedFieldType,\n    HostedStoredCardFieldOptionsMap,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isHostedStoredCardFieldOptionsMap(\n    fields: HostedFieldOptionsMap,\n): fields is HostedStoredCardFieldOptionsMap {\n    return (\n        HostedFieldType.CardCodeVerification in fields ||\n        HostedFieldType.CardNumberVerification in fields\n    );\n}\n","import { WithCreditCardPaymentInitializeOptions } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    guard,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapDirectSdk, BlueSnapDirectThreeDSecureData } from '../types';\nimport isHostedCardFieldOptionsMap from '../utils/is-hosted-card-field-options-map';\nimport isHostedStoredCardFieldOptionsMap from '../utils/is-hosted-stored-card-field-options-map';\n\nimport BlueSnapDirect3ds from './bluesnap-direct-3ds';\nimport BlueSnapDirectHostedForm from './bluesnap-direct-hosted-form';\nimport BlueSnapDirectScriptLoader from './bluesnap-direct-script-loader';\n\nexport default class BlueSnapDirectCreditCardPaymentStrategy implements PaymentStrategy {\n    private _paymentFieldsToken?: string;\n    private _shouldUseHostedFields?: boolean;\n    private _blueSnapSdk?: BlueSnapDirectSdk;\n\n    constructor(\n        private _scriptLoader: BlueSnapDirectScriptLoader,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _blueSnapDirectHostedForm: BlueSnapDirectHostedForm,\n        private _blueSnapDirect3ds: BlueSnapDirect3ds,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, gatewayId, creditCard } = options;\n\n        if (!gatewayId || !creditCard) {\n            throw new InvalidArgumentError();\n        }\n\n        const state = await this._paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId, bigpayToken: creditCard.bigpayToken },\n        });\n\n        const {\n            config: { testMode, is3dsEnabled },\n            clientToken,\n        } = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        this._blueSnapSdk = await this._scriptLoader.load(testMode);\n\n        this._paymentFieldsToken = clientToken;\n        this._shouldUseHostedFields =\n            isHostedCardFieldOptionsMap(creditCard.form.fields) ||\n            (isHostedStoredCardFieldOptionsMap(creditCard.form.fields) &&\n                !!creditCard.form.fields.cardNumberVerification);\n\n        if (this._shouldUseHostedFields) {\n            this._blueSnapDirectHostedForm.initialize(this._blueSnapSdk, creditCard.form.fields);\n            await this._blueSnapDirectHostedForm.attach(\n                this._getPaymentFieldsToken(),\n                creditCard,\n                is3dsEnabled,\n            );\n        }\n    }\n\n    async execute(payload: OrderRequestBody): Promise<void> {\n        if (!payload.payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this._blueSnapSdk) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { paymentData } = payload.payment;\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        const pfToken = this._getPaymentFieldsToken();\n        let threeDSecureReferenceId;\n\n        const { is3dsEnabled } = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(payload.payment.methodId, payload.payment.gatewayId).config;\n\n        const bluesnapSubmitedForm = this._shouldUseHostedFields\n            ? await this._blueSnapDirectHostedForm\n                  .validate()\n                  .submit(\n                      is3dsEnabled ? this._getBlueSnapDirectThreeDSecureData() : undefined,\n                      !(isHostedInstrumentLike(paymentData) && isVaultedInstrument(paymentData)),\n                  )\n            : undefined;\n\n        await this._paymentIntegrationService.submitOrder();\n\n        if (\n            isHostedInstrumentLike(paymentData) &&\n            isVaultedInstrument(paymentData) &&\n            this._paymentFieldsToken &&\n            paymentData.instrumentId\n        ) {\n            if (is3dsEnabled) {\n                this._blueSnapDirect3ds.initialize(this._blueSnapSdk);\n\n                const { last4, brand } = this._paymentIntegrationService\n                    .getState()\n                    .getCardInstrumentOrThrow(paymentData.instrumentId);\n\n                const previouslyUsedCard = {\n                    last4Digits: last4,\n                    ccType: brand.toUpperCase(),\n                    ...this._getBlueSnapDirectThreeDSecureData(),\n                };\n\n                threeDSecureReferenceId = await this._blueSnapDirect3ds.initialize3ds(\n                    this._paymentFieldsToken,\n                    previouslyUsedCard,\n                );\n            }\n\n            await this._paymentIntegrationService.submitPayment({\n                ...payload.payment,\n                paymentData: {\n                    instrumentId: paymentData.instrumentId,\n                    ...(this._shouldUseHostedFields ? { nonce: pfToken } : {}),\n                    ...(threeDSecureReferenceId\n                        ? { deviceSessionId: threeDSecureReferenceId }\n                        : {}),\n                    shouldSetAsDefaultInstrument: !!shouldSetAsDefaultInstrument,\n                },\n            });\n\n            return;\n        }\n\n        await this._paymentIntegrationService.submitPayment({\n            ...payload.payment,\n            paymentData: {\n                formattedPayload: {\n                    credit_card_token: {\n                        token: JSON.stringify({\n                            pfToken,\n                            cardHolderName:\n                                bluesnapSubmitedForm && bluesnapSubmitedForm.cardHolderName,\n                        }),\n                    },\n                    vault_payment_instrument: shouldSaveInstrument,\n                    set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                },\n            },\n        });\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._shouldUseHostedFields) {\n            this._blueSnapDirectHostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    private _getBlueSnapDirectThreeDSecureData(): BlueSnapDirectThreeDSecureData {\n        const {\n            getBillingAddress,\n            getShippingAddress,\n            getCustomer,\n            getCheckoutOrThrow,\n            getCartOrThrow,\n        } = this._paymentIntegrationService.getState();\n        const billingAddress = getBillingAddress();\n        const shippingAddress = getShippingAddress();\n        const email = getCustomer()?.email || billingAddress?.email;\n        const phone = billingAddress?.phone || shippingAddress?.phone;\n\n        return {\n            amount: getCheckoutOrThrow().outstandingBalance,\n            currency: getCartOrThrow().currency.code,\n            ...(email && { email }),\n            ...(phone && { phone }),\n            ...(billingAddress && {\n                billingFirstName: billingAddress.firstName,\n                billingLastName: billingAddress.lastName,\n                billingCountry: billingAddress.countryCode,\n                billingCity: billingAddress.city,\n                billingAddress: `${billingAddress.address1} ${billingAddress.address2}`.trim(),\n                billingZip: billingAddress.postalCode,\n            }),\n            ...(shippingAddress && {\n                shippingFirstName: shippingAddress.firstName,\n                shippingLastName: shippingAddress.lastName,\n                shippingCountry: shippingAddress.countryCode,\n                shippingCity: shippingAddress.city,\n                shippingAddress: `${shippingAddress.address1} ${shippingAddress.address2}`.trim(),\n                shippingZip: shippingAddress.postalCode,\n            }),\n        };\n    }\n\n    private _getPaymentFieldsToken(): string {\n        return guard(\n            this._paymentFieldsToken,\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentToken),\n        );\n    }\n}\n","export type BluesnapDirectNocInputAllowedStyle = Pick<\n    CSSStyleDeclaration,\n    'color' | 'fontFamily' | 'fontSize' | 'fontWeight'\n>;\n\nexport interface BlueSnapDirectStyleDeclaration {\n    [k: string]: string;\n}\n\nexport interface BlueSnapDirectStyle {\n    '.invalid'?: BlueSnapDirectStyleDeclaration;\n    ':focus'?: BlueSnapDirectStyleDeclaration;\n    input?: BlueSnapDirectStyleDeclaration;\n}\n\nexport enum BlueSnapDirectCardType {\n    AMEX = 'american-express',\n    CHINA_UNION_PAY = 'unionpay',\n    DINERS = 'diners-club',\n    DISCOVER = 'discover',\n    JCB = 'jcb',\n    MASTERCARD = 'mastercard',\n    UNKNOWN = 'unknown',\n    VISA = 'visa',\n}\n\nexport type BlueSnapDirectCardTypeValues = keyof typeof BlueSnapDirectCardType;\n\nexport enum BlueSnapDirectEventOrigin {\n    ON_BLUR = 'onBlur',\n    ON_SUBMIT = 'onSubmit',\n}\n\nexport enum BlueSnapDirectErrorDescription {\n    EMPTY = 'empty',\n    INVALID = 'invalid',\n    THREE_DS_NOT_ENABLED = '3D Secure is not enabled',\n}\n\nexport type BlueSnapDirectInputValidationErrorDescription = Extract<\n    BlueSnapDirectErrorDescription,\n    BlueSnapDirectErrorDescription.EMPTY | BlueSnapDirectErrorDescription.INVALID\n>;\n\nexport enum BlueSnapDirectErrorCode {\n    CC_NOT_SUPORTED = '22013',\n    ERROR_403 = '403',\n    ERROR_404 = '404',\n    ERROR_500 = '500',\n    INVALID_OR_EMPTY = '10',\n    SESSION_EXPIRED = '400',\n    THREE_DS_AUTH_FAILED = '14101',\n    THREE_DS_CLIENT_ERROR = '14103',\n    THREE_DS_MISSING_FIELDS = '14102',\n    THREE_DS_NOT_ENABLED = '14100',\n    TOKEN_EXPIRED = '14040',\n    TOKEN_NOT_ASSOCIATED = '14042',\n    TOKEN_NOT_FOUND = '14041',\n}\n\nexport enum BlueSnapDirectHostedFieldTagId {\n    CardCode = 'cvv',\n    CardExpiry = 'exp',\n    CardName = 'noc',\n    CardNumber = 'ccn',\n}\n\nexport interface BlueSnapDirectHostedPaymentFieldsOptions {\n    token: string;\n    onFieldEventHandler?: {\n        setupComplete?: () => void;\n        threeDsChallengeExecuted?: () => void;\n        onFocus?: (tagId: BlueSnapDirectHostedFieldTagId) => void;\n        onBlur?: (tagId: BlueSnapDirectHostedFieldTagId) => void;\n        onError?: (\n            tagId: BlueSnapDirectHostedFieldTagId | undefined,\n            errorCode: BlueSnapDirectErrorCode,\n            errorDescription: BlueSnapDirectErrorDescription | undefined,\n            eventOrigin: BlueSnapDirectEventOrigin | undefined,\n        ) => void;\n        onType?: (\n            tagId: BlueSnapDirectHostedFieldTagId,\n            cardType: BlueSnapDirectCardTypeValues,\n            cardData: BlueSnapDirectCardData | undefined,\n        ) => void;\n        onEnter?: (tagId: BlueSnapDirectHostedFieldTagId) => void;\n        onValid?: (tagId: BlueSnapDirectHostedFieldTagId) => void;\n    };\n    ccnPlaceHolder?: string;\n    cvvPlaceHolder?: string;\n    expPlaceHolder?: string;\n    style?: BlueSnapDirectStyle;\n    '3DS'?: boolean;\n}\n\ninterface BlueSnapDirectCallback {\n    statusCode: string;\n    transactionFraudInfo: {\n        fraudSessionId: string;\n    };\n}\n\ninterface BlueSnapDirectCardData {\n    binCategory: string;\n    cardSubType: string;\n    ccBin: string;\n    ccType: string;\n    isRegulatedCard: string;\n    issuingCountry: string;\n    last4Digits: string;\n}\n\nexport interface BlueSnapDirectCallbackCardData extends BlueSnapDirectCardData {\n    cardCategory: string;\n    exp: string;\n}\n\ninterface BlueSnapDirectCallbackData extends BlueSnapDirectCallback {\n    cardData: BlueSnapDirectCallbackCardData;\n}\n\nexport interface WithBlueSnapDirectCardHolderName {\n    cardHolderName?: string;\n}\n\ninterface BlueSnapDirectSubmitError {\n    errorCode: string;\n    errorDescription: string;\n    eventType: string;\n    tagId: string;\n}\n\nexport interface BlueSnapDirectCallbackError extends BlueSnapDirectCallback {\n    error: BlueSnapDirectSubmitError[];\n}\n\nexport type BlueSnapDirectCallbackResults =\n    | BlueSnapDirectCallbackData\n    | BlueSnapDirectCallbackError;\n\nexport interface BlueSnapDirectThreeDSecureData {\n    amount: number;\n    currency: string;\n    billingFirstName?: string;\n    billingLastName?: string;\n    billingCountry?: string;\n    billingState?: string;\n    billingCity?: string;\n    billingAddress?: string;\n    billingZip?: string;\n    shippingFirstName?: string;\n    shippingLastName?: string;\n    shippingCountry?: string;\n    shippingState?: string;\n    shippingCity?: string;\n    shippingAddress?: string;\n    shippingZip?: string;\n    email?: string;\n    phone?: string;\n}\n\nexport interface BlueSnapDirectSdk {\n    hostedPaymentFieldsCreate(options: BlueSnapDirectHostedPaymentFieldsOptions): void;\n    hostedPaymentFieldsSubmitData(\n        callback: (results: BlueSnapDirectCallbackResults) => void,\n        threeDSecureData?: BlueSnapDirectThreeDSecureData,\n    ): void;\n    threeDsPaymentsSetup(\n        token: string,\n        callback: (reponse: BlueSnapDirect3dsCallbackResponse) => void,\n    ): void;\n    threeDsPaymentsSubmitData(cardData: BlueSnapDirectPreviouslyUsedCard): void;\n}\n\nexport interface BlueSnapDirectPreviouslyUsedCard {\n    last4Digits?: string;\n    ccType?: string;\n    amount: number;\n    currency: string;\n    billingFirstName?: string;\n    billingLastName?: string;\n    billingCountry?: string;\n    billingState?: string;\n    billingCity?: string;\n    billingAddress?: string;\n    billingZip?: string;\n    shippingFirstName?: string;\n    shippingLastName?: string;\n    shippingCountry?: string;\n    shippingState?: string;\n    shippingCity?: string;\n    shippingAddress?: string;\n    shippingZip?: string;\n    email?: string;\n    phone?: string;\n}\n\nexport interface BlueSnapDirect3dsCallbackResponse {\n    code: string;\n    cardData: BlueSnapDirectCallbackCardData;\n    threeDSecure: {\n        authResult: string;\n        threeDSecureReferenceId: string;\n    };\n}\n\nexport interface BlueSnapDirectHostWindow extends Window {\n    bluesnap?: BlueSnapDirectSdk;\n}\n\nexport interface BlueSnapDirectStyleProps {\n    border?: string;\n    height?: string;\n    width?: string;\n}\n\nexport interface BlueSnapDirectRedirectResponseProviderData {\n    [key: string]: string;\n    merchantid: string;\n}\n\nexport interface BlueSnapDirectRedirectResponse {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n        status: string;\n        provider_data?: string;\n    };\n}\n\n/**\n * A set of options that are required to initialize the BlueSnap V2 payment\n * method.\n *\n * The payment step is done through a web page via an iframe provided by the\n * strategy.\n *\n * ```html\n * <!-- This is where the BlueSnap iframe will be inserted. It can be an in-page container or a modal -->\n * <div id=\"container\"></div>\n *\n * <!-- This is a cancellation button -->\n * <button type=\"button\" id=\"cancel-button\"></button>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'bluesnapDirect',\n *     bluesnapDirect: {\n *         onLoad: (iframe) => {\n *             document.getElementById('container')\n *                 .appendChild(iframe);\n *\n *             document.getElementById('cancel-button')\n *                 .addEventListener('click', () => {\n *                     document.getElementById('container').innerHTML = '';\n *                 });\n *         },\n *     },\n * });\n * ```\n */\nexport interface BlueSnapDirectAPMInitializeOptions {\n    /**\n     * A set of CSS properties to apply to the iframe.\n     */\n    style?: BlueSnapDirectStyleProps;\n\n    /**\n     * A callback that gets called when the iframe is ready to be added to the\n     * current page. It is responsible for determining where the iframe should\n     * be inserted in the DOM.\n     *\n     * @param iframe - The iframe element containing the payment web page\n     * provided by the strategy.\n     * @param cancel - A function, when called, will cancel the payment\n     * process and remove the iframe.\n     */\n    onLoad(iframe: HTMLIFrameElement, cancel: () => void): void;\n}\n\nexport interface WithBlueSnapDirectAPMPaymentInitializeOptions {\n    /**\n     * The options that are required to initialize the Apple Pay payment\n     * method. They can be omitted unless you need to support Apple Pay.\n     */\n    bluesnapdirect?: BlueSnapDirectAPMInitializeOptions;\n}\n","import { HostedFieldType } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapDirectHostedFieldTagId as HostedFieldTagId } from './types';\n\nexport const BlueSnapHostedFieldType: {\n    [HostedFieldTagId.CardNumber]: HostedFieldType.CardNumber;\n    [HostedFieldTagId.CardExpiry]: HostedFieldType.CardExpiry;\n    [HostedFieldTagId.CardName]: HostedFieldType.CardName;\n    [HostedFieldTagId.CardCode]: HostedFieldType.CardCode;\n} = {\n    [HostedFieldTagId.CardNumber]: HostedFieldType.CardNumber,\n    [HostedFieldTagId.CardExpiry]: HostedFieldType.CardExpiry,\n    [HostedFieldTagId.CardName]: HostedFieldType.CardName,\n    [HostedFieldTagId.CardCode]: HostedFieldType.CardCode,\n};\n\nexport const CREDIT_CARD_ERRORS = {\n    empty: {\n        [HostedFieldType.CardNumber]: {\n            fieldType: 'cardNumber',\n            message: 'Credit card number is required',\n            type: 'required',\n        },\n        [HostedFieldType.CardNumberVerification]: {\n            fieldType: 'cardNumber',\n            message: 'Credit card number is required',\n            type: 'required',\n        },\n        [HostedFieldType.CardExpiry]: {\n            fieldType: 'cardExpiry',\n            message: 'Expiration date is required',\n            type: 'required',\n        },\n        [HostedFieldType.CardCode]: {\n            fieldType: 'cardCode',\n            message: 'CVV is required',\n            type: 'required',\n        },\n        [HostedFieldType.CardName]: {\n            fieldType: 'cardName',\n            message: 'Full name is required',\n            type: 'required',\n        },\n    },\n    invalid: {\n        [HostedFieldType.CardNumber]: {\n            fieldType: 'cardNumber',\n            message: 'Credit card number must be valid',\n            type: 'invalid_card_number',\n        },\n        [HostedFieldType.CardNumberVerification]: {\n            fieldType: 'cardNumber',\n            message: 'Credit card number must be valid',\n            type: 'invalid_card_number',\n        },\n        [HostedFieldType.CardExpiry]: {\n            fieldType: 'cardExpiry',\n            message: 'Expiration date must be a valid future date in MM / YY format',\n            type: 'invalid_card_expiry',\n        },\n        [HostedFieldType.CardCode]: {\n            fieldType: 'cardCode',\n            message: 'CVV must be valid',\n            type: 'invalid_card_code',\n        },\n        [HostedFieldType.CardName]: {\n            fieldType: 'cardName',\n            message: 'Full name is required',\n            type: 'required',\n        },\n    },\n};\n","import { kebabCase } from 'lodash';\n\nimport { CreditCardPaymentInitializeOptions } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    guard,\n    HostedCardFieldOptionsMap,\n    HostedFieldBlurEventData,\n    HostedFieldEnterEventData,\n    HostedFieldFocusEventData,\n    HostedFieldOptionsMap,\n    HostedFieldStylesMap,\n    HostedFormOptions,\n    HostedInputValidateErrorData,\n    HostedStoredCardFieldOptionsMap,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapHostedFieldType } from '../bluesnap-direct-constants';\nimport {\n    BlueSnapDirectSdk,\n    BlueSnapDirectStyle,\n    BlueSnapDirectCallbackCardData as CallbackCardData,\n    BlueSnapDirectCallbackError as CallbackError,\n    BlueSnapDirectCallbackResults as CallbackResults,\n    WithBlueSnapDirectCardHolderName as CardHolderName,\n    BlueSnapDirectCardType as CardType,\n    BlueSnapDirectCardTypeValues as CardTypeValues,\n    BlueSnapDirectErrorCode as ErrorCode,\n    BlueSnapDirectErrorDescription as ErrorDescription,\n    BlueSnapDirectEventOrigin as EventOrigin,\n    BlueSnapDirectHostedFieldTagId as HostedFieldTagId,\n    BlueSnapDirectHostedPaymentFieldsOptions as HostedPaymentFieldsOptions,\n    BlueSnapDirectThreeDSecureData as ThreeDSecureData,\n} from '../types';\nimport isValidationErrorDescription from '../utils/is-bluesnap-direct-input-validation-error-description';\nimport isHostedCardFieldOptionsMap from '../utils/is-hosted-card-field-options-map';\nimport isHostedStoredCardFieldOptionsMap from '../utils/is-hosted-stored-card-field-options-map';\n\nimport BlueSnapHostedInputValidator from './bluesnap-direct-hosted-input-validator';\nimport BluesnapDirectNameOnCardInput from './bluesnap-direct-name-on-card-input';\n\nexport default class BlueSnapDirectHostedForm {\n    private _blueSnapSdk?: BlueSnapDirectSdk;\n    private _onValidate: HostedFormOptions['onValidate'];\n\n    constructor(\n        private _nameOnCardInput: BluesnapDirectNameOnCardInput,\n        private _hostedInputValidator: BlueSnapHostedInputValidator,\n    ) {}\n\n    initialize(blueSnapSdk: BlueSnapDirectSdk, fields?: HostedFieldOptionsMap) {\n        this._blueSnapSdk = blueSnapSdk;\n\n        if (!fields) {\n            return;\n        }\n\n        if (isHostedCardFieldOptionsMap(fields)) {\n            this._hostedInputValidator.initialize();\n\n            return;\n        }\n\n        if (isHostedStoredCardFieldOptionsMap(fields) && !!fields.cardNumberVerification) {\n            this._hostedInputValidator.initializeValidationFields();\n        }\n    }\n\n    async attach(\n        paymentFieldsToken: string,\n        { form: { fields, ...callbacksAndStyles } }: CreditCardPaymentInitializeOptions,\n        enable3DS = false,\n    ): Promise<void> {\n        const blueSnapSdk = this._getBlueSnapSdk();\n\n        if (!isHostedCardFieldOptionsMap(fields) && !isHostedStoredCardFieldOptionsMap(fields)) {\n            throw new InvalidArgumentError(\n                'Field options must be of type HostedCardFieldOptionsMap',\n            );\n        }\n\n        this._onValidate = callbacksAndStyles.onValidate;\n\n        if (isHostedCardFieldOptionsMap(fields)) {\n            this._setCustomBlueSnapAttributes(fields);\n        }\n\n        if (isHostedStoredCardFieldOptionsMap(fields)) {\n            this._setCustomStoredCardsBlueSnapAttributes(fields);\n        }\n\n        return new Promise<void>((resolve) => {\n            const options = this._getHostedPaymentFieldsOptions(\n                paymentFieldsToken,\n                fields,\n                callbacksAndStyles,\n                resolve,\n                enable3DS,\n            );\n\n            blueSnapSdk.hostedPaymentFieldsCreate(options);\n\n            if (isHostedCardFieldOptionsMap(fields)) {\n                this._nameOnCardInput.attach(\n                    options,\n                    fields.cardName.accessibilityLabel,\n                    fields.cardName.placeholder,\n                );\n            }\n        });\n    }\n\n    validate(): this {\n        const results = this._hostedInputValidator.validate();\n\n        this._onValidate?.(results);\n\n        if (!results.isValid) {\n            const details = Object.entries(results.errors).reduce<PaymentInvalidFormErrorDetails>(\n                (result, [key, value]: [string, HostedInputValidateErrorData[]]) => ({\n                    ...result,\n                    [key]: value.map(({ message, type }) => ({ message, type })),\n                }),\n                {},\n            );\n\n            throw new PaymentInvalidFormError(details);\n        }\n\n        return this;\n    }\n\n    submit(\n        threeDSecureData?: ThreeDSecureData,\n        shouldSendName = false,\n    ): Promise<CallbackCardData & CardHolderName> {\n        return new Promise((resolve, reject) =>\n            this._getBlueSnapSdk().hostedPaymentFieldsSubmitData(\n                (data: CallbackResults) =>\n                    this._isBlueSnapDirectCallbackError(data)\n                        ? reject(\n                              new PaymentMethodFailedError(\n                                  data.statusCode === ErrorCode.THREE_DS_AUTH_FAILED\n                                      ? data.error[0].errorDescription\n                                      : `Submission failed with status: ${\n                                            data.statusCode\n                                        } and errors: ${JSON.stringify(data.error)}`,\n                              ),\n                          )\n                        : resolve({\n                              ...data.cardData,\n                              ...(shouldSendName\n                                  ? { cardHolderName: this._nameOnCardInput.getValue() }\n                                  : {}),\n                          }),\n                threeDSecureData,\n            ),\n        );\n    }\n\n    detach(): void {\n        this._nameOnCardInput.detach();\n    }\n\n    private _isBlueSnapDirectCallbackError(data: CallbackResults): data is CallbackError {\n        return 'error' in data;\n    }\n\n    private _getHostedPaymentFieldsOptions(\n        token: string,\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n        {\n            onFocus,\n            onBlur,\n            onValidate,\n            onCardTypeChange,\n            onEnter,\n            styles,\n        }: Omit<HostedFormOptions, 'fields'>,\n        resolve: () => void,\n        enable3DS: boolean,\n    ): HostedPaymentFieldsOptions {\n        return {\n            token,\n            onFieldEventHandler: {\n                setupComplete: () => resolve(),\n                onFocus: this._usetUiEventCallback(onFocus),\n                onBlur: this._usetUiEventCallback(onBlur),\n                onError: this._handleError(onValidate),\n                onType: (_tagId: HostedFieldTagId, cardType: CardTypeValues) =>\n                    onCardTypeChange?.({ cardType: CardType[cardType] }),\n                onEnter: this._usetUiEventCallback(onEnter),\n                onValid: (tagId: HostedFieldTagId) =>\n                    onValidate?.(this._hostedInputValidator.validate({ tagId })),\n            },\n            ...(isHostedCardFieldOptionsMap(fields) && {\n                ccnPlaceHolder: fields.cardNumber.placeholder || '',\n                cvvPlaceHolder: fields.cardCode?.placeholder || '',\n                expPlaceHolder: fields.cardExpiry.placeholder || 'MM / YY',\n            }),\n            ...(styles && { style: this._mapStyles(styles) }),\n            '3DS': enable3DS,\n        };\n    }\n\n    private _mapStyles({\n        default: input,\n        error,\n        focus,\n    }: HostedFieldStylesMap): BlueSnapDirectStyle {\n        return Object.entries({\n            ...(input && { input }),\n            ...(error && { '.invalid': error }),\n            ...(focus && { ':focus': focus }),\n        }).reduce((result, [selector, declaration]) => {\n            return {\n                ...result,\n                [selector]: Object.entries(declaration).reduce(\n                    (declarationBlock, [property, value]) => ({\n                        ...declarationBlock,\n                        [kebabCase(property)]: value,\n                    }),\n                    {},\n                ),\n            };\n        }, {});\n    }\n\n    private _handleError(\n        onValidate: HostedFormOptions['onValidate'],\n    ): (\n        tagId: HostedFieldTagId | undefined,\n        errorCode: ErrorCode,\n        errorDescription: ErrorDescription | undefined,\n        eventOrigin: EventOrigin | undefined,\n    ) => void {\n        return (tagId, errorCode, errorDescription, eventOrigin) => {\n            if (errorCode === ErrorCode.INVALID_OR_EMPTY) {\n                if (tagId && isValidationErrorDescription(errorDescription)) {\n                    return onValidate?.(\n                        this._hostedInputValidator.validate({ tagId, errorDescription }),\n                    );\n                }\n            }\n\n            throw new PaymentMethodFailedError(\n                `An unexpected error has occurred: ${JSON.stringify({\n                    tagId,\n                    errorCode,\n                    errorDescription,\n                    eventOrigin,\n                })}`,\n            );\n        };\n    }\n\n    private _usetUiEventCallback(\n        callback?: (\n            data: HostedFieldBlurEventData | HostedFieldEnterEventData | HostedFieldFocusEventData,\n        ) => void,\n    ): (tagId: HostedFieldTagId) => void {\n        return (tagId) => {\n            if (callback) {\n                callback({ fieldType: BlueSnapHostedFieldType[tagId] });\n            }\n        };\n    }\n\n    private _getBlueSnapSdk(): BlueSnapDirectSdk {\n        return guard(\n            this._blueSnapSdk,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _setCustomBlueSnapAttributes(fields: HostedCardFieldOptionsMap): void {\n        const { cardNumber, cardExpiry, cardCode, cardName } = fields;\n\n        const cardNumberContainer = document.getElementById(cardNumber.containerId);\n        const cardExpiryContainer = document.getElementById(cardExpiry.containerId);\n        const cardCodeContainer = cardCode && document.getElementById(cardCode.containerId);\n        const cardNameContainer = document.getElementById(cardName.containerId);\n\n        if (\n            !cardNumberContainer ||\n            !cardExpiryContainer ||\n            !cardCodeContainer ||\n            !cardNameContainer\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to create hosted payment fields to invalid HTML container elements.',\n            );\n        }\n\n        cardNumberContainer.dataset.bluesnap = HostedFieldTagId.CardNumber;\n        cardExpiryContainer.dataset.bluesnap = HostedFieldTagId.CardExpiry;\n        cardCodeContainer.dataset.bluesnap = HostedFieldTagId.CardCode;\n        cardNameContainer.dataset.bluesnap = HostedFieldTagId.CardName;\n    }\n\n    private _setCustomStoredCardsBlueSnapAttributes(fields: HostedStoredCardFieldOptionsMap): void {\n        const { cardNumberVerification, cardCodeVerification } = fields;\n\n        const cardNumberContainer =\n            cardNumberVerification && document.getElementById(cardNumberVerification.containerId);\n        const cardCodeContainer =\n            cardCodeVerification && document.getElementById(cardCodeVerification.containerId);\n\n        if (!cardNumberContainer && !cardCodeContainer) {\n            return;\n        }\n\n        if (cardNumberContainer) {\n            cardNumberContainer.dataset.bluesnap = HostedFieldTagId.CardNumber;\n        }\n\n        if (cardCodeContainer) {\n            cardCodeContainer.dataset.bluesnap = HostedFieldTagId.CardCode;\n        }\n    }\n}\n","import {\n    BlueSnapDirectErrorDescription,\n    BlueSnapDirectInputValidationErrorDescription,\n} from '../types';\n\nexport default function isBlueSnapDirectInputValidationErrorDescription(\n    errorDescription?: BlueSnapDirectErrorDescription,\n): errorDescription is BlueSnapDirectInputValidationErrorDescription {\n    if (errorDescription === undefined) {\n        return false;\n    }\n\n    return [BlueSnapDirectErrorDescription.EMPTY, BlueSnapDirectErrorDescription.INVALID].includes(\n        errorDescription,\n    );\n}\n","import {\n    HostedFieldType,\n    HostedInputValidateErrorData,\n    HostedInputValidateErrorDataMap,\n    HostedInputValidateResults,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapHostedFieldType, CREDIT_CARD_ERRORS } from '../bluesnap-direct-constants';\nimport {\n    BlueSnapDirectInputValidationErrorDescription as ErrorDescription,\n    BlueSnapDirectHostedFieldTagId as HostedFieldTagId,\n} from '../types';\n\nexport default class BlueSnapHostedInputValidator {\n    private _errors: HostedInputValidateErrorDataMap = {};\n\n    initialize(): void {\n        this._errors = {\n            cardNumber: [CREDIT_CARD_ERRORS.empty.cardNumber],\n            cardExpiry: [CREDIT_CARD_ERRORS.empty.cardExpiry],\n            cardCode: [CREDIT_CARD_ERRORS.empty.cardCode],\n            cardName: [CREDIT_CARD_ERRORS.empty.cardName],\n        };\n    }\n\n    initializeValidationFields(): void {\n        this._errors = {\n            cardNumberVerification: [CREDIT_CARD_ERRORS.empty.cardNumber],\n        };\n    }\n\n    validate(error?: {\n        tagId: HostedFieldTagId;\n        errorDescription?: ErrorDescription;\n    }): HostedInputValidateResults {\n        if (error) {\n            this._updateErrors(error.tagId, error.errorDescription);\n        }\n\n        return {\n            isValid: Object.values(this._errors).every(\n                (errorData: HostedInputValidateErrorData[]) => errorData.length === 0,\n            ),\n            errors: this._errors,\n        };\n    }\n\n    private _updateErrors(tagId: HostedFieldTagId, errorDescription?: ErrorDescription): void {\n        const fieldType = this._errors.cardNumberVerification\n            ? HostedFieldType.CardNumberVerification\n            : BlueSnapHostedFieldType[tagId];\n\n        this._errors[fieldType] = errorDescription\n            ? [CREDIT_CARD_ERRORS[errorDescription][fieldType]]\n            : [];\n    }\n}\n","import {\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BluesnapDirectNocInputAllowedStyle as AllowedStyle,\n    BlueSnapDirectStyle,\n    BlueSnapDirectErrorCode as ErrorCode,\n    BlueSnapDirectErrorDescription as ErrorDescription,\n    BlueSnapDirectEventOrigin as EventOrigin,\n    BlueSnapDirectHostedFieldTagId as HostedFieldTagId,\n    BlueSnapDirectHostedPaymentFieldsOptions as HostedPaymentFieldsOptions,\n    BlueSnapDirectStyleDeclaration as StyleDeclaration,\n} from '../types';\nimport isArrayOfAllowedProps from '../utils/is-array-of-allowed-props';\n\nexport default class BluesnapDirectNameOnCardInput {\n    private _input?: HTMLInputElement;\n    private _style?: BlueSnapDirectStyle;\n\n    attach(\n        {\n            style,\n            onFieldEventHandler: { onFocus, onBlur, onValid, onError, onEnter } = {},\n        }: HostedPaymentFieldsOptions,\n        accessibilityLabel?: string,\n        placeholder?: string,\n    ): void {\n        this._style = style;\n\n        this._create();\n\n        this._getInput().addEventListener('focus', this._handleFocus(onFocus));\n        this._getInput().addEventListener('blur', this._handleBlur(onBlur, onValid, onError));\n        this._getInput().addEventListener('enter', this._handleEnter(onEnter));\n\n        if (accessibilityLabel) {\n            this._getInput().setAttribute('aria-label', accessibilityLabel);\n        }\n\n        if (placeholder) {\n            this._getInput().placeholder = placeholder;\n        }\n\n        document.querySelector('[data-bluesnap=\"noc\"]')?.appendChild(this._getInput());\n    }\n\n    getValue(): string {\n        return this._getInput().value;\n    }\n\n    detach(): void {\n        if (this._input) {\n            this._input.remove();\n            this._input = undefined;\n        }\n    }\n\n    private _handleFocus(\n        onFocus: Required<HostedPaymentFieldsOptions>['onFieldEventHandler']['onFocus'],\n    ): (event: Event) => void {\n        return () => {\n            this._applyStyles(this._style?.[':focus']);\n\n            onFocus?.(HostedFieldTagId.CardName);\n        };\n    }\n\n    private _handleBlur(\n        onBlur: Required<HostedPaymentFieldsOptions>['onFieldEventHandler']['onBlur'],\n        onValid: Required<HostedPaymentFieldsOptions>['onFieldEventHandler']['onValid'],\n        onError: Required<HostedPaymentFieldsOptions>['onFieldEventHandler']['onError'],\n    ): (event: Event) => void {\n        return ({ target }) => {\n            onBlur?.(HostedFieldTagId.CardName);\n\n            if (target instanceof HTMLInputElement) {\n                if (/\\w{1,200}/.test(target.value)) {\n                    this._applyStyles(this._style?.input);\n\n                    onValid?.(HostedFieldTagId.CardName);\n                } else {\n                    this._applyStyles(this._style?.['.invalid']);\n\n                    onError?.(\n                        HostedFieldTagId.CardName,\n                        ErrorCode.INVALID_OR_EMPTY,\n                        ErrorDescription.EMPTY,\n                        EventOrigin.ON_BLUR,\n                    );\n                }\n            }\n        };\n    }\n\n    private _handleEnter(\n        onEnter: Required<HostedPaymentFieldsOptions>['onFieldEventHandler']['onEnter'],\n    ): (event: Event) => void {\n        return () => onEnter?.(HostedFieldTagId.CardName);\n    }\n\n    private _applyStyles(styles: StyleDeclaration = {}): void {\n        const allowedStyle: AllowedStyle = {\n            color: styles.color,\n            fontFamily: styles['font-family'],\n            fontSize: styles['font-size'],\n            fontWeight: styles['font-weight'],\n        };\n        const styleKeys = Object.keys(allowedStyle);\n\n        if (isArrayOfAllowedProps(styleKeys)) {\n            styleKeys.forEach((key) => {\n                if (!allowedStyle[key]) {\n                    return;\n                }\n\n                this._getInput().style[key] = allowedStyle[key] || '';\n            });\n        }\n    }\n\n    private _configureInput(): void {\n        this._getInput().autocomplete = 'cc-name';\n        this._getInput().id = HostedFieldTagId.CardName;\n        this._getInput().inputMode = 'text';\n        this._getInput().maxLength = 200;\n        this._getInput().style.backgroundColor = 'transparent';\n        this._getInput().style.border = '0';\n        this._getInput().style.height = '100%';\n        this._getInput().style.margin = '0';\n        this._getInput().style.outline = 'none';\n        this._getInput().style.padding = '0';\n        this._getInput().style.width = '100%';\n        this._getInput().type = 'text';\n    }\n\n    private _getInput(): HTMLInputElement {\n        return guard(\n            this._input,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _create(): void {\n        this._input = document.createElement('input');\n        this._configureInput();\n        this._applyStyles(this._style?.input);\n    }\n}\n","import { BluesnapDirectNocInputAllowedStyle } from '../types';\n\nexport default function isArrayOfAllowedProps(\n    fields: string[],\n): fields is Array<keyof BluesnapDirectNocInputAllowedStyle> {\n    return fields.every((field) =>\n        ['color', 'fontFamily', 'fontSize', 'fontWeight'].includes(field),\n    );\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapDirectHostWindow, BlueSnapDirectSdk } from '../types';\n\nexport enum BlueSnapDirectSdkEnv {\n    PRODUCTION = 'https://pay.bluesnap.com/web-sdk/5/bluesnap.js',\n    SANDBOX = 'https://sandpay.bluesnap.com/web-sdk/5/bluesnap.js',\n}\n\nexport default class BlueSnapDirectScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BlueSnapDirectHostWindow = window,\n    ) {}\n\n    async load(testMode = false): Promise<BlueSnapDirectSdk> {\n        if (this._window.bluesnap) {\n            return this._window.bluesnap;\n        }\n\n        await this._scriptLoader.loadScript(\n            testMode ? BlueSnapDirectSdkEnv.SANDBOX : BlueSnapDirectSdkEnv.PRODUCTION,\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!this._window.bluesnap) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.bluesnap;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BlueSnapDirect3ds from './bluesnap-direct-3ds';\nimport BlueSnapDirectCreditCardPaymentStrategy from './bluesnap-direct-credit-card-payment-strategy';\nimport BlueSnapDirectHostedForm from './bluesnap-direct-hosted-form';\nimport BlueSnapHostedInputValidator from './bluesnap-direct-hosted-input-validator';\nimport BluesnapDirectNameOnCardInput from './bluesnap-direct-name-on-card-input';\nimport BlueSnapDirectScriptLoader from './bluesnap-direct-script-loader';\n\nconst createBlueSnapDirectCreditCardPaymentStrategy: PaymentStrategyFactory<\n    BlueSnapDirectCreditCardPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BlueSnapDirectCreditCardPaymentStrategy(\n        new BlueSnapDirectScriptLoader(getScriptLoader()),\n        paymentIntegrationService,\n        new BlueSnapDirectHostedForm(\n            new BluesnapDirectNameOnCardInput(),\n            new BlueSnapHostedInputValidator(),\n        ),\n        new BlueSnapDirect3ds(),\n    );\n\nexport default toResolvableModule(createBlueSnapDirectCreditCardPaymentStrategy, [\n    { id: 'credit_card', gateway: 'bluesnapdirect' },\n]);\n","import {\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapDirectRedirectResponse } from '../types';\nimport {\n    isEcpInstrument,\n    isIdealInstrument,\n    isPayByBankInstrument,\n    isSepaInstrument,\n} from '../utils/is-bluesnap-direct-instrument';\nimport isBlueSnapDirectRedirectResponseProviderData from '../utils/is-bluesnap-direct-provider-data';\n\nexport default class BlueSnapDirectAPMPaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody): Promise<void> {\n        const paymentPayload = this._formatePaymentPayload(payload);\n\n        await this._paymentIntegrationService.submitOrder();\n\n        try {\n            await this._paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            if (this._isBlueSnapDirectRedirectResponse(error)) {\n                const providerData: unknown =\n                    error.body.provider_data && JSON.parse(error.body.provider_data);\n\n                let frameUrl = error.body.additional_action_required.data.redirect_url;\n\n                if (isBlueSnapDirectRedirectResponseProviderData(providerData)) {\n                    const providerDataQuery = new URLSearchParams(providerData).toString();\n\n                    frameUrl = `${frameUrl}&${providerDataQuery}`;\n                }\n\n                return new Promise(() => window.location.replace(frameUrl));\n            }\n\n            return Promise.reject(error);\n        }\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _formatePaymentPayload({ payment }: OrderRequestBody) {\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (\n            payment.paymentData &&\n            isVaultedInstrument(payment.paymentData) &&\n            isHostedInstrumentLike(payment.paymentData)\n        ) {\n            return {\n                ...payment,\n                paymentData: {\n                    instrumentId: payment.paymentData.instrumentId,\n                    shouldSetAsDefaultInstrument:\n                        !!payment.paymentData.shouldSetAsDefaultInstrument,\n                },\n            };\n        }\n\n        if (isEcpInstrument(payment.paymentData)) {\n            return {\n                ...payment,\n                paymentData: {\n                    formattedPayload: {\n                        ecp: {\n                            account_number: payment.paymentData.accountNumber,\n                            account_type: payment.paymentData.accountType,\n                            shopper_permission: payment.paymentData.shopperPermission,\n                            routing_number: payment.paymentData.routingNumber,\n                            ...(payment.paymentData.companyName\n                                ? { company_name: payment.paymentData.companyName }\n                                : {}),\n                        },\n                        vault_payment_instrument: payment.paymentData.shouldSaveInstrument,\n                        set_as_default_stored_instrument:\n                            payment.paymentData.shouldSetAsDefaultInstrument,\n                    },\n                },\n            };\n        }\n\n        if (isSepaInstrument(payment.paymentData)) {\n            return {\n                ...payment,\n                paymentData: {\n                    formattedPayload: {\n                        sepa_direct_debit: {\n                            iban: payment.paymentData.iban,\n                            first_name: payment.paymentData.firstName,\n                            last_name: payment.paymentData.lastName,\n                            shopper_permission: payment.paymentData.shopperPermission,\n                        },\n                        vault_payment_instrument: payment.paymentData.shouldSaveInstrument,\n                        set_as_default_stored_instrument:\n                            payment.paymentData.shouldSetAsDefaultInstrument,\n                    },\n                },\n            };\n        }\n\n        if (isIdealInstrument(payment.paymentData)) {\n            return {\n                ...payment,\n                paymentData: {\n                    formattedPayload: {\n                        ideal: {\n                            bic: payment.paymentData.bic,\n                        },\n                    },\n                },\n            };\n        }\n\n        if (isPayByBankInstrument(payment.paymentData)) {\n            return {\n                ...payment,\n                paymentData: {\n                    formattedPayload: {\n                        pay_by_bank: {\n                            iban: payment.paymentData.iban,\n                        },\n                    },\n                },\n            };\n        }\n\n        return {\n            methodId: payment.methodId,\n        };\n    }\n\n    private _isBlueSnapDirectRedirectResponse(\n        response: unknown,\n    ): response is BlueSnapDirectRedirectResponse {\n        if (typeof response !== 'object' || response === null) {\n            return false;\n        }\n\n        const partialResponse: Partial<BlueSnapDirectRedirectResponse> = response;\n\n        if (!partialResponse.body) {\n            return false;\n        }\n\n        const partialBody: Partial<BlueSnapDirectRedirectResponse['body']> = partialResponse.body;\n\n        return (\n            partialBody.status === 'additional_action_required' &&\n            !!partialBody.additional_action_required?.data.redirect_url\n        );\n    }\n}\n","import { BlueSnapDirectRedirectResponseProviderData } from '../types';\n\nexport default function isBlueSnapDirectRedirectResponseProviderData(\n    value: unknown,\n): value is BlueSnapDirectRedirectResponseProviderData {\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n\n    const partialValue: Partial<BlueSnapDirectRedirectResponseProviderData> = value;\n\n    if (!partialValue.merchantid) {\n        return false;\n    }\n\n    return typeof partialValue.merchantid === 'string';\n}\n","import {\n    WithEcpInstrument,\n    WithIdealInstrument,\n    WithPayByBankInstrument,\n    WithSepaInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport function isEcpInstrument(data: unknown): data is WithEcpInstrument {\n    return Boolean(\n        typeof data === 'object' &&\n            data !== null &&\n            'accountNumber' in data &&\n            'accountType' in data &&\n            'shopperPermission' in data &&\n            'routingNumber' in data,\n    );\n}\n\nexport function isIdealInstrument(paymentData: unknown): paymentData is WithIdealInstrument {\n    return Boolean(typeof paymentData === 'object' && paymentData !== null && 'bic' in paymentData);\n}\n\nexport function isSepaInstrument(paymentData: unknown): paymentData is WithSepaInstrument {\n    return Boolean(\n        typeof paymentData === 'object' &&\n            paymentData !== null &&\n            'iban' in paymentData &&\n            'firstName' in paymentData &&\n            'lastName' in paymentData &&\n            'shopperPermission' in paymentData,\n    );\n}\n\nexport function isPayByBankInstrument(\n    paymentData: unknown,\n): paymentData is WithPayByBankInstrument {\n    return Boolean(\n        typeof paymentData === 'object' &&\n            paymentData !== null &&\n            'iban' in paymentData &&\n            !('firstName' in paymentData) &&\n            !('lastName' in paymentData) &&\n            !('shopperPermission' in paymentData),\n    );\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BlueSnapDirectAPMPaymentStrategy from './bluesnap-direct-apm-payment-strategy';\n\nconst createBlueSnapDirectAPMPaymentStrategy: PaymentStrategyFactory<\n    BlueSnapDirectAPMPaymentStrategy\n> = (paymentIntegrationService) => new BlueSnapDirectAPMPaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createBlueSnapDirectAPMPaymentStrategy, [\n    { gateway: 'bluesnapdirect' },\n]);\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport default PaymentStatusTypes;\n","import { noop } from 'lodash';\n\nimport {\n    CancellablePromise,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapV2StyleProps } from './bluesnapv2';\nimport {\n    BlueSnapV2PaymentInitializeOptions,\n    WithBlueSnapV2PaymentInitializeOptions,\n} from './bluesnapv2-payment-options';\n\nconst IFRAME_NAME = 'bluesnapv2_hosted_payment_page';\n\nexport default class BlueSnapV2PaymentStrategy implements PaymentStrategy {\n    private _initializeOptions?: BlueSnapV2PaymentInitializeOptions;\n\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentInitializeOptions & WithBlueSnapV2PaymentInitializeOptions,\n    ): Promise<void> {\n        const { payment } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { onLoad, style } = this._initializeOptions;\n        const frame = this._createIframe(IFRAME_NAME, style);\n        const promise = new CancellablePromise<undefined>(new Promise(noop));\n\n        onLoad(frame, () => promise.cancel(new PaymentMethodCancelledError()));\n\n        await this._paymentIntegrationService.submitOrder(orderRequest, options);\n\n        await this._paymentIntegrationService.initializeOffsitePayment({\n            methodId: payment.methodId,\n            gatewayId: payment.gatewayId,\n            shouldSaveInstrument: false,\n            target: frame.name,\n            promise: promise.promise,\n        });\n    }\n\n    async finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this._paymentIntegrationService.getState();\n        const order = state.getOrder();\n        const status = state.getPaymentStatus();\n\n        if (\n            order &&\n            (status === PaymentStatusTypes.ACKNOWLEDGE || status === PaymentStatusTypes.FINALIZE)\n        ) {\n            await this._paymentIntegrationService.finalizeOrder(options);\n\n            return;\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithBlueSnapV2PaymentInitializeOptions,\n    ): Promise<void> {\n        this._initializeOptions = options && options.bluesnapv2;\n\n        await Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createIframe(name: string, style?: BlueSnapV2StyleProps): HTMLIFrameElement {\n        const iframe = document.createElement('iframe');\n\n        iframe.setAttribute(\n            'sandbox',\n            'allow-top-navigation allow-scripts allow-forms allow-same-origin',\n        );\n\n        iframe.name = name;\n\n        if (style) {\n            const { border, height, width } = style;\n\n            iframe.style.border = border ?? '';\n            iframe.style.height = height ?? '';\n            iframe.style.width = width ?? '';\n        }\n\n        return iframe;\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BlueSnapV2PaymentStrategy from './bluesnapv2-payment-strategy';\n\nconst createBluesnapV2PaymentStrategy: PaymentStrategyFactory<BlueSnapV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BlueSnapV2PaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createBluesnapV2PaymentStrategy, [{ gateway: 'bluesnapv2' }]);\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"local-storage-fallback\");","import { isObject } from 'lodash';\n\nimport { LineItemMap } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ExtraItemsData } from './extra-items-data';\n\ntype StorageFallback = Pick<Storage, 'getItem' | 'setItem' | 'removeItem'>;\n\nconst ORDER_ITEMS_STORAGE_KEY = 'ORDER_ITEMS';\n\nfunction isExtraItemsData(itemsData: unknown): itemsData is ExtraItemsData {\n    if (!isObject(itemsData)) {\n        return false;\n    }\n\n    const hasNotExtraItems = Object.values(itemsData).some(\n        (item) => !isObject(item) || !('brand' in item) || !('category' in item),\n    );\n\n    return Boolean(!hasNotExtraItems);\n}\n\nexport default class AnalyticsExtraItemsManager {\n    constructor(private storage: StorageFallback) {}\n\n    saveExtraItemsData(id: string, lineItems: LineItemMap): ExtraItemsData {\n        const data = [...lineItems.physicalItems, ...lineItems.digitalItems].reduce<ExtraItemsData>(\n            (result, item) => {\n                result[item.productId] = {\n                    brand: item.brand ? item.brand : '',\n                    category: item.categoryNames ? item.categoryNames.join(', ') : '',\n                };\n\n                return result;\n            },\n            {},\n        );\n\n        try {\n            this.storage.setItem(this.getStorageKey(id), JSON.stringify(data));\n\n            return data;\n        } catch (err) {\n            return {};\n        }\n    }\n\n    readExtraItemsData(id: string): ExtraItemsData | null {\n        try {\n            const item = this.storage.getItem(this.getStorageKey(id));\n\n            if (!item) {\n                return null;\n            }\n\n            const data: unknown = JSON.parse(item);\n\n            return isExtraItemsData(data) ? data : null;\n        } catch (err) {\n            return null;\n        }\n    }\n\n    clearExtraItemData(id: string): void {\n        try {\n            this.storage.removeItem(this.getStorageKey(id));\n        } catch (err) {\n            // silently ignore the failure\n        }\n    }\n\n    private getStorageKey(id: string): string {\n        return id ? `${ORDER_ITEMS_STORAGE_KEY}_${id}` : '';\n    }\n}\n","import { WithAccountCreation } from './payment';\n\nexport default function isWithAccountCreation(\n    paymentData: unknown,\n): paymentData is WithAccountCreation {\n    return (\n        typeof paymentData === 'object' &&\n        paymentData !== null &&\n        'shouldCreateAccount' in paymentData\n    );\n}\n","import { PaymentErrorData, StandardError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class BoltError extends StandardError {\n    body: { errors: PaymentErrorData[] };\n\n    constructor(public errorCode: string) {\n        super();\n\n        this.name = 'BoltPaymentsFieldError';\n        this.type = 'bolt_payments_field_error';\n        this.body = { errors: [BoltError.getError(errorCode)] };\n    }\n\n    private static getError(errorCode: string): PaymentErrorData {\n        switch (errorCode) {\n            case '1000':\n            case '2000':\n            case '3000':\n                return { code: 'invalid_number' };\n\n            case '1001':\n            case '2001':\n            case '3001':\n                return { code: 'invalid_expiry_date' };\n\n            case '1002':\n            case '2002':\n                return { code: 'invalid_cvc' };\n\n            case '1003':\n                return { code: 'invalid_zip' };\n\n            case '2003':\n                return { code: 'incorrect_zip' };\n\n            default:\n                return { code: 'general_error' };\n        }\n    }\n}\n","import {\n    AnalyticsExtraItemsManager,\n    isAnalyticsTrackerWindow,\n} from '@bigcommerce/checkout-sdk/analytics';\nimport {\n    InvalidArgumentError,\n    isWithAccountCreation,\n    MissingDataError,\n    MissingDataErrorType,\n    NonceInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    WithAccountCreation,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BoltCheckout,\n    BoltEmbedded,\n    BoltEmbeddedTokenize,\n    BoltEmbededField,\n    BoltPaymentMethod,\n    BoltTransaction,\n} from './bolt';\nimport BoltError from './bolt-error';\nimport { WithBoltPaymentInitializeOptions } from './bolt-payment-initialize-options';\nimport BoltScriptLoader from './bolt-script-loader';\nimport { isBoltPaymentData } from './is-bolt-payment-data';\n\nexport default class BoltPaymentStrategy implements PaymentStrategy {\n    private boltClient?: BoltCheckout;\n    private boltEmbedded?: BoltEmbedded;\n    private embeddedField?: BoltEmbededField;\n    private useBoltClient = false;\n    private useBoltEmbedded = false;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private boltScriptLoader: BoltScriptLoader,\n        private analyticsExtraItemsManager: AnalyticsExtraItemsManager,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBoltPaymentInitializeOptions,\n    ): Promise<void> {\n        const { bolt, methodId } = options;\n        const { containerId, onPaymentSelect, useBigCommerceCheckout } = bolt || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!useBigCommerceCheckout) {\n            // info: calling loadBoltClient method without providing any params is necessary for Bolt Full Checkout and Fraud Protection\n            this.boltClient = await this.boltScriptLoader.loadBoltClient();\n\n            return;\n        }\n\n        const paymentMethod: BoltPaymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(options.methodId);\n\n        const { initializationData, config } = paymentMethod;\n        const { publishableKey, developerConfig, embeddedOneClickEnabled } =\n            initializationData || {};\n        const { testMode } = config;\n\n        if (!publishableKey) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.boltClient = await this.boltScriptLoader.loadBoltClient(\n            publishableKey,\n            testMode,\n            developerConfig,\n        );\n\n        this.useBoltClient = !embeddedOneClickEnabled;\n        this.useBoltEmbedded = !!embeddedOneClickEnabled;\n\n        if (this.useBoltEmbedded) {\n            if (!containerId) {\n                throw new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.bolt.containerId\" argument is not provided.',\n                );\n            }\n\n            if (!onPaymentSelect) {\n                throw new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.bolt.onPaymentSelect\" argument is not provided.',\n                );\n            }\n\n            this.boltEmbedded = await this.boltScriptLoader.loadBoltEmbedded(\n                publishableKey,\n                testMode,\n                developerConfig,\n            );\n\n            this.mountBoltEmbeddedField(containerId);\n            onPaymentSelect(await this.hasBoltAccount());\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        this.embeddedField?.unmount();\n\n        this.boltClient = undefined;\n        this.boltEmbedded = undefined;\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        this.setExtraItemsForAnalytics();\n\n        const { payment, ...order } = payload;\n        const { methodId, paymentData } = payment || {};\n        let paymentPayload;\n\n        if (!payload.payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentData || !isBoltPaymentData(paymentData)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        if (this.useBoltClient) {\n            paymentPayload = await this.getBoltClientPaymentPayload(methodId, paymentData, options);\n        } else if (this.useBoltEmbedded) {\n            paymentPayload = await this.getBoltEmbeddedPaymentPayload(methodId, paymentData);\n        } else {\n            paymentPayload = await this.getBoltFullCheckoutPaymentPayload(methodId, paymentData);\n        }\n\n        await this.paymentIntegrationService.submitPayment(paymentPayload);\n    }\n\n    private async getBoltClientPaymentPayload(\n        methodId: string,\n        paymentData: NonceInstrument,\n        options?: PaymentRequestOptions,\n    ): Promise<Payment> {\n        await this.paymentIntegrationService.loadPaymentMethod(methodId, options);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const orderToken = paymentMethod.clientToken;\n        const { isStoreCreditApplied } = state.getCheckoutOrThrow();\n        const { shouldSaveInstrument } = paymentData;\n        const boltClient = this.getBoltClientOrThrow();\n\n        await this.paymentIntegrationService.applyStoreCredit(isStoreCreditApplied);\n\n        if (!orderToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const boltTransaction: BoltTransaction = await new Promise((resolve, reject) => {\n            const onSuccess = (transaction: BoltTransaction, callback: () => void) => {\n                if (!transaction.reference) {\n                    reject(\n                        new PaymentMethodFailedError(\n                            'Unable to proceed because transaction reference is unavailable. Please try again later.',\n                        ),\n                    );\n                } else {\n                    resolve(transaction);\n                }\n\n                callback();\n            };\n\n            const onClose = () => {\n                reject(new PaymentMethodCancelledError());\n            };\n\n            const callbacks = {\n                success: onSuccess,\n                close: onClose,\n            };\n\n            boltClient.configure({ orderToken }, {}, callbacks).open();\n        });\n\n        return {\n            methodId,\n            paymentData: {\n                nonce: boltTransaction.reference,\n                shouldSaveInstrument,\n            },\n        };\n    }\n\n    private async getBoltEmbeddedPaymentPayload(\n        methodId: string,\n        paymentData: WithAccountCreation,\n    ): Promise<Payment> {\n        if (!isWithAccountCreation(paymentData)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const tokenizeResult = this.validateTokenizeResultOrThrow(\n            await this.embeddedField?.tokenize(),\n        );\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload: {\n                    credit_card_token: {\n                        token: tokenizeResult.token,\n                        last_four_digits: tokenizeResult.last4,\n                        iin: tokenizeResult.bin,\n                        expiration_month: +tokenizeResult.expiration.split('-')[1],\n                        expiration_year: +tokenizeResult.expiration.split('-')[0],\n                    },\n                    provider_data: {\n                        create_account: !!paymentData.shouldCreateAccount,\n                        embedded_checkout: true,\n                    },\n                },\n            },\n        };\n    }\n\n    private async getBoltFullCheckoutPaymentPayload(\n        methodId: string,\n        paymentData: NonceInstrument,\n    ): Promise<Payment> {\n        await this.setBoltOrderId();\n\n        const boltClient = this.getBoltClientOrThrow();\n        const transactionReference = await boltClient.getTransactionReference();\n\n        if (!transactionReference) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                ...paymentData,\n                nonce: transactionReference,\n            },\n        };\n    }\n\n    private getBoltClientOrThrow(): BoltCheckout {\n        if (!this.boltClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.boltClient;\n    }\n\n    private getBoltEmbeddedOrThrow() {\n        if (!this.boltEmbedded) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.boltEmbedded;\n    }\n\n    private async hasBoltAccount(): Promise<boolean> {\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomer();\n        const billingAddress = state.getBillingAddress();\n        const email = customer?.email || billingAddress?.email || '';\n        const boltClient = this.getBoltClientOrThrow();\n\n        try {\n            return await boltClient.hasBoltAccount(email);\n        } catch {\n            throw new PaymentMethodInvalidError();\n        }\n    }\n\n    private async setBoltOrderId() {\n        const order = this.paymentIntegrationService.getState().getOrderOrThrow();\n        const boltClient = this.getBoltClientOrThrow();\n\n        try {\n            await boltClient.setOrderId(order.orderId);\n        } catch {\n            throw new PaymentMethodInvalidError();\n        }\n    }\n\n    private mountBoltEmbeddedField(containerId: string) {\n        const boltEmbedded = this.getBoltEmbeddedOrThrow();\n        const styles = { backgroundColor: '#fff' };\n        const embeddedField = boltEmbedded.create('payment_field', {\n            styles,\n            renderSeparateFields: true,\n        });\n\n        embeddedField.mount(`#${containerId}`);\n\n        this.embeddedField = embeddedField;\n    }\n\n    private validateTokenizeResultOrThrow(\n        tokenizeResult?: BoltEmbeddedTokenize | Error,\n    ): BoltEmbeddedTokenize {\n        if (!tokenizeResult) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        if (tokenizeResult instanceof Error) {\n            throw new BoltError(tokenizeResult.message);\n        }\n\n        const { token, last4, bin, expiration } = tokenizeResult;\n        const lastFourDigits = +last4;\n        const iin = +bin;\n        const expirationMonth = +`${expiration}`.split('-')[1];\n        const expirationYear = +`${expiration}`.split('-')[0];\n\n        if (\n            !token ||\n            Number.isNaN(lastFourDigits) ||\n            Number.isNaN(iin) ||\n            Number.isNaN(expirationMonth) ||\n            Number.isNaN(expirationYear)\n        ) {\n            throw new PaymentArgumentInvalidError();\n        }\n\n        return tokenizeResult;\n    }\n\n    private setExtraItemsForAnalytics() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfigOrThrow();\n        const cart = state.getCartOrThrow();\n\n        if (storeConfig.checkoutSettings.isAnalyticsEnabled && isAnalyticsTrackerWindow(window)) {\n            const { id, lineItems } = cart;\n\n            this.analyticsExtraItemsManager.saveExtraItemsData(id, lineItems);\n        }\n    }\n}\n","import { isObject } from 'lodash';\n\nimport { isWithAccountCreation } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BoltPaymentData } from './bolt';\n\nexport function isBoltPaymentData(paymentData: unknown): paymentData is BoltPaymentData {\n    return Boolean(\n        isObject(paymentData) &&\n            ('shouldSaveInstrument' in paymentData ||\n                'nonce' in paymentData ||\n                isWithAccountCreation(paymentData)),\n    );\n}\n","import AnalyticsTrackerWindow from './analytics-tracker-window';\n\nexport function isAnalyticsTrackerWindow(window: Window): window is AnalyticsTrackerWindow {\n    return Boolean(window.hasOwnProperty('analytics'));\n}\n","import {\n    BuyNowCartRequestBody,\n    NonceInstrument,\n    PaymentMethod,\n    WithAccountCreation,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface BoltHostWindow extends Window {\n    BoltCheckout?: BoltCheckout;\n    BoltConnect?: BoltConnect;\n    Bolt?(publicKey: string): BoltEmbedded;\n}\n\nexport interface BoltCheckout {\n    configure(cart: BoltCart, hints: Record<string, never>, callbacks?: BoltCallbacks): BoltClient;\n    hasBoltAccount(email: string): Promise<boolean>;\n    getTransactionReference(): Promise<string | undefined>;\n    openCheckout(email: string, callbacks?: BoltOpenCheckoutCallbacks): Promise<void>;\n    setClientCustomCallbacks(callbacks: BoltCallbacks): void;\n    setOrderId(orderId: number): Promise<void>;\n}\n\nexport interface BoltConnect {\n    setupProductPageCheckout?(): void;\n}\n\nexport interface BoltOpenCheckoutCallbacks {\n    close?(): void;\n}\n\nexport interface BoltEmbeddedOptions {\n    styles: { backgroundColor: string };\n    renderSeparateFields?: boolean;\n}\n\nexport interface BoltEmbedded {\n    create(name: string, options?: BoltEmbeddedOptions): BoltEmbededField;\n}\n\nexport interface BoltEmbededField {\n    mount(element: string): void;\n    unmount(): void;\n    tokenize(): Promise<BoltEmbeddedTokenize | Error>;\n}\n\nexport interface BoltDeveloperModeParams {\n    developerMode: BoltDeveloperMode;\n    developerDomain: string;\n}\n\nexport enum BoltDeveloperMode {\n    SandboxMode = 'bolt_sandbox',\n    StagingMode = 'bolt_staging',\n    DevelopmentMode = 'bolt_development',\n}\n\nexport interface BoltClient {\n    open(): void;\n}\n\nexport interface BoltCart {\n    orderToken: string;\n}\n\nexport interface BoltCallbacks {\n    check?(): boolean;\n    onCheckoutStart?(): void;\n    onPaymentSubmit?(): void;\n    success(transaction: BoltTransaction, callback: () => void): void;\n    close?(): void;\n}\n\nexport interface BoltTransaction {\n    id: string;\n    type: string;\n    processor: string;\n    date: number;\n    reference: string;\n    status: string;\n    authorization: BoltAuthorization;\n}\n\nexport interface BoltAuthorization {\n    status: string;\n    reason: string;\n}\n\nexport interface BoltEmbeddedTokenize {\n    bin: string;\n    expiration: string;\n    last4: string;\n    postal_code?: string;\n    token: string;\n    token_type: string;\n}\n\nexport interface BoltPaymentMethod extends PaymentMethod {\n    initializationData?: BoltInitializationData;\n}\n\nexport interface BoltInitializationData {\n    publishableKey: string;\n    developerConfig: BoltDeveloperModeParams;\n    embeddedOneClickEnabled: boolean;\n}\n\nexport type BoltPaymentData = WithAccountCreation & NonceInstrument;\n\nexport interface BoltBuyNowInitializeOptions {\n    storefrontApiToken?: string;\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\nexport enum StyleButtonSize {\n    Small = 'small',\n    Medium = 'medium',\n    Large = 'large',\n}\n\nexport enum StyleButtonShape {\n    Pill = 'pill',\n    Rect = 'rect',\n}\n\nexport interface BoltButtonStyleOptions {\n    shape?: StyleButtonShape;\n    size?: StyleButtonSize;\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    InvalidArgumentError,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BoltCheckout,\n    BoltDeveloperMode,\n    BoltDeveloperModeParams,\n    BoltEmbedded,\n    BoltHostWindow,\n} from './bolt';\n\nexport default class BoltScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        public boltHostWindow: BoltHostWindow = window,\n    ) {}\n\n    async loadBoltClient(\n        publishableKey?: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n        cartId?: string,\n        storefrontApiToken?: string,\n    ): Promise<BoltCheckout> {\n        if (this.boltHostWindow.BoltCheckout) {\n            return this.boltHostWindow.BoltCheckout;\n        }\n\n        if (!publishableKey) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"publishableKey\" argument is not provided.',\n            );\n        }\n\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/connect-bigcommerce.js`,\n            this.getScriptOptions('bolt-connect', publishableKey, cartId, storefrontApiToken),\n        );\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/track.js`,\n            this.getScriptOptions('bolt-track', publishableKey),\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!this.boltHostWindow.BoltCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.boltHostWindow.BoltCheckout;\n    }\n\n    async loadBoltEmbedded(\n        publishableKey: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n    ): Promise<BoltEmbedded> {\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: {\n                id: 'bolt-embedded',\n            },\n        };\n\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/embed.js`,\n            options,\n        );\n\n        if (!this.boltHostWindow.Bolt) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.boltHostWindow.Bolt(publishableKey);\n    }\n\n    getDomainURL(testMode: boolean, developerModeParams?: BoltDeveloperModeParams): string {\n        if (!testMode) {\n            return 'connect.bolt.com';\n        }\n\n        if (developerModeParams) {\n            switch (developerModeParams.developerMode) {\n                case BoltDeveloperMode.StagingMode:\n                    return 'connect-staging.bolt.com';\n\n                case BoltDeveloperMode.DevelopmentMode:\n                    return `connect.${developerModeParams.developerDomain}`;\n            }\n        }\n\n        return 'connect-sandbox.bolt.com';\n    }\n\n    private getScriptOptions(\n        id: string,\n        publishableKey: string,\n        cartId?: string,\n        storefrontApiToken?: string,\n    ): LoadScriptOptions {\n        return {\n            async: true,\n            attributes: {\n                id,\n                'data-publishable-key': publishableKey,\n                ...(cartId && { 'data-shopping-cart-id': cartId }),\n                ...(storefrontApiToken && { 'data-storefront-api-token': storefrontApiToken }),\n            },\n        };\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\nimport localStorageFallback from 'local-storage-fallback';\n\nimport { AnalyticsExtraItemsManager } from '@bigcommerce/checkout-sdk/analytics';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BoltPaymentStrategy from './bolt-payment-strategy';\nimport BoltScriptLoader from './bolt-script-loader';\n\nconst createBoltPaymentStrategy: PaymentStrategyFactory<BoltPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BoltPaymentStrategy(\n        paymentIntegrationService,\n        new BoltScriptLoader(getScriptLoader()),\n        new AnalyticsExtraItemsManager(localStorageFallback),\n    );\n};\n\nexport default toResolvableModule(createBoltPaymentStrategy, [{ id: 'bolt' }]);\n","import {\n    PaymentInstrumentPayload,\n    WithBankAccountInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isUsBankAccountInstrumentLike(\n    instrument?: PaymentInstrumentPayload,\n): instrument is WithBankAccountInstrument {\n    if (!instrument) {\n        return false;\n    }\n\n    return (\n        'accountNumber' in instrument &&\n        'routingNumber' in instrument &&\n        'ownershipType' in instrument &&\n        'accountType' in instrument\n    );\n}\n","import {\n    BraintreeInitializationData,\n    BraintreeSdk,\n    BraintreeUsBankAccount,\n    BraintreeUsBankAccountDetails,\n    isBraintreeError,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    WithBankAccountInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isUsBankAccountInstrumentLike from '../is-us-bank-account-instrument-like';\n\nimport { WithBraintreeAchPaymentInitializeOptions } from './braintree-ach-initialize-options';\n\nexport default class BraintreeAchPaymentStrategy implements PaymentStrategy {\n    private usBankAccount?: BraintreeUsBankAccount;\n    private getMandateText?: () => string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeAchPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, braintreeach } = options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        this.getMandateText = braintreeach?.getMandateText;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken);\n\n        try {\n            this.usBankAccount = await this.braintreeSdk.getUsBankAccount();\n        } catch (error) {\n            this.handleBraintreeError(error);\n        }\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const isSubmittingWithVaultingInstrument = isVaultedInstrument(payment.paymentData || {});\n\n        const nonce = isSubmittingWithVaultingInstrument\n            ? await this.tokenizePaymentForVaultedInstrument(payment)\n            : await this.tokenizePayment(payment);\n\n        const submitPaymentPayload = isSubmittingWithVaultingInstrument\n            ? await this.preparePaymentDataForVaultedInstrument(nonce, payment)\n            : await this.preparePaymentData(nonce, payment);\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paymentIntegrationService.submitPayment(submitPaymentPayload);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n\n        return Promise.resolve();\n    }\n\n    private async tokenizePayment({ paymentData }: OrderPaymentRequestBody): Promise<string> {\n        const usBankAccount = this.getUsBankAccountOrThrow();\n\n        if (!isUsBankAccountInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const mandateText = isVaultedInstrument(paymentData)\n            ? 'The data are used for stored instrument verification'\n            : typeof this.getMandateText === 'function' && this.getMandateText();\n\n        if (!mandateText) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because getMandateText is not provided or returned undefined value.',\n            );\n        }\n\n        try {\n            const { nonce } = await usBankAccount.tokenize({\n                bankDetails: this.getBankDetails(paymentData),\n                mandateText,\n            });\n\n            return nonce;\n        } catch (error) {\n            this.handleBraintreeError(error);\n        }\n    }\n\n    private async tokenizePaymentForVaultedInstrument(\n        payment: OrderPaymentRequestBody,\n    ): Promise<string | null> {\n        const { methodId, paymentData = {} } = payment;\n\n        const state = this.paymentIntegrationService.getState();\n        const { config } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!config.isVaultingEnabled) {\n            throw new InvalidArgumentError(\n                'Vaulting is disabled but a vaulted instrument was being used for this transaction',\n            );\n        }\n\n        const shouldVerifyVaultingInstrument = isUsBankAccountInstrumentLike(paymentData);\n\n        return shouldVerifyVaultingInstrument ? this.tokenizePayment(payment) : null;\n    }\n\n    private async preparePaymentData(\n        nonce: string | null,\n        payment: OrderPaymentRequestBody,\n    ): Promise<Payment> {\n        const { methodId, paymentData = {} } = payment;\n\n        if (!isUsBankAccountInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument, routingNumber, accountNumber } =\n            paymentData;\n\n        return {\n            methodId,\n            paymentData: {\n                deviceSessionId: deviceData,\n                shouldSetAsDefaultInstrument,\n                shouldSaveInstrument,\n                formattedPayload: {\n                    tokenized_bank_account: {\n                        issuer: routingNumber,\n                        masked_account_number: accountNumber.substr(-4),\n                        token: nonce,\n                    },\n                },\n            },\n        };\n    }\n\n    private async preparePaymentDataForVaultedInstrument(\n        nonce: string | null,\n        payment: OrderPaymentRequestBody,\n    ): Promise<Payment> {\n        const { methodId, paymentData = {} } = payment;\n\n        if (!isVaultedInstrument(paymentData) || !isHostedInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { instrumentId, shouldSetAsDefaultInstrument } = paymentData;\n\n        return {\n            methodId,\n            paymentData: {\n                deviceSessionId: deviceData,\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n                ...(nonce && { nonce }),\n            },\n        };\n    }\n\n    private getBankDetails(paymentData: WithBankAccountInstrument): BraintreeUsBankAccountDetails {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n\n        const ownershipType = paymentData.ownershipType.toLowerCase();\n        const accountType = paymentData.accountType.toLowerCase();\n\n        return {\n            accountNumber: paymentData.accountNumber,\n            routingNumber: paymentData.routingNumber,\n            ownershipType,\n            ...(ownershipType === 'personal'\n                ? {\n                      firstName: paymentData.firstName,\n                      lastName: paymentData.lastName,\n                  }\n                : {\n                      businessName: paymentData.businessName,\n                  }),\n            accountType,\n            billingAddress: {\n                streetAddress: billingAddress.address1,\n                extendedAddress: billingAddress.address2,\n                locality: billingAddress.city,\n                region: billingAddress.stateOrProvinceCode,\n                postalCode: billingAddress.postalCode,\n            },\n        };\n    }\n\n    private getUsBankAccountOrThrow(): BraintreeUsBankAccount {\n        if (!this.usBankAccount) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.usBankAccount;\n    }\n\n    private handleBraintreeError(error: unknown): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n}\n","import { createBraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeAchPaymentStrategy from './braintree-ach-payment-strategy';\n\nconst createBraintreeAchPaymentStrategy: PaymentStrategyFactory<BraintreeAchPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BraintreeAchPaymentStrategy(\n        paymentIntegrationService,\n        createBraintreeSdk(paymentIntegrationService),\n    );\n};\n\nexport default toResolvableModule(createBraintreeAchPaymentStrategy, [{ id: 'braintreeach' }]);\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSdk from './braintree-sdk';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\n\nconst createBraintreeSdk = (paymentIntegrationService: PaymentIntegrationService) => {\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        getScriptLoader(),\n        window,\n        braintreeSDKVersionManager,\n    );\n\n    return new BraintreeSdk(braintreeScriptLoader);\n};\n\nexport default createBraintreeSdk;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@braintree/browser-detection\");","// the PayPal side of things uses uppercase keys instead of camel case\n\n/**\n *\n * PayPal constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n    WHITE = 'white',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\n/**\n *\n * PayPal interfaces\n *\n */\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    buyerCountry?: string;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface MessagesStyleOptions {\n    color?: string; // 'blue' | 'black' | 'white' | 'white-no-border' | 'gray' | 'monochrome' | 'grayscale'\n    layout?: string; // 'text' | 'flex'\n    logo?: {\n        type?: string; // 'primary' | 'alternative' | 'inline' | 'none'\n        position?: string; // 'left' | 'right' | 'top'\n    };\n    ratio?: string; // '1x1' | '1x4' | '8x1' | '20x1'\n    text?: {\n        align?: string; // 'left' | 'right' | 'center'\n        color?: string; // 'black' | 'white' | 'monochrome' | 'grayscale'\n        size?: number; // from 10 to 16\n    };\n}\n\nexport enum MessagingPlacements {\n    CART = 'cart',\n    HOME = 'homepage',\n    PAYMENT = 'payment',\n    PRODUCT = 'product',\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onClick?(): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number | string;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n    close(): void;\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<unknown>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n","import { supportsPopups } from '@braintree/browser-detection';\n\nimport {\n    Address,\n    LegacyAddress,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { Overlay } from '@bigcommerce/checkout-sdk/ui';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeDataCollectors,\n    BraintreeEnv,\n    BraintreeError,\n    BraintreeFastlane,\n    BraintreeFastlaneStylesOption,\n    BraintreeHostWindow,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeShippingAddressOverride,\n    BraintreeTokenizationDetails,\n    BraintreeTokenizePayload,\n    PAYPAL_COMPONENTS,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\n\nexport interface PaypalConfig {\n    amount: number;\n    currency: string;\n    locale: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    shouldSaveInstrument?: boolean;\n}\n\n// Info: this class is deprecated and will be removed in a nearest future. Please, do not add anything here.\nexport default class BraintreeIntegrationService {\n    private client?: Promise<BraintreeClient>;\n    private clientToken?: string;\n    private dataCollectors: BraintreeDataCollectors = {};\n    private paypalCheckout?: BraintreePaypalCheckout;\n    private braintreePaypal?: Promise<BraintreePaypal>;\n\n    constructor(\n        private braintreeScriptLoader: BraintreeScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private overlay?: Overlay,\n    ) {}\n\n    initialize(clientToken: string) {\n        this.clientToken = clientToken;\n    }\n\n    async getBraintreeFastlane(\n        cardId?: string,\n        isTestModeEnabled?: boolean,\n        styles?: BraintreeFastlaneStylesOption,\n    ): Promise<BraintreeFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('axoEnv', 'sandbox');\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n        }\n\n        if (!this.braintreeHostWindow.braintreeFastlane) {\n            const clientToken = this.getClientTokenOrThrow();\n            const client = await this.getClient();\n            const deviceData = await this.getSessionId(cardId);\n\n            const braintreeFastlaneCreator = await this.braintreeScriptLoader.loadFastlane();\n\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.braintreeHostWindow.braintreeFastlane = await braintreeFastlaneCreator.create({\n                authorization: clientToken,\n                client,\n                deviceData,\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.braintreeHostWindow.braintreeFastlane;\n    }\n\n    // Info: This method is deprecated. Use getClient method from BraintreeSdk class instead\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this.braintreePaypal) {\n            this.braintreePaypal = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadPaypal(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.braintreePaypal;\n    }\n\n    paypal({ shouldSaveInstrument, ...config }: PaypalConfig): Promise<BraintreeTokenizePayload> {\n        const newWindowFlow = supportsPopups();\n\n        return this.getPaypal()\n            .then((paypal) => {\n                if (newWindowFlow) {\n                    this.overlay?.show({\n                        onClick: () => paypal.focusWindow(),\n                    });\n                }\n\n                return paypal.tokenize({\n                    enableShippingAddress: true,\n                    flow: shouldSaveInstrument ? 'vault' : 'checkout',\n                    useraction: 'commit',\n                    ...config,\n                });\n            })\n            .then((response) => {\n                this.overlay?.remove();\n\n                return response;\n            })\n            .catch((error) => {\n                this.overlay?.remove();\n\n                throw error;\n            });\n    }\n\n    async getPaypalCheckout(\n        config: Partial<BraintreePaypalSdkCreatorConfig>,\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this.braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (\n            error: BraintreeError | undefined,\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n            const paypalSdkLoadConfig = {\n                currency: config.currency,\n                ...(config.isCreditEnabled && { 'enable-funding': 'paylater' }),\n                components: PAYPAL_COMPONENTS.toString(),\n                intent: config.intent,\n                commit: config.commit ?? true,\n            };\n\n            if (!this.braintreeHostWindow.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this.paypalCheckout = await paypalCheckout.create(\n            paypalCheckoutConfig,\n            paypalCheckoutCallback,\n        );\n\n        return this.paypalCheckout;\n    }\n\n    async getDataCollector(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const cacheKey: keyof BraintreeDataCollectors = options?.paypal ? 'paypal' : 'default';\n\n        let cached = this.dataCollectors[cacheKey];\n\n        if (!cached) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                cached = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    cached = {\n                        deviceData: undefined,\n                        teardown: () => Promise.resolve(),\n                    };\n                } else {\n                    throw error;\n                }\n            }\n\n            this.dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getBraintreeEnv(isTestMode = false): BraintreeEnv {\n        return isTestMode ? BraintreeEnv.Sandbox : BraintreeEnv.Production;\n    }\n\n    mapToBraintreeShippingAddressOverride(address: Address): BraintreeShippingAddressOverride {\n        return {\n            recipientName: `${address.firstName} ${address.lastName}`,\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n        };\n    }\n\n    mapToLegacyShippingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { email, phone, shippingAddress } = details;\n        const recipientName = shippingAddress?.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email,\n            first_name: firstName || '',\n            last_name: lastName || '',\n            phone_number: phone,\n            address_line_1: shippingAddress?.line1,\n            address_line_2: shippingAddress?.line2,\n            city: shippingAddress?.city,\n            state: shippingAddress?.state,\n            country_code: shippingAddress?.countryCode,\n            postal_code: shippingAddress?.postalCode,\n        };\n    }\n\n    mapToLegacyBillingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n        const address = billingAddress || shippingAddress;\n\n        return {\n            email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: phone,\n            address_line_1: address?.line1,\n            address_line_2: address?.line2,\n            city: address?.city,\n            state: address?.state,\n            country_code: address?.countryCode,\n            postal_code: address?.postalCode,\n        };\n    }\n\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n\n    async getSessionId(cartId?: string): Promise<string | undefined> {\n        const { deviceData } = await this.getDataCollector({\n            riskCorrelationId: cartId,\n        });\n\n        return deviceData;\n    }\n\n    async teardown(): Promise<void> {\n        await this.teardownModule(this.dataCollectors.default);\n        await this.teardownModule(this.dataCollectors.paypal);\n        this.dataCollectors = {};\n\n        await this.teardownModule(this.paypalCheckout);\n        this.paypalCheckout = undefined;\n\n        // await this.teardownModule(this._venmoCheckout);\n        // this._venmoCheckout = undefined;\n\n        // await this.teardownModule(this._visaCheckout);\n        // this._visaCheckout = undefined;\n    }\n\n    private teardownModule(module?: BraintreeModule) {\n        return module ? module.teardown() : Promise.resolve();\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n}\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    PayPalBNPLConfigurationItem,\n} from './braintree';\nimport { MessagesStyleOptions, MessagingPlacements } from './paypal';\n\nexport default class BraintreeMessages {\n    private braintreeHostWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    render(methodId: string, containerId: string, placement: MessagingPlacements): void {\n        const messagingContainer = containerId && document.getElementById(containerId);\n\n        if (this.braintreeHostWindow.paypal && messagingContainer) {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const billingAddress = state.getBillingAddressOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n\n            if (!paymentMethod.initializationData) {\n                return;\n            }\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData;\n\n            const bannedId = placement === MessagingPlacements.PAYMENT ? 'checkout' : placement;\n            const bannerConfiguration =\n                paypalBNPLConfiguration &&\n                paypalBNPLConfiguration.find(({ id }) => id === bannedId);\n\n            if (!bannerConfiguration || !bannerConfiguration.status) {\n                return;\n            }\n\n            // TODO: remove this code when this data attributes will be removed from banner div container in content service\n            if (placement === MessagingPlacements.CART) {\n                messagingContainer.removeAttribute('data-pp-style-logo-type');\n                messagingContainer.removeAttribute('data-pp-style-logo-position');\n                messagingContainer.removeAttribute('data-pp-style-text-color');\n                messagingContainer.removeAttribute('data-pp-style-text-size');\n            }\n\n            this.braintreeHostWindow.paypal\n                .Messages({\n                    amount: cart.cartAmount,\n                    buyerCountry: billingAddress.countryCode,\n                    placement,\n                    style: this.getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n                })\n                .render(`#${containerId}`);\n        }\n    }\n\n    private getPaypalMessagesStylesFromBNPLConfig({\n        styles,\n    }: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n        const messagesStyles: MessagesStyleOptions = {};\n\n        if (styles.color) {\n            messagesStyles.color = styles.color;\n        }\n\n        if (styles.layout) {\n            messagesStyles.layout = styles.layout;\n        }\n\n        if (styles['logo-type'] || styles['logo-position']) {\n            messagesStyles.logo = {};\n\n            if (styles['logo-type']) {\n                messagesStyles.logo.type = styles['logo-type'];\n            }\n\n            if (styles['logo-position']) {\n                messagesStyles.logo.position = styles['logo-position'];\n            }\n        }\n\n        if (styles.ratio) {\n            messagesStyles.ratio = styles.ratio;\n        }\n\n        if (styles['text-color'] || styles['text-size']) {\n            messagesStyles.text = {};\n\n            if (styles['text-color']) {\n                messagesStyles.text.color = styles['text-color'];\n            }\n\n            if (styles['text-size']) {\n                messagesStyles.text.size = +styles['text-size'];\n            }\n        }\n\n        return messagesStyles;\n    }\n}\n","import getOverlayStyle from './overlay-style';\n\nexport interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    hasCloseButton?: boolean;\n    innerHtml?: HTMLElement | DocumentFragment;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n    onClickClose?(event: MouseEvent): void;\n}\n\nexport interface Elements {\n    element: HTMLElement;\n    mainElement: HTMLElement;\n    closeElement?: HTMLElement;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _mainElement: HTMLElement;\n    private _closeElement?: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        const { element, closeElement, mainElement } = this._createElements(options);\n\n        this._element = element;\n        this._closeElement = closeElement;\n        this._mainElement = mainElement;\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._mainElement.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._mainElement);\n\n        // Fade In\n        setTimeout(() => (this._element.style.opacity = '1'));\n    }\n\n    remove(): void {\n        if (!this._mainElement.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => (this._element.style.opacity = '0'));\n    }\n\n    private _createElements(options?: OverlayOptions): Elements {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = 'checkoutOverlay',\n            transitionDuration = 400,\n            hasCloseButton = false,\n            innerHtml = null,\n        } = options || {};\n        let mainElement = element;\n        let closeElement: HTMLElement | undefined;\n        let classLayout: string | undefined;\n        let classClose: string | undefined;\n        let classOverlayText: string | undefined;\n\n        if (id) {\n            element.id = id;\n        }\n\n        if (innerHtml) {\n            const overlayText = document.createElement('div');\n\n            classOverlayText = `${id}--overlayText`;\n            overlayText.className = classOverlayText;\n            overlayText.appendChild(innerHtml);\n\n            element.appendChild(overlayText);\n        }\n\n        if (hasCloseButton) {\n            classClose = `${id}--close`;\n            closeElement = document.createElement('div');\n            closeElement.className = classClose;\n\n            classLayout = `${id}--layout`;\n            mainElement = document.createElement('div');\n            mainElement.className = classLayout;\n\n            mainElement.appendChild(element);\n            mainElement.appendChild(closeElement);\n        }\n\n        mainElement.appendChild(\n            getOverlayStyle({\n                id,\n                background,\n                transitionDuration,\n                classLayout,\n                classOverlayText,\n                classClose,\n            }),\n        );\n\n        return { element, closeElement, mainElement };\n    }\n\n    private _addEventListener(element?: HTMLElement, onClick?: (event: MouseEvent) => void): void {\n        if (!element || !onClick) {\n            return;\n        }\n\n        element.addEventListener('click', onClick);\n    }\n\n    private _removeEventListener(\n        element?: HTMLElement,\n        onClick?: (event: MouseEvent) => void,\n    ): void {\n        if (!element || !onClick) {\n            return;\n        }\n\n        element.removeEventListener('click', onClick);\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options) {\n            const { onClick, onClickClose } = options;\n\n            this._addEventListener(this._element, onClick);\n            this._addEventListener(this._closeElement, onClickClose);\n\n            this._unregisterClick = () => {\n                this._removeEventListener(this._element, onClick);\n                this._removeEventListener(this._closeElement, onClickClose);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handleTransition: (event: Event) => void = (event) => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._mainElement.parentElement) {\n                this._mainElement.remove();\n            }\n\n            this._element.removeEventListener('transitionend', handleTransition);\n        };\n\n        this._element.addEventListener('transitionend', handleTransition);\n    }\n}\n","interface OverlayStyleOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    classLayout?: string;\n    classOverlayText?: string;\n    classClose?: string;\n}\n\nexport default function getOverlayStyle(options: OverlayStyleOptions): HTMLElement {\n    const { id, background, transitionDuration, classLayout, classOverlayText, classClose } =\n        options;\n    const styles = document.createElement('style');\n    const addClassLayout = classLayout ? `, .${classLayout}` : '';\n\n    styles.id = `${id}--styles`;\n    styles.type = 'text/css';\n    styles.innerText = `\n        #${id}${addClassLayout} {\n            display: block;\n            height: 100%;\n            width: 100%;\n            left: 0;\n            top: 0;\n            position: fixed;\n            z-index: 2147483647;\n        }\n        #${id} {\n            transition: opacity ${transitionDuration}ms ease-out;\n            background: ${background};\n            opacity: 0;\n        }\n    `;\n\n    if (classOverlayText) {\n        styles.innerText += `\n             #${id} {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n             }\n             #${id} .${classOverlayText} {\n                color: white;\n                max-width: 330px;\n                font-size: 1.2em;\n                text-align: center;\n             }\n        `;\n    }\n\n    if (classClose) {\n        styles.innerText += `\n            #${id} {\n                opacity: 1;\n            }\n            .${classLayout} .${classClose} {\n                position: fixed;\n                right: 16px;\n                top: 16px;\n                width: 16px;\n                height: 16px;\n                opacity: 0.6;\n                cursor: pointer;\n                z-index: 3147483647;\n            }\n            .${classLayout} .${classClose}::after, .${classLayout} .${classClose}::before {\n                position: absolute;\n                left: 8px;\n                content: '';\n                height: 16px;\n                width: 2px;\n                background-color: #fff;\n            }\n            .${classLayout} .${classClose}::after {\n                transform: rotate(-45deg);\n            }\n            .${classLayout} .${classClose}::before {\n                transform: rotate(45deg);\n            }\n        `;\n    }\n\n    return styles;\n}\n","export const LOADING_INDICATOR_STYLES = {\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n","import { BraintreeError } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nexport default function isBraintreeError(\n    error: BraintreeError | Error | unknown,\n): error is BraintreeError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'name' in error &&\n        (error as BraintreeError).name === 'BraintreeError'\n    );\n}\n","import { BraintreeShippingAddressOverride } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function mapToBraintreeShippingAddressOverride(\n    address: Address,\n): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    MessagingPlacements,\n    PaypalAuthorizeData,\n    PaypalButtonRender,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    FormattedPayload,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isHostedVaultedInstrument,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    PaypalInstrument,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport isBraintreeError from '../is-braintree-error';\nimport isBraintreePaypalProviderError from '../is-braintree-paypal-provider-error';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport {\n    BraintreePaypalPaymentInitializeOptions,\n    WithBraintreePaypalPaymentInitializeOptions,\n} from './braintree-paypal-payment-initialize-options';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private paymentMethod?: PaymentMethod<BraintreeInitializationData>;\n    private braintreeHostWindow: BraintreeHostWindow = window;\n    private braintree?: BraintreePaypalPaymentInitializeOptions;\n    private braintreeTokenizePayload?: BraintreeTokenizePayload;\n    private paypalButtonRender?: PaypalButtonRender;\n    private loadingIndicatorContainer?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeMessages: BraintreeMessages,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreePaypalPaymentInitializeOptions,\n    ) {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this.braintree = braintreeOptions;\n\n        if (!this.paymentMethod || !this.paymentMethod.nonce) {\n            this.paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethodOrThrow(methodId);\n        }\n\n        if (this.paymentMethod.clientToken && braintreeOptions?.bannerContainerId) {\n            await this.loadPaypal();\n\n            return this.loadPaypalCheckoutInstance();\n        }\n\n        if (this.paymentMethod.clientToken) {\n            return this.loadPaypal();\n        }\n\n        const state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        this.paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        if (braintreeOptions?.bannerContainerId) {\n            return this.loadPaypalCheckoutInstance();\n        }\n\n        if (!this.paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this.loadPaypal();\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        const { onError } = this.braintree || {};\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const shouldHandleInstrumentDeclinedError =\n            features && features['PAYPAL-3521.handling_declined_error_braintree'];\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        try {\n            const paymentData = await this.preparePaymentData(payment, order.useStoreCredit);\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment(paymentData);\n        } catch (error) {\n            if (this.isProviderError(error) && shouldHandleInstrumentDeclinedError) {\n                await this.loadPaypal();\n\n                this.paypalButtonRender?.close();\n\n                await this.loadPaypalCheckoutInstance();\n\n                await new Promise((_resolve, reject) => {\n                    if (onError && typeof onError === 'function') {\n                        onError(new Error('INSTRUMENT_DECLINED'));\n                    }\n\n                    reject();\n                });\n            }\n\n            this.handleError(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.braintreeTokenizePayload = undefined;\n\n        this.paypalButtonRender?.close();\n\n        return this.braintreeIntegrationService.teardown();\n    }\n\n    private async preparePaymentData(\n        payment: OrderPaymentRequestBody,\n        useStoreCredit?: boolean,\n    ): Promise<Payment> {\n        const state = this.paymentIntegrationService.getState();\n\n        const grandTotal = state.getOutstandingBalance(useStoreCredit);\n        const config = state.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this.paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const {\n            currency,\n            storeProfile: { storeLanguage },\n        } = config;\n        const {\n            nonce,\n            config: { isVaultingEnabled },\n        } = this.paymentMethod;\n        const { methodId, paymentData = {} } = payment;\n\n        const token = this.braintreeTokenizePayload?.nonce || nonce;\n\n        if (token) {\n            const state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n            this.paymentMethod = state.getPaymentMethod(methodId);\n\n            return {\n                ...payment,\n                paymentData: this.formattedPayload(token),\n            };\n        }\n\n        if (isVaultedInstrument(paymentData) || isHostedVaultedInstrument(paymentData)) {\n            if (!isVaultingEnabled) {\n                throw new InvalidArgumentError(\n                    'Vaulting is disabled but a vaulted instrument was being used for this transaction',\n                );\n            }\n\n            return Promise.resolve(payment);\n        }\n\n        if (!isHostedInstrumentLike(paymentData)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = paymentData;\n\n        if (shouldSaveInstrument && !isVaultingEnabled) {\n            throw new InvalidArgumentError(\n                'Vaulting is disabled but shouldSaveInstrument is set to true',\n            );\n        }\n\n        const shippingAddress = state.getShippingAddress();\n\n        const shippingAddressOverride = shippingAddress\n            ? mapToBraintreeShippingAddressOverride(shippingAddress)\n            : undefined;\n\n        return Promise.all([\n            this.braintreeIntegrationService.paypal({\n                amount: grandTotal,\n                locale: storeLanguage,\n                currency: currency.code,\n                offerCredit: this.paymentMethod.id === 'braintreepaypalcredit',\n                shippingAddressOverride,\n                shouldSaveInstrument: shouldSaveInstrument || false,\n                shippingAddressEditable: false,\n            }),\n            this.braintreeIntegrationService.getSessionId(),\n        ]).then(([{ nonce, details } = {} as any, sessionId]) => ({\n            ...payment,\n            paymentData: this.formattedPayload(\n                nonce,\n                details && details.email,\n                sessionId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            ),\n        }));\n    }\n\n    private formattedPayload(\n        token: string,\n        email?: string,\n        sessionId?: string,\n        vaultPaymentInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): FormattedPayload<PaypalInstrument> {\n        return {\n            formattedPayload: {\n                vault_payment_instrument: vaultPaymentInstrument || null,\n                set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                device_info: sessionId || null,\n                paypal_account: {\n                    token,\n                    email: email || null,\n                },\n            },\n        };\n    }\n\n    private async loadPaypalCheckoutInstance() {\n        const { clientToken, initializationData } = this.paymentMethod || {};\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken);\n\n            const currencyCode = this.paymentIntegrationService.getState().getCartOrThrow()\n                .currency.code;\n\n            const paypalCheckoutConfig: Partial<BraintreePaypalSdkCreatorConfig> = {\n                currency: currencyCode,\n                intent: initializationData?.intent,\n                isCreditEnabled: initializationData?.isCreditEnabled,\n            };\n\n            await this.braintreeIntegrationService.getPaypalCheckout(\n                paypalCheckoutConfig,\n                (braintreePaypalCheckout) => {\n                    if (this.paymentMethod?.id && this.braintree?.bannerContainerId) {\n                        this.renderPayPalMessages(\n                            this.paymentMethod.id,\n                            this.braintree.bannerContainerId,\n                        );\n                    }\n\n                    this.renderPayPalButton(braintreePaypalCheckout);\n                },\n                this.handleError,\n            );\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private renderPayPalMessages(methodId: string, containerId: string) {\n        this.braintreeMessages.render(methodId, containerId, MessagingPlacements.PAYMENT);\n    }\n\n    private renderPayPalButton(braintreePaypalCheckout: BraintreePaypalCheckout) {\n        const { onPaymentError, submitForm, onRenderButton, containerId, onError } =\n            this.braintree || {};\n\n        if (!containerId) {\n            return;\n        }\n\n        if (!this.paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this.loadingIndicatorContainer = containerId.split('#')[1];\n\n        const {\n            id,\n            config: { testMode },\n        } = this.paymentMethod;\n\n        const { paypal } = this.braintreeHostWindow;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            this.paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                commit: false,\n                fundingSource,\n                onClick: () => {\n                    this.toggleLoadingIndicator(true);\n                },\n                createOrder: () => this.setupPayment(braintreePaypalCheckout, id, onPaymentError),\n                onApprove: async (authorizeData: PaypalAuthorizeData) => {\n                    this.braintreeTokenizePayload = await this.tokenizePaymentOrThrow(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                    );\n\n                    if (submitForm && typeof submitForm === 'function') {\n                        submitForm();\n                    }\n                },\n                onCancel: () => {\n                    this.toggleLoadingIndicator(false);\n                },\n                onError: (error: Error) => {\n                    this.toggleLoadingIndicator(false);\n\n                    onError?.(error);\n                },\n            });\n\n            if (onRenderButton && typeof onRenderButton === 'function') {\n                onRenderButton();\n            }\n\n            if (this.paypalButtonRender.isEligible()) {\n                this.paypalButtonRender.render(`${containerId}`);\n            }\n        } else {\n            this.removeElement(containerId.split('#')[1]);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        method: string,\n        onPaymentError: BraintreePaypalPaymentInitializeOptions['onPaymentError'],\n    ): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n\n        try {\n            const customer = state.getCustomer();\n\n            const paymentMethod: PaymentMethod = state.getPaymentMethodOrThrow(method);\n\n            const amount = state.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode = state.getStoreConfigOrThrow().currency.code;\n\n            const shippingAddress = state.getShippingAddress();\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n                intent: paymentMethod.initializationData.intent,\n            });\n        } catch (error) {\n            if (onPaymentError && (isBraintreeError(error) || error instanceof StandardError)) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePaymentOrThrow(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            return await braintreePaypalCheckout.tokenizePayment(authorizeData);\n        } catch (error) {\n            if (onError && (isBraintreeError(error) || error instanceof StandardError)) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async loadPaypal() {\n        const { clientToken, initializationData } = this.paymentMethod || {};\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken);\n\n            await this.braintreeIntegrationService.getPaypal();\n        } catch (error) {\n            this.handleError(error);\n        }\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: BraintreeError | Error | unknown): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private isProviderError(error: unknown): boolean {\n        if (isBraintreePaypalProviderError(error)) {\n            const paypalProviderError = error?.errors?.filter((e) => e.provider_error) || [];\n\n            return paypalProviderError[0]?.provider_error?.code === '2046';\n        }\n\n        return false;\n    }\n\n    private removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","export interface ProviderError extends Error {\n    errors?: ErrorElement[];\n    status?: string;\n    three_ds_result?: {\n        acs_url: unknown;\n        payer_auth_request: unknown;\n        merchant_data: unknown;\n        callback_url: unknown;\n    };\n}\n\nexport interface ErrorElement {\n    code: string;\n    message: string;\n    provider_error?: {\n        code: string;\n    };\n}\n\nexport default function isBraintreePaypalProviderError(error: unknown): error is ProviderError {\n    return typeof error === 'object' && error !== null && 'errors' in error;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator, Overlay } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../braintree-paypal-constants';\n\nimport BraintreePaypalPaymentStrategy from './braintree-paypal-payment-strategy';\n\nconst createBraintreePaypalPaymentStrategy: PaymentStrategyFactory<\n    BraintreePaypalPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const overlay = new Overlay();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n        overlay,\n    );\n    const braintreeMessages = new BraintreeMessages(paymentIntegrationService);\n\n    return new BraintreePaypalPaymentStrategy(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n        braintreeMessages,\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalPaymentStrategy, [\n    { id: 'braintreepaypal' },\n    { id: 'braintreepaypalcredit' },\n]);\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { BraintreeOrderStatusData } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class BraintreeRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async getOrderStatus(\n        methodId = 'braintreelocalmethods',\n        options?: RequestOptions,\n    ): Promise<BraintreeOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<BraintreeOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { noop } from 'lodash';\n\nimport {\n    BraintreeInitializationData,\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentConfig,\n    BraintreeLocalPaymentMethodRedirectAction,\n    BraintreeLocalPaymentsPayload,\n    BraintreeLPMPaymentStartData,\n    BraintreeLPMStartPaymentError,\n    BraintreeOrderSavedResponse,\n    BraintreeOrderStatus,\n    BraintreeRedirectError,\n    BraintreeSdk,\n    NonInstantLocalPaymentMethods,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentInstrumentMeta,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    RequestOptions,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport BraintreeRequestSender from '../braintree-request-sender';\n\nimport {\n    BraintreeLocalMethodsPaymentInitializeOptions,\n    WithBraintreeLocalMethodsPaymentInitializeOptions,\n} from './braintree-local-methods-payment-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class BraintreeLocalMethodsPaymentStrategy implements PaymentStrategy {\n    private braintreelocalmethods?: BraintreeLocalMethodsPaymentInitializeOptions;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private gatewayId?: string;\n    private isLPMsUpdateExperimentEnabled = false;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n    private isPollingEnabled = false;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeSdk: BraintreeSdk,\n        private braintreeRequestSender: BraintreeRequestSender,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeLocalMethodsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, braintreelocalmethods } = options;\n\n        this.gatewayId = gatewayId;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreelocalmethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreelocalmethods\" argument is not provided.`,\n            );\n        }\n\n        this.braintreelocalmethods = braintreelocalmethods;\n        this.loadingIndicatorContainer = braintreelocalmethods.container.split('#')[1];\n\n        await this.paymentIntegrationService.loadPaymentMethod(gatewayId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(gatewayId);\n        const { clientToken, config, initializationData } = paymentMethod;\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        this.isPollingEnabled = isExperimentEnabled(\n            features,\n            'PAYPAL-5258.braintree_local_methods_polling',\n        );\n\n        this.isLPMsUpdateExperimentEnabled = isExperimentEnabled(\n            features,\n            'PAYPAL-4853.add_new_payment_flow_for_braintree_lpms',\n        );\n\n        if (!clientToken || !initializationData || !config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this.braintreeSdk.initialize(clientToken);\n\n            if (!this.isNonInstantPaymentMethod(methodId)) {\n                this.braintreeLocalPayment = await this.braintreeSdk.getBraintreeLocalPayment(\n                    config.merchantId,\n                );\n            }\n        } catch (error: unknown) {\n            this.handleError(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        this.toggleLoadingIndicator(false);\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n\n        this.toggleLoadingIndicator(true);\n\n        if (this.isNonInstantPaymentMethod(methodId)) {\n            await this.executeWithNotInstantLPM(methodId);\n        } else {\n            await this.executeWithInstantLPM(methodId, order, options);\n        }\n    }\n\n    private async executeWithNotInstantLPM(methodId: string): Promise<void> {\n        try {\n            const basicPaymentData = await this.getLPMsBasicPaymentData();\n\n            await this.paymentIntegrationService.submitOrder();\n            await this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: {\n                    ...basicPaymentData,\n                    formattedPayload: {\n                        method: methodId,\n                    },\n                },\n            });\n        } catch (error: unknown) {\n            if (this.isBraintreeRedirectError(error)) {\n                const redirectUrl = error.body.additional_action_required.data.redirect_url;\n\n                return new Promise((_, reject) => {\n                    window.location.replace(redirectUrl);\n\n                    this.toggleLoadingIndicator(false);\n\n                    reject();\n                });\n            }\n\n            this.handleError(error);\n\n            return Promise.reject(error);\n        }\n    }\n\n    private async executeWithInstantLPM(\n        methodId: string,\n        order: Omit<OrderRequestBody, 'payment'>,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        if (!this.braintreeLocalPayment) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await new Promise((resolve, reject): void => {\n            this.braintreeLocalPayment?.startPayment(\n                this.getInstantLPMConfig(methodId, order, options),\n                this.getInstantLPMCallback(resolve, reject, methodId, order, options),\n            );\n        });\n    }\n\n    private async getLPMsBasicPaymentData(): Promise<PaymentInstrumentMeta> {\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n\n        return { deviceSessionId: deviceData };\n    }\n\n    private getInstantLPMConfig(\n        methodId: string,\n        order: Omit<OrderRequestBody, 'payment'>,\n        options?: RequestOptions,\n    ): BraintreeLocalPaymentConfig {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const billing = state.getBillingAddressOrThrow();\n        const { firstName, lastName, countryCode } = billing;\n        const { currency, email, lineItems } = cart;\n        const isShippingRequired = lineItems.physicalItems.length > 0;\n        const grandTotal = state.getCheckoutOrThrow().outstandingBalance;\n        const checkoutUrl = state.getStoreConfigOrThrow().links.checkoutLink;\n\n        return {\n            paymentType: methodId,\n            amount: grandTotal,\n            fallback: {\n                url: checkoutUrl,\n                buttonText: 'Complete Payment',\n            },\n            currencyCode: currency.code,\n            shippingAddressRequired: isShippingRequired,\n            email,\n            givenName: firstName,\n            surname: lastName,\n            address: {\n                countryCode,\n            },\n            onPaymentStart: async (data: BraintreeLPMPaymentStartData, start: () => void) => {\n                if (!this.isLPMsUpdateExperimentEnabled) {\n                    this.orderId = data.paymentId;\n\n                    start();\n\n                    return;\n                }\n\n                const basicPaymentData = await this.getLPMsBasicPaymentData();\n                const paymentData = {\n                    ...basicPaymentData,\n                    formattedPayload: {\n                        method: methodId,\n                        [`${methodId}_account`]: {\n                            order_id: data.paymentId,\n                        },\n                    },\n                };\n\n                try {\n                    // Submit order and payment should be performed to pass order_id to the backend\n                    await this.paymentIntegrationService.submitOrder(order, options);\n                    await this.paymentIntegrationService.submitPayment({\n                        methodId,\n                        paymentData,\n                    });\n                } catch (error: unknown) {\n                    if (\n                        this.isBraintreeOrderSavedResponse(error) &&\n                        error.body.additional_action_required.data.order_id_saved_successfully\n                    ) {\n                        // Start method call initiates the popup\n                        start();\n\n                        if (this.isPollingEnabled) {\n                            return new Promise((resolve, reject) => {\n                                void this.initializePollingMechanism(\n                                    methodId,\n                                    resolve,\n                                    reject,\n                                    this.gatewayId,\n                                );\n                            });\n                        }\n\n                        return;\n                    }\n\n                    throw error;\n                }\n            },\n        };\n    }\n\n    private getInstantLPMCallback(\n        resolve: (value: unknown) => void,\n        reject: (reason?: unknown) => void,\n        methodId: string,\n        order: Omit<OrderRequestBody, 'payment'>,\n        options?: RequestOptions,\n    ) {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n\n        return async (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payloadData: BraintreeLocalPaymentsPayload,\n        ) => {\n            if (startPaymentError) {\n                if (startPaymentError.code === 'LOCAL_PAYMENT_WINDOW_CLOSED') {\n                    this.toggleLoadingIndicator(false);\n                    this.resetPollingMechanism();\n\n                    return reject();\n                }\n\n                if (this.isPollingEnabled) {\n                    this.resetPollingMechanism();\n                }\n\n                this.toggleLoadingIndicator(false);\n\n                return reject(new PaymentMethodInvalidError());\n            }\n\n            const basicPaymentData = await this.getLPMsBasicPaymentData();\n            const paymentData = {\n                ...basicPaymentData,\n                formattedPayload: {\n                    method: methodId,\n                    [`${methodId}_account`]: {\n                        email: cart.email,\n                        token: payloadData.nonce,\n                        ...(!this.isLPMsUpdateExperimentEnabled ? { order_id: this.orderId } : {}),\n                    },\n                },\n            };\n\n            try {\n                if (!this.isLPMsUpdateExperimentEnabled) {\n                    await this.paymentIntegrationService.submitOrder(order, options);\n                }\n\n                await this.paymentIntegrationService.submitPayment({\n                    methodId,\n                    paymentData,\n                });\n\n                return resolve(undefined);\n            } catch (error: unknown) {\n                this.handleError(error);\n\n                return reject(error);\n            }\n        };\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    private handleError(error: unknown) {\n        const { onError } = this.braintreelocalmethods || {};\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     * */\n    private isNonInstantPaymentMethod(methodId: string): boolean {\n        return methodId.toUpperCase() in NonInstantLocalPaymentMethods;\n    }\n\n    private isBraintreeRedirectError(error: unknown): error is BraintreeRedirectError {\n        if (typeof error !== 'object' || error === null) {\n            return false;\n        }\n\n        const { body }: Partial<BraintreeLocalPaymentMethodRedirectAction> = error;\n\n        if (!body) {\n            return false;\n        }\n\n        return !!body.additional_action_required?.data.redirect_url;\n    }\n\n    private isBraintreeOrderSavedResponse(\n        response: unknown,\n    ): response is BraintreeOrderSavedResponse {\n        if (typeof response !== 'object' || response === null) {\n            return false;\n        }\n\n        const { body }: Partial<BraintreeOrderSavedResponse> = response;\n\n        if (!body) {\n            return false;\n        }\n\n        return body.additional_action_required?.data.hasOwnProperty('order_id_saved_successfully');\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: () => void,\n        rejectPromise: () => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.braintreeRequestSender.getOrderStatus(gatewayId, {\n                params: {\n                    useMetadata: false,\n                },\n            });\n\n            const isOrderPending = orderStatus.status === BraintreeOrderStatus.Pending;\n            const isOrderApproved = orderStatus.status === BraintreeOrderStatus.Completed;\n            const isPollingError = orderStatus.status === BraintreeOrderStatus.Failed;\n\n            if (isOrderApproved) {\n                this.deinitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (\n                !isOrderApproved &&\n                isOrderPending &&\n                this.pollingTimer < this.maxPollingIntervalTime\n            ) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                braintreelocalmethods: this.braintreelocalmethods,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            rejectPromise();\n        }\n    }\n\n    private deinitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deinitializePollingMechanism();\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions & WithBraintreeLocalMethodsPaymentInitializeOptions,\n    ) {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BraintreeRequestSender from '../braintree-request-sender';\n\nimport BraintreeLocalMethodsPaymentStrategy from './braintree-local-methods-payment-strategy';\n\nconst createBraintreeLocalMethodsPaymentStrategy: PaymentStrategyFactory<\n    BraintreeLocalMethodsPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n    const requestSender = createRequestSender();\n    const braintreeRequestSender = new BraintreeRequestSender(requestSender);\n\n    return new BraintreeLocalMethodsPaymentStrategy(\n        paymentIntegrationService,\n        braintreeSdk,\n        braintreeRequestSender,\n        new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n    );\n};\n\nexport default toResolvableModule(createBraintreeLocalMethodsPaymentStrategy, [\n    { gateway: 'braintreelocalmethods' },\n]);\n","import { omitBy } from 'lodash';\n\nimport { BraintreeFastlaneStylesOption, FastlaneStylesSettings } from '../index';\n\nfunction isInvalidStyleOption(styleOption: unknown) {\n    return typeof styleOption !== 'string';\n}\n\nexport default function getFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: BraintreeFastlaneStylesOption,\n): BraintreeFastlaneStylesOption | undefined {\n    if (!uiStyles && !styleSettings) {\n        return undefined;\n    }\n\n    return cleanUpFastlaneStyles(mergeFastlaneStyles(styleSettings, uiStyles));\n}\n\nfunction mergeFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: BraintreeFastlaneStylesOption,\n): BraintreeFastlaneStylesOption {\n    return {\n        root: {\n            backgroundColorPrimary:\n                styleSettings?.fastlaneRootSettingsBackgroundColor ||\n                uiStyles?.root?.backgroundColorPrimary,\n            errorColor: styleSettings?.fastlaneRootSettingsErrorColor || uiStyles?.root?.errorColor,\n            fontFamily: styleSettings?.fastlaneRootSettingsFontFamily || uiStyles?.root?.fontFamily,\n            fontSizeBase:\n                styleSettings?.fastlaneRootSettingsFontSize || uiStyles?.root?.fontSizeBase,\n            padding: styleSettings?.fastlaneRootSettingsPadding || uiStyles?.root?.padding,\n            primaryColor:\n                styleSettings?.fastlaneRootSettingsPrimaryColor || uiStyles?.root?.primaryColor,\n        },\n        input: {\n            borderRadius:\n                styleSettings?.fastlaneInputSettingsBorderRadius || uiStyles?.input?.borderRadius,\n            borderColor:\n                styleSettings?.fastlaneInputSettingsBorderColor || uiStyles?.input?.borderColor,\n            focusBorderColor:\n                styleSettings?.fastlaneInputSettingsFocusBorderBase ||\n                uiStyles?.input?.focusBorderColor,\n            backgroundColor:\n                styleSettings?.fastlaneInputSettingsBackgroundColor ||\n                uiStyles?.input?.backgroundColor,\n            borderWidth:\n                styleSettings?.fastlaneInputSettingsBorderWidth || uiStyles?.input?.borderWidth,\n            textColorBase:\n                styleSettings?.fastlaneInputSettingsTextColorBase || uiStyles?.input?.textColorBase,\n        },\n        toggle: {\n            colorPrimary:\n                styleSettings?.fastlaneToggleSettingsColorPrimary || uiStyles?.toggle?.colorPrimary,\n            colorSecondary:\n                styleSettings?.fastlaneToggleSettingsColorSecondary ||\n                uiStyles?.toggle?.colorSecondary,\n        },\n        text: {\n            body: {\n                color: styleSettings?.fastlaneTextBodySettingsColor || uiStyles?.text?.body?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextBodySettingsFontSize ||\n                    uiStyles?.text?.body?.fontSize,\n            },\n            caption: {\n                color:\n                    styleSettings?.fastlaneTextCaptionSettingsColor ||\n                    uiStyles?.text?.caption?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextCaptionSettingsFontSize ||\n                    uiStyles?.text?.caption?.fontSize,\n            },\n        },\n        branding: styleSettings?.fastlaneBrandingSettings || uiStyles?.branding,\n    };\n}\n\nfunction cleanUpFastlaneStyles(styles: BraintreeFastlaneStylesOption) {\n    const fastlaneStyles: BraintreeFastlaneStylesOption = {};\n\n    const root = omitBy(styles.root, isInvalidStyleOption);\n    const input = omitBy(styles.input, isInvalidStyleOption);\n    const toggle = omitBy(styles.toggle, isInvalidStyleOption);\n    const textBody = omitBy(styles.text?.body, isInvalidStyleOption);\n    const textCaption = omitBy(styles.text?.caption, isInvalidStyleOption);\n    const branding = styles.branding;\n\n    if (Object.keys(root).length) {\n        fastlaneStyles.root = root;\n    }\n\n    if (Object.keys(input).length) {\n        fastlaneStyles.input = input;\n    }\n\n    if (Object.keys(toggle).length) {\n        fastlaneStyles.toggle = toggle;\n    }\n\n    if (Object.keys(textBody).length) {\n        fastlaneStyles.text = {};\n        fastlaneStyles.text.body = textBody;\n    }\n\n    if (Object.keys(textCaption).length) {\n        fastlaneStyles.text = {\n            ...fastlaneStyles.text,\n        };\n        fastlaneStyles.text.caption = textCaption;\n    }\n\n    if (branding) {\n        fastlaneStyles.branding = branding;\n    }\n\n    return fastlaneStyles;\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isBraintreeAcceleratedCheckoutCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    Braintree3DSVerifyCardError,\n    Braintree3DSVerifyCardPayload,\n    BraintreeFastlaneAddress,\n    BraintreeFastlaneAuthenticationState,\n    BraintreeFastlaneCardComponent,\n    BraintreeFastlaneCardComponentOptions,\n    BraintreeInitializationData,\n    BraintreeSdk,\n    getFastlaneStyles,\n    isBraintreeAcceleratedCheckoutCustomer,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CardInstrument,\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodClientUnavailableError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { WithBraintreeFastlanePaymentInitializeOptions } from './braintree-fastlane-payment-initialize-options';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nexport default class BraintreeFastlanePaymentStrategy implements PaymentStrategy {\n    private braintreeCardComponent?: BraintreeFastlaneCardComponent;\n    private is3DSEnabled?: boolean;\n    private onError?: (error: Error) => void;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeFastlaneUtils: BraintreeFastlaneUtils,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    /**\n     *\n     * Default methods\n     *\n     */\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeFastlanePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, braintreefastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreefastlane) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreefastlane\" argument is not provided.',\n            );\n        }\n\n        if (!braintreefastlane.onInit || typeof braintreefastlane.onInit !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreefastlane.onInit\" argument is not provided or it is not a function.',\n            );\n        }\n\n        if (!braintreefastlane.onChange || typeof braintreefastlane.onChange !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreefastlane.onChange\" argument is not provided or it is not a function.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { initializationData, clientToken } = paymentMethod || {};\n        const { isFastlaneStylingEnabled } = initializationData || {};\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isThreeDSExperimentEnabled = isExperimentEnabled(\n            features,\n            'PROJECT-7080.braintree_fastlane_three_ds',\n        );\n\n        this.is3DSEnabled = paymentMethod.config.is3dsEnabled;\n\n        if (clientToken && isThreeDSExperimentEnabled) {\n            this.braintreeSdk.initialize(clientToken);\n        }\n\n        const paypalFastlaneStyleSettings = isFastlaneStylingEnabled\n            ? paymentMethod.initializationData?.fastlaneStyles\n            : undefined;\n\n        const fastlaneStyles = getFastlaneStyles(\n            paypalFastlaneStyleSettings,\n            braintreefastlane.styles,\n        );\n\n        await this.braintreeFastlaneUtils.initializeBraintreeFastlaneOrThrow(\n            methodId,\n            fastlaneStyles,\n        );\n\n        if (this.shouldRunAuthenticationFlow()) {\n            await this.braintreeFastlaneUtils.runPayPalAuthenticationFlowOrThrow();\n        }\n\n        await this.initializeCardComponent();\n\n        this.onError = braintreefastlane.onError;\n\n        braintreefastlane.onInit((container) => this.renderBraintreeCardComponent(container));\n        braintreefastlane.onChange(() => this.handleBraintreeStoredInstrumentChange(methodId));\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        const paymentPayload = await this.preparePaymentPayload(payment.methodId);\n\n        await this.paymentIntegrationService.submitPayment(paymentPayload);\n\n        this.braintreeFastlaneUtils.removeSessionIdFromCookies();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        this.braintreeCardComponent = undefined;\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Braintree Fastlane Component rendering method\n     *\n     */\n    private async initializeCardComponent() {\n        const state = this.paymentIntegrationService.getState();\n        const { phone, firstName, lastName } = state.getBillingAddressOrThrow();\n        const fullName = `${firstName} ${lastName}`;\n\n        const cardComponentOptions: BraintreeFastlaneCardComponentOptions = {\n            styles: {},\n            fields: {\n                cardholderName: {\n                    prefill: fullName,\n                    enabled: true,\n                },\n                ...(phone && {\n                    phoneNumber: {\n                        prefill: phone,\n                    },\n                }),\n            },\n        };\n\n        const paypalPaymentComponent =\n            this.braintreeFastlaneUtils.getBraintreeFastlaneComponentOrThrow();\n\n        this.braintreeCardComponent = await paypalPaymentComponent(cardComponentOptions);\n    }\n\n    private renderBraintreeCardComponent(container?: string) {\n        const braintreeCardComponent = this.getBraintreeCardComponentOrThrow();\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        braintreeCardComponent.render(container);\n    }\n\n    /**\n     *\n     * Payment Payload preparation methods\n     *\n     */\n    private async preparePaymentPayload(methodId: string): Promise<Payment> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`;\n\n        const paypalInstrument = this.getPayPalInstruments()[0];\n\n        const deviceSessionId = await this.braintreeFastlaneUtils.getDeviceSessionId();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isThreeDSExperimentEnabled = isExperimentEnabled(\n            features,\n            'PROJECT-7080.braintree_fastlane_three_ds',\n        );\n\n        if (paypalInstrument) {\n            const threeDSToken =\n                this.is3DSEnabled && isThreeDSExperimentEnabled\n                    ? await this.get3DS(paypalInstrument.bigpayToken, paypalInstrument?.iin || '')\n                    : undefined;\n\n            return {\n                methodId,\n                paymentData: {\n                    deviceSessionId,\n                    formattedPayload: {\n                        paypal_fastlane_token: {\n                            token: threeDSToken || paypalInstrument.bigpayToken,\n                        },\n                    },\n                },\n            };\n        }\n\n        const { getPaymentToken } = this.getBraintreeCardComponentOrThrow();\n\n        const paymentToken = await getPaymentToken({\n            name: { fullName },\n            billingAddress: this.mapToPayPalAddress(billingAddress),\n        });\n\n        const binGuest = paymentToken.paymentSource.card?.binDetails?.bin || '';\n        const threeDSToken =\n            this.is3DSEnabled && isThreeDSExperimentEnabled\n                ? await this.get3DS(paymentToken.id, binGuest)\n                : undefined;\n\n        return {\n            methodId,\n            paymentData: {\n                deviceSessionId,\n                nonce: threeDSToken || paymentToken.id,\n            },\n        };\n    }\n\n    /**\n     * 3DS\n     */\n    private async get3DS(nonce: string, bin: string): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n        const threeDSecure = await this.braintreeSdk.getBraintreeThreeDS();\n        const order = state.getOrderOrThrow();\n\n        return new Promise<string>((resolve, reject) => {\n            void threeDSecure.verifyCard(\n                {\n                    amount: order?.orderAmount,\n                    nonce,\n                    bin,\n                    onLookupComplete: (_data, next) => {\n                        threeDSecure.on('customer-canceled', () => {\n                            if (typeof this.onError === 'function') {\n                                this.onError(new PaymentMethodCancelledError());\n                            }\n\n                            reject(new PaymentMethodCancelledError());\n                        });\n\n                        next();\n                    },\n                },\n                (\n                    verifyError: Braintree3DSVerifyCardError,\n                    payload: Braintree3DSVerifyCardPayload,\n                ) => {\n                    if (\n                        verifyError &&\n                        verifyError.code === 'THREEDS_VERIFY_CARD_CANCELED_BY_MERCHANT'\n                    ) {\n                        if (typeof this.onError === 'function') {\n                            this.onError(new PaymentMethodCancelledError());\n                        }\n\n                        reject(new PaymentMethodCancelledError());\n                    }\n\n                    return resolve(payload.nonce);\n                },\n            );\n        });\n    }\n\n    /**\n     *\n     * Mapper methods\n     *\n     */\n    private mapToPayPalAddress(address?: Address): BraintreeFastlaneAddress {\n        return {\n            streetAddress: address?.address1 || '',\n            locality: address?.city || '',\n            region: address?.stateOrProvinceCode || address?.stateOrProvince || '',\n            postalCode: address?.postalCode || '',\n            countryCodeAlpha2: address?.countryCode || '',\n        };\n    }\n\n    /**\n     *\n     * Other methods\n     *\n     */\n    private shouldRunAuthenticationFlow(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const customer = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const braintreePaymentProviderCustomer = isBraintreeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        const paypalFastlaneSessionId = this.braintreeFastlaneUtils.getSessionIdFromCookies();\n\n        if (\n            !customer.isGuest ||\n            braintreePaymentProviderCustomer?.authenticationState ===\n                BraintreeFastlaneAuthenticationState.CANCELED\n        ) {\n            return false;\n        }\n\n        return (\n            !braintreePaymentProviderCustomer?.authenticationState &&\n            paypalFastlaneSessionId === cart.id\n        );\n    }\n\n    private getBraintreeCardComponentOrThrow() {\n        if (!this.braintreeCardComponent) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.braintreeCardComponent;\n    }\n\n    private getPayPalInstruments(): CardInstrument[] {\n        const state = this.paymentIntegrationService.getState();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const braintreePaymentProviderCustomer = isBraintreeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        return braintreePaymentProviderCustomer.instruments || [];\n    }\n\n    /**\n     *\n     * Braintree Fastlane instrument change\n     *\n     */\n    private async handleBraintreeStoredInstrumentChange(\n        methodId: string,\n    ): Promise<CardInstrument | undefined> {\n        const paypalAxoSdk = this.braintreeFastlaneUtils.getBraintreeFastlaneOrThrow();\n\n        const { selectionChanged, selectedCard } = await paypalAxoSdk.profile.showCardSelector();\n\n        if (selectionChanged) {\n            const state = this.paymentIntegrationService.getState();\n            const paymentProviderCustomer = state.getPaymentProviderCustomer();\n            const braintreeFastlaneCustomer = isBraintreeAcceleratedCheckoutCustomer(\n                paymentProviderCustomer,\n            )\n                ? paymentProviderCustomer\n                : {};\n\n            const selectedInstruments = this.braintreeFastlaneUtils.mapPayPalToBcInstrument(\n                methodId,\n                [selectedCard],\n            );\n\n            if (selectedInstruments && selectedInstruments.length > 0) {\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    ...braintreeFastlaneCustomer,\n                    instruments: [...selectedInstruments],\n                });\n\n                return selectedInstruments[0];\n            }\n        }\n\n        return undefined;\n    }\n}\n","import { isEqual, omit } from 'lodash';\n\nimport {\n    BraintreeFastlane,\n    BraintreeFastlaneAddress,\n    BraintreeFastlaneAuthenticationState,\n    BraintreeFastlaneProfileData,\n    BraintreeFastlaneStylesOption,\n    BraintreeFastlaneVaultedInstrument,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CardInstrument,\n    CustomerAddress,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    UntrustedShippingCardVerificationType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { CookieStorage } from '@bigcommerce/checkout-sdk/storage';\n\nexport default class BraintreeFastlaneUtils {\n    private braintreeFastlane?: BraintreeFastlane;\n    private methodId?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n    ) {}\n\n    async getDeviceSessionId(): Promise<string | undefined> {\n        const cart = this.paymentIntegrationService.getState().getCart();\n\n        return this.braintreeIntegrationService.getSessionId(cart?.id);\n    }\n\n    /**\n     *\n     * Initialization method\n     *\n     */\n    async initializeBraintreeFastlaneOrThrow(\n        methodId: string,\n        styles?: BraintreeFastlaneStylesOption,\n    ) {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCart();\n        const { clientToken, config } =\n            state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.methodId = methodId;\n\n        this.braintreeIntegrationService.initialize(clientToken);\n\n        this.braintreeFastlane = await this.braintreeIntegrationService.getBraintreeFastlane(\n            cart?.id,\n            config.testMode,\n            styles,\n        );\n    }\n\n    getBraintreeFastlaneOrThrow(): BraintreeFastlane {\n        if (!this.braintreeFastlane) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.braintreeFastlane;\n    }\n\n    getBraintreeFastlaneComponentOrThrow(): BraintreeFastlane['FastlaneCardComponent'] {\n        const braintreeFastlane = this.getBraintreeFastlaneOrThrow();\n\n        return braintreeFastlane.FastlaneCardComponent;\n    }\n\n    /**\n     *\n     * Authentication methods\n     *\n     * */\n    // Remove this rule disabling after method refactor\n    // eslint-disable-next-line complexity\n    async runPayPalAuthenticationFlowOrThrow(\n        email?: string,\n        shouldSetShippingOption?: boolean,\n    ): Promise<void> {\n        try {\n            const methodId = this.getMethodIdOrThrow();\n            const braintreeFastlane = this.getBraintreeFastlaneOrThrow();\n            const { lookupCustomerByEmail, triggerAuthenticationFlow } = braintreeFastlane.identity;\n\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const customer = state.getCustomer();\n            const billingAddress = state.getBillingAddress();\n            const { isFastlaneShippingOptionAutoSelectEnabled } =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId)\n                    .initializationData || {};\n\n            const customerEmail = email || customer?.email || billingAddress?.email || '';\n\n            const { customerContextId } = await lookupCustomerByEmail(customerEmail);\n\n            if (!customerContextId) {\n                // Info: we should clean up previous experience with default data and related authenticationState\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    authenticationState: BraintreeFastlaneAuthenticationState.UNRECOGNIZED,\n                    addresses: [],\n                    instruments: [],\n                });\n\n                this.saveSessionIdToCookies(cart.id);\n\n                return;\n            }\n\n            const { authenticationState, profileData } = await triggerAuthenticationFlow(\n                customerContextId,\n            );\n\n            const phoneNumber = profileData?.shippingAddress?.phoneNumber || '';\n\n            if (authenticationState === BraintreeFastlaneAuthenticationState.CANCELED) {\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    authenticationState,\n                    addresses: [],\n                    instruments: [],\n                });\n\n                this.removeSessionIdFromCookies();\n\n                return;\n            }\n\n            const shippingAddresses =\n                this.mapPayPalToBcAddress([profileData.shippingAddress], [phoneNumber]) || [];\n            const paypalBillingAddress = this.getPayPalBillingAddresses(profileData);\n            const billingAddresses = paypalBillingAddress\n                ? this.mapPayPalToBcAddress([paypalBillingAddress], [phoneNumber])\n                : [];\n            const instruments = profileData.card\n                ? this.mapPayPalToBcInstrument(methodId, [profileData.card])\n                : [];\n            const addresses = this.mergeShippingAndBillingAddresses(\n                shippingAddresses,\n                billingAddresses,\n            );\n\n            this.saveSessionIdToCookies(cart.id);\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                authenticationState,\n                addresses,\n                instruments,\n            });\n\n            if (billingAddresses.length > 0 && cart.lineItems.physicalItems.length > 0) {\n                await this.paymentIntegrationService.updateBillingAddress(billingAddresses[0]);\n            }\n\n            // Prefill billing form if only digital items in cart with billing data and firstName and lastName\n            // from shippingAddresses because there are empty in billing\n            if (\n                billingAddresses.length > 0 &&\n                cart.lineItems.digitalItems.length > 0 &&\n                cart.lineItems.physicalItems.length === 0\n            ) {\n                const { firstName, lastName } = addresses[0];\n                const digitalItemBilling = {\n                    ...billingAddresses[0],\n                    firstName,\n                    lastName,\n                };\n\n                await this.paymentIntegrationService.updateBillingAddress(digitalItemBilling);\n            }\n\n            if (shippingAddresses.length > 0 && cart.lineItems.physicalItems.length > 0) {\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddresses[0]);\n\n                if (shouldSetShippingOption && isFastlaneShippingOptionAutoSelectEnabled) {\n                    await this.setShippingOption();\n                }\n            }\n        } catch (error) {\n            // TODO: we should figure out what to do here\n            // TODO: because we should not to stop the flow if the error occurs on paypal side\n        }\n    }\n\n    /**\n     *\n     * Session id management\n     *\n     */\n    getSessionIdFromCookies(): string {\n        return CookieStorage.get('bc-fastlane-sessionId') || '';\n    }\n\n    saveSessionIdToCookies(sessionId: string): void {\n        const expires = new Date();\n\n        expires.setDate(expires.getDate() + 14); // 2 weeks expiry\n\n        CookieStorage.set('bc-fastlane-sessionId', sessionId, {\n            expires,\n            secure: true,\n        });\n    }\n\n    removeSessionIdFromCookies(): void {\n        CookieStorage.remove('bc-fastlane-sessionId');\n    }\n\n    /**\n     *\n     * PayPal to BC data mappers\n     *\n     * */\n    mapPayPalToBcInstrument(\n        methodId: string,\n        instruments?: BraintreeFastlaneVaultedInstrument[],\n    ): CardInstrument[] | undefined {\n        if (!instruments) {\n            return;\n        }\n\n        return instruments.map((instrument) => {\n            const { id, paymentSource } = instrument;\n            const { brand, expiry, lastDigits, binDetails } = paymentSource.card;\n\n            const [expiryYear, expiryMonth] = expiry.split('-');\n\n            return {\n                bigpayToken: id,\n                brand,\n                defaultInstrument: false,\n                expiryMonth,\n                expiryYear,\n                iin: binDetails?.bin || '',\n                last4: lastDigits,\n                method: methodId,\n                provider: methodId,\n                trustedShippingAddress: false,\n                type: 'card',\n                untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType.PAN,\n            };\n        });\n    }\n\n    private mapPayPalToBcAddress(\n        addresses?: BraintreeFastlaneAddress[],\n        phones?: string[],\n    ): CustomerAddress[] {\n        if (!addresses) {\n            return [];\n        }\n\n        const countries = this.paymentIntegrationService.getState().getCountries() || [];\n\n        const getCountryNameByCountryCode = (countryCode: string) => {\n            const matchedCountry = countries.find((country) => country.code === countryCode);\n\n            return matchedCountry?.name || '';\n        };\n\n        return addresses.map((address) => ({\n            id: Date.now(),\n            type: 'paypal-address',\n            firstName: address.firstName || '',\n            lastName: address.lastName || '',\n            company: address.company || '',\n            address1: address.streetAddress,\n            address2: address.extendedAddress || '',\n            city: address.locality,\n            stateOrProvince: address.region,\n            stateOrProvinceCode: address.region,\n            country: getCountryNameByCountryCode(address.countryCodeAlpha2),\n            countryCode: address.countryCodeAlpha2,\n            postalCode: address.postalCode,\n            phone: (phones && phones[0]) || '',\n            customFields: [],\n        }));\n    }\n\n    /**\n     *\n     * Get PayPal billing addresses from stored braintree instruments info\n     *\n     * */\n    private getPayPalBillingAddresses(\n        profileData?: BraintreeFastlaneProfileData,\n    ): BraintreeFastlaneAddress | undefined {\n        const { card, name } = profileData || {};\n\n        if (!card) {\n            return;\n        }\n\n        const { firstName, lastName } = card.paymentSource.card.billingAddress;\n        const { firstName: given_name, lastName: surname } = name || {};\n        const { shippingAddress } = profileData || {};\n        const address = {\n            ...card.paymentSource.card.billingAddress,\n            firstName: firstName || given_name,\n            lastName: lastName || surname,\n        };\n\n        const isAddressExist =\n            shippingAddress &&\n            isEqual(this.normalizeAddress(address), this.normalizeAddress(shippingAddress));\n\n        return isAddressExist ? shippingAddress : address;\n    }\n\n    private normalizeAddress(address: CustomerAddress | BraintreeFastlaneAddress) {\n        return omit(address, ['id']);\n    }\n\n    private mergeShippingAndBillingAddresses(\n        shippingAddresses: CustomerAddress[],\n        billingAddresses: CustomerAddress[],\n    ): CustomerAddress[] {\n        const filteredBillingAddresses = billingAddresses.filter(\n            (billingAddress: CustomerAddress) =>\n                !shippingAddresses.some((shippingAddress: CustomerAddress) => {\n                    return isEqual(\n                        this.normalizeAddress(shippingAddress),\n                        this.normalizeAddress(billingAddress),\n                    );\n                }),\n        );\n\n        return [...shippingAddresses, ...filteredBillingAddresses];\n    }\n\n    /**\n     *\n     * Other\n     *\n     * */\n    private getMethodIdOrThrow(): string {\n        if (!this.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        return this.methodId;\n    }\n\n    private async setShippingOption(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const consignments = state.getConsignments() || [];\n        const availableShippingOptions = consignments[0]?.availableShippingOptions || [];\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        if (recommendedShippingOption || availableShippingOptions.length) {\n            const selectedOption = recommendedShippingOption || availableShippingOptions[0];\n\n            await this.paymentIntegrationService.selectShippingOption(selectedOption.id);\n        }\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeFastlanePaymentStrategy from './braintree-fastlane-payment-strategy';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nconst createBraintreeFastlanePaymentStrategy: PaymentStrategyFactory<\n    BraintreeFastlanePaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    const braintreeFastlaneUtils = new BraintreeFastlaneUtils(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n    );\n\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        getScriptLoader(),\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n\n    const braintreeSdk = new BraintreeSdk(braintreeScriptLoader);\n\n    return new BraintreeFastlanePaymentStrategy(\n        paymentIntegrationService,\n        braintreeFastlaneUtils,\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeFastlanePaymentStrategy, [\n    { id: 'braintreeacceleratedcheckout' },\n]);\n","import { isNil, values } from 'lodash';\n\nimport {\n    HostedForm,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCreditCardPaymentInitializeOptions } from './credit-card-payment-initialize-options';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(protected _paymentIntegrationService: PaymentIntegrationService) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    initialize(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve();\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const state = this._paymentIntegrationService.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            state.getStoreConfigOrThrow();\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._paymentIntegrationService.createHostedForm(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return Promise.resolve();\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await form.validate().then(() => form.submit(payment));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface AdditionalActionRequired {\n    type: AdditionalActionType;\n    data: AdditionalRedirectData;\n}\n\nexport interface AdditionalRedirectData {\n    redirect_url: string;\n    transaction_id?: string;\n}\n\nexport enum AdditionalActionType {\n    OffsiteRedirect = 'offsite_redirect',\n}\n\nexport function getCheckoutcom(): PaymentMethod {\n    return {\n        id: 'checkoutcom',\n        logoUrl: '',\n        method: 'checkoutcom',\n        supportedCards: [],\n        config: {\n            displayName: 'Checkout.com',\n            merchantId: '',\n            testMode: true,\n        },\n        initializationData: {\n            checkoutcomkey: 'key',\n        },\n        type: 'PAYMENT_TYPE_API',\n        clientToken: 'clientToken',\n        skipRedirectConfirmationAlert: true,\n    };\n}\n\nexport interface WithDocumentInstrument {\n    ccDocument: string;\n}\n\nexport interface WithCheckoutcomSEPAInstrument {\n    iban: string;\n    bic: string;\n}\n\nexport interface WithCheckoutcomFawryInstrument {\n    customerMobile: string;\n    customerEmail: string;\n}\n","import { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    isRequestError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdditionalActionRequired, AdditionalActionType } from './checkoutcom';\n\nexport default class CheckoutComCustomPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(protected paymentIntegrationService: PaymentIntegrationService) {\n        super(paymentIntegrationService);\n    }\n    finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const order = state.getOrder();\n\n        if (order && state.getPaymentStatus() === PaymentStatusTypes.FINALIZE) {\n            this.paymentIntegrationService.finalizeOrder(options);\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        try {\n            await form.validate();\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await form.submit(payment);\n        } catch (error) {\n            return this._processResponse(error);\n        }\n\n        this.paymentIntegrationService.loadCurrentOrder();\n    }\n\n    protected _processResponse(error: unknown): Promise<void> {\n        if (!isRequestError(error)) {\n            return Promise.reject(error);\n        }\n\n        const additionalActionRequired: AdditionalActionRequired =\n            error.body.additional_action_required;\n\n        // TODO validate all possible responses and perform respective additional actions\n        if (\n            additionalActionRequired &&\n            additionalActionRequired.type === AdditionalActionType.OffsiteRedirect\n        ) {\n            return this._performRedirect(additionalActionRequired);\n        }\n\n        return Promise.reject(error);\n    }\n\n    private _performRedirect(additionalActionRequired: AdditionalActionRequired): Promise<void> {\n        return new Promise(() => {\n            window.location.replace(additionalActionRequired.data.redirect_url);\n        });\n    }\n}\n","import {\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInstrument,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCheckoutcomFawryInstrument } from '../checkoutcom';\nimport CheckoutComCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst CHECKOUTCOM_FAWRY_PAYMENT_METHOD = 'fawry';\n\nexport default class CheckoutComFawryPaymentStrategy extends CheckoutComCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...paymentData,\n                    formattedPayload: this._createFormattedPayload(\n                        payment.methodId,\n                        paymentData as PaymentInstrument,\n                    ),\n                },\n            });\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument,\n    ): WithCheckoutcomFawryInstrument | undefined {\n        if (\n            CHECKOUTCOM_FAWRY_PAYMENT_METHOD === methodId &&\n            'customerMobile' in paymentData &&\n            'customerEmail' in paymentData\n        ) {\n            const fawryPaymentData = paymentData as {\n                customerMobile: string;\n                customerEmail: string;\n            };\n\n            return {\n                customerMobile: fawryPaymentData.customerMobile,\n                customerEmail: fawryPaymentData.customerEmail,\n            };\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComFawryPaymentStrategy from './checkoutcom-fawry-payment-strategy';\n\nconst createCheckoutComFawryPaymentStrategy: PaymentStrategyFactory<\n    CheckoutComFawryPaymentStrategy\n> = (paymentIntegrationService) => {\n    return new CheckoutComFawryPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCheckoutComFawryPaymentStrategy, [\n    { gateway: 'checkoutcom', id: 'fawry' },\n]);\n","import { some } from 'lodash';\n\nimport { isRequestError, RequestError } from './';\n\nexport default function isThreeDSecureRequiredError(error: unknown): error is RequestError {\n    return isRequestError(error) && some(error.body.errors, { code: 'three_d_secure_required' });\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    isThreeDSecureRequiredError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class CheckoutComCreditCardPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        protected formPoster: FormPoster,\n    ) {\n        super(paymentIntegrationService);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const order = state.getOrder();\n\n        if (order && state.getPaymentStatus() === PaymentStatusTypes.FINALIZE) {\n            this.paymentIntegrationService.finalizeOrder(options);\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this.paymentIntegrationService.submitPayment({ ...payment, paymentData });\n        } catch (error) {\n            if (isThreeDSecureRequiredError(error)) {\n                return this._handleThreeDSecure(error);\n            }\n\n            return Promise.reject(error);\n        }\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        try {\n            await form.validate();\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await form.submit(payment);\n        } catch (error) {\n            if (isThreeDSecureRequiredError(error)) {\n                return this._handleThreeDSecure(error);\n            }\n\n            return Promise.reject(error);\n        }\n\n        this.paymentIntegrationService.loadCurrentOrder();\n    }\n\n    private _handleThreeDSecure(error: RequestError): Promise<void> {\n        const { acs_url, payer_auth_request, callback_url, merchant_data } =\n            error.body.three_ds_result;\n\n        return new Promise<void>(() =>\n            this.formPoster.postForm(acs_url, {\n                PaReq: payer_auth_request || null,\n                TermUrl: callback_url || null,\n                MD: merchant_data || null,\n            }),\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComCreditCardPaymentStrategy from './checkoutcom-credit-card-payment-strategy';\n\nconst createCheckoutComCreditCardPaymentStrategy: PaymentStrategyFactory<\n    CheckoutComCreditCardPaymentStrategy\n> = (paymentIntegrationService) => {\n    return new CheckoutComCreditCardPaymentStrategy(paymentIntegrationService, createFormPoster());\n};\n\nexport default toResolvableModule(createCheckoutComCreditCardPaymentStrategy, [\n    { gateway: 'checkoutcom', id: 'credit_card' },\n    { gateway: 'checkoutcom', id: 'card' },\n]);\n","import {\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInstrument,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCheckoutcomSEPAInstrument } from '../checkoutcom';\nimport CheckoutComCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst CHECKOUTCOM_SEPA_PAYMENT_METHOD = 'sepa';\n\nexport default class CheckoutComSEPAPaymentStrategy extends CheckoutComCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...paymentData,\n                    formattedPayload: this._createFormattedPayload(\n                        payment.methodId,\n                        paymentData as PaymentInstrument,\n                    ),\n                },\n            });\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument,\n    ): WithCheckoutcomSEPAInstrument {\n        const formattedPayload: WithCheckoutcomSEPAInstrument = { iban: '', bic: '' };\n        const { iban, bic } =\n            'iban' in paymentData && 'bic' in paymentData ? paymentData : formattedPayload;\n\n        if (methodId === CHECKOUTCOM_SEPA_PAYMENT_METHOD && document) {\n            formattedPayload.iban = iban;\n            formattedPayload.bic = bic;\n        }\n\n        return formattedPayload;\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComSepaPaymentStrategy from './checkoutcom-sepa-payment-strategy';\n\nconst createCheckoutComSepaPaymentStrategy: PaymentStrategyFactory<\n    CheckoutComSepaPaymentStrategy\n> = (paymentIntegrationService) => {\n    return new CheckoutComSepaPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCheckoutComSepaPaymentStrategy, [\n    { gateway: 'checkoutcom', id: 'sepa' },\n]);\n","import {\n    CreditCardInstrument,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInstrument,\n    PaymentRequestOptions,\n    WithIdealInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst CHECKOUTCOM_IDEAL_PAYMENT_METHOD = 'ideal';\n\nexport default class CheckoutComiDealPaymentStrategy extends CheckoutComCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...paymentData,\n                    formattedPayload: this._createFormattedPayload(\n                        payment.methodId,\n                        paymentData as PaymentInstrument,\n                    ),\n                },\n            });\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument | (CreditCardInstrument & WithIdealInstrument),\n    ): WithIdealInstrument | undefined {\n        if (CHECKOUTCOM_IDEAL_PAYMENT_METHOD === methodId && 'bic' in paymentData) {\n            return { bic: paymentData.bic };\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComiDealPaymentStrategy from './checkoutcom-ideal-payment-strategy';\n\nconst createCheckoutComiDealPaymentStrategy: PaymentStrategyFactory<\n    CheckoutComiDealPaymentStrategy\n> = (paymentIntegrationService) => {\n    return new CheckoutComiDealPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCheckoutComiDealPaymentStrategy, [\n    { gateway: 'checkoutcom', id: 'ideal' },\n]);\n","import {\n    CreditCardInstrument,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInstrument,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithDocumentInstrument } from '../checkoutcom';\nimport CheckoutComCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nconst DOCUMENT_SUPPORTED_APMS = ['boleto', 'oxxo', 'qpay', 'ideal'];\n\nexport default class CheckoutComAPMPaymentStrategy extends CheckoutComCustomPaymentStrategy {\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...paymentData,\n                    formattedPayload: this._createFormattedPayload(\n                        payment.methodId,\n                        paymentData as PaymentInstrument,\n                    ),\n                },\n            });\n        } catch (error) {\n            return this._processResponse(error);\n        }\n    }\n\n    private _createFormattedPayload(\n        methodId: string,\n        paymentData: PaymentInstrument | (CreditCardInstrument & WithDocumentInstrument),\n    ): WithDocumentInstrument {\n        const formattedPayload: WithDocumentInstrument = { ccDocument: '' };\n        const ccDocument = 'ccDocument' in paymentData ? paymentData.ccDocument : '';\n\n        if (DOCUMENT_SUPPORTED_APMS.indexOf(methodId) !== -1 && ccDocument) {\n            formattedPayload.ccDocument = ccDocument;\n        }\n\n        return formattedPayload;\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CheckoutComCustomPaymentStrategy from '../checkoutcom-custom-payment-strategy';\n\nimport CheckoutComAPMPaymentStrategy from './checkoutcom-apm-payment-strategy';\n\nconst createCheckoutComAPMPaymentStrategy: PaymentStrategyFactory<\n    CheckoutComCustomPaymentStrategy\n> = (paymentIntegrationService) => {\n    return new CheckoutComAPMPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCheckoutComAPMPaymentStrategy, [\n    { gateway: 'checkoutcom' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotCompletedError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    RequestError,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ClearpayScriptLoader from './clearpay-script-loader';\nimport ClearpaySdk from './clearpay-sdk';\n\nexport default class ClearpayPaymentStrategy implements PaymentStrategy {\n    private _clearpaySdk?: ClearpaySdk;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _clearpayScriptLoader: ClearpayScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId, options.gatewayId);\n\n        this._clearpaySdk = await this._clearpayScriptLoader.load(paymentMethod);\n    }\n\n    deinitialize(): Promise<void> {\n        this._clearpaySdk = undefined;\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { gatewayId, methodId } = payload.payment || {};\n\n        if (!gatewayId || !methodId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId', 'payment.methodId']);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const { isStoreCreditApplied: useStoreCredit } = state.getCheckoutOrThrow();\n\n        await this._paymentIntegrationService.applyStoreCredit(useStoreCredit);\n\n        await this._paymentIntegrationService.validateCheckout(state.getCheckout(), options);\n\n        const { countryCode } = state.getBillingAddressOrThrow();\n\n        if (!this._isCountrySupported(countryCode)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because billing country is not supported.',\n            );\n        }\n\n        await this._loadPaymentMethod(gatewayId, methodId, options);\n\n        await this._redirectToClearpay(\n            countryCode,\n            this._paymentIntegrationService.getState().getPaymentMethod(methodId, gatewayId),\n        );\n\n        // Clearpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise(noop);\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<void> {\n        const state = this._paymentIntegrationService.getState();\n        const payment = state.getPaymentId();\n        const config = state.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._paymentIntegrationService.submitOrder({}, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            await this._paymentIntegrationService.forgetCheckout(payment.providerId);\n            await this._paymentIntegrationService.loadPaymentMethods();\n\n            if (isRequestError(error)) {\n                throw new OrderFinalizationNotCompletedError(error.body?.errors?.[0]?.message);\n            }\n        }\n    }\n\n    private async _redirectToClearpay(\n        countryCode: string,\n        paymentMethod?: PaymentMethod,\n    ): Promise<void> {\n        if (!this._clearpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._clearpaySdk.initialize({ countryCode });\n        this._clearpaySdk.redirect({ token: paymentMethod.clientToken });\n\n        return Promise.resolve();\n    }\n\n    private _isCountrySupported(countryCode: string): boolean {\n        return countryCode === 'GB';\n    }\n\n    private async _loadPaymentMethod(\n        gatewayId: string,\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        try {\n            return await this._paymentIntegrationService.loadPaymentMethod(gatewayId, {\n                ...options,\n                params: { ...options?.params, method: methodId },\n            });\n        } catch (error) {\n            if (error instanceof RequestError && error.body?.status === 422) {\n                throw new InvalidArgumentError(\n                    \"Clearpay can't process your payment for this order, please try another payment method\",\n                );\n            }\n\n            throw error;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ClearpaySdk from './clearpay-sdk';\nimport ClearpayWindow from './clearpay-window';\n\nconst SCRIPTS_DEFAULT = {\n    PROD: '//portal.clearpay.co.uk/afterpay-async.js',\n    SANDBOX: '//portal.sandbox.clearpay.co.uk/afterpay-async.js',\n};\n\nexport default class ClearpayScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, public _window: ClearpayWindow = window) {}\n\n    async load(method: PaymentMethod): Promise<ClearpaySdk> {\n        await this._scriptLoader.loadScript(this._getScriptUrl(method.config.testMode));\n\n        if (!this._window.AfterPay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.AfterPay;\n    }\n\n    private _getScriptUrl(testMode?: boolean): string {\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ClearpayPaymentStrategy from './clearpay-payment-strategy';\nimport ClearpayScriptLoader from './clearpay-script-loader';\n\nconst createClearpayPaymentStrategy: PaymentStrategyFactory<ClearpayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new ClearpayPaymentStrategy(\n        paymentIntegrationService,\n        new ClearpayScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createClearpayPaymentStrategy, [\n    { gateway: 'clearpay' },\n    { id: 'clearpay' },\n]);\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CreditCardPaymentStrategy from './credit-card-payment-strategy';\n\nconst createCreditCardPaymentStrategy: PaymentStrategyFactory<CreditCardPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new CreditCardPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCreditCardPaymentStrategy, [{ default: true }]);\n","import { merge, some } from 'lodash';\n\nimport {\n    HostedForm,\n    isRequestError,\n    isVaultedInstrument,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CardinalClient, { CardinalOrderData } from './cardinal-client';\n\nexport default class CardinalThreeDSecureFlow {\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _cardinalClient: CardinalClient,\n    ) {}\n\n    async prepare(method: PaymentMethod): Promise<void> {\n        await this._cardinalClient.load(method.id, method.config.testMode);\n        await this._cardinalClient.configure(await this._getClientToken(method));\n    }\n\n    async start(\n        execute: PaymentStrategy['execute'],\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n        hostedForm?: HostedForm,\n    ): Promise<void> {\n        const { getCardInstrument, getPaymentMethodOrThrow } =\n            this._paymentIntegrationService.getState();\n\n        const { payment: { methodId = '', paymentData = {} } = {} } = payload;\n        const instrument =\n            isVaultedInstrument(paymentData) && getCardInstrument(paymentData.instrumentId);\n        const bin = instrument ? instrument.iin : hostedForm && hostedForm.getBin();\n\n        if (bin) {\n            await this._cardinalClient.runBinProcess(bin);\n        }\n\n        try {\n            return await execute(\n                merge(payload, {\n                    payment: {\n                        paymentData: {\n                            threeDSecure: { token: getPaymentMethodOrThrow(methodId).clientToken },\n                        },\n                    },\n                }),\n                options,\n            );\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                throw error;\n            }\n\n            const threeDSecure = await this._cardinalClient.getThreeDSecureData(\n                error.body.three_ds_result,\n                this._getOrderData(),\n            );\n\n            if (!hostedForm) {\n                await this._paymentIntegrationService.submitPayment(\n                    merge(payload.payment, {\n                        paymentData: { threeDSecure },\n                    }),\n                );\n\n                return;\n            }\n\n            await hostedForm.submit(\n                merge(payload.payment, {\n                    paymentData: { threeDSecure },\n                }),\n            );\n        }\n    }\n\n    private async _getClientToken(method: PaymentMethod): Promise<string> {\n        if (method.clientToken) {\n            return method.clientToken;\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(method.id);\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(method.id);\n\n        return paymentMethod.clientToken || '';\n    }\n\n    private _getOrderData(): CardinalOrderData {\n        const state = this._paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const shippingAddress = state.getShippingAddress();\n        const checkout = state.getCheckoutOrThrow();\n        const order = state.getOrderOrThrow();\n\n        return {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n    }\n}\n","import { ThreeDSecure, ThreeDSecureToken } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(\n        initializationType: K,\n        initializationData: CardinalInitializationDataMap[K],\n    ): void;\n    trigger(\n        event: CardinalTriggerEvents,\n        data?: string,\n    ): Promise<CardinalBinProcessResponse | void>;\n    continue(\n        paymentBrand: CardinalPaymentBrand,\n        continueObject: CardinalContinue,\n        order: CardinalPartialOrder,\n    ): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport type setupCompleteFn = (setupCompleteData: CardinalSetupCompletedData) => void;\nexport type validatedFn = (data: CardinalValidatedData, jwt?: string) => void;\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted]: setupCompleteFn;\n    [CardinalEventType.Validated]: validatedFn;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated?: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n    ChallengeCancel: string;\n}>;\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n\nexport type CardinalThreeDSecureToken = Pick<ThreeDSecure, 'xid'> | ThreeDSecureToken;\n","import { includes, noop } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    CreditCardInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentMethodFailedError,\n    ThreeDSecureToken,\n    ThreeDsResult,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalSDK,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData,\n} from './cardinal';\nimport CardinalScriptLoader from './cardinal-script-loader';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _provider = '';\n    private _testMode = false;\n    private _sdk?: Promise<CardinalSDK>;\n    private _configurationToken = '';\n\n    constructor(private _scriptLoader: CardinalScriptLoader) {}\n\n    load(provider: string, testMode = false): Promise<void> {\n        this._provider = provider;\n        this._testMode = testMode;\n\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(noop);\n    }\n\n    configure(clientToken: string): Promise<void> {\n        if (this._configurationToken) {\n            if (this._configurationToken === clientToken) {\n                return Promise.resolve();\n            }\n\n            this._sdk = this._scriptLoader.load(`${this._provider}.${Date.now()}`, this._testMode);\n        }\n\n        return this._getClientSDK().then(\n            (client) =>\n                new Promise<void>((resolve, reject) => {\n                    client.on(CardinalEventType.SetupCompleted, () => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        this._configurationToken = clientToken;\n\n                        resolve();\n                    });\n\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Error:\n                                if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                    reject(\n                                        new MissingDataError(\n                                            MissingDataErrorType.MissingPaymentMethod,\n                                        ),\n                                    );\n                                }\n\n                                reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                break;\n                        }\n                    });\n\n                    client.setup(CardinalInitializationType.Init, {\n                        jwt: clientToken,\n                    });\n                }),\n        );\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then((client) =>\n                client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(noop),\n            )\n            .then((result) => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(\n        threeDSecureData: ThreeDsResult,\n        orderData: CardinalOrderData,\n    ): Promise<ThreeDSecureToken> {\n        return this._getClientSDK().then((client) => {\n            return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                client.on(\n                    CardinalEventType.Validated,\n                    (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n\n                        if (!jwt) {\n                            return reject(\n                                new PaymentMethodFailedError(\n                                    data.ErrorDescription\n                                        ? data.ErrorDescription\n                                        : 'An error was encountered while processing the transaction.',\n                                ),\n                            );\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(\n                                        new PaymentMethodFailedError(data.ErrorDescription),\n                                    );\n                                } else if (\n                                    !data.Payment ||\n                                    !data.Payment.ExtendedData ||\n                                    data.Payment.ExtendedData.SignatureVerification !==\n                                        CardinalSignatureVerification.Yes\n                                ) {\n                                    return reject(\n                                        new PaymentMethodFailedError(\n                                            'Transaction signature could not be validated.',\n                                        ),\n                                    );\n                                }\n\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.Failure:\n                                return reject(\n                                    new PaymentMethodFailedError(\n                                        'User failed authentication or an error was encountered while processing the transaction.',\n                                    ),\n                                );\n\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    },\n                );\n\n                const continueObject = {\n                    AcsUrl: threeDSecureData.acs_url,\n                    Payload: threeDSecureData.merchant_data,\n                };\n\n                const partialOrder = this._mapToPartialOrder(\n                    orderData,\n                    threeDSecureData.payer_auth_request,\n                );\n\n                client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n            });\n        });\n    }\n\n    private _mapToPartialOrder(\n        orderData: CardinalOrderData,\n        transactionId: string,\n    ): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: CardinalWindow = window) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader.loadScript(`${url}?v=${provider}`).then(() => {\n            if (!this._window.Cardinal) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.Cardinal;\n        });\n    }\n}\n","import { CardinalThreeDSecureFlow } from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class CyberSourcePaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        _paymentIntegrationService: PaymentIntegrationService,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow,\n    ) {\n        super(_paymentIntegrationService);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await super.initialize(options);\n\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CyberSourcePaymentStrategy from './cybersource-payment-strategy';\n\nconst createCyberSourcePaymentStrategy: PaymentStrategyFactory<CyberSourcePaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new CyberSourcePaymentStrategy(\n        paymentIntegrationService,\n        new CardinalThreeDSecureFlow(\n            paymentIntegrationService,\n            new CardinalClient(new CardinalScriptLoader(getScriptLoader())),\n        ),\n    );\n};\n\nexport default toResolvableModule(createCyberSourcePaymentStrategy, [{ id: 'cybersource' }]);\n","import { merge, some } from 'lodash';\n\nimport {\n    HostedForm,\n    isCreditCardInstrument,\n    isRequestError,\n    isVaultedInstrument,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CardinalThreeDSecureToken } from './cardinal';\nimport CardinalClient, { CardinalOrderData } from './cardinal-client';\n\nexport default class CardinalThreeDSecureFlowV2 {\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _cardinalClient: CardinalClient,\n    ) {}\n\n    async prepare(method: PaymentMethod): Promise<void> {\n        await this._cardinalClient.load(method.id, method.config.testMode);\n    }\n\n    async start(\n        execute: PaymentStrategy['execute'],\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n        hostedForm?: HostedForm,\n    ): Promise<void> {\n        const { getCardInstrument } = this._paymentIntegrationService.getState();\n        const { payment = { methodId: '' } } = payload;\n        const { paymentData = {} } = payment;\n\n        try {\n            return await execute(payload, options);\n        } catch (error) {\n            if (isRequestError(error) && error.body?.status === 'additional_action_required') {\n                const token = error.body.additional_action_required?.data?.token;\n                const xid = error.body.three_ds_result?.payer_auth_request;\n\n                await this._cardinalClient.configure(token);\n\n                const bin = this._getBin(paymentData, getCardInstrument, hostedForm);\n\n                if (bin) {\n                    await this._cardinalClient.runBinProcess(bin);\n                }\n\n                try {\n                    return await this._submitPayment(payment, { xid }, hostedForm);\n                } catch (err) {\n                    if (\n                        isRequestError(err) &&\n                        some(err.body.errors, { code: 'three_d_secure_required' })\n                    ) {\n                        const threeDsResult = err.body.three_ds_result;\n                        const threeDsToken = threeDsResult?.payer_auth_request;\n\n                        await this._cardinalClient.getThreeDSecureData(\n                            threeDsResult,\n                            this._getOrderData(),\n                        );\n\n                        return this._submitPayment(payment, { token: threeDsToken }, hostedForm);\n                    }\n\n                    throw err;\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private _getOrderData(): CardinalOrderData {\n        const store = this._paymentIntegrationService.getState();\n        const billingAddress = store.getBillingAddressOrThrow();\n        const shippingAddress = store.getShippingAddress();\n        const {\n            cart: {\n                currency: { code: currencyCode },\n                cartAmount: amount,\n            },\n        } = store.getCheckoutOrThrow();\n        const id = store.getOrderOrThrow().orderId.toString();\n\n        return { billingAddress, shippingAddress, currencyCode, id, amount };\n    }\n\n    private async _submitPayment(\n        payment: OrderPaymentRequestBody,\n        threeDSecure: CardinalThreeDSecureToken,\n        hostedForm?: HostedForm,\n    ): Promise<void> {\n        const paymentPayload = merge({}, payment, { paymentData: { threeDSecure } });\n\n        if (!hostedForm) {\n            await this._paymentIntegrationService.submitPayment(paymentPayload);\n        }\n\n        await hostedForm?.submit(paymentPayload);\n    }\n\n    private _getBin(\n        paymentData: NonNullable<OrderPaymentRequestBody['paymentData']>,\n        getCardInstrument: PaymentIntegrationSelectors['getCardInstrument'],\n        hostedForm?: HostedForm,\n    ): string {\n        const instrument =\n            isVaultedInstrument(paymentData) && getCardInstrument(paymentData.instrumentId);\n        const ccNumber = isCreditCardInstrument(paymentData) && paymentData.ccNumber;\n        const hostedFormBin = hostedForm ? hostedForm.getBin() : ccNumber;\n        const bin = instrument ? instrument.iin : hostedFormBin;\n\n        return bin || '';\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument } from './payment';\n\nexport default function isCreditCardInstrument(\n    instrument: unknown,\n): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return (\n        !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string'\n    );\n}\n","import { CardinalThreeDSecureFlowV2 } from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class CyberSourceV2PaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        _paymentIntegrationService: PaymentIntegrationService,\n        private _threeDSecureFlow: CardinalThreeDSecureFlowV2,\n    ) {\n        super(_paymentIntegrationService);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await super.initialize(options);\n\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlowV2,\n} from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CyberSourceV2PaymentStrategy from './cybersourcev2-payment-strategy';\n\nconst createCyberSourceV2PaymentStrategy: PaymentStrategyFactory<CyberSourceV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new CyberSourceV2PaymentStrategy(\n        paymentIntegrationService,\n        new CardinalThreeDSecureFlowV2(\n            paymentIntegrationService,\n            new CardinalClient(new CardinalScriptLoader(getScriptLoader())),\n        ),\n    );\n};\n\nexport default toResolvableModule(createCyberSourceV2PaymentStrategy, [{ id: 'cybersourcev2' }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    isRequestError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdditionalActionRequired, isAdditionalActionRequired } from './is-additional-action';\n\nexport default class ExternalPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _formPoster: FormPoster,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !isAdditionalActionRequired(error.body) ||\n                !this._isAdditionalActionRequired(error.body)\n            ) {\n                return Promise.reject(error);\n            }\n\n            const {\n                body: {\n                    additional_action_required: {\n                        data: { redirect_url },\n                    },\n                },\n            } = error;\n\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return new Promise(() => {\n                this.redirectUrl(redirect_url);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }) as any;\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    protected redirectUrl(redirect_url: string): void {\n        return this._formPoster.postForm(redirect_url, {});\n    }\n\n    private _isAdditionalActionRequired(body: AdditionalActionRequired): boolean {\n        const { additional_action_required, status } = body;\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'offsite_redirect'\n        );\n    }\n}\n","export interface AdditionalActionRequired {\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n        type: string;\n    };\n    status: string;\n}\n\nexport function isAdditionalActionRequired(value: unknown): value is AdditionalActionRequired {\n    return typeof value === 'object' && value !== null && 'additional_action_required' in value;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ExternalPaymentStrategy from './external-payment-strategy';\n\nconst createExternalPaymentStrategy: PaymentStrategyFactory<ExternalPaymentStrategy> = (\n    paymentIntegrationService,\n) => new ExternalPaymentStrategy(createFormPoster(), paymentIntegrationService);\n\nexport default toResolvableModule(createExternalPaymentStrategy, [{ id: 'laybuy' }]);\n","import { AdyenAdditionalActionErrorResponse } from '../types';\n\nexport default function isAdditionalActionRequiredErrorResponse(\n    param: unknown,\n): param is AdyenAdditionalActionErrorResponse {\n    return (\n        typeof param === 'object' &&\n        param !== null &&\n        'errors' in (param as AdyenAdditionalActionErrorResponse) &&\n        Array.isArray((param as AdyenAdditionalActionErrorResponse).errors) &&\n        'code' in (param as AdyenAdditionalActionErrorResponse).errors[0] &&\n        typeof (param as AdyenAdditionalActionErrorResponse).errors[0].code === 'string' &&\n        'provider_data' in param &&\n        typeof (param as AdyenAdditionalActionErrorResponse).provider_data === 'object'\n    );\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { InvalidArgumentError } from '../errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(currencySettings: CurrencyConfig) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const { decimalPlaces, symbolLocation, symbol, thousandsSeparator, decimalSeparator } =\n            currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ? `-${formattedCurrency}` : formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [integerAmount, decimalAmount = ''] = this._toFixed(\n            positiveAmount,\n            this._decimalPlaces,\n        ).split('.');\n        const parsedIntegerAmount = integerAmount.replace(\n            /\\B(?=(\\d{3})+(?!\\d))/g,\n            this._thousandsSeparator,\n        );\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [parsedIntegerAmount, decimalAmount].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return this._symbolLocation.toLowerCase() === 'left'\n            ? `${this._symbol}${formattedNumber}`\n            : `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+`${Math.round(+`${value}e${precision}`)}e${-precision}`).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(private _storeConfig: StoreConfig) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { BigCommercePaymentsIntent } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    BrowserInfo,\n    BuyNowCartRequestBody,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { FundingType } from './google-pay-paypal-commerce/types';\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\nexport interface GooglePayGatewayBaseRequest {\n    apiVersion: 2;\n    apiVersionMinor: 0;\n}\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\ntype GooglePayGatewayBaseResponse = GooglePayGatewayBaseRequest;\n\ninterface GooglePayPaymentMethod<T> {\n    type: string;\n    parameters: T;\n}\n\ntype GooglePayAuthMethod = 'PAN_ONLY' | 'CRYPTOGRAM_3DS';\n\nexport enum GooglePayCardNetwork {\n    AMEX = 'AMEX',\n    DISCOVER = 'DISCOVER',\n    INTERAC = 'INTERAC',\n    JCB = 'JCB',\n    MC = 'MASTERCARD',\n    VISA = 'VISA',\n}\n\nexport interface GooglePayCardParameters {\n    allowedAuthMethods: GooglePayAuthMethod[];\n    allowedCardNetworks: GooglePayCardNetwork[];\n    billingAddressRequired?: boolean;\n    billingAddressParameters?: {\n        format?: 'MIN' | 'FULL';\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport interface GooglePayBaseCardPaymentMethod\n    extends GooglePayPaymentMethod<GooglePayCardParameters> {\n    type: 'CARD';\n    parameters: GooglePayCardParameters;\n}\n\nexport interface GooglePayIsReadyToPayRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n}\n\ninterface GooglePayGatewayBaseParameters {\n    gateway: string;\n}\n\nexport interface GooglePayRegularGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId: string;\n}\n\nexport interface GooglePayStripeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'stripe:version'?: string;\n    'stripe:publishableKey'?: string;\n}\n\nexport interface GooglePayBraintreeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'braintree:apiVersion'?: string;\n    'braintree:authorizationFingerprint'?: string;\n    'braintree:merchantId'?: string;\n    'braintree:sdkVersion'?: string;\n}\n\nexport interface GooglePayPayPalCommerceGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId?: string;\n}\n\nexport type GooglePayGatewayParameters =\n    | GooglePayRegularGatewayParameters\n    | GooglePayStripeGatewayParameters\n    | GooglePayBraintreeGatewayParameters;\n\nexport interface GooglePayCardPaymentMethod extends GooglePayBaseCardPaymentMethod {\n    tokenizationSpecification: {\n        type: 'PAYMENT_GATEWAY';\n        parameters: GooglePayGatewayParameters;\n    };\n}\n\nexport interface GooglePayTransactionInfo {\n    /** [!] Required for EEA countries */\n    countryCode?: string;\n    currencyCode: string;\n    totalPriceStatus: TotalPriceStatusType;\n    totalPrice: string;\n}\n\nexport interface GooglePayMerchantInfo {\n    merchantName: string;\n    merchantId: string;\n    authJwt: string;\n}\n\nexport enum CallbackIntentsType {\n    OFFER = 'OFFER',\n    PAYMENT_AUTHORIZATION = 'PAYMENT_AUTHORIZATION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n}\n\nexport interface GooglePayPaymentDataRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayCardPaymentMethod];\n    transactionInfo: GooglePayTransactionInfo;\n    merchantInfo: GooglePayMerchantInfo;\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n    offerInfo: Offers;\n    shippingOptionRequired?: boolean;\n    callbackIntents?: CallbackIntentsType[];\n}\n\nexport interface NewTransactionInfo {\n    newTransactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport interface ShippingOptionParameters {\n    defaultSelectedOptionId?: string;\n    shippingOptions?: GoogleShippingOption[];\n}\n\nexport interface NewShippingOptionParameters {\n    newShippingOptionParameters?: ShippingOptionParameters;\n}\n\nexport interface NewOfferInfo {\n    newOfferInfo?: Offers;\n}\n\nexport interface Offers {\n    offers: OfferInfoItem[];\n}\n\nexport interface GooglePayError {\n    message: string;\n    reason: ErrorReasonType;\n    intent: CallbackTriggerType;\n}\n\nexport enum ErrorReasonType {\n    OFFER_INVALID = 'OFFER_INVALID',\n    PAYMENT_DATA_INVALID = 'PAYMENT_DATA_INVALID',\n    SHIPPING_ADDRESS_INVALID = 'SHIPPING_ADDRESS_INVALID',\n    SHIPPING_ADDRESS_UNSERVICEABLE = 'SHIPPING_ADDRESS_UNSERVICEABLE',\n    SHIPPING_OPTION_INVALID = 'SHIPPING_OPTION_INVALID',\n    OTHER_ERROR = 'OTHER_ERROR',\n}\n\nexport interface OfferInfoItem {\n    redemptionCode: string;\n    description: string;\n}\n\nexport interface HandleCouponsOut {\n    newOfferInfo: GooglePayPaymentDataRequest['offerInfo'];\n    error?: GooglePayError;\n}\n\nexport interface GoogleShippingOption {\n    id: string;\n    label?: string;\n}\n\nexport enum CallbackTriggerType {\n    INITIALIZE = 'INITIALIZE',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    OFFER = 'OFFER',\n}\n\nexport interface IntermediatePaymentData {\n    callbackTrigger: CallbackTriggerType;\n    shippingAddress: GooglePayFullBillingAddress;\n    shippingOptionData: GoogleShippingOption;\n    offerData: {\n        redemptionCodes: string[];\n    };\n}\n\nexport interface GooglePayPaymentOptions {\n    paymentDataCallbacks?: {\n        onPaymentDataChanged(\n            intermediatePaymentData: IntermediatePaymentData,\n        ): onPaymentDataChangedOut;\n    };\n}\n\nexport type onPaymentDataChangedOut = Promise<\n    | (NewTransactionInfo & NewShippingOptionParameters & NewOfferInfo & { error?: GooglePayError })\n    | void\n>;\n\nexport type GooglePayRequiredPaymentData = Pick<\n    GooglePayPaymentDataRequest,\n    | 'emailRequired'\n    | 'shippingAddressRequired'\n    | 'shippingAddressParameters'\n    | 'shippingOptionRequired'\n>;\n\ninterface GooglePayMinBillingAddress {\n    name: string;\n    postalCode: string;\n    countryCode: string;\n    phoneNumber?: string;\n}\n\nexport interface GooglePayFullBillingAddress extends GooglePayMinBillingAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    locality: string;\n    administrativeArea: string;\n    sortingCode: string;\n}\n\ninterface GooglePayCardInfo {\n    cardNetwork: GooglePayCardNetwork;\n    cardDetails: string;\n    billingAddress?: GooglePayFullBillingAddress;\n}\n\ninterface GooglePayPaymentMethodData<T> {\n    description: string;\n    tokenizationData: {\n        type: 'PAYMENT_GATEWAY';\n        token: string;\n    };\n    type: string;\n    info: T;\n}\n\ninterface GooglePayCardData extends GooglePayPaymentMethodData<GooglePayCardInfo> {\n    type: 'CARD';\n}\n\ninterface GooglePayPaymentDataResponse<T> extends GooglePayGatewayBaseResponse {\n    paymentMethodData: GooglePayPaymentMethodData<T>;\n    shippingAddress?: GooglePayFullBillingAddress;\n    email?: string;\n}\n\nexport interface GooglePayCardDataResponse extends GooglePayPaymentDataResponse<GooglePayCardInfo> {\n    paymentMethodData: GooglePayCardData;\n}\n\ninterface GooglePayIsReadyToPayResponse {\n    result: boolean;\n}\n\nexport interface GooglePayButtonOptions {\n    onClick: (event: MouseEvent) => Promise<void>;\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n    buttonColor?: GooglePayButtonColor;\n    buttonType?: GooglePayButtonType;\n}\n\nexport interface GooglePaymentsClient {\n    isReadyToPay(request: GooglePayIsReadyToPayRequest): Promise<GooglePayIsReadyToPayResponse>;\n    createButton(options: GooglePayButtonOptions): HTMLElement;\n    loadPaymentData(request: GooglePayPaymentDataRequest): Promise<GooglePayCardDataResponse>;\n    prefetchPaymentData(request: GooglePayPaymentDataRequest): void;\n}\n\ntype GooglePayEnvironment = 'TEST' | 'PRODUCTION';\n\nexport type GooglePaymentsClientConstructor = new (paymentOptions: {\n    environment: GooglePayEnvironment;\n}) => GooglePaymentsClient;\n\nexport interface GooglePayHostWindow extends Window {\n    google?: {\n        payments: {\n            api: {\n                PaymentsClient: GooglePaymentsClientConstructor;\n            };\n        };\n    };\n}\n\ninterface GooglePayBaseInitializationData {\n    card_information?: { type: string; number: string; bin?: string; isNetworkTokenized?: boolean };\n    gateway: string;\n    gatewayMerchantId?: string;\n    googleMerchantId: string;\n    googleMerchantName: string;\n    isThreeDSecureEnabled: boolean;\n    nonce?: string;\n    platformToken: string;\n    storeCountry?: string;\n}\n\nexport interface GooglePayPayPalCommerceInitializationData extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayBigCommercePaymentsInitializationData\n    extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayAuthorizeNetInitializationData extends GooglePayBaseInitializationData {\n    paymentGatewayId: string;\n}\n\nexport interface GooglePayStripeInitializationData extends GooglePayBaseInitializationData {\n    stripeConnectedAccount: string;\n    stripePublishableKey: string;\n    stripeVersion: string;\n}\n\nexport interface GooglePayCheckoutComInitializationData extends GooglePayBaseInitializationData {\n    checkoutcomkey: string;\n}\n\nexport interface GooglePayAdyenV2InitializationData extends GooglePayBaseInitializationData {\n    originKey?: string;\n    clientKey?: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport interface GooglePayAdyenV3InitializationData extends GooglePayBaseInitializationData {\n    clientKey: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport type GooglePayInitializationData =\n    | GooglePayBaseInitializationData\n    | GooglePayAdyenV2InitializationData\n    | GooglePayAdyenV3InitializationData\n    | GooglePayAuthorizeNetInitializationData\n    | GooglePayStripeInitializationData\n    | GooglePayCheckoutComInitializationData\n    | GooglePayPayPalCommerceInitializationData\n    | GooglePayBigCommercePaymentsInitializationData;\n\nexport interface GooglePaySetExternalCheckoutData {\n    nonce: string;\n    card_information: { type: string; number: string; bin?: string; isNetworkTokenized?: boolean };\n    cart_id?: string;\n}\n\nexport interface GooglePayAdditionalActionProcessable {\n    processAdditionalAction(error: unknown, methodId?: string): Promise<void>;\n}\n\nexport interface GooglePayErrorObject {\n    errorCode?: number;\n    statusCode: 'CANCELED' | 'DEVELOPER_ERROR';\n    statusMessage?: string;\n}\n\nexport interface GooglePayTokenObject {\n    protocolVersion: string;\n    signature: string;\n    signedMessage: string;\n}\n\nexport interface GooglePayStripeTokenObject {\n    id: string;\n}\n\nexport interface GooglePayBraintreeTokenObject {\n    androidPayCards: [\n        {\n            nonce: string;\n            details: {\n                bin: string;\n                isNetworkTokenized?: boolean;\n            };\n        },\n    ];\n}\n\nexport interface GooglePayCheckoutComTokenObject {\n    token: string;\n}\n\nexport interface GooglePayThreeDSecureResult {\n    three_ds_result: {\n        acs_url: string;\n        code: string;\n    };\n}\n\nexport interface GooglePayBuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody;\n}\n\nexport interface ExtraPaymentData {\n    deviceSessionId?: string;\n    browser_info?: BrowserInfo;\n}\n\nexport type GooglePayButtonColor = 'default' | 'black' | 'white';\nexport type GooglePayButtonType =\n    | 'book'\n    | 'buy'\n    | 'checkout'\n    | 'donate'\n    | 'order'\n    | 'pay'\n    | 'plain'\n    | 'subscribe'\n    | 'long'\n    | 'short';\n\nexport interface TdOnlineMartThreeDSErrorBody {\n    errors?: Array<{ code: string }>;\n    three_ds_result?: {\n        acs_url: string;\n        payer_auth_request: string;\n        merchant_data: string;\n    };\n}\n\nexport type TdOnlineMartAdditionalAction = RequestError<TdOnlineMartThreeDSErrorBody>;\n","import { GooglePayCardNetwork } from '../types';\n\nexport default function isGooglePayCardNetworkKey(\n    card: string,\n): card is keyof typeof GooglePayCardNetwork {\n    return card in GooglePayCardNetwork;\n}\n","import { round } from 'lodash';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    createCurrencyService,\n    CurrencyService,\n    guard,\n    InvalidArgumentError,\n    itemsRequireShipping,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isGooglePayCardNetworkKey from '../guards/is-google-pay-card-network-key';\nimport {\n    CallbackIntentsType,\n    CallbackTriggerType,\n    ErrorReasonType,\n    ExtraPaymentData,\n    GooglePayCardDataResponse,\n    GooglePayCardNetwork,\n    GooglePayCardParameters,\n    GooglePayError,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePayMerchantInfo,\n    GooglePayPaymentDataRequest,\n    GooglePayRequiredPaymentData,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTransactionInfo,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    ShippingOptionParameters,\n    TotalPriceStatusType,\n} from '../types';\n\nexport default class GooglePayGateway {\n    private _getPaymentMethodFn?: () => PaymentMethod<GooglePayInitializationData>;\n    private _isBuyNowFlow = false;\n    private _currencyCode?: string;\n    private _currencyService?: CurrencyService;\n\n    constructor(\n        private _gatewayIdentifier: string,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    mapToShippingAddressRequestBody({\n        shippingAddress,\n    }: GooglePayCardDataResponse): AddressRequestBody | undefined {\n        if (!shippingAddress) {\n            return;\n        }\n\n        const { company = '', phone = '' } =\n            this._paymentIntegrationService.getState().getShippingAddress() || {};\n\n        return this._mapToAddressRequestBody(shippingAddress, company, phone);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        const { billingAddress } = response.paymentMethodData.info;\n\n        if (!billingAddress) {\n            return;\n        }\n\n        const {\n            company = '',\n            phone = '',\n            email,\n            customFields = [],\n        } = this._paymentIntegrationService.getState().getBillingAddress() || {};\n\n        return {\n            ...this._mapToAddressRequestBody(billingAddress, company, phone, customFields),\n            email: email || response.email,\n        };\n    }\n\n    mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const {\n            paymentMethodData: {\n                tokenizationData: { token: nonce },\n                info: { cardNetwork: type, cardDetails: number },\n            },\n        } = response;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve({\n            nonce,\n            card_information: { type, number },\n            ...(this._isBuyNowFlow && {\n                cart_id: this._paymentIntegrationService.getState().getCart()?.id,\n            }),\n        });\n    }\n\n    async getRequiredData(): Promise<GooglePayRequiredPaymentData> {\n        const data: GooglePayRequiredPaymentData = { emailRequired: true };\n\n        if (!this._isShippingAddressRequired()) {\n            return data;\n        }\n\n        const state = await this._paymentIntegrationService.loadShippingCountries();\n        const allowedCountryCodes = state.getShippingCountries()?.map((country) => country.code);\n\n        return {\n            ...data,\n            shippingAddressRequired: true,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n                ...(allowedCountryCodes && { allowedCountryCodes }),\n            },\n            shippingOptionRequired: true,\n        };\n    }\n\n    getCallbackIntents(): CallbackIntentsType[] {\n        if (this._isShippingAddressRequired()) {\n            return [\n                CallbackIntentsType.OFFER,\n                CallbackIntentsType.SHIPPING_ADDRESS,\n                CallbackIntentsType.SHIPPING_OPTION,\n            ];\n        }\n\n        return [CallbackIntentsType.OFFER];\n    }\n\n    getCallbackTriggers(): { [key: string]: CallbackTriggerType[] } {\n        const state = this._paymentIntegrationService.getState();\n        // TODO remove this experiment usage after we make sure that coupons handling works fine\n        const isGooglePayCouponsExperimentOn =\n            state.getStoreConfigOrThrow().checkoutSettings.features[\n                'PI-2875.googlepay_coupons_handling'\n            ] || false;\n\n        const availableTriggers = [\n            CallbackTriggerType.INITIALIZE,\n            CallbackTriggerType.SHIPPING_ADDRESS,\n            CallbackTriggerType.SHIPPING_OPTION,\n            ...(isGooglePayCouponsExperimentOn ? [CallbackTriggerType.OFFER] : []),\n        ];\n\n        const initializationTrigger = [CallbackTriggerType.INITIALIZE];\n        const addressChangeTriggers = [\n            CallbackTriggerType.INITIALIZE,\n            CallbackTriggerType.SHIPPING_ADDRESS,\n        ];\n        const shippingOptionsChangeTriggers = [CallbackTriggerType.SHIPPING_OPTION];\n        const offerChangeTriggers = isGooglePayCouponsExperimentOn\n            ? [CallbackTriggerType.OFFER]\n            : [];\n\n        return {\n            availableTriggers,\n            initializationTrigger,\n            addressChangeTriggers,\n            shippingOptionsChangeTriggers,\n            offerChangeTriggers,\n        };\n    }\n\n    getNonce(methodId: string) {\n        const nonce = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<GooglePayInitializationData>(methodId)\n            .initializationData?.nonce;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve(nonce);\n    }\n\n    extraPaymentData(): Promise<undefined | ExtraPaymentData> {\n        return Promise.resolve(undefined);\n    }\n\n    getMerchantInfo(): GooglePayMerchantInfo {\n        const {\n            googleMerchantName: merchantName,\n            googleMerchantId: merchantId,\n            platformToken: authJwt,\n        } = this.getGooglePayInitializationData();\n\n        return { merchantName, merchantId, authJwt };\n    }\n\n    getTransactionInfo(): GooglePayTransactionInfo {\n        let currencyCode: string;\n\n        if (this._isBuyNowFlow) {\n            currencyCode = this._getCurrencyCodeOrThrow();\n        } else {\n            const { getCartOrThrow } = this._paymentIntegrationService.getState();\n\n            currencyCode = getCartOrThrow().currency.code;\n        }\n\n        const countryCode = this.getGooglePayInitializationData().storeCountry;\n\n        return {\n            ...(countryCode && { countryCode }),\n            currencyCode,\n            totalPriceStatus: TotalPriceStatusType.ESTIMATED,\n            totalPrice: '0',\n        };\n    }\n\n    getPaymentGatewayParameters():\n        | Promise<GooglePayGatewayParameters>\n        | GooglePayGatewayParameters {\n        const gatewayMerchantId = this.getGooglePayInitializationData().gatewayMerchantId;\n\n        if (!gatewayMerchantId) {\n            throw new InvalidArgumentError('Unable to proceed, gatewayMerchantId is missing.');\n        }\n\n        return {\n            gateway: this._gatewayIdentifier,\n            gatewayMerchantId,\n        };\n    }\n\n    getCardParameters(): GooglePayCardParameters {\n        const allowedCardNetworks = this.getPaymentMethod()\n            .supportedCards.filter(isGooglePayCardNetworkKey)\n            .map((key) => GooglePayCardNetwork[key]);\n\n        return {\n            allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n            allowedCardNetworks,\n            billingAddressRequired: true,\n            billingAddressParameters: {\n                format: 'FULL',\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._getPaymentMethodFn = getPaymentMethod;\n        this._isBuyNowFlow = Boolean(isBuyNowFlow);\n        this._currencyCode = currencyCode;\n\n        if (this._isBuyNowFlow) {\n            this._getCurrencyCodeOrThrow();\n        }\n\n        return Promise.resolve();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress?: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        if (shippingAddress) {\n            shippingAddress.name = shippingAddress.name || '';\n            shippingAddress.address1 = shippingAddress.address1 || '';\n        }\n\n        const mappedShippingAddress = this.mapToShippingAddressRequestBody({\n            shippingAddress,\n        } as GooglePayCardDataResponse);\n\n        if (mappedShippingAddress) {\n            await this._paymentIntegrationService.updateShippingAddress(mappedShippingAddress);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const consignments = state.getConsignments();\n\n        if (!consignments?.[0]) {\n            // Info: we can not return an empty data because shippingOptions should contain at least one element, it caused a developer exception\n            return;\n        }\n\n        const consignment = consignments[0];\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        if (!this._currencyService) {\n            this._currencyService = createCurrencyService(storeConfig);\n        }\n\n        const availableShippingOptions = (consignment.availableShippingOptions || []).map(\n            this._getGooglePayShippingOption.bind(this),\n        );\n\n        const recommendedShippingOption = consignment.availableShippingOptions?.find(\n            (shippingOption) => shippingOption.isRecommended,\n        );\n\n        if (availableShippingOptions.length) {\n            const selectedShippingOptionId =\n                consignment.selectedShippingOption?.id ||\n                recommendedShippingOption?.id ||\n                availableShippingOptions[0]?.id;\n\n            if (!consignment.selectedShippingOption?.id && availableShippingOptions[0]) {\n                await this.handleShippingOptionChange(\n                    recommendedShippingOption?.id || availableShippingOptions[0].id,\n                );\n            }\n\n            return {\n                defaultSelectedOptionId: selectedShippingOptionId,\n                shippingOptions: availableShippingOptions,\n            };\n        }\n    }\n\n    async handleShippingOptionChange(optionId: string) {\n        if (optionId === 'shipping_option_unselected') {\n            return;\n        }\n\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    getTotalPrice(): string {\n        const { getCheckoutOrThrow, getCartOrThrow } = this._paymentIntegrationService.getState();\n        const { decimalPlaces } = getCartOrThrow().currency;\n        const totalPrice = round(getCheckoutOrThrow().outstandingBalance, decimalPlaces).toFixed(\n            decimalPlaces,\n        );\n\n        return totalPrice;\n    }\n\n    async handleCoupons(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<HandleCouponsOut> {\n        const { redemptionCodes: newCouponsState = [] } = offerData;\n        const { offers: appliedCoupons } = this.getAppliedCoupons();\n        let error;\n\n        await newCouponsState.reduce(async (promise, code) => {\n            await promise;\n\n            const exists = appliedCoupons.some(({ redemptionCode }) => redemptionCode === code);\n\n            if (exists) {\n                return;\n            }\n\n            const appliedCouponError = await this.applyCoupon(code);\n\n            if (appliedCouponError) {\n                error = appliedCouponError;\n            }\n        }, Promise.resolve());\n\n        await appliedCoupons.reduce(async (promise, coupon) => {\n            await promise;\n\n            const stillExists = newCouponsState.includes(coupon.redemptionCode);\n\n            if (!stillExists) {\n                await this._paymentIntegrationService.removeCoupon(coupon.redemptionCode);\n            }\n        }, Promise.resolve());\n\n        return {\n            newOfferInfo: this.getAppliedCoupons(),\n            error,\n        };\n    }\n\n    getAppliedCoupons(): GooglePayPaymentDataRequest['offerInfo'] {\n        const state = this._paymentIntegrationService.getState();\n        const { coupons } = state.getCheckout() || {};\n\n        const offers = (coupons || []).map((coupon) => {\n            const { displayName, code } = coupon;\n\n            return {\n                redemptionCode: code,\n                description: displayName,\n            };\n        });\n\n        return {\n            offers,\n        };\n    }\n\n    async applyCoupon(code: string): Promise<GooglePayError | void> {\n        let error: GooglePayError | undefined;\n\n        try {\n            await this._paymentIntegrationService.applyCoupon(code);\n        } catch (e) {\n            if (e instanceof Error) {\n                error = {\n                    reason: ErrorReasonType.OFFER_INVALID,\n                    message: e.message,\n                    intent: CallbackTriggerType.OFFER,\n                };\n            }\n\n            return error;\n        }\n    }\n\n    protected getGooglePayInitializationData(): GooglePayInitializationData {\n        return guard(\n            this.getPaymentMethod().initializationData,\n            () => new InvalidArgumentError('Missing initialization data.'),\n        );\n    }\n\n    protected getPaymentMethod(): PaymentMethod<GooglePayInitializationData> {\n        return guard(\n            this._getPaymentMethodFn,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        )();\n    }\n\n    protected getGatewayIdentifier(): string {\n        return this._gatewayIdentifier;\n    }\n\n    protected setGatewayIdentifier(gateway?: string) {\n        this._gatewayIdentifier = gateway || this.getGatewayIdentifier();\n    }\n\n    private _isShippingAddressRequired(): boolean {\n        const { getCartOrThrow, getStoreConfig, getShippingAddress } =\n            this._paymentIntegrationService.getState();\n\n        return (\n            getShippingAddress() === undefined &&\n            itemsRequireShipping(getCartOrThrow(), getStoreConfig())\n        );\n    }\n\n    private _mapToAddressRequestBody(\n        address: GooglePayFullBillingAddress,\n        company: string,\n        phone: string,\n        customFields?: AddressRequestBody['customFields'],\n    ): AddressRequestBody {\n        const {\n            name,\n            address1,\n            address2,\n            address3,\n            locality: city,\n            administrativeArea: stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phoneNumber,\n        } = address;\n        const [firstName, lastName] = this._getFirstAndLastName(name);\n\n        return {\n            firstName,\n            lastName,\n            company,\n            address1,\n            address2: `${address2} ${address3}`.trim(),\n            city: city || stateOrProvinceCode,\n            stateOrProvince: stateOrProvinceCode,\n            stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phone: phoneNumber || phone,\n            customFields: customFields || [],\n        };\n    }\n\n    private _getFirstAndLastName(fullName: string): [string, string] {\n        const nameParts = fullName.split(' ');\n\n        if (nameParts.length === 1) {\n            return [fullName, ''];\n        }\n\n        const firstName = nameParts.slice(0, -1).join(' ');\n        const lastName = nameParts[nameParts.length - 1];\n\n        return [firstName, lastName];\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n\n    private _getGooglePayShippingOption({\n        id,\n        cost,\n        description,\n        additionalDescription,\n    }: ShippingOption) {\n        const formattedCost = this._currencyService?.toCustomerCurrency(cost);\n        const state = this._paymentIntegrationService.getState();\n        const isNewShippingOptionsExperimentOn =\n            state.getStoreConfigOrThrow().checkoutSettings.features[\n                'PI-3540.googlepay_new_shipping_options_description'\n            ];\n\n        if (isNewShippingOptionsExperimentOn) {\n            return {\n                id,\n                label: `${formattedCost || cost} ${description}`,\n                description: additionalDescription,\n            };\n        }\n\n        return {\n            id,\n            label: description,\n            description: formattedCost || cost,\n        };\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * param config - The config object containing the currency configuration\n * returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(config: StoreConfig): CurrencyService {\n    return new CurrencyService(config);\n}\n","import {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenError,\n    AdyenV2ScriptLoader,\n    isAdditionalActionRequiredErrorResponse,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    getBrowserInfo,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAdyenV2 extends GooglePayGateway {\n    private _adyenClient?: AdyenClient;\n    private _service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private _scriptLoader: AdyenV2ScriptLoader) {\n        super('adyen', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        const paymentMethod = super.getPaymentMethod();\n        const state = this._service.getState();\n        const storeConfig = state.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment: paymentMethod.config.testMode ? 'test' : 'live',\n            locale: storeConfig.storeProfile.storeLanguage,\n        });\n\n        return Promise.resolve();\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n        const paymentMethod = super.getPaymentMethod();\n\n        return JSON.stringify({\n            type: paymentMethod.method,\n            googlePayToken: nonce,\n            browser_info: getBrowserInfo(),\n        });\n    }\n\n    async processAdditionalAction(error: unknown): Promise<PaymentIntegrationSelectors | void> {\n        if (!isRequestError(error) || !isAdditionalActionRequiredErrorResponse(error.body)) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            return await this._service.submitPayment(payment);\n        } catch (e) {\n            return this.processAdditionalAction(e);\n        }\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    resolve(paymentPayload);\n                },\n                size: '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            additionalActionComponent.mount('body');\n\n            reject(new PaymentMethodCancelledError());\n        });\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Omit,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from './gateways/google-pay-gateway';\nimport GooglePayScriptLoader from './google-pay-script-loader';\nimport isGooglePayAdditionalActionProcessable from './guards/is-google-pay-additional-action-processable';\nimport {\n    GooglePayBaseCardPaymentMethod,\n    GooglePayButtonOptions,\n    GooglePayCardDataResponse,\n    GooglePayCardPaymentMethod,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayBaseRequest,\n    GooglePayInitializationData,\n    GooglePayIsReadyToPayRequest,\n    GooglePaymentsClient,\n    GooglePayPaymentDataRequest,\n    GooglePayPaymentOptions,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    ShippingOptionParameters,\n} from './types';\n\nexport default class GooglePayPaymentProcessor {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _baseRequest: GooglePayGatewayBaseRequest = { apiVersion: 2, apiVersionMinor: 0 };\n    private _baseCardPaymentMethod?: GooglePayBaseCardPaymentMethod;\n    private _cardPaymentMethod?: GooglePayCardPaymentMethod;\n    private _paymentDataRequest?: GooglePayPaymentDataRequest;\n    private _isReadyToPayRequest?: GooglePayIsReadyToPayRequest;\n\n    constructor(\n        private _scriptLoader: GooglePayScriptLoader,\n        private _gateway: GooglePayGateway,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        googlePayPaymentOptions?: GooglePayPaymentOptions,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._paymentsClient = await this._scriptLoader.getGooglePaymentsClient(\n            getPaymentMethod().config.testMode,\n            googlePayPaymentOptions,\n        );\n\n        await this._gateway.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        this._buildButtonPayloads();\n    }\n\n    async initializeWidget() {\n        await this._buildWidgetPayloads();\n\n        await this._determineReadinessToPay();\n\n        this._prefetchGooglePaymentData();\n    }\n\n    getNonce(methodId: string) {\n        return this._gateway.getNonce(methodId);\n    }\n\n    async extraPaymentData() {\n        return this._gateway.extraPaymentData();\n    }\n\n    addPaymentButton(\n        containerId: string,\n        options: Omit<GooglePayButtonOptions, 'allowedPaymentMethods'>,\n    ): HTMLElement | undefined {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            return;\n        }\n\n        const paymentButton = this._getPaymentsClient().createButton({\n            ...options,\n            allowedPaymentMethods: [this._getBaseCardPaymentMethod()],\n        });\n\n        return container.appendChild(paymentButton);\n    }\n\n    async showPaymentSheet(): Promise<GooglePayCardDataResponse> {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        return this._getPaymentsClient().loadPaymentData(paymentDataRequest);\n    }\n\n    async setExternalCheckoutXhr(\n        provider: string,\n        response: GooglePayCardDataResponse,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response);\n    }\n\n    async setExternalCheckoutForm(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        siteLink?: string,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response, true, siteLink);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        return this._gateway.mapToBillingAddressRequestBody(response);\n    }\n\n    mapToShippingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): AddressRequestBody | undefined {\n        return this._gateway.mapToShippingAddressRequestBody(response);\n    }\n\n    processAdditionalAction(error: unknown, methodId?: string): Promise<void> {\n        return isGooglePayAdditionalActionProcessable(this._gateway)\n            ? this._gateway.processAdditionalAction(error, methodId)\n            : Promise.reject(error);\n    }\n\n    async signOut(providerId: string): Promise<void> {\n        await this._requestSender.get(`/remote-checkout/${providerId}/signout`);\n    }\n\n    getCallbackTriggers() {\n        return this._gateway.getCallbackTriggers();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        return this._gateway.handleShippingAddressChange(shippingAddress);\n    }\n\n    async handleShippingOptionChange(optionId: string): Promise<void> {\n        await this._gateway.handleShippingOptionChange(optionId);\n    }\n\n    async handleCoupons(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<HandleCouponsOut> {\n        return this._gateway.handleCoupons(offerData);\n    }\n\n    getTotalPrice(): string {\n        return this._gateway.getTotalPrice();\n    }\n\n    async _setExternalCheckout(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        useFormPoster = false,\n        siteLink?: string,\n    ): Promise<void> {\n        const url = '/checkout.php';\n        const body = {\n            action: 'set_external_checkout',\n            provider,\n            ...(await this._gateway.mapToExternalCheckoutData(response)),\n        };\n\n        if (useFormPoster) {\n            return new Promise((resolve) => {\n                this._formPoster.postForm(\n                    siteLink ? `${siteLink}/checkout` : url,\n                    {\n                        ...body,\n                        card_information: JSON.stringify(body.card_information),\n                    },\n                    resolve,\n                );\n            });\n        }\n\n        await this._requestSender.post(url, {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body,\n        });\n    }\n\n    private _prefetchGooglePaymentData(): void {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        paymentDataRequest.transactionInfo = this._gateway.getTransactionInfo();\n\n        this._getPaymentsClient().prefetchPaymentData(paymentDataRequest);\n    }\n\n    private async _determineReadinessToPay(): Promise<void> {\n        try {\n            const { result } = await this._getPaymentsClient().isReadyToPay(\n                this._getIsReadyToPayRequest(),\n            );\n\n            if (result === false) {\n                throw new PaymentMethodFailedError(\n                    'Google Pay is not supported by the current device and browser, please try another payment method.',\n                );\n            }\n        } catch (error) {\n            if (error instanceof PaymentMethodFailedError) {\n                throw error;\n            }\n\n            throw new PaymentMethodFailedError();\n        }\n    }\n\n    private _buildButtonPayloads() {\n        this._baseCardPaymentMethod = {\n            type: 'CARD',\n            parameters: this._gateway.getCardParameters(),\n        };\n    }\n\n    private async _buildWidgetPayloads(): Promise<void> {\n        const baseCardPaymentMethod = this._getBaseCardPaymentMethod();\n\n        this._cardPaymentMethod = {\n            ...baseCardPaymentMethod,\n            tokenizationSpecification: {\n                type: 'PAYMENT_GATEWAY',\n                parameters: await this._gateway.getPaymentGatewayParameters(),\n            },\n        };\n        this._paymentDataRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [this._cardPaymentMethod],\n            transactionInfo: this._gateway.getTransactionInfo(),\n            merchantInfo: this._gateway.getMerchantInfo(),\n            ...(await this._gateway.getRequiredData()),\n            callbackIntents: this._gateway.getCallbackIntents(),\n            offerInfo: this._gateway.getAppliedCoupons(),\n        };\n        this._isReadyToPayRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [baseCardPaymentMethod],\n        };\n    }\n\n    private _getBaseCardPaymentMethod(): GooglePayBaseCardPaymentMethod {\n        return this._getOrThrow(this._baseCardPaymentMethod);\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequest {\n        return this._getOrThrow(this._paymentDataRequest);\n    }\n\n    private _getIsReadyToPayRequest(): GooglePayIsReadyToPayRequest {\n        return this._getOrThrow(this._isReadyToPayRequest);\n    }\n\n    private _getPaymentsClient(): GooglePaymentsClient {\n        return this._getOrThrow(this._paymentsClient);\n    }\n\n    private _getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import GooglePayGateway from '../gateways/google-pay-gateway';\nimport { GooglePayAdditionalActionProcessable } from '../types';\n\nexport default function isGooglePayAdditionalActionProcessable(\n    gateway: GooglePayGateway,\n): gateway is GooglePayGateway & GooglePayAdditionalActionProcessable {\n    return 'processAdditionalAction' in gateway;\n}\n","import { GooglePayErrorObject } from '../types';\n\nexport default function isGooglePayErrorObject(error: unknown): error is GooglePayErrorObject {\n    return typeof error === 'object' && error !== null && 'statusCode' in error;\n}\n","/**\n * A set of options that are required to initialize the GooglePay payment method\n *\n * If the customer chooses to pay with GooglePay, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n *\n * ```html\n * <!-- This is where the GooglePay button will be inserted -->\n * <div id=\"wallet-button\"></div>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     // Using GooglePay provided by Braintree as an example\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button'\n *     },\n * });\n * ```\n *\n * Additional event callbacks can be registered.\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button',\n *         onError(error) {\n *             console.log(error);\n *         },\n *         onPaymentSelect() {\n *             console.log('Selected');\n *         },\n *     },\n * });\n * ```\n */\nexport default interface GooglePayPaymentInitializeOptions {\n    /**\n     * A container for loading spinner.\n     */\n    loadingContainerId?: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the GooglePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when GooglePay fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n\n/**\n * The recognized keys to pass the initialization options for Google Pay.\n */\nexport enum GooglePayKey {\n    ADYEN_V2 = 'googlepayadyenv2',\n    ADYEN_V3 = 'googlepayadyenv3',\n    AUTHORIZE_NET = 'googlepayauthorizenet',\n    BNZ = 'googlepaybnz',\n    BRAINTREE = 'googlepaybraintree',\n    PAYPAL_COMMERCE = 'googlepaypaypalcommerce',\n    BIGCOMMERCE_PAYMENTS = 'googlepay_bigcommerce_payments',\n    CHECKOUT_COM = 'googlepaycheckoutcom',\n    CYBERSOURCE_V2 = 'googlepaycybersourcev2',\n    ORBITAL = 'googlepayorbital',\n    STRIPE = 'googlepaystripe',\n    STRIPE_UPE = 'googlepaystripeupe',\n    STRIPE_OCS = 'googlepaystripeocs',\n    WORLDPAY_ACCESS = 'googlepayworldpayaccess',\n    TD_ONLINE_MART = 'googlepaytdonlinemart',\n}\n\n/**\n * The options that are required to initialize the GooglePay payment method.\n * They can be omitted unless you need to support GooglePay.\n */\nexport type WithGooglePayPaymentInitializeOptions = {\n    [k in GooglePayKey]?: GooglePayPaymentInitializeOptions;\n};\n","import { GooglePayKey } from '../google-pay-payment-initialize-options';\n\nexport default function isGooglePayKey(key: string): key is GooglePayKey {\n    return Object.values<string>(GooglePayKey).includes(key);\n}\n","import { round } from 'lodash';\n\nimport {\n    guard,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Omit,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { DEFAULT_CONTAINER_STYLES, LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport GooglePayPaymentInitializeOptions, {\n    WithGooglePayPaymentInitializeOptions,\n} from './google-pay-payment-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    CallbackTriggerType,\n    ErrorReasonType,\n    GooglePayError,\n    GooglePayInitializationData,\n    GooglePayPaymentOptions,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _loadingIndicator: LoadingIndicator;\n    private _loadingIndicatorContainer?: string;\n    private _paymentButton?: HTMLElement;\n    private _clickListener?: (event: MouseEvent) => unknown;\n    private _methodId?: keyof WithGooglePayPaymentInitializeOptions;\n\n    constructor(\n        protected _paymentIntegrationService: PaymentIntegrationService,\n        protected _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {\n        this._loadingIndicator = new LoadingIndicator({\n            containerStyles: DEFAULT_CONTAINER_STYLES,\n        });\n    }\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithGooglePayPaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        const googlePayOptions = options[this._getMethodId()];\n\n        if (!googlePayOptions?.walletButton) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        const { walletButton, loadingContainerId, ...callbacks } = googlePayOptions;\n\n        this._loadingIndicatorContainer = loadingContainerId;\n\n        await this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<GooglePayInitializationData>(this._getMethodId());\n\n        await this._googlePayPaymentProcessor.initialize(\n            () => paymentMethod,\n            this._getGooglePayClientOptions(paymentMethod.initializationData?.storeCountry),\n        );\n\n        this._addPaymentButton(walletButton, callbacks);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        await this._paymentIntegrationService.submitOrder();\n\n        const nonce = await this._googlePayPaymentProcessor.getNonce(payment.methodId);\n        const extraData = await this._googlePayPaymentProcessor.extraPaymentData();\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: { nonce, ...extraData },\n            });\n        } catch (error) {\n            await this._googlePayPaymentProcessor.processAdditionalAction(error, payment.methodId);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._clickListener) {\n            this._paymentButton?.removeEventListener('click', this._clickListener);\n        }\n\n        this._paymentButton = undefined;\n        this._clickListener = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    protected _addPaymentButton(\n        walletButton: string,\n        callbacks: Omit<GooglePayPaymentInitializeOptions, 'walletButton'>,\n    ): void {\n        if (this._paymentButton) {\n            return;\n        }\n\n        const paymentButton = document.getElementById(walletButton);\n\n        if (!paymentButton) {\n            throw new InvalidArgumentError('Unable to proceed without a walletButton.');\n        }\n\n        this._paymentButton = paymentButton;\n        this._clickListener = this._handleClick(callbacks);\n\n        this._paymentButton.addEventListener('click', this._clickListener);\n    }\n\n    protected _handleClick({\n        onPaymentSelect,\n        onError,\n    }: Omit<GooglePayPaymentInitializeOptions, 'walletButton'>): (event: MouseEvent) => unknown {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            // TODO: Dispatch Widget Actions\n            try {\n                await this._googlePayPaymentProcessor.initializeWidget();\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                this._toggleLoadingIndicator(false);\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n\n            onPaymentSelect?.();\n        };\n    }\n\n    protected async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n\n        this._toggleLoadingIndicator(true);\n\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutXhr(this._getMethodId(), response);\n\n        await this._paymentIntegrationService.loadCheckout();\n        await this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());\n        this._toggleLoadingIndicator(false);\n    }\n\n    protected _getMethodId(): keyof WithGooglePayPaymentInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    protected async _getIsSignedInOrThrow(): Promise<boolean> {\n        try {\n            return !!(await this._googlePayPaymentProcessor.getNonce(this._getMethodId()));\n        } catch (e) {\n            if (\n                e instanceof MissingDataError &&\n                e.subtype === MissingDataErrorType.MissingPaymentToken\n            ) {\n                return false;\n            }\n\n            throw e;\n        }\n    }\n\n    protected async _handleOfferTrigger(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<Partial<HandleCouponsOut>> {\n        let isSignedIn = false;\n        let errorMessage = 'Sign in to Google Pay first to apply or remove promo codes.';\n\n        try {\n            isSignedIn = await this._getIsSignedInOrThrow();\n        } catch (error) {\n            if (error instanceof MissingDataError) {\n                errorMessage = error.message;\n            }\n        }\n\n        // We can only apply/remove coupons on the payment step only if we are logged into Google Pay, otherwise we will get an error\n        if (isSignedIn) {\n            const { newOfferInfo, error } = await this._googlePayPaymentProcessor.handleCoupons(\n                offerData,\n            );\n\n            return {\n                newOfferInfo,\n                error,\n            };\n        }\n\n        return {\n            error: {\n                reason: ErrorReasonType.OFFER_INVALID,\n                message: errorMessage,\n                intent: CallbackTriggerType.OFFER,\n            },\n        };\n    }\n\n    protected _getGooglePayClientOptions(countryCode?: string): GooglePayPaymentOptions {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({ callbackTrigger, offerData }) => {\n                    const state = this._paymentIntegrationService.getState();\n                    // TODO remove this experiment usage after we make sure that coupons handling works fine\n                    const isGooglePayCouponsExperimentOn =\n                        state.getStoreConfigOrThrow().checkoutSettings.features[\n                            'PI-2875.googlepay_coupons_handling'\n                        ] || false;\n\n                    if (\n                        callbackTrigger !== CallbackTriggerType.INITIALIZE &&\n                        (!isGooglePayCouponsExperimentOn ||\n                            callbackTrigger !== CallbackTriggerType.OFFER)\n                    ) {\n                        return;\n                    }\n\n                    const { offerChangeTriggers } =\n                        this._googlePayPaymentProcessor.getCallbackTriggers();\n\n                    const { newOfferInfo = undefined, error: couponsError = undefined } =\n                        offerChangeTriggers.includes(callbackTrigger)\n                            ? await this._handleOfferTrigger(offerData)\n                            : {};\n\n                    // We can add another errors if needed 'couponsError || shippingError || anotherError'\n                    const error: GooglePayError | undefined = couponsError;\n\n                    await this._paymentIntegrationService.loadCheckout();\n\n                    const { getCheckoutOrThrow, getCartOrThrow } =\n                        this._paymentIntegrationService.getState();\n                    const { code: currencyCode, decimalPlaces } = getCartOrThrow().currency;\n                    const totalPrice = round(\n                        getCheckoutOrThrow().outstandingBalance,\n                        decimalPlaces,\n                    ).toFixed(decimalPlaces);\n\n                    return {\n                        newTransactionInfo: {\n                            ...(countryCode && { countryCode }),\n                            currencyCode,\n                            totalPriceStatus: TotalPriceStatusType.FINAL,\n                            totalPrice,\n                        },\n                        ...(newOfferInfo && {\n                            newOfferInfo,\n                        }),\n                        ...(error && {\n                            error,\n                        }),\n                    };\n                },\n            },\n        };\n    }\n\n    private _toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this._loadingIndicatorContainer) {\n            this._loadingIndicator.show(this._loadingIndicatorContainer);\n        } else {\n            this._loadingIndicator.hide();\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayHostWindow, GooglePaymentsClient, GooglePayPaymentOptions } from './types';\n\nexport const GOOGLE_PAY_LIBRARY = 'https://pay.google.com/gp/p/js/pay.js';\n\nexport default class GooglePayScriptLoader {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _window: GooglePayHostWindow = window;\n\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    async getGooglePaymentsClient(\n        testMode = false,\n        options?: GooglePayPaymentOptions,\n    ): Promise<GooglePaymentsClient> {\n        await this._scriptLoader.loadScript(GOOGLE_PAY_LIBRARY);\n\n        if (!this._window.google) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        if (this._paymentsClient === undefined) {\n            this._paymentsClient = new this._window.google.payments.api.PaymentsClient({\n                environment: testMode ? 'TEST' : 'PRODUCTION',\n                ...(options ?? {}),\n            });\n        }\n\n        return this._paymentsClient;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport GooglePayScriptLoader from '../google-pay-script-loader';\n\nexport default function createGooglePayScriptLoader() {\n    return new GooglePayScriptLoader(getScriptLoader());\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV2ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAdyenV2Gateway from '../../gateways/google-pay-adyenv2-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2PaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAdyenV2Gateway(\n                paymentIntegrationService,\n                new AdyenV2ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAdyenV2PaymentStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenError,\n    AdyenV3ScriptLoader,\n    isAdditionalActionRequiredErrorResponse,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    getBrowserInfo,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAdyenV3 extends GooglePayGateway {\n    private _adyenClient?: AdyenClient;\n    private _service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private _scriptLoader: AdyenV3ScriptLoader) {\n        super('adyen', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        const paymentMethod = super.getPaymentMethod();\n        const state = this._service.getState();\n        const storeConfig = state.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment: paymentMethod.config.testMode ? 'test' : 'live',\n            locale: storeConfig.storeProfile.storeLanguage,\n        });\n\n        return Promise.resolve();\n    }\n\n    async processAdditionalAction(error: unknown): Promise<PaymentIntegrationSelectors | void> {\n        if (!isRequestError(error) || !isAdditionalActionRequiredErrorResponse(error.body)) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            return await this._service.submitPayment(payment);\n        } catch (e) {\n            return this.processAdditionalAction(e);\n        }\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n        const paymentMethod = super.getPaymentMethod();\n\n        return JSON.stringify({\n            type: paymentMethod.method,\n            googlePayToken: nonce,\n            browser_info: getBrowserInfo(),\n        });\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    resolve(paymentPayload);\n                },\n                size: '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            additionalActionComponent.mount('body');\n\n            reject(new PaymentMethodCancelledError());\n        });\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV3ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAdyenV3Gateway from '../../gateways/google-pay-adyenv3-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3PaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAdyenV3Gateway(\n                paymentIntegrationService,\n                new AdyenV3ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAdyenV3PaymentStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertsIsGooglePayAuthorizeNetInitializationData from '../guards/is-google-pay-authorizenet-initialization-data';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAuthorizeNetGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('authorizenet', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayAuthorizeNetInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.paymentGatewayId,\n        };\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayAuthorizeNetInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayAuthorizeNetInitializationData {\n    return 'paymentGatewayId' in data;\n}\n\nexport default function assertsIsGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayAuthorizeNetInitializationData {\n    if (!isGooglePayAuthorizeNetInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeNetPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAuthorizeNetPaymentStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCheckoutComInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayCheckoutComInitializationData {\n    return 'checkoutcomkey' in data;\n}\n\nexport default function assertIsGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayCheckoutComInitializationData {\n    if (!isGooglePayCheckoutComInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    InvalidArgumentError,\n    isRequestError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertIsGooglePayCheckoutComInitializationData from '../guards/is-google-pay-checkoutcom-initialization-data';\nimport { isGooglePayThreeDSecureResult } from '../guards/is-google-pay-threedsecure-result';\nimport assertIsGooglePayTokenObject from '../guards/is-google-pay-token-object';\nimport {\n    GooglePayAdditionalActionProcessable,\n    GooglePayCardDataResponse,\n    GooglePayCheckoutComTokenObject,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTokenObject,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCheckoutComGateway\n    extends GooglePayGateway\n    implements GooglePayAdditionalActionProcessable\n{\n    constructor(service: PaymentIntegrationService, private _requestSender: RequestSender) {\n        super('checkoutltd', service);\n    }\n\n    processAdditionalAction(error: unknown): Promise<void> {\n        return new Promise((_resolve, reject) => {\n            if (\n                isRequestError(error) &&\n                isGooglePayThreeDSecureResult(error.body) &&\n                error.body.three_ds_result.code === 'three_d_secure_required'\n            ) {\n                return window.location.assign(error.body.three_ds_result.acs_url);\n            }\n\n            reject(error);\n        });\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayTokenObject(token);\n\n        data.nonce = await this._tokenize(token);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.checkoutcomkey,\n        };\n    }\n\n    private async _tokenize(token_data: GooglePayTokenObject): Promise<string> {\n        const url = this.getPaymentMethod().config.testMode\n            ? 'https://api.sandbox.checkout.com/tokens'\n            : 'https://api.checkout.com/tokens';\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        const { body } = await this._requestSender.post<GooglePayCheckoutComTokenObject>(url, {\n            credentials: false,\n            body: {\n                type: 'googlepay',\n                token_data,\n            },\n            headers: {\n                Authorization: data.checkoutcomkey,\n                'Content-Type': ContentType.Json,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return body.token;\n    }\n}\n","import { RequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayThreeDSecureResult } from '../types';\n\nexport function isGooglePayThreeDSecureResult(\n    body: RequestError['body'],\n): body is GooglePayThreeDSecureResult {\n    if (typeof body !== 'object' || body === null) {\n        return false;\n    }\n\n    const threeDSBody = body as Partial<GooglePayThreeDSecureResult>;\n\n    return (\n        typeof threeDSBody.three_ds_result?.acs_url === 'string' &&\n        typeof threeDSBody.three_ds_result.code === 'string'\n    );\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayTokenObject } from '../types';\n\nfunction isGooglePayTokenObject(token: unknown): token is GooglePayTokenObject {\n    return (\n        typeof token === 'object' &&\n        token !== null &&\n        'protocolVersion' in token &&\n        'signature' in token &&\n        'signedMessage' in token\n    );\n}\n\nexport default function assertIsGooglePayTokenObject(\n    token: unknown,\n): asserts token is GooglePayTokenObject {\n    if (!isGooglePayTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComPaymentStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCybersourceGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('cybersource', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourcePaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayCybersourcePaymentStrategy, [\n    { id: 'googlepaycybersourcev2' },\n    { id: 'googlepaybnz' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayOrbitalGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('chase', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalPaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayOrbitalPaymentStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayStripeInitializationData } from '../types';\n\nfunction isGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayStripeInitializationData {\n    return (\n        'stripeConnectedAccount' in data &&\n        'stripePublishableKey' in data &&\n        'stripeVersion' in data\n    );\n}\n\nexport default function assertsIsGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayStripeInitializationData {\n    if (!isGooglePayStripeInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { includes, some } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    isRequestError,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayStripeInitializationData from '../guards/is-google-pay-stripe-initialization-data';\nimport isGooglePayStripeRequestError from '../guards/is-google-pay-stripe-request-error';\nimport assertIsGooglePayStripeTokenObject from '../guards/is-google-pay-stripe-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePaySetExternalCheckoutData,\n    GooglePayStripeGatewayParameters,\n} from '../types';\n\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\nimport { StripeError, StripeUPEClient } from './types';\n\nexport default class GooglePayStripeGateway extends GooglePayGateway {\n    private stripeUPEClient?: StripeUPEClient;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeUPEScriptLoader,\n    ) {\n        super('stripe', paymentIntegrationService);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayStripeTokenObject(token);\n\n        data.nonce = token.id;\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayStripeGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayStripeInitializationData(data);\n\n        const { stripeVersion, stripePublishableKey, stripeConnectedAccount } = data;\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            'stripe:version': stripeVersion,\n            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n        };\n    }\n\n    async processAdditionalAction(\n        error: unknown,\n        methodId?: string,\n    ): Promise<PaymentIntegrationSelectors | never> {\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!isRequestError(error) || !isGooglePayStripeRequestError(error.body)) {\n            throw error;\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const isStripeGooglePay3dsExperimentIsOn =\n            state.getStoreConfig()?.checkoutSettings.features[\n                'STRIPE-476.enable_stripe_googlepay_3ds'\n            ];\n        const shouldTrigger3DS =\n            some(error.body.errors, { code: 'three_d_secure_required' }) &&\n            isStripeGooglePay3dsExperimentIsOn;\n\n        if (shouldTrigger3DS) {\n            const data = this.getGooglePayInitializationData();\n\n            assertsIsGooglePayStripeInitializationData(data);\n\n            const { stripePublishableKey, stripeConnectedAccount } = data;\n\n            this.stripeUPEClient = await this.loadStripeJs(\n                stripePublishableKey,\n                stripeConnectedAccount,\n            );\n\n            const clientSecret = error.body.three_ds_result.token;\n            let result;\n            let catchedConfirmError = false;\n\n            try {\n                result = await this.stripeUPEClient.confirmCardPayment(clientSecret);\n            } catch (_) {\n                try {\n                    result = await this.stripeUPEClient.retrievePaymentIntent(clientSecret);\n                } catch (__) {\n                    catchedConfirmError = true;\n                }\n            }\n\n            if (result?.error) {\n                this._throwDisplayableStripeError(result.error);\n\n                if (this._isCancellationError(result.error)) {\n                    throw new PaymentMethodCancelledError();\n                }\n\n                throw new PaymentMethodFailedError();\n            }\n\n            if (!result?.paymentIntent && !catchedConfirmError) {\n                throw new RequestError();\n            }\n\n            return this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: { nonce: result?.paymentIntent?.id || clientSecret },\n            });\n        }\n\n        throw error;\n    }\n\n    private async loadStripeJs(\n        stripePublishableKey: string,\n        stripeConnectedAccount: string,\n    ): Promise<StripeUPEClient> {\n        if (this.stripeUPEClient) {\n            return this.stripeUPEClient;\n        }\n\n        return this.scriptLoader.getStripeClient(stripePublishableKey, stripeConnectedAccount);\n    }\n\n    private _isCancellationError(stripeError: StripeError | undefined) {\n        return (\n            stripeError &&\n            stripeError.payment_intent.last_payment_error?.message?.indexOf('canceled') !== -1\n        );\n    }\n\n    private _throwDisplayableStripeError(stripeError: StripeError) {\n        if (\n            includes(['card_error', 'invalid_request_error', 'validation_error'], stripeError.type)\n        ) {\n            throw new Error(stripeError.message);\n        }\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayStripeTokenObject } from '../types';\n\nfunction isGooglePayStripeTokenObject(token: unknown): token is GooglePayStripeTokenObject {\n    return typeof token === 'object' && token !== null && 'id' in token;\n}\n\nexport default function assertIsGooglePayStripeTokenObject(\n    token: unknown,\n): asserts token is GooglePayStripeTokenObject {\n    if (!isGooglePayStripeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","interface AdditionalActionError {\n    three_ds_result: { token: string };\n    errors: Array<{ code: string }>;\n}\n\nconst isGooglePayStripeRequestError = (body: unknown): body is AdditionalActionError => {\n    return (\n        typeof body === 'object' && body !== null && 'three_ds_result' in body && 'errors' in body\n    );\n};\n\nexport default isGooglePayStripeRequestError;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeHostWindow, StripeUPEClient } from './types';\n\nexport default class StripeUPEScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private stripeWindow: StripeHostWindow = window,\n    ) {}\n\n    async getStripeClient(\n        stripePublishableKey: string,\n        stripeAccount: string,\n        locale?: string,\n    ): Promise<StripeUPEClient> {\n        let stripeClient = this.stripeWindow.bcStripeClient;\n\n        if (!stripeClient) {\n            const stripe = await this.load();\n\n            stripeClient = stripe(stripePublishableKey, {\n                stripeAccount,\n                locale,\n                betas: [\n                    'payment_element_beta_2',\n                    'alipay_pm_beta_1',\n                    'link_default_integration_beta_1',\n                    'shipping_address_element_beta_1',\n                    'address_element_beta_1',\n                ],\n                apiVersion: '2020-03-02;alipay_beta=v1;link_beta=v1',\n            });\n\n            Object.assign(this.stripeWindow, { bcStripeClient: stripeClient });\n        }\n\n        return stripeClient;\n    }\n\n    private async load() {\n        if (!this.stripeWindow.Stripe) {\n            await this.scriptLoader.loadScript('https://js.stripe.com/v3/');\n        }\n\n        if (!this.stripeWindow.Stripe) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.stripeWindow.Stripe;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripePaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayStripePaymentStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeupe' },\n    { id: 'googlepaystripeocs' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayWorldpayAccessGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('worldpay', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayWorldpayAccessPaymentStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","import {\n    BraintreeGooglePayment,\n    BraintreeGooglePayThreeDSecure,\n    BraintreeSdk,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CancellablePromise,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayKey } from '../google-pay-payment-initialize-options';\nimport assertIsGooglePayBraintreeTokenObject from '../guards/is-google-pay-braintree-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayBraintreeGateway extends GooglePayGateway {\n    private _braintreeGooglePayment?: BraintreeGooglePayment;\n    private _service: PaymentIntegrationService;\n    private _methodId = GooglePayKey.BRAINTREE;\n\n    constructor(service: PaymentIntegrationService, private _braintreeSdk: BraintreeSdk) {\n        super('braintree', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        let paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.clientToken) {\n            const state = await this._service.loadPaymentMethod(this._methodId);\n\n            paymentMethod = state.getPaymentMethodOrThrow(this._methodId);\n        }\n\n        if (!paymentMethod.clientToken || !paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSdk.initialize(paymentMethod.clientToken);\n        this._braintreeGooglePayment = await this._braintreeSdk.getBraintreeGooglePayment();\n\n        return Promise.resolve();\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n\n        const { clientToken, initializationData } = super.getPaymentMethod();\n\n        if (!clientToken || !initializationData || !initializationData.card_information?.bin) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            isThreeDSecureEnabled,\n            card_information: { bin, isNetworkTokenized },\n        } = initializationData;\n\n        if (isThreeDSecureEnabled && !isNetworkTokenized) {\n            const threeDSecure = await this._braintreeSdk.getBraintreeThreeDS();\n\n            const { orderAmount } = this._service.getState().getOrderOrThrow();\n\n            const verification = await this._braintreePresent3DSChallenge(\n                threeDSecure,\n                orderAmount,\n                nonce,\n                bin,\n            );\n\n            return verification.nonce;\n        }\n\n        return nonce;\n    }\n\n    async extraPaymentData() {\n        return {\n            deviceSessionId: await this._getBraintreeDeviceData(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayBraintreeTokenObject(token);\n\n        data.nonce = token.androidPayCards[0].nonce;\n        data.card_information.bin = token.androidPayCards[0].details.bin;\n        data.card_information.isNetworkTokenized =\n            token.androidPayCards[0].details.isNetworkTokenized;\n\n        return data;\n    }\n\n    getCardParameters() {\n        return super.getCardParameters();\n    }\n\n    async getPaymentGatewayParameters(): Promise<GooglePayGatewayParameters> {\n        const braintreeGooglePayment = this.getBraintreeGooglePayment();\n\n        const request = braintreeGooglePayment.createPaymentDataRequest({\n            merchantInfo: super.getMerchantInfo(),\n            transactionInfo: super.getTransactionInfo(),\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            ...(await super.getRequiredData()),\n        });\n\n        return request.paymentMethodTokenizationParameters.parameters;\n    }\n\n    private getBraintreeGooglePayment(): BraintreeGooglePayment {\n        if (!this._braintreeGooglePayment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._braintreeGooglePayment;\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n        return deviceData;\n    }\n\n    private _braintreePresent3DSChallenge(\n        threeDSecure: BraintreeGooglePayThreeDSecure,\n        amount: number,\n        nonce: string,\n        bin: string,\n    ) {\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                amount,\n                bin,\n                nonce,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n            }),\n        );\n\n        return verification.promise;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayBraintreeTokenObject } from '../types';\n\nfunction isGooglePayBraintreeTokenObject(token: unknown): token is GooglePayBraintreeTokenObject {\n    return typeof token === 'object' && token !== null && 'androidPayCards' in token;\n}\n\nexport default function assertIsGooglePayBraintreeTokenObject(\n    token: unknown,\n): asserts token is GooglePayBraintreeTokenObject {\n    if (!isGooglePayBraintreeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreePaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n\n    return new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeSdk),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreePaymentStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceSdk {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: [\n                    'fastlane',\n                    'buttons',\n                    'payment-fields',\n                    'hosted-fields',\n                    'three-domain-secure',\n                ],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayPayPalCommerceInitializationData } from '../types';\n\nfunction isGooglePayPaypalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (data.initializationData) {\n        return (\n            'attributionId' in data.initializationData &&\n            'isVenmoEnabled' in data.initializationData &&\n            'isGooglePayEnabled' in data.initializationData &&\n            'isPayPalCreditAvailable' in data.initializationData\n        );\n    }\n\n    return false;\n}\n\nexport default function assertsIsGooglePayPayPalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): asserts data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (!isGooglePayPaypalCommercePaymentMethod(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport { GooglePayConfig } from './types';\n\nexport default class GooglePayPaypalCommerceGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private payPalCommerceSdk: PayPalCommerceSdk) {\n        super('paypalsb', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        const googlePaySdk = await this.payPalCommerceSdk.getPayPalGooglePaySdk(\n            paymentMethod,\n            currency,\n        );\n\n        this.googlepayConfig = await googlePaySdk.Googlepay().config();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","export type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\nexport interface PayPalSDK {\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n        initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n    };\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport enum ConfirmOrderStatus {\n    Approved = 'APPROVED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n}\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\nexport interface PayPalCommerceScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-partner-attribution-id'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'card-fields'\n>;\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport interface PayPalGoogleSdk {\n    version: string;\n    getCorrelationID: () => void;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: Record<string, string>;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\nimport { GooglePayInitializationData, GooglePayPayPalCommerceInitializationData } from '../types';\n\nimport { ConfirmOrderData, ConfirmOrderStatus } from './types';\n\nexport default class GooglePayPaypalCommercePaymentStrategy extends GooglePayPaymentStrategy {\n    constructor(\n        _paymentIntegrationService: PaymentIntegrationService,\n        _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _payPalCommerceSdk: PayPalCommerceSdk,\n        private _requestSender: RequestSender,\n    ) {\n        super(_paymentIntegrationService, _googlePayPaymentProcessor);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const { initializationData } = state.getPaymentMethodOrThrow<GooglePayInitializationData>(\n            this._getMethodId(),\n        );\n        const { orderId } = await this.getOrderId(cartId);\n\n        const { card_information } = initializationData || {};\n        const nonce = await this._googlePayPaymentProcessor.getNonce(payment.methodId);\n\n        const confirmOrderData = {\n            tokenizationData: {\n                type: 'PAYMENT_GATEWAY',\n                token: atob(nonce),\n            },\n            info: {\n                cardNetwork: card_information?.type || '',\n                cardDetails: card_information?.number || '',\n            },\n            type: 'CARD',\n        };\n\n        await this.confirmOrder(orderId, confirmOrderData);\n        await this._paymentIntegrationService.submitOrder();\n\n        try {\n            const paymentData = {\n                formattedPayload: {\n                    method_id: payment.methodId,\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n        } catch (error) {\n            await this._googlePayPaymentProcessor.processAdditionalAction(error);\n        }\n    }\n\n    private async confirmOrder(orderId: string, confirmOrderData: ConfirmOrderData) {\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<GooglePayPayPalCommerceInitializationData>(\n                this._getMethodId(),\n            );\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n\n        const payPalSDK = await this._payPalCommerceSdk.getPayPalGooglePaySdk(\n            paymentMethod,\n            currencyCode,\n            true,\n        );\n\n        const { status } = await payPalSDK\n            .Googlepay()\n            .confirmOrder({ orderId, paymentMethodData: confirmOrderData });\n\n        if (status === ConfirmOrderStatus.PayerActionRequired) {\n            await payPalSDK.Googlepay().initiatePayerAction({ orderId });\n\n            return Promise.resolve();\n        }\n\n        if (status !== ConfirmOrderStatus.Approved) {\n            throw new InvalidArgumentError('Payment is not approved.');\n        }\n\n        return Promise.resolve();\n    }\n\n    private async getOrderId(cartId: string): Promise<{ orderId: string }> {\n        const url = '/api/storefront/payments/googlepaypaypalcommercecheckout';\n        const requestData = {\n            cartId,\n            shouldSaveInstrument: false,\n        };\n\n        const { body } = await this._requestSender.post<{ orderId: string }>(url, {\n            headers: {\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                'Content-Type': ContentType.Json,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: requestData,\n        });\n\n        return body;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\nimport GooglePayPaypalCommercePaymentStrategy from './google-pay-paypal-commerce-payment-strategy';\n\nconst createGooglePayPayPalCommercePaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) => {\n    const payPalCommerceSdk = new PayPalCommerceSdk(getScriptLoader());\n\n    return new GooglePayPaypalCommercePaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(paymentIntegrationService, payPalCommerceSdk),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n        payPalCommerceSdk,\n        createRequestSender(),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommercePaymentStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import {\n    BigCommercePaymentsInitializationData,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayConfig,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nexport default class GooglePayBigCommercePaymentsGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private payPalSdkHelper: PayPalSdkHelper) {\n        super('googlepay_bigcommerce_payments', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        const googlePaySdk = await this.payPalSdkHelper.getPayPalGooglePaySdk(\n            paymentMethod as PaymentMethod<BigCommercePaymentsInitializationData>,\n            currency,\n        );\n\n        this.googlepayConfig = await googlePaySdk.Googlepay().config();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { GooglePayConfig } from '../types';\n\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\n/**\n *\n * BigCommercePayments SDK\n *\n */\nexport interface PayPalSDK {\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n        initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n    };\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport enum ConfirmOrderStatus {\n    Approved = 'APPROVED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n}\n\nexport interface BigCommercePaymentsHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\nexport interface BigCommercePaymentsScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: BigCommercePaymentsIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-partner-attribution-id'?: string;\n    };\n}\n\nexport enum BigCommercePaymentsIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'card-fields'\n>;\n\nexport interface PayPalGoogleSdk {\n    version: string;\n    getCorrelationID: () => void;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: Record<string, string>;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentMethod,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\nimport {\n    GooglePayBigCommercePaymentsInitializationData,\n    GooglePayInitializationData,\n} from '../types';\n\nimport { ConfirmOrderData, ConfirmOrderStatus } from './types';\n\nexport default class GooglePayBigCommercePaymentsPaymentStrategy extends GooglePayPaymentStrategy {\n    constructor(\n        _paymentIntegrationService: PaymentIntegrationService,\n        _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _payPalSdkHelper: PayPalSdkHelper,\n        private _requestSender: RequestSender,\n    ) {\n        super(_paymentIntegrationService, _googlePayPaymentProcessor);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const { initializationData } = state.getPaymentMethodOrThrow<GooglePayInitializationData>(\n            this._getMethodId(),\n        );\n        const { orderId } = await this.getOrderId(cartId);\n\n        const { card_information } = initializationData || {};\n        const nonce = await this._googlePayPaymentProcessor.getNonce(payment.methodId);\n\n        const confirmOrderData = {\n            tokenizationData: {\n                type: 'PAYMENT_GATEWAY',\n                token: atob(nonce),\n            },\n            info: {\n                cardNetwork: card_information?.type || '',\n                cardDetails: card_information?.number || '',\n            },\n            type: 'CARD',\n        };\n\n        await this.confirmOrder(orderId, confirmOrderData);\n        await this._paymentIntegrationService.submitOrder();\n\n        try {\n            const paymentData = {\n                formattedPayload: {\n                    method_id: payment.methodId,\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n        } catch (error) {\n            await this._googlePayPaymentProcessor.processAdditionalAction(error);\n        }\n    }\n\n    private async confirmOrder(orderId: string, confirmOrderData: ConfirmOrderData) {\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<GooglePayBigCommercePaymentsInitializationData>(\n                this._getMethodId(),\n            );\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n\n        const payPalSDK = await this._payPalSdkHelper.getPayPalGooglePaySdk(\n            paymentMethod as PaymentMethod<BigCommercePaymentsInitializationData>,\n            currencyCode,\n            true,\n        );\n\n        const { status } = await payPalSDK\n            .Googlepay()\n            .confirmOrder({ orderId, paymentMethodData: confirmOrderData });\n\n        if (status === ConfirmOrderStatus.PayerActionRequired) {\n            await payPalSDK.Googlepay().initiatePayerAction({ orderId });\n\n            return Promise.resolve();\n        }\n\n        if (status !== ConfirmOrderStatus.Approved) {\n            throw new InvalidArgumentError('Payment is not approved.');\n        }\n\n        return Promise.resolve();\n    }\n\n    private async getOrderId(cartId: string): Promise<{ orderId: string }> {\n        const url = '/api/storefront/payments/googlepay_bigcommerce_paymentscheckout';\n        const requestData = {\n            cartId,\n            shouldSaveInstrument: false,\n        };\n\n        const { body } = await this._requestSender.post<{ orderId: string }>(url, {\n            headers: {\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                'Content-Type': ContentType.Json,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: requestData,\n        });\n\n        return body;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PayPalSdkHelper } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\n\nimport GooglePayBigCommercePaymentsGateway from './google-pay-bigcommerce-payments-gateway';\nimport GooglePayBigCommercePaymentsPaymentStrategy from './google-pay-bigcommerce-payments-payment-strategy';\n\nconst createGooglePayBigCommercePaymentsPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) => {\n    const payPalSdkHelper = new PayPalSdkHelper(getScriptLoader());\n\n    return new GooglePayBigCommercePaymentsPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBigCommercePaymentsGateway(paymentIntegrationService, payPalSdkHelper),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n        payPalSdkHelper,\n        createRequestSender(),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBigCommercePaymentsPaymentStrategy, [\n    { id: 'googlepay_bigcommerce_payments' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    getBrowserInfo,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { isTdOnlineMartAdditionalAction } from '../guards/is-google-pay-td-online-mart-additional-action';\nimport { ExtraPaymentData, TdOnlineMartThreeDSErrorBody } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayTdOnlineMartGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService, private formPoster: FormPoster) {\n        super('worldlinena', service);\n    }\n\n    async extraPaymentData(): Promise<ExtraPaymentData> {\n        return Promise.resolve({ browser_info: getBrowserInfo() });\n    }\n\n    async processAdditionalAction(error: unknown): Promise<void> {\n        if (!isTdOnlineMartAdditionalAction(error)) {\n            throw error;\n        }\n\n        const { three_ds_result: threeDSResult }: TdOnlineMartThreeDSErrorBody = error.body;\n        const {\n            acs_url: formUrl,\n            payer_auth_request: threeDSSessionData,\n            merchant_data: creq,\n        } = threeDSResult || {};\n\n        if (!formUrl || !threeDSSessionData || !creq) {\n            throw new PaymentArgumentInvalidError(['formUrl', 'threeDSSessionData', 'creq']);\n        }\n\n        return new Promise((resolve) => {\n            this.formPoster.postForm(\n                formUrl,\n                {\n                    threeDSSessionData,\n                    creq,\n                },\n                resolve,\n                '_top',\n            );\n        });\n    }\n}\n","import { isArray, isObject, some } from 'lodash';\n\nimport { isRequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TdOnlineMartAdditionalAction, TdOnlineMartThreeDSErrorBody } from '../types';\n\nfunction isTdOnlineMartThreeDSErrorBody(\n    errorBody: unknown,\n): errorBody is TdOnlineMartThreeDSErrorBody {\n    return (\n        isObject(errorBody) &&\n        typeof errorBody === 'object' &&\n        'errors' in errorBody &&\n        'three_ds_result' in errorBody &&\n        isArray((errorBody as TdOnlineMartThreeDSErrorBody).errors) &&\n        some((errorBody as TdOnlineMartThreeDSErrorBody).errors, {\n            code: 'three_d_secure_required',\n        })\n    );\n}\n\nexport function isTdOnlineMartAdditionalAction(\n    error: unknown,\n): error is TdOnlineMartAdditionalAction {\n    return isRequestError(error) && isTdOnlineMartThreeDSErrorBody(error.body);\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayTdOnlineMartGateway from '../../gateways/google-pay-tdonlinemart-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayTdOnlineMartPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayTdOnlineMartGateway(paymentIntegrationService, createFormPoster()),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayTdOnlineMartPaymentStrategy, [\n    { id: 'googlepaytdonlinemart' },\n]);\n","import StandardError from './standard-error';\n\nconst defaultMessage =\n    'Payment cannot be processed for this order, please select another payment method';\n\nexport default class PaymentExecuteError extends StandardError {\n    type = 'custom_provider_execute_error';\n    subtype: string;\n\n    constructor(subtype: string, name: string, message?: string) {\n        super(message || defaultMessage);\n\n        this.name = name;\n        this.subtype = subtype;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentExecuteError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { HummInitializationData, OffsiteRedirectResponse } from './humm';\n\nexport default class HummPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(payment.methodId, options);\n\n        const paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<HummInitializationData>(payment.methodId);\n\n        if (!paymentMethod.initializationData?.processable) {\n            throw new PaymentExecuteError(\n                'payment.humm_not_processable_error',\n                'hummNotProcessableError',\n            );\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n            });\n        } catch (error) {\n            if (this.isOffsiteRedirectResponse(error)) {\n                return this.handleOffsiteRedirectResponse(error);\n            }\n\n            return Promise.reject(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private handleOffsiteRedirectResponse(response: OffsiteRedirectResponse): Promise<void> {\n        const url = response.body.additional_action_required.data.redirect_url;\n        const data = response.body.provider_data;\n\n        return new Promise((resolve) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this.formPoster.postForm(url, JSON.parse(data), resolve);\n        });\n    }\n\n    private isOffsiteRedirectResponse(response: unknown): response is OffsiteRedirectResponse {\n        if (typeof response !== 'object' || response === null) {\n            return false;\n        }\n\n        const partialResponse: Partial<OffsiteRedirectResponse> = response;\n\n        if (!partialResponse.body) {\n            return false;\n        }\n\n        const partialBody: Partial<OffsiteRedirectResponse['body']> = partialResponse.body;\n\n        return (\n            partialBody.status === 'additional_action_required' &&\n            !!partialBody.additional_action_required &&\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            partialBody.additional_action_required.type === 'offsite_redirect' &&\n            typeof partialBody.provider_data === 'string'\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport HummPaymentStrategy from './humm-payment-strategy';\n\nconst createHummPaymentStrategy: PaymentStrategyFactory<HummPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new HummPaymentStrategy(paymentIntegrationService, createFormPoster());\n};\n\nexport default toResolvableModule(createHummPaymentStrategy, [{ id: 'humm' }]);\n","export const supportedCountries = [\n    'AT',\n    'BE',\n    'CA',\n    'CH',\n    'CZ',\n    'DE',\n    'DK',\n    'ES',\n    'FI',\n    'FR',\n    'GB',\n    'GR',\n    'IE',\n    'IT',\n    'NL',\n    'NO',\n    'NZ',\n    'PL',\n    'PT',\n    'SE',\n];\nexport const supportedCountriesRequiringStates = ['AU'];\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { includes } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    supportedCountries,\n    supportedCountriesRequiringStates,\n} from '../klarnav2/klarna-supported-countries';\n\nimport KlarnaCredit, {\n    KlarnaAddress,\n    KlarnaAuthorizationResponse,\n    KlarnaLoadResponse,\n    KlarnaUpdateSessionParams,\n} from './klarna-credit';\nimport { WithKlarnaPaymentInitializeOptions } from './klarna-payment-initialize-options';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy {\n    private klarnaCredit?: KlarnaCredit;\n    private unsubscribe?: () => void;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private klarnaScriptLoader: KlarnaScriptLoader,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithKlarnaPaymentInitializeOptions,\n    ): Promise<void> {\n        this.klarnaCredit = await this.klarnaScriptLoader.load();\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        this.unsubscribe = this.paymentIntegrationService.subscribe(\n            (state) => {\n                if (\n                    state.isPaymentMethodInitialized({\n                        methodId: options.methodId,\n                        gatewayId: options.gatewayId,\n                    })\n                ) {\n                    void this.loadWidget(options);\n                }\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.outstandingBalance;\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.coupons;\n            },\n        );\n\n        await this.loadWidget(options);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        const {\n            payment: { paymentData, ...paymentPayload },\n        } = payload;\n\n        const { authorization_token: authorizationToken } = await this.authorize();\n\n        await this.paymentIntegrationService.initializePayment(paymentPayload.methodId, {\n            authorizationToken,\n        });\n\n        await this.paymentIntegrationService.submitOrder(\n            {\n                ...payload,\n                payment: paymentPayload,\n                useStoreCredit: payload.useStoreCredit,\n            },\n            options,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private async loadWidget(\n        options: PaymentInitializeOptions & WithKlarnaPaymentInitializeOptions,\n    ): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError(\n                'Unable to load widget because \"options.klarna\" argument is not provided.',\n            );\n        }\n\n        const {\n            methodId,\n            klarna: { container, onLoad },\n        } = options;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        return new Promise<KlarnaLoadResponse>((resolve) => {\n            const paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethod(methodId);\n\n            if (!paymentMethod) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (!this.klarnaCredit || !paymentMethod.clientToken) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this.klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n            this.klarnaCredit.load({ container }, (response) => {\n                if (onLoad) {\n                    onLoad(response);\n                }\n\n                resolve(response);\n            });\n        });\n    }\n\n    private getUpdateSessionData(\n        billingAddress: BillingAddress,\n        shippingAddress?: Address,\n    ): KlarnaUpdateSessionParams {\n        if (\n            !includes(\n                [...supportedCountries, ...supportedCountriesRequiringStates],\n                billingAddress.countryCode,\n            )\n        ) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this.mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this.mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this.needsStateCode(address.countryCode)\n                ? address.stateOrProvinceCode\n                : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private authorize(): Promise<KlarnaAuthorizationResponse> {\n        return new Promise((resolve, reject) => {\n            const state = this.paymentIntegrationService.getState();\n            const billingAddress = state.getBillingAddress();\n            const shippingAddress = state.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this.klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this.getUpdateSessionData(billingAddress, shippingAddress);\n\n            this.klarnaCredit.authorize(updateSessionData, (res) => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(private scriptLoader: ScriptLoader, private klarnaWindow: KlarnaWindow = window) {}\n\n    async load(): Promise<KlarnaCredit> {\n        if (!this.klarnaWindow.Klarna?.Credit) {\n            await this.scriptLoader.loadScript(SDK_URL);\n        }\n\n        if (!this.klarnaWindow.Klarna?.Credit) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.klarnaWindow.Klarna.Credit;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaPaymentStrategy from './klarna-payment-strategy';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nconst createKlarnaPaymentStrategy: PaymentStrategyFactory<KlarnaPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new KlarnaPaymentStrategy(\n        paymentIntegrationService,\n        new KlarnaScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createKlarnaPaymentStrategy, [{ id: 'klarna' }]);\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { includes } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport KlarnaPayments, {\n    KlarnaAddress,\n    KlarnaAuthorizationResponse,\n    KlarnaInitializationData,\n    KlarnaLoadResponse,\n    KlarnaUpdateSessionParams,\n} from './klarna-payments';\nimport {\n    supportedCountries,\n    supportedCountriesRequiringStates,\n} from './klarna-supported-countries';\nimport { WithKlarnaV2PaymentInitializeOptions } from './klarnav2-payment-initialize-options';\nimport KlarnaV2ScriptLoader from './klarnav2-script-loader';\nimport KlarnaV2TokenUpdater from './klarnav2-token-updater';\n\nexport default class KlarnaV2PaymentStrategy {\n    private klarnaPayments?: KlarnaPayments;\n    private unsubscribe?: () => void;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private klarnav2ScriptLoader: KlarnaV2ScriptLoader,\n        private klarnav2TokenUpdater: KlarnaV2TokenUpdater,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithKlarnaV2PaymentInitializeOptions,\n    ): Promise<void> {\n        this.klarnaPayments = await this.klarnav2ScriptLoader.load();\n\n        this.unsubscribe = this.paymentIntegrationService.subscribe(\n            (state) => {\n                if (\n                    state.isPaymentMethodInitialized({\n                        methodId: options.methodId,\n                        gatewayId: options.gatewayId,\n                    })\n                ) {\n                    void this.loadPaymentsWidget(options);\n                }\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.outstandingBalance;\n            },\n            (state) => {\n                const checkout = state.getCheckout();\n\n                return checkout && checkout.coupons;\n            },\n        );\n\n        await this.loadPaymentsWidget(options);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        const {\n            payment: { ...paymentPayload },\n        } = payload;\n        const { gatewayId, methodId } = paymentPayload;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const { id: cartId } = state.getCartOrThrow();\n        const { clientToken } = state.getPaymentMethodOrThrow(methodId);\n\n        await this.klarnav2TokenUpdater.klarnaOrderInitialization(cartId, clientToken);\n\n        const paymentMethodСategory = this.isKlarnaSingleRadioButtonEnabled()\n            ? gatewayId\n            : methodId;\n        const { authorization_token: authorizationToken } = await this.authorizeOrThrow(\n            paymentMethodСategory,\n            methodId,\n        );\n\n        await this.paymentIntegrationService.initializePayment(gatewayId, {\n            authorizationToken,\n        });\n\n        await this.paymentIntegrationService.submitOrder(\n            {\n                ...payload,\n                payment: paymentPayload,\n                useStoreCredit: payload.useStoreCredit,\n            },\n            options,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private async loadPaymentsWidget(\n        options: PaymentInitializeOptions & WithKlarnaV2PaymentInitializeOptions,\n    ): Promise<KlarnaLoadResponse> {\n        if (!options.klarnav2) {\n            throw new InvalidArgumentError(\n                'Unable to load widget because \"options.klarnav2\" argument is not provided.',\n            );\n        }\n\n        const {\n            methodId,\n            gatewayId,\n            klarnav2: { container, onLoad },\n        } = options;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const params = { params: cartId };\n\n        await this.klarnav2TokenUpdater.updateClientToken(gatewayId, { params }).catch(() => {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        });\n\n        return new Promise<KlarnaLoadResponse>((resolve) => {\n            const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n            if (!this.klarnaPayments || !paymentMethod.clientToken) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this.klarnaPayments.init({ client_token: paymentMethod.clientToken });\n            this.klarnaPayments.load(\n                {\n                    container,\n                    payment_method_category: this.isKlarnaSingleRadioButtonEnabled()\n                        ? paymentMethod.gateway\n                        : methodId,\n                },\n                (response) => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    resolve(response);\n                },\n            );\n        });\n    }\n\n    private getUpdateSessionData(\n        methodId: string,\n        billingAddress: BillingAddress,\n        shippingAddress?: Address,\n    ): KlarnaUpdateSessionParams {\n        if (\n            !includes(\n                [...supportedCountries, ...supportedCountriesRequiringStates],\n                billingAddress.countryCode,\n            )\n        ) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this.mapToKlarnaAddress(\n                methodId,\n                billingAddress,\n                billingAddress.email,\n            ),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this.mapToKlarnaAddress(\n                methodId,\n                shippingAddress,\n                billingAddress.email,\n            );\n        }\n\n        return data;\n    }\n\n    private needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private mapToKlarnaAddress(methodId: string, address: Address, email?: string): KlarnaAddress {\n        const state = this.paymentIntegrationService.getState();\n        const { checkoutSettings } = state.getStoreConfigOrThrow();\n        const paymentMethod = state.getPaymentMethodOrThrow<KlarnaInitializationData>(methodId);\n        const { enableBillie } = paymentMethod.initializationData || {};\n\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this.needsStateCode(address.countryCode)\n                ? address.stateOrProvinceCode\n                : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        if (\n            address.company &&\n            enableBillie &&\n            isExperimentEnabled(checkoutSettings.features, 'PI-3915.b2b_payment_session_for_klarna')\n        ) {\n            klarnaAddress.organization_name = address.company;\n        }\n\n        return klarnaAddress;\n    }\n\n    private async authorizeOrThrow(\n        paymentMethodСategory: string,\n        methodId: string,\n    ): Promise<KlarnaAuthorizationResponse> {\n        await this.paymentIntegrationService.loadCheckout();\n\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const shippingAddress = state.getShippingAddress();\n\n        const updateSessionData = this.getUpdateSessionData(\n            methodId,\n            billingAddress,\n            shippingAddress,\n        );\n\n        return new Promise<KlarnaAuthorizationResponse>((resolve, reject) => {\n            if (!this.klarnaPayments) {\n                return reject(\n                    new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                );\n            }\n\n            this.klarnaPayments.authorize(\n                {\n                    payment_method_category: paymentMethodСategory,\n                },\n                updateSessionData,\n                (res) => {\n                    if (res.approved) {\n                        return resolve(res);\n                    }\n\n                    if (res.show_form) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n            );\n        });\n    }\n\n    private isKlarnaSingleRadioButtonEnabled(): boolean {\n        const { features } = this.paymentIntegrationService\n            .getState()\n            .getStoreConfigOrThrow().checkoutSettings;\n\n        return features['PI-4025.klarna_single_radio_button'];\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaPayments from './klarna-payments';\nimport KlarnaV2Window from './klarnav2-window';\n\nconst SDK_URL = 'https://x.klarnacdn.net/kp/lib/v1/api.js';\n\nexport default class KlarnaV2ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private klarnaWindow: KlarnaV2Window = window,\n    ) {}\n\n    async load(): Promise<KlarnaPayments> {\n        if (!this.klarnaWindow.Klarna?.Payments) {\n            await this.scriptLoader.loadScript(SDK_URL);\n        }\n\n        if (!this.klarnaWindow.Klarna?.Payments) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.klarnaWindow.Klarna.Payments;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    PaymentMethod,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class KlarnaV2TokenUpdater {\n    constructor(private requestSender: RequestSender) {}\n\n    updateClientToken(\n        gatewayId: string,\n        { timeout, params }: RequestOptions = {},\n    ): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${gatewayId}`;\n\n        return this.requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    async klarnaOrderInitialization(\n        cartId: string,\n        clientToken: string | undefined,\n    ): Promise<void> {\n        const url = `/api/storefront/initialization/klarna`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                cartId,\n                clientToken,\n            },\n        };\n\n        await this.requestSender.put(url, options);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport KlarnaV2PaymentStrategy from './klarnav2-payment-strategy';\nimport KlarnaV2ScriptLoader from './klarnav2-script-loader';\nimport KlarnaV2TokenUpdater from './klarnav2-token-updater';\n\nconst createKlarnaV2PaymentStrategy: PaymentStrategyFactory<KlarnaV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const requestSender = createRequestSender({ host: getHost() });\n\n    return new KlarnaV2PaymentStrategy(\n        paymentIntegrationService,\n        new KlarnaV2ScriptLoader(getScriptLoader()),\n        new KlarnaV2TokenUpdater(requestSender),\n    );\n};\n\nexport default toResolvableModule(createKlarnaV2PaymentStrategy, [{ gateway: 'klarna' }]);\n","import {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        await this._paymentIntegrationService.submitOrder(payload, options);\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport LegacyPaymentStrategy from './legacy-payment-strategy';\n\nconst createLegacyPaymentStrategy: PaymentStrategyFactory<LegacyPaymentStrategy> = (\n    paymentIntegrationService,\n) => new LegacyPaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createLegacyPaymentStrategy, [{ id: 'testgateway' }]);\n","import { each, some } from 'lodash';\n\nimport {\n    getBrowserInfo,\n    HostedForm,\n    HostedFormOptions,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { MollieClient, MollieElement } from './mollie';\nimport MolliePaymentInitializeOptions, {\n    WithMolliePaymentInitializeOptions,\n} from './mollie-payment-initialize-options';\nimport MollieScriptLoader from './mollie-script-loader';\n\nexport enum MolliePaymentMethodType {\n    CREDIT_CARD = 'credit_card',\n}\n\nconst methodsNotAllowedWhenDigitalOrder = ['klarnapaylater', 'klarnasliceit'];\n\nexport default class MolliePaymentStrategy implements PaymentStrategy {\n    private initializeOptions?: MolliePaymentInitializeOptions;\n    private mollieClient?: MollieClient;\n    private cardHolderElement?: MollieElement;\n    private cardNumberElement?: MollieElement;\n    private verificationCodeElement?: MollieElement;\n    private expiryDateElement?: MollieElement;\n    private locale?: string;\n\n    private hostedForm?: HostedForm;\n\n    private unsubscribe?: () => void;\n\n    constructor(\n        private mollieScriptLoader: MollieScriptLoader,\n        private paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithMolliePaymentInitializeOptions,\n    ): Promise<void> {\n        const { mollie, methodId, gatewayId } = options;\n\n        if (!mollie) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.mollie\" argument is not provided.',\n            );\n        }\n\n        if (!methodId || !gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"methodId\" and/or \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        const controllers = document.querySelectorAll('.mollie-components-controller');\n\n        each(controllers, (controller) => controller.remove());\n\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        this.initializeOptions = mollie;\n\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        const {\n            config: { merchantId, testMode },\n        } = paymentMethod;\n\n        this.locale = state.getLocale();\n\n        if (!merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (\n            this.isCreditCard(methodId) &&\n            mollie.form &&\n            this.shouldShowTSVHostedForm(methodId, gatewayId)\n        ) {\n            this.hostedForm = await this.mountCardVerificationfields(mollie.form);\n        } else if (this.isCreditCard(methodId)) {\n            this.mollieClient = await this.loadMollieJs(\n                merchantId,\n                storeConfig.storeProfile.storeLanguage,\n                testMode,\n            );\n            this.mountElements();\n        }\n\n        this.unsubscribe = () => {\n            if (\n                this.paymentIntegrationService.getState().isPaymentMethodInitialized({\n                    methodId: options.methodId,\n                    gatewayId: options.gatewayId,\n                })\n            ) {\n                const element = document.getElementById(`${gatewayId}-${methodId}-paragraph`);\n\n                if (element) {\n                    element.remove();\n                }\n\n                mollie.disableButton(false);\n\n                this.loadPaymentMethodsAllowed(mollie, methodId, gatewayId);\n            }\n        };\n\n        this.unsubscribe();\n\n        this.loadPaymentMethodsAllowed(mollie, methodId, gatewayId);\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !payment.gatewayId || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment', 'gatewayId', 'paymentData']);\n        }\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n\n            if (isVaultedInstrument(paymentData)) {\n                return await this.executeWithVaulted(payment);\n            }\n\n            if (this.isCreditCard(payment.methodId)) {\n                return await this.executeWithCC(payment);\n            }\n\n            return await this.executeWithAPM(payment);\n        } catch (error) {\n            await this.processAdditionalAction(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<void> {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n\n        if (this.hostedForm) {\n            this.hostedForm.detach();\n        }\n\n        if (options && options.methodId && options.gatewayId && !this.hostedForm) {\n            const element = document.getElementById(`${options.gatewayId}-${options.methodId}`);\n\n            if (element) {\n                element.remove();\n            }\n        } else if (options && options.methodId && this.isCreditCard(options.methodId)) {\n            if (\n                this.cardHolderElement &&\n                this.cardNumberElement &&\n                this.verificationCodeElement &&\n                this.expiryDateElement\n            ) {\n                this.cardHolderElement.unmount();\n                this.cardHolderElement = undefined;\n\n                this.cardNumberElement.unmount();\n                this.cardNumberElement = undefined;\n\n                this.verificationCodeElement.unmount();\n                this.verificationCodeElement = undefined;\n\n                this.expiryDateElement.unmount();\n                this.expiryDateElement = undefined;\n            }\n        }\n\n        this.mollieClient = undefined;\n\n        return Promise.resolve();\n    }\n\n    protected async executeWithCC(payment: OrderPaymentRequestBody): Promise<void> {\n        const paymentData = payment.paymentData;\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const { token, error } = await this.getMollieClient().createToken();\n\n        /* eslint-disable */\n        if (error) {\n            return Promise.reject(error);\n        }\n\n        const formattedPayload = {\n            credit_card_token: {\n                token,\n            },\n            vault_payment_instrument: shouldSaveInstrument,\n            set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n            browser_info: getBrowserInfo(),\n            shopper_locale: this.getShopperLocale(),\n        };\n        /* eslint-enable */\n\n        await this.paymentIntegrationService.submitPayment({\n            ...payment,\n            paymentData: {\n                formattedPayload,\n            },\n        });\n    }\n\n    protected async executeWithVaulted(payment: OrderPaymentRequestBody): Promise<void> {\n        if (this.isHostedPaymentFormEnabled(payment.methodId, payment.gatewayId)) {\n            const form = this.hostedForm;\n\n            if (!form) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            await form.validate();\n            await form.submit(payment);\n\n            await this.paymentIntegrationService.loadCurrentOrder();\n        } else {\n            await this.paymentIntegrationService.submitPayment(payment);\n        }\n    }\n\n    protected async executeWithAPM(payment: OrderPaymentRequestBody): Promise<void> {\n        const paymentData = payment.paymentData;\n        const issuer = paymentData && 'issuer' in paymentData ? paymentData.issuer : '';\n\n        await this.paymentIntegrationService.submitPayment({\n            ...payment,\n            paymentData: {\n                ...paymentData,\n                formattedPayload: {\n                    issuer,\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    shopper_locale: this.getShopperLocale(),\n                },\n            },\n        });\n    }\n\n    private isCreditCard(methodId: string): boolean {\n        return methodId === MolliePaymentMethodType.CREDIT_CARD;\n    }\n\n    private shouldShowTSVHostedForm(methodId: string, gatewayId: string): boolean {\n        return (\n            this.isHostedPaymentFormEnabled(methodId, gatewayId) && this.isHostedFieldAvailable()\n        );\n    }\n\n    private mountCardVerificationfields(formOptions: HostedFormOptions): Promise<HostedForm> {\n        /* eslint-disable */\n        return new Promise(async (resolve, reject) => {\n            try {\n                const config = this.paymentIntegrationService.getState().getStoreConfig();\n                const bigpayBaseUrl = config?.paymentSettings.bigpayBaseUrl;\n\n                if (!bigpayBaseUrl) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const form = this.paymentIntegrationService.createHostedForm(\n                    bigpayBaseUrl,\n                    formOptions\n                );\n\n                await form.attach();\n\n                resolve(form);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    private isHostedPaymentFormEnabled(methodId: string, gatewayId?: string): boolean {\n        const { getPaymentMethodOrThrow } = this.paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private isHostedFieldAvailable(): boolean {\n        const options = this.getInitializeOptions();\n\n        return !!options.form?.fields;\n    }\n\n    private processAdditionalAction(error: any): Promise<unknown> {\n        if (!isRequestError(error)) {\n            return Promise.reject(error);\n        }\n\n        if (some(error.body.errors, {code: 'additional_action_required'})) {\n            const { additional_action_required: { data : { redirect_url } } } = error.body;\n\n            return new Promise(() => window.location.replace(redirect_url));\n        }\n\n        return Promise.reject(error);\n    }\n\n    private getInitializeOptions(): MolliePaymentInitializeOptions {\n        if (!this.initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.initializeOptions;\n    }\n\n    private loadMollieJs(merchantId: string, locale: string, testmode = false): Promise<MollieClient> {\n        if (this.mollieClient) {\n            return Promise.resolve(this.mollieClient);\n        }\n\n        return this.mollieScriptLoader\n            .load(merchantId, locale, testmode);\n    }\n\n    private getMollieClient(): MollieClient {\n        if (!this.mollieClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.mollieClient;\n    }\n\n    private getShopperLocale(): string {\n        if (!this.locale) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.locale;\n    }\n\n    /**\n     * ContainerId is use in Mollie for determined either its showing or not the\n     * container, because when Mollie has Vaulted Instruments it gets hide,\n     * and shows an error because can't mount Provider Components\n     *\n     * We had to add a settimeout because Mollie sets de tab index after mounting\n     * each component, but without a setTimeOut Mollie is not able to find the\n     * components as they are hidden so we need to wait until they are shown\n     */\n    private mountElements() {\n        const { containerId, cardNumberId, cardCvcId, cardExpiryId, cardHolderId, styles } = this.getInitializeOptions();\n        let container: HTMLElement | null;\n\n        if (containerId) {\n            container = document.getElementById(containerId);\n        }\n\n        setTimeout(() => {\n            if (!containerId || container?.style.display !== 'none') {\n                const mollieClient = this.getMollieClient();\n\n                this.cardHolderElement = mollieClient.createComponent('cardHolder', { styles });\n                this.cardHolderElement.mount(`#${cardHolderId}`);\n\n                this.cardNumberElement = mollieClient.createComponent('cardNumber', { styles });\n                this.cardNumberElement.mount(`#${cardNumberId}`);\n\n                this.verificationCodeElement = mollieClient.createComponent('verificationCode', { styles });\n                this.verificationCodeElement.mount(`#${cardCvcId}`);\n\n                this.expiryDateElement = mollieClient.createComponent('expiryDate', { styles });\n                this.expiryDateElement.mount(`#${cardExpiryId}`);\n            }\n        }, 0);\n    }\n\n    private loadPaymentMethodsAllowed(mollie: MolliePaymentInitializeOptions, methodId: string, gatewayId: string){\n        if (methodsNotAllowedWhenDigitalOrder.includes(methodId)) {\n            const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n            const cartDigitalItems = cart.lineItems?.digitalItems;\n\n            if (cartDigitalItems && cartDigitalItems.length > 0) {\n                const { containerId } = this.getInitializeOptions();\n\n                if (containerId) {\n                    const container = document.getElementById(containerId);\n\n                    if (container) {\n                        const paragraph = document.createElement('p') ;\n                        paragraph.setAttribute(\"id\",`${gatewayId}-${methodId}-paragraph`)\n\n                        if (mollie.unsupportedMethodMessage) {\n                            paragraph.innerText = mollie.unsupportedMethodMessage;\n                            container.appendChild(paragraph);\n                            mollie.disableButton(true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isMollieWindow from './is-mollie-window';\nimport { MollieClient } from './mollie';\n\nexport default class MollieScriptLoader {\n    constructor(private scriptLoader: ScriptLoader, private mollieHostWindow: Window = window) {}\n\n    async load(merchantId: string, locale: string, testmode: boolean): Promise<MollieClient> {\n        await this.scriptLoader.loadScript('https://js.mollie.com/v1/mollie.js');\n\n        if (!isMollieWindow(this.mollieHostWindow)) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.mollieHostWindow.Mollie(merchantId, {\n            locale,\n            testmode,\n        });\n    }\n}\n","import { MollieHostWindow } from './mollie';\n\nexport default function isMollieWindow(window: Window): window is MollieHostWindow {\n    return 'Mollie' in window;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport MolliePaymentStrategy from './mollie-payment-strategy';\nimport MollieScriptLoader from './mollie-script-loader';\n\nconst createMolliePaymentStrategy: PaymentStrategyFactory<MolliePaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new MolliePaymentStrategy(\n        new MollieScriptLoader(getScriptLoader()),\n        paymentIntegrationService,\n    );\n};\n\nexport default toResolvableModule(createMolliePaymentStrategy, [\n    { gateway: 'mollie' },\n    { gateway: 'mollie', id: 'applepay' },\n]);\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { isEmpty, map, omitBy } from 'lodash';\n\nimport {\n    HostedForm,\n    HostedFormOptions,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport MonerisStylingProps, {\n    MoneriesHostedFieldsQueryParams,\n    MonerisInitializationData,\n    MonerisResponseData,\n} from './moneris';\nimport MonerisPaymentInitializeOptions, {\n    WithMonerisPaymentInitializeOptions,\n} from './moneris-payment-initialize-options';\n\nconst IFRAME_NAME = 'moneris-payment-iframe';\nconst RESPONSE_SUCCESS_CODE = '001';\n\nexport default class MonerisPaymentStrategy {\n    private iframe?: HTMLIFrameElement;\n    private initializeOptions?: MonerisPaymentInitializeOptions;\n    private windowEventListener?: (response: MessageEvent) => void;\n\n    private hostedForm?: HostedForm;\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithMonerisPaymentInitializeOptions,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n\n        const { moneris: monerisOptions, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (!monerisOptions) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.moneris\" argument is not provided.',\n            );\n        }\n\n        this.initializeOptions = monerisOptions;\n\n        const { config, initializationData } =\n            state.getPaymentMethodOrThrow<MonerisInitializationData>(methodId);\n\n        if (!initializationData?.profileId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (monerisOptions.form && this.shouldShowTSVHostedForm(methodId)) {\n            this.hostedForm = await this.mountCardVerificationfields(monerisOptions.form);\n        }\n\n        if (!this.iframe) {\n            this.iframe = this.createIframe(\n                monerisOptions.containerId,\n                initializationData,\n                !!config.testMode,\n            );\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentInitializeOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { isStoreCreditApplied: useStoreCredit } = this.paymentIntegrationService\n            .getState()\n            .getCheckoutOrThrow();\n\n        if (useStoreCredit) {\n            await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        if (payment.paymentData && isVaultedInstrument(payment.paymentData)) {\n            await this.executeWithVaulted(payment);\n\n            return;\n        }\n\n        return this.executeWithCC(payment);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.hostedForm) {\n            this.hostedForm.detach();\n        }\n\n        if (this.windowEventListener) {\n            window.removeEventListener('message', this.windowEventListener);\n            this.windowEventListener = undefined;\n        }\n\n        if (this.iframe && this.iframe.parentNode) {\n            this.iframe.parentNode.removeChild(this.iframe);\n            this.iframe = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private async executeWithCC(payment: OrderPaymentRequestBody): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(payment.methodId);\n\n        const testMode = paymentMethod.config.testMode;\n        const paymentData = payment.paymentData || {};\n\n        const instrumentSettings = isHostedInstrumentLike(paymentData)\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = instrumentSettings;\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            if (!this.iframe) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const frameref: Window | null = this.iframe.contentWindow;\n\n            if (frameref === null) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            frameref.postMessage('tokenize', this.monerisURL(!!testMode));\n\n            this.windowEventListener = (response: MessageEvent) => {\n                if (\n                    typeof response.data !== 'string' ||\n                    response.origin !== `https://${testMode ? 'esqa' : 'www3'}.moneris.com`\n                ) {\n                    return;\n                }\n\n                try {\n                    resolve(this.handleMonerisResponse(response));\n                } catch (error) {\n                    reject(error);\n                }\n            };\n\n            window.addEventListener('message', this.windowEventListener);\n        });\n\n        if (nonce !== undefined) {\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce, shouldSaveInstrument, shouldSetAsDefaultInstrument },\n            });\n        }\n    }\n\n    private async executeWithVaulted(\n        payment: OrderPaymentRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        if (this.hostedForm) {\n            const form = this.hostedForm;\n\n            await form.validate();\n            await form.submit(payment);\n\n            return this.paymentIntegrationService.loadCurrentOrder();\n        }\n\n        return this.paymentIntegrationService.submitPayment(payment);\n    }\n\n    private shouldShowTSVHostedForm(methodId: string): boolean {\n        return this.isHostedPaymentFormEnabled(methodId) && this.isHostedFieldAvailable();\n    }\n\n    private isHostedPaymentFormEnabled(methodId: string): boolean {\n        const paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(methodId);\n\n        return Boolean(paymentMethod.config.isHostedFormEnabled);\n    }\n\n    private isHostedFieldAvailable(): boolean {\n        const options = this.getInitializeOptions();\n        const definedFields = omitBy(options.form?.fields, isEmpty);\n\n        return !isEmpty(definedFields);\n    }\n\n    private getInitializeOptions(): MonerisPaymentInitializeOptions {\n        if (!this.initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.initializeOptions;\n    }\n\n    private async mountCardVerificationfields(formOptions: HostedFormOptions): Promise<HostedForm> {\n        const bigpayBaseUrl = this.paymentIntegrationService.getState().getStoreConfig()\n            ?.paymentSettings.bigpayBaseUrl;\n\n        if (!bigpayBaseUrl) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const form = this.paymentIntegrationService.createHostedForm(bigpayBaseUrl, formOptions);\n\n        await form.attach();\n\n        return form;\n    }\n\n    private createIframe(\n        containerId: string,\n        initializationData: MonerisInitializationData,\n        testMode: boolean,\n        style?: MonerisStylingProps,\n    ): HTMLIFrameElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create iframe without valid container ID.');\n        }\n\n        const iframe: HTMLIFrameElement = document.createElement('iframe');\n        const monerisQueryParams: MoneriesHostedFieldsQueryParams = {\n            id: initializationData.profileId,\n            pmmsg: true,\n            display_labels: 1,\n            enable_exp: 1,\n            enable_cvd: 1,\n            css_body:\n                style?.cssBody ||\n                'font-family: Arial, Helvetica,sans-serif;background: transparent;',\n            css_textbox:\n                style?.cssTextbox ||\n                'border-radius:4px;border: 2px solid rgb(00,00,00);width: 100%;font-weight: 600;padding: 8px 8px;outline: 0;',\n            css_textbox_pan: style?.cssTextboxCardNumber || 'width: 240px;',\n            css_textbox_exp:\n                style?.cssTextboxExpiryDate || 'margin-bottom: 0;width: calc(30% - 12px);',\n            css_textbox_cvd: style?.cssTextboxCVV || 'margin-bottom: 0;width: calc(30% - 12px);',\n            css_input_label:\n                style?.cssInputLabel ||\n                'font-size: 10px;position: relative;top: 8px;left: 6px;background: rgb(255,255,255);padding: 3px 2px;color: rgb(66,66,66);font-weight: 600;z-index: 2;',\n            pan_label: initializationData.creditCardLabel || 'Credit Card Number',\n            exp_label: initializationData.expiryDateLabel || 'Expiration',\n            cvd_label: initializationData.cvdLabel || 'CVD',\n        };\n\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        const queryString = map(monerisQueryParams, (value, key) => `${key}=${value}`).join('&');\n\n        iframe.width = '100%';\n        iframe.height = '100%';\n        iframe.name = IFRAME_NAME;\n        iframe.id = IFRAME_NAME;\n        iframe.style.border = 'none';\n        iframe.src = `${this.monerisURL(testMode)}?${queryString}`;\n        iframe.allow = 'payment';\n\n        container.appendChild(iframe);\n\n        return iframe;\n    }\n\n    private handleMonerisResponse(response: MessageEvent): string {\n        const monerisResponse: MonerisResponseData = JSON.parse(response.data);\n\n        if (monerisResponse.responseCode[0] !== RESPONSE_SUCCESS_CODE) {\n            throw new Error(monerisResponse.errorMessage);\n        }\n\n        return monerisResponse.dataKey;\n    }\n\n    private monerisURL(testMode: boolean): string {\n        return `https://${testMode ? 'esqa' : 'www3'}.moneris.com/HPPtoken/index.php`;\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport MonerisPaymentStrategy from './moneris-payment-strategy';\n\nconst createMonerisPaymentStrategy: PaymentStrategyFactory<MonerisPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new MonerisPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createMonerisPaymentStrategy, [{ id: 'moneris' }]);\n","import { omit } from 'lodash';\n\nimport {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        await this._paymentIntegrationService.submitOrder(omit(payload, 'payment'), options);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport NoPaymentDataRequiredPaymentStrategy from './no-payment-data-required-strategy';\n\nconst createNoPaymentStrategy: PaymentStrategyFactory<NoPaymentDataRequiredPaymentStrategy> = (\n    paymentIntegrationService,\n) => new NoPaymentDataRequiredPaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createNoPaymentStrategy, [{ id: 'nopaymentdatarequired' }]);\n","import {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        await this._paymentIntegrationService.submitOrder(\n            {\n                ...payload,\n                payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n            },\n            options,\n        );\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport OfflinePaymentStrategy from './offline-payment-strategy';\n\nconst createOfflinePaymentStrategy: PaymentStrategyFactory<OfflinePaymentStrategy> = (\n    paymentIntegrationService,\n) => new OfflinePaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createOfflinePaymentStrategy, [{ type: 'PAYMENT_TYPE_OFFLINE' }]);\n","import {\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n        const paymentData = payment && payment.paymentData;\n        const instrumentId =\n            (paymentData && isVaultedInstrument(paymentData) && paymentData.instrumentId) ||\n            undefined;\n        const shouldSaveInstrument =\n            (paymentData &&\n                isHostedInstrumentLike(paymentData) &&\n                paymentData.shouldSaveInstrument) ||\n            undefined;\n        const shouldSetAsDefaultInstrument =\n            (paymentData &&\n                isHostedInstrumentLike(paymentData) &&\n                paymentData.shouldSetAsDefaultInstrument) ||\n            undefined;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, gatewayId } = payment;\n\n        await this._paymentIntegrationService.submitOrder(orderPayload, options);\n        await this._paymentIntegrationService.initializeOffsitePayment({\n            methodId,\n            gatewayId,\n            instrumentId,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        });\n    }\n\n    async finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this._paymentIntegrationService.getState();\n        const order = state.getOrder();\n        const status = state.getPaymentStatus();\n\n        if (\n            order &&\n            (status === PaymentStatusTypes.ACKNOWLEDGE || status === PaymentStatusTypes.FINALIZE)\n        ) {\n            await this._paymentIntegrationService.finalizeOrder(options);\n\n            return;\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return (\n            payment.gatewayId === 'adyen' ||\n            payment.gatewayId === 'barclaycard' ||\n            payment.methodId === 'ccavenuemars'\n        );\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport OffsitePaymentStrategy from './offsite-payment-strategy';\n\nconst createOffsitePaymentStrategy: PaymentStrategyFactory<OffsitePaymentStrategy> = (\n    paymentIntegrationService,\n) => new OffsitePaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createOffsitePaymentStrategy, [{ type: 'PAYMENT_TYPE_HOSTED' }]);\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Commerce Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\nexport interface PayPalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\n\nexport interface PayPalCommerceCardFieldsConfig {\n    inputEvents: {\n        onChange(data: PayPalCommerceCardFieldsState): void;\n        onFocus(data: PayPalCommerceCardFieldsState): void;\n        onBlur(data: PayPalCommerceCardFieldsState): void;\n        onInputSubmitRequest(data: PayPalCommerceCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: PayPalCommerceCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: PayPalCommerceHostedFieldsRenderOptions['styles'];\n    onApprove(data: PayPalCommerceCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\nexport interface PayPalCommerceCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n    liabilityShift?: LiabilityShiftEnum;\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\ninterface PayPalCommerceCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype PayPalCommerceCardFieldsCard = PayPalCommerceHostedFieldsCard;\n\nexport interface PayPalCommerceCardFieldsState {\n    cards: PayPalCommerceCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: PayPalCommerceCardFieldsFieldData;\n        cardNumberField: PayPalCommerceCardFieldsFieldData;\n        cardNameField?: PayPalCommerceCardFieldsFieldData;\n        cardExpiryField: PayPalCommerceCardFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\ninterface PayPalCommerceFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceCardFields {\n    isEligible(): boolean;\n    CVVField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    ExpiryField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NameField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NumberField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    submit(config?: PayPalCommerceCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<PayPalCommerceCardFieldsState>;\n}\n\nexport interface PayPalCommerceCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalSDK {\n    CardFields: (data: PayPalCommerceCardFieldsConfig) => Promise<PayPalCommerceCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: PayPalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PayPalCommerceHostedFieldsRenderOptions): Promise<PayPalCommerceHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: PayPalCommerceButtonsOptions): PayPalCommerceButtons;\n    PaymentFields(options: PayPalCommercePaymentFieldsOptions): PayPalCommercePaymentFields;\n    Messages(options: PayPalCommerceMessagesOptions): PayPalCommerceMessages;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\nexport interface BirthDate {\n    getFullYear(): number;\n    getDate(): number;\n    getMonth(): number;\n}\n\nexport interface PayPalCommerceScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\n/**\n *\n * PayPal Commerce Initialization Data\n *\n */\nexport interface PayPalCommerceInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[];\n}\n\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * PayPal Commerce BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * PayPal Commerce Hosted Fields\n *\n */\nexport interface PayPalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PayPalCommerceHostedFieldOption;\n        cvv?: PayPalCommerceHostedFieldOption;\n        expirationDate?: PayPalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PayPalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceHostedFields {\n    submit(\n        options?: PayPalCommerceHostedFieldsSubmitOptions,\n    ): Promise<PayPalCommerceHostedFieldsApprove>;\n    getState(): PayPalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PayPalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PayPalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PayPalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PayPalCommerceHostedFieldsState {\n    cards: PayPalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PayPalCommerceHostedFieldsFieldData;\n        expirationDate?: PayPalCommerceHostedFieldsFieldData;\n        expirationMonth?: PayPalCommerceHostedFieldsFieldData;\n        expirationYear?: PayPalCommerceHostedFieldsFieldData;\n        cvv?: PayPalCommerceHostedFieldsFieldData;\n        postalCode?: PayPalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * PayPal Commerce Buttons\n *\n */\nexport interface PayPalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PayPalCommerceButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    countryCode: string;\n    postalCode: string;\n    state: string;\n}\n\nexport interface PaypalAddressCallbackData {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n        phone?: {\n            phone_number: {\n                national_number: string;\n            };\n        };\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n            name: {\n                full_name: string;\n            };\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    address_line_2: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * PayPal Commerce Payment fields\n *\n */\nexport interface PayPalCommercePaymentFields {\n    render(id: string): void;\n}\n\nexport interface PayPalCommercePaymentFieldsOptions {\n    style?: PayPalCommerceFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface PayPalCommerceFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayPalCommerce Messages\n */\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessages {\n    render(id: string): void;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: PayPalCommerceMessagesStyleOptions;\n    fundingSource?: string;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n    fastlaneToken?: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n    fastlaneToken?: string;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceRequestSender from './paypal-commerce-request-sender';\nimport PayPalCommerceScriptLoader from './paypal-commerce-script-loader';\nimport {\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceInitializationData,\n    PayPalCreateOrderCardFieldsResponse,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        this.paypalSdk = await this.paypalCommerceScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n            forceLoad,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async createOrderCardFields(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalCreateOrderCardFieldsResponse> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId, setupToken } = await this.paypalCommerceRequestSender.createOrder(\n            providerId,\n            {\n                cartId,\n                ...requestBody,\n            },\n        );\n\n        return { orderId, ...(setupToken ? { setupToken } : {}) };\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(methodId?: string, options?: RequestOptions): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.paypalCommerceRequestSender.getOrderStatus(\n                methodId,\n                options,\n            );\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string, gatewayId?: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({\n            methodId,\n            paymentData,\n            ...(gatewayId ? { gatewayId } : {}),\n        });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: address?.phone || '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: address?.address2 || '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            address2: payer.address.address_line_2,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n            phone: payer.phone?.phone_number?.national_number,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const {\n            address,\n            name: { full_name },\n        } = purchase_units[0].shipping;\n\n        const [firstName, ...lastName] = full_name.split(' ');\n\n        return this.getAddress({\n            firstName,\n            lastName: lastName.join(' '),\n            email: payer.email_address,\n            address1: address.address_line_1,\n            address2: address.address_line_2,\n            city: address.admin_area_2,\n            countryCode: address.country_code,\n            postalCode: address.postal_code,\n            stateOrProvinceCode: address.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            // For now this is a temporary solution, further removeElement method will be removed\n            element.style.display = 'none';\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(\n        methodId = 'paypalcommerce',\n        options?: RequestOptions,\n    ): Promise<PayPalOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    ComponentsScriptType,\n    FundingType,\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalCommerceScriptParams,\n    PayPalSDK,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceScriptLoader {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PayPalCommerceScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<PayPalCommerceScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<PayPalCommerceScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceIntegrationService,\n    PayPalCommerceRequestSender,\n    PayPalCommerceScriptLoader,\n} from './index';\n\nconst createPayPalCommerceIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        new PayPalCommerceScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createPayPalCommerceIntegrationService;\n","export const LOADING_INDICATOR_STYLES = {\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n","import { MessagesStyleOptions, PayPalBNPLConfigurationItem } from '../paypal-commerce-types';\n\nfunction getPaypalMessagesStylesFromBNPLConfig({\n    styles,\n}: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n    const messagesStyles: MessagesStyleOptions = {};\n\n    if (styles.color) {\n        messagesStyles.color = styles.color;\n    }\n\n    if (styles.layout) {\n        messagesStyles.layout = styles.layout;\n    }\n\n    if (styles['logo-type'] || styles['logo-position']) {\n        messagesStyles.logo = {};\n\n        if (styles['logo-type']) {\n            messagesStyles.logo.type = styles['logo-type'];\n        }\n\n        if (styles['logo-position']) {\n            messagesStyles.logo.position = styles['logo-position'];\n        }\n    }\n\n    if (styles.ratio) {\n        messagesStyles.ratio = styles.ratio;\n    }\n\n    if (styles['text-color'] || styles['text-size']) {\n        messagesStyles.text = {};\n\n        if (styles['text-color']) {\n            messagesStyles.text.color = styles['text-color'];\n        }\n\n        if (styles['text-size']) {\n            messagesStyles.text.size = +styles['text-size'];\n        }\n    }\n\n    return messagesStyles;\n}\n\nexport default getPaypalMessagesStylesFromBNPLConfig;\n","import {\n    HostedInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentInstrumentPayload,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getPaypalMessagesStylesFromBNPLConfig,\n    isPaypalCommerceProviderError,\n    isRedirectActionError,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalCommerceSdk,\n    PayPalMessagesSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    ClickCallbackActions,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n} from '../paypal-commerce-types';\n\nimport PayPalCommercePaymentInitializeOptions, {\n    WithPayPalCommercePaymentInitializeOptions,\n} from './paypal-commerce-payment-initialize-options';\n\nexport default class PayPalCommercePaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n    private paypalcommerce?: PayPalCommercePaymentInitializeOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithPayPalCommercePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommerce } = options || {};\n\n        this.paypalcommerce = paypalcommerce;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        const { container, bannerContainerId } = paypalcommerce;\n\n        const {\n            orderId,\n            paypalBNPLConfiguration = [],\n            isPayPalCreditAvailable,\n        } = paymentMethod.initializationData || {};\n\n        if (bannerContainerId !== undefined) {\n            if (!document.getElementById(bannerContainerId)) {\n                // eslint-disable-next-line no-console\n                console.error('Unable to create banner without valid banner container ID.');\n\n                return;\n            }\n\n            const bannerConfiguration = paypalBNPLConfiguration?.find(\n                ({ id }) => id === 'checkout',\n            );\n\n            if (isPayPalCreditAvailable || !bannerConfiguration?.status) {\n                return;\n            }\n\n            const paypalMessages = await this.paypalCommerceSdk.getPayPalMessages(\n                paymentMethod,\n                state.getCartOrThrow().currency.code,\n            );\n\n            if (!paypalMessages || typeof paypalMessages?.Messages !== 'function') {\n                console.error(\n                    '[BC PayPalCommerce PayLater]: banner could not be rendered, due to issues with loading PayPal SDK',\n                );\n\n                return;\n            }\n\n            return this.renderMessages(paypalMessages, bannerContainerId, bannerConfiguration);\n        }\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        this.loadingIndicatorContainer = container?.split('#')[1];\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        if (paypalcommerce.onInit && typeof paypalcommerce.onInit === 'function') {\n            paypalcommerce.onInit(() => this.renderButton(methodId, paypalcommerce));\n        }\n\n        if (\n            paypalcommerce.shouldRenderPayPalButtonOnInitialization === undefined ||\n            paypalcommerce.shouldRenderPayPalButtonOnInitialization\n        ) {\n            this.renderButton(methodId, paypalcommerce);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { onError } = this.paypalcommerce || {};\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const shouldHandleInstrumentDeclinedError =\n            features && features['PAYPAL-3438.handling_instrument_declined_error_ppc'];\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, paymentData } = payment;\n\n        if (this.isPayPalVaultedInstrumentPaymentData(paymentData) && !this.orderId) {\n            this.orderId = await this.createOrder();\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        const paymentPayload = this.isPayPalVaultedInstrumentPaymentData(paymentData)\n            ? this.prepareVaultedInstrumentPaymentPayload(methodId, this.orderId, paymentData)\n            : this.preparePaymentPayload(methodId, this.orderId, paymentData);\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error: unknown) {\n            if (isRedirectActionError(error)) {\n                const redirectUrl = error.body.additional_action_required?.data?.redirect_url;\n\n                return new Promise(() => window.location.replace(redirectUrl));\n            }\n\n            if (this.isProviderError(error) && shouldHandleInstrumentDeclinedError) {\n                await this.paypalCommerceIntegrationService.loadPayPalSdk(payment.methodId);\n\n                await new Promise((_resolve, reject) => {\n                    if (this.paypalcommerce) {\n                        this.paypalButton?.close();\n                        this.renderButton(payment.methodId, this.paypalcommerce);\n                        this.handleError(new Error('INSTRUMENT_DECLINED'), onError);\n                    }\n\n                    reject();\n                });\n            }\n\n            this.handleError(error, onError);\n\n            return Promise.reject();\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    private prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: VaultedInstrument & HostedInstrument,\n    ): Payment {\n        const { instrumentId, shouldSetAsDefaultInstrument } = paymentData;\n\n        const shouldConfirmInstrument = !this.isTrustedVaultingFlow(paymentData);\n\n        if (shouldConfirmInstrument) {\n            return {\n                methodId,\n                paymentData: {\n                    shouldSaveInstrument: shouldConfirmInstrument,\n                    shouldSetAsDefaultInstrument,\n                    formattedPayload: {\n                        paypal_account: {\n                            order_id: paypalOrderId,\n                        },\n                    },\n                },\n            };\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                    bigpay_token: {\n                        token: instrumentId,\n                    },\n                },\n            },\n        };\n    }\n\n    private preparePaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        paypalcommerce: PayPalCommercePaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n        const { container, onError, onRenderButton, onValidate, submitForm } = paypalcommerce;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        const buttonOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () => this.createOrder(),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onError: (error) => this.handleError(error, onError),\n            onCancel: () => this.toggleLoadingIndicator(false),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: PayPalCommercePaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        await onValidate?.(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommercePaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm?.();\n    }\n\n    private handleError(\n        error: unknown,\n        onError: PayPalCommercePaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private async createOrder(): Promise<string> {\n        const fieldsValues = this.getFieldsValues();\n\n        return this.paypalCommerceIntegrationService.createOrder('paypalcommercecheckout', {\n            shouldSaveInstrument: fieldsValues?.shouldSaveInstrument || false,\n        });\n    }\n\n    /**\n     *\n     * Vaulting flow methods\n     *\n     * */\n    private getFieldsValues(): HostedInstrument | undefined {\n        const { getFieldsValues } = this.paypalcommerce || {};\n\n        return typeof getFieldsValues === 'function' ? getFieldsValues() : undefined;\n    }\n\n    private isTrustedVaultingFlow(paymentData?: PaymentInstrumentPayload): boolean {\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            const state = this.paymentIntegrationService.getState();\n\n            const instruments = state.getInstruments();\n\n            const { trustedShippingAddress } =\n                instruments?.find(({ bigpayToken }) => bigpayToken === paymentData.instrumentId) ||\n                {};\n\n            return !!trustedShippingAddress;\n        }\n\n        return false;\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Guards\n     *\n     */\n    private isPayPalVaultedInstrumentPaymentData(\n        paymentData?: PaymentInstrumentPayload,\n    ): paymentData is VaultedInstrument & HostedInstrument {\n        return (\n            !!paymentData && isVaultedInstrument(paymentData) && isHostedInstrumentLike(paymentData)\n        );\n    }\n\n    /**\n     *\n     * Render Pay Later Messages\n     *\n     * */\n    private renderMessages(\n        paypalMessages: PayPalMessagesSdk,\n        bannerContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'payment',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        paypalMessages.Messages(paypalMessagesOptions).render(`#${bannerContainerId}`);\n    }\n\n    /**\n     *\n     * Error handling\n     *\n     */\n    private isProviderError(error: unknown): boolean {\n        if (isPaypalCommerceProviderError(error)) {\n            const paypalProviderError = error?.errors?.filter((e) => e.provider_error) || [];\n\n            return paypalProviderError[0]?.provider_error?.code === 'INSTRUMENT_DECLINED';\n        }\n\n        return false;\n    }\n}\n","import { isRequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ProviderError } from './is-paypal-commerce-provider-error';\n\nexport interface RedirectActionError extends ProviderError {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport default function isRedirectActionError(error: unknown): error is RedirectActionError {\n    return (\n        isRequestError(error) && error.body.additional_action_required?.type === 'offsite_redirect'\n    );\n}\n","export interface ProviderError extends Error {\n    errors?: ErrorElement[];\n    status?: string;\n    three_ds_result?: {\n        acs_url: unknown;\n        payer_auth_request: unknown;\n        merchant_data: unknown;\n        callback_url: unknown;\n    };\n}\n\nexport interface ErrorElement {\n    code: string;\n    message: string;\n    provider_error?: {\n        code: string;\n    };\n}\n\nexport default function isPaypalCommerceProviderError(error: unknown): error is ProviderError {\n    return typeof error === 'object' && error !== null && 'errors' in error;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PayPalCommercePaymentStrategy from './paypal-commerce-payment-strategy';\n\nconst createPayPalCommercePaymentStrategy: PaymentStrategyFactory<PayPalCommercePaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new PayPalCommercePaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new PayPalCommerceSdk(getScriptLoader()),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createPayPalCommercePaymentStrategy, [{ id: 'paypalcommerce' }]);\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalCommerceSdk from './paypal-commerce-sdk';\n\nexport default function createPayPalCommerceSdk(): PayPalCommerceSdk {\n    return new PayPalCommerceSdk(createScriptLoader());\n}\n","import {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalMessagesSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    ClickCallbackActions,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditPaymentInitializeOptions, {\n    WithPayPalCommerceCreditPaymentInitializeOptions,\n} from './paypal-commerce-credit-payment-initialize-options';\n\nexport default class PayPalCommerceCreditPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithPayPalCommerceCreditPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommerce, paypalcommercecredit } = options || {};\n\n        const paypalOptions = paypalcommercecredit || paypalcommerce;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        const { paypalBNPLConfiguration = [], orderId } = paymentMethod.initializationData || {};\n        const { bannerContainerId, container } = paypalOptions;\n\n        if (bannerContainerId !== undefined) {\n            if (!document.getElementById(bannerContainerId)) {\n                // eslint-disable-next-line no-console\n                console.error('Unable to create banner without valid banner container ID.');\n\n                return;\n            }\n\n            const bannerConfiguration =\n                paypalBNPLConfiguration &&\n                paypalBNPLConfiguration.find(({ id }) => id === 'checkout');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            const paypalMessages = await this.paypalCommerceSdk.getPayPalMessages(\n                paymentMethod,\n                state.getCartOrThrow().currency.code,\n            );\n\n            return this.renderMessages(paypalMessages, bannerContainerId, bannerConfiguration);\n        }\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (orderId) {\n            this.orderId = orderId;\n\n            return;\n        }\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = container?.split('#')[1];\n\n        this.renderButton(methodId, paypalOptions);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paypalCommerceIntegrationService.submitPayment(payment.methodId, this.orderId);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        paypalOptions: PayPalCommerceCreditPaymentInitializeOptions,\n    ): void {\n        if (!paypalOptions?.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } = paypalOptions;\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (hasRenderedSmartButton) {\n                return;\n            }\n\n            const buttonOptions: PayPalCommerceButtonsOptions = {\n                fundingSource,\n                style: this.paypalCommerceIntegrationService.getValidButtonStyle(\n                    checkoutPaymentButtonStyles,\n                ),\n                createOrder: () =>\n                    this.paypalCommerceIntegrationService.createOrder(\n                        'paypalcommercecreditcheckout',\n                    ),\n                onClick: (_, actions) => this.handleClick(actions, onValidate),\n                onApprove: (data) => this.handleApprove(data, submitForm),\n                onCancel: () => this.toggleLoadingIndicator(false),\n                onError: (error) => this.handleError(error, onError),\n            };\n\n            this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n            if (!this.paypalButton.isEligible() && fundingSource === paypalSdk.FUNDING.PAYLATER) {\n                return;\n            }\n\n            if (!this.paypalButton.isEligible() && fundingSource === paypalSdk.FUNDING.CREDIT) {\n                throw new NotImplementedError(\n                    `PayPal ${fundingSource} is not available for your region. Please use PayPal Checkout instead.`,\n                );\n            }\n\n            if (onRenderButton && typeof onRenderButton === 'function') {\n                onRenderButton();\n            }\n\n            this.paypalButton.render(container);\n            hasRenderedSmartButton = true;\n        });\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: PayPalCommerceCreditPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        if (onValidate && typeof onValidate === 'function') {\n            await onValidate(onValidationPassed, reject);\n        }\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommerceCreditPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        if (submitForm && typeof submitForm === 'function') {\n            submitForm();\n        }\n    }\n\n    private handleError(\n        error: Error,\n        onError: PayPalCommerceCreditPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Render Pay Later Messages\n     *\n     * */\n    private renderMessages(\n        paypalMessages: PayPalMessagesSdk,\n        bannerContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'payment',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        paypalMessages.Messages(paypalMessagesOptions).render(`#${bannerContainerId}`);\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { createPayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PayPalCommerceCreditPaymentStrategy from './paypal-commerce-credit-payment-strategy';\n\nconst createPayPalCommerceCreditPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceCreditPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n        createPayPalCommerceSdk(),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditPaymentStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    ClickCallbackActions,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoPaymentInitializeOptions, {\n    WithPayPalCommerceVenmoPaymentInitializeOptions,\n} from './paypal-commerce-venmo-payment-initialize-options';\n\nexport default class PayPalCommerceVenmoPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithPayPalCommerceVenmoPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommerce, paypalcommercevenmo } = options || {};\n\n        const paypalOptions = paypalcommercevenmo || paypalcommerce;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (paymentMethod.initializationData?.orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = paypalOptions.container.split('#')[1];\n\n        this.renderButton(methodId, paypalOptions);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paypalCommerceIntegrationService.submitPayment(payment.methodId, this.orderId);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoPaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } = paypalcommercevenmo;\n\n        const buttonOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmocheckout'),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => this.toggleLoadingIndicator(false),\n            onError: (error) => this.handleError(error, onError),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            throw new NotImplementedError(\n                `PayPal Venmo is not available for your region. Please use PayPal Checkout instead.`,\n            );\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: PayPalCommerceVenmoPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        await onValidate(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommerceVenmoPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n        this.toggleLoadingIndicator(false);\n    }\n\n    private handleError(\n        error: Error,\n        onError: PayPalCommerceVenmoPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoPaymentStrategy from './paypal-commerce-venmo-payment-strategy';\n\nconst createPayPalCommerceVenmoPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceVenmoPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoPaymentStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalApmSdk, PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    NonInstantAlternativePaymentMethods,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    PayPalOrderStatus,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceAlternativeMethodsPaymentOptions, {\n    WithPayPalCommerceAlternativeMethodsPaymentInitializeOptions,\n} from './paypal-commerce-alternative-methods-payment-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class PayPalCommerceAlternativeMethodsPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n    private paypalApms?: PayPalApmSdk;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n    private isPollingEnabled = false;\n    private paypalcommercealternativemethods?: PayPalCommerceAlternativeMethodsPaymentOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions &\n            WithPayPalCommerceAlternativeMethodsPaymentInitializeOptions,\n    ): Promise<void> {\n        const {\n            gatewayId,\n            methodId,\n            paypalcommerce, // FIXME: this option is deprecated\n            paypalcommercealternativemethods,\n        } = options;\n        const paypalOptions = paypalcommercealternativemethods || paypalcommerce;\n\n        this.paypalcommercealternativemethods = paypalcommercealternativemethods;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { orderId, shouldRenderFields } = paymentMethod.initializationData || {};\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        this.isPollingEnabled = isExperimentEnabled(\n            features,\n            'PAYPAL-5192.paypal_commerce_ideal_polling',\n        );\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (orderId) {\n            this.orderId = orderId;\n\n            return;\n        }\n\n        this.paypalApms = await this.paypalCommerceSdk.getPayPalApmsSdk(\n            paymentMethod,\n            state.getCartOrThrow().currency.code,\n        );\n\n        this.loadingIndicatorContainer = paypalOptions.container.split('#')[1];\n\n        this.renderButton(methodId, gatewayId, paypalOptions);\n\n        if (shouldRenderFields) {\n            this.renderFields(methodId, paypalOptions);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, gatewayId } = payment;\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        if (this.isPollingEnabled && methodId === 'ideal') {\n            await new Promise((resolve, reject) => {\n                void this.initializePollingMechanism(methodId, resolve, reject, gatewayId);\n            });\n        }\n\n        if (!this.isNonInstantPaymentMethod(methodId)) {\n            await this.paymentIntegrationService.submitOrder(order, options);\n        }\n\n        await this.paypalCommerceIntegrationService.submitPayment(\n            methodId,\n            this.orderId,\n            gatewayId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: (value?: unknown) => void,\n        rejectPromise: (value?: unknown) => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.paypalCommerceIntegrationService.getOrderStatus(\n                gatewayId,\n            );\n\n            const isOrderApproved = orderStatus === PayPalOrderStatus.Approved;\n            const isPollingError = orderStatus === PayPalOrderStatus.PollingError;\n\n            if (isOrderApproved) {\n                this.deinitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (!isOrderApproved && this.pollingTimer < this.maxPollingIntervalTime) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                paypalcommercealternativemethods: this.paypalcommercealternativemethods,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            rejectPromise();\n        }\n    }\n\n    private deinitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deinitializePollingMechanism();\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions &\n            WithPayPalCommerceAlternativeMethodsPaymentInitializeOptions,\n    ) {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n\n    private handleError(error: unknown) {\n        const { onError } = this.paypalcommercealternativemethods || {};\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        gatewayId: string,\n        paypalOptions: PayPalCommerceAlternativeMethodsPaymentOptions,\n    ): void {\n        const paypalAmpsSdk = this.getPaypalAmpsSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { buttonStyle } = paymentMethod.initializationData || {};\n\n        const { container, onError, onRenderButton, submitForm } = paypalOptions;\n\n        const buttonOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: methodId,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(buttonStyle),\n            onInit: (_, actions) => paypalOptions.onInitButton(actions),\n            createOrder: () => this.onCreateOrder(methodId, gatewayId, paypalOptions),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => {\n                this.toggleLoadingIndicator(false);\n                this.deinitializePollingMechanism();\n            },\n            onError: (error) => {\n                this.deinitializePollingMechanism();\n                this.handleFailure(error, onError);\n            },\n            onClick: async (_, actions) =>\n                paypalOptions.onValidate(actions.resolve, actions.reject),\n        };\n\n        this.paypalButton = paypalAmpsSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async onCreateOrder(\n        methodId: string,\n        gatewayId: string,\n        paypalOptions: PayPalCommerceAlternativeMethodsPaymentOptions,\n    ): Promise<string> {\n        const { onValidate } = paypalOptions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return () => Promise.resolve();\n        };\n\n        await onValidate(onValidationPassed, noop);\n\n        const orderId = await this.paypalCommerceIntegrationService.createOrder(\n            'paypalcommercealternativemethodscheckout',\n        );\n\n        if (this.isNonInstantPaymentMethod(methodId)) {\n            const order = { useStoreCredit: false };\n            const options = {\n                params: {\n                    methodId,\n                    gatewayId,\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, orderId, gatewayId);\n        }\n\n        return orderId;\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommerceAlternativeMethodsPaymentOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n    }\n\n    private handleFailure(\n        error: Error,\n        onError: PayPalCommerceAlternativeMethodsPaymentOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Fields methods\n     *\n     * */\n    private renderFields(\n        methodId: string,\n        paypalOptions: PayPalCommerceAlternativeMethodsPaymentOptions,\n    ): void {\n        const paypalAmpsSdk = this.getPaypalAmpsSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const { firstName, lastName, email } = state.getBillingAddressOrThrow();\n\n        const { apmFieldsContainer, apmFieldsStyles } = paypalOptions;\n\n        if (!apmFieldsContainer) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument should contain \"apmFieldsContainer\".',\n            );\n        }\n\n        const fieldContainerElement = document.querySelector(apmFieldsContainer);\n\n        if (fieldContainerElement) {\n            fieldContainerElement.innerHTML = '';\n        }\n\n        const fieldsOptions = {\n            fundingSource: methodId,\n            style: apmFieldsStyles || {},\n            fields: {\n                name: {\n                    value: `${firstName} ${lastName}`,\n                },\n                email: {\n                    value: email,\n                },\n            },\n        };\n\n        const paypalPaymentFields = paypalAmpsSdk.PaymentFields(fieldsOptions);\n\n        paypalPaymentFields.render(apmFieldsContainer);\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     * */\n    private isNonInstantPaymentMethod(methodId: string): boolean {\n        return methodId.toUpperCase() in NonInstantAlternativePaymentMethods;\n    }\n\n    private getPaypalAmpsSdkOrThrow() {\n        if (!this.paypalApms) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalApms;\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { createPayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PayPalCommerceAlternativeMethodsPaymentStrategy from './paypal-commerce-alternative-methods-payment-strategy';\n\nconst createPayPalCommerceAlternativeMethodsPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceAlternativeMethodsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceAlternativeMethodsPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        createPayPalCommerceSdk(),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createPayPalCommerceAlternativeMethodsPaymentStrategy, [\n    { gateway: 'paypalcommercealternativemethods' },\n]);\n","import { CardInstrument, CustomerAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Commerce Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\n/**\n *\n * PayPal Commerce Initialization Data\n *\n */\nexport interface PayPalCommerceInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    fastlaneStyles?: FastlaneStylesSettings;\n    connectClientToken?: string; // TODO: remove when PPCP Fastlane A/B test will be finished\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isAcceleratedCheckoutEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneStylingEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCommerceAnalyticsV2Enabled?: boolean; // PayPal Fastlane related\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: remove when PPCP Fastlane A/B test will be finished\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[];\n    threeDSVerificationMethod?: string;\n}\n\n/**\n *\n * PayPalCommerceHostWindow contains different\n * PayPal Sdk instances for different purposes\n *\n */\nexport interface PayPalCommerceHostWindow extends Window {\n    paypalFastlane?: PayPalFastlane;\n    paypalFastlaneSdk?: PayPalFastlaneSdk;\n    paypalMessages?: PayPalMessagesSdk;\n    paypalApms?: PayPalApmSdk;\n    paypalGooglePay?: PayPalGooglePaySdk;\n}\n\n/**\n *\n * PayPal SDK config\n *\n */\nexport interface PayPalSdkConfig {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'enable-funding'?: EnableFundingType;\n        'disable-funding'?: FundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: PayPalSdkComponents;\n    };\n    attributes: {\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-sdk-client-token'?: string;\n        'data-namespace'?: string;\n        'data-client-token'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type PayPalSdkComponents = Array<\n    | 'fastlane'\n    | 'messages'\n    | 'buttons'\n    | 'payment-fields'\n    | 'three-domain-secure'\n    | 'hosted-fields'\n    | 'googlepay'\n>;\n\n/**\n *\n * PayPal Sdk instances\n *\n */\nexport interface PayPalFastlaneSdk {\n    ThreeDomainSecureClient: {\n        isEligible(params: threeDSecureParameters): Promise<boolean>;\n        show(): Promise<ThreeDomainSecureClientShowResponse>;\n    };\n    Fastlane(options?: PayPalFastlaneOptions): Promise<PayPalFastlane>;\n}\n\ninterface ThreeDomainSecureClientShowResponse {\n    liabilityShift: LiabilityShiftEnum;\n    authenticationState: TDSecureAuthenticationState;\n    nonce: string; // Enriched nonce or the original nonce\n}\n\nexport enum TDSecureAuthenticationState {\n    Succeeded = 'succeeded',\n    Cancelled = 'cancelled',\n    Errored = 'errored',\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\nexport interface threeDSecureParameters {\n    amount: string;\n    currency: string;\n    nonce: string;\n    threeDSRequested: boolean;\n    transactionContext: {\n        experience_context: {\n            brand_name?: string;\n            locale: string;\n            return_url: string;\n            cancel_url: string;\n        };\n    };\n}\n\nexport interface PayPalMessagesSdk {\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PayPalApmSdk {\n    Buttons(options: PayPalCommerceButtonsOptions): PayPalCommerceButtons;\n    PaymentFields(options: PayPalCommercePaymentFieldsOptions): PayPalCommercePaymentFields;\n}\n\nexport interface PayPalGooglePaySdk {\n    Googlepay(): GooglePay;\n}\n\n/**\n *\n * Google Pay related types\n *\n */\n\ninterface GooglePay {\n    config: () => Promise<GooglePayConfig>;\n    confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n    initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\n/**\n *\n * PayPal Commerce Buttons\n *\n */\nexport interface PayPalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PayPalCommerceButtonsOptions {\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: PayPalButtonApproveCallbackPayload,\n        actions: PayPalButtonApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(\n        data: PayPalButtonInitCallbackPayload,\n        actions: PayPalButtonInitCallbackActions,\n    ): Promise<void>;\n    onClick?(\n        data: PayPalButtonClickCallbackPayload,\n        actions: PayPalButtonClickCallbackActions,\n    ): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n}\n\nexport interface PayPalButtonClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface PayPalButtonClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface PayPalButtonInitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface PayPalButtonInitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalButtonApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface PayPalButtonApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * PayPal Commerce Payment fields\n *\n */\nexport interface PayPalCommercePaymentFields {\n    render(id: string): void;\n}\n\nexport interface PayPalCommercePaymentFieldsOptions {\n    style?: PayPalCommerceFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface PayPalCommerceFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayLater Messages related types\n * doc: https://developer.paypal.com/docs/checkout/pay-later/us/integrate/reference\n */\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagesStyleOptions {\n    color?: string; // 'blue' | 'black' | 'white' | 'white-no-border' | 'gray' | 'monochrome' | 'grayscale'\n    layout?: string; // 'text' | 'flex'\n    logo?: {\n        type?: string; // 'primary' | 'alternative' | 'inline' | 'none'\n        position?: string; // 'left' | 'right' | 'top'\n    };\n    ratio?: string; // '1x1' | '1x4' | '8x1' | '20x1'\n    text?: {\n        align?: string; // 'left' | 'right' | 'center'\n        color?: string; // 'black' | 'white' | 'monochrome' | 'grayscale'\n        size?: number; // from 10 to 16\n    };\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * PayPal Fastlane related types\n *\n */\nexport interface PayPalFastlane {\n    identity: PayPalFastlaneIdentity;\n    events: PayPalFastlaneEvents;\n    profile: PayPalFastlaneProfile;\n    FastlaneCardComponent(\n        options: PayPalFastlaneCardComponentOptions,\n    ): Promise<PayPalFastlaneCardComponentMethods>;\n}\n\nexport interface PayPalFastlaneOptions {\n    styles?: PayPalFastlaneStylesOption;\n}\n\nexport interface PayPalFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerContextId: string,\n    ): Promise<PayPalFastlaneAuthenticationResult>;\n}\n\nexport interface PayPalFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface PayPalFastlaneAuthenticationResult {\n    authenticationState?: PayPalFastlaneAuthenticationState;\n    profileData?: PayPalFastlaneProfileData;\n}\n\nexport enum PayPalFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'canceled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface PayPalFastlaneProfileData {\n    name: PayPalFastlaneProfileName;\n    shippingAddress: PayPalFastlaneShippingAddress;\n    card: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface PayPalFastlaneProfilePhone {\n    countryCode: string;\n    nationalNumber: string;\n}\n\nexport interface PayPalFastlaneShippingAddress {\n    name: PayPalFastlaneProfileName;\n    phoneNumber: PayPalFastlaneProfilePhone;\n    address: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneProfileCard {\n    id: string; // nonce / token\n    paymentSource: PayPalFastlanePaymentSource;\n}\n\nexport interface PayPalFastlanePaymentSource {\n    card: PayPalFastlaneCardSource;\n}\n\nexport interface PayPalFastlaneCardSource {\n    brand: string;\n    expiry: string; // \"YYYY-MM\"\n    lastDigits: string; // \"1111\"\n    name: string;\n    billingAddress: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneAddress {\n    company?: string;\n    addressLine1: string;\n    addressLine2?: string;\n    adminArea1: string; // State\n    adminArea2: string; // City\n    postalCode: string;\n    countryCode?: string;\n}\n\nexport interface PayPalFastlaneProfileToBcCustomerDataMappingResult {\n    authenticationState: PayPalFastlaneAuthenticationState;\n    addresses: CustomerAddress[];\n    billingAddress?: CustomerAddress;\n    shippingAddress?: CustomerAddress;\n    instruments: CardInstrument[];\n}\n\nexport interface PayPalFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport interface PayPalFastlaneProfile {\n    showCardSelector(): Promise<PayPalFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<PayPalFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface PayPalFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: PayPalFastlaneShippingAddress;\n}\n\nexport interface PayPalFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneCardComponentMethods {\n    getPaymentToken(\n        options: PayPalFastlaneGetPaymentTokenOptions,\n    ): Promise<PayPalFastlaneProfileCard>;\n    render(element: string): void;\n}\n\nexport interface PayPalFastlaneGetPaymentTokenOptions {\n    name?: PayPalFastlaneProfileName;\n    billingAddress?: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneCardComponentOptions {\n    fields?: PayPalFastlaneCardComponentFields;\n}\n\nexport interface PayPalFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface PayPalFastlaneEvents {\n    apmSelected: (options: PayPalFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: PayPalFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: PayPalFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface PayPalFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface PayPalFastlaneApmSelectedEventOptions extends PayPalFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface PayPalFastlaneEmailEnteredEventOptions extends PayPalFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface PayPalFastlaneOrderPlacedEventOptions extends PayPalFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface PayPalFastlanePaymentFormattedPayload {\n    paypal_connect_token?: {\n        order_id?: string;\n        token: string;\n    };\n    paypal_fastlane_token?: {\n        order_id?: string;\n        token: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n","import { isEqual, omit } from 'lodash';\n\nimport {\n    Address,\n    CardInstrument,\n    CustomerAddress,\n    PaymentMethodClientUnavailableError,\n    UntrustedShippingCardVerificationType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { CookieStorage } from '@bigcommerce/checkout-sdk/storage';\n\nimport {\n    PayPalCommerceHostWindow,\n    PayPalFastlane,\n    PayPalFastlaneAddress,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneLookupCustomerByEmailResult,\n    PayPalFastlaneProfileCard,\n    PayPalFastlaneProfileName,\n    PayPalFastlaneProfilePhone,\n    PayPalFastlaneProfileToBcCustomerDataMappingResult,\n    PayPalFastlaneSdk,\n    PayPalFastlaneStylesOption,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceFastlaneUtils {\n    private window: PayPalCommerceHostWindow;\n\n    constructor() {\n        this.window = window;\n    }\n\n    async initializePayPalFastlane(\n        paypalFastlaneSdk: PayPalFastlaneSdk,\n        isTestModeEnabled: boolean,\n        styles?: PayPalFastlaneStylesOption,\n    ): Promise<PayPalFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n            window.localStorage.setItem('axoEnv', 'sandbox'); // TODO: remove if this key does not use on PayPal side\n        }\n\n        if (!this.window.paypalFastlane) {\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.window.paypalFastlane = await paypalFastlaneSdk.Fastlane({\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    getPayPalFastlaneOrThrow(): PayPalFastlane {\n        if (!this.window.paypalFastlane) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    /**\n     *\n     * Detects the customer to PayPal Fastlane relation and\n     * returns customerContextId to use it for authentication\n     *\n     */\n    async lookupCustomerOrThrow(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult> {\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.lookupCustomerByEmail(email);\n    }\n\n    /**\n     *\n     * Triggers authentication flow (shows OTP popup) if the customer recognised as PayPal Fastlane user\n     * and returns PayPal Fastlane Profile data to use it in BC checkout\n     *\n     */\n    async triggerAuthenticationFlowOrThrow(\n        customerContextId?: string,\n    ): Promise<PayPalFastlaneAuthenticationResult> {\n        if (!customerContextId) {\n            return {};\n        }\n\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.triggerAuthenticationFlow(customerContextId);\n    }\n\n    /**\n     *\n     * 'updateStorageSessionId' method is used to:\n     * - set session id after user was authenticated (or unrecognised) to trigger authentication after page refresh\n     *\n     * Flow info:\n     * If user unrecognised then the lookup method will be working but the OTP will not be shown\n     * If user recognised and not canceled then the lookup method will be working and the OTP will be shown only if needed\n     * If user cancels the OPT then OTP will not be triggered after page refresh\n     *\n     */\n    updateStorageSessionId(sessionId: string): void {\n        const expires = new Date();\n        expires.setDate(expires.getDate() + 14); // 2 weeks expiry\n\n        const cookiesOption = {\n            expires,\n            secure: true,\n        };\n\n        CookieStorage.set('bc-fastlane-sessionId', sessionId, cookiesOption);\n    }\n\n    removeStorageSessionId(): void {\n        CookieStorage.remove('bc-fastlane-sessionId');\n    }\n\n    getStorageSessionId(): string {\n        return CookieStorage.get('bc-fastlane-sessionId') || '';\n    }\n\n    /**\n     *\n     * 'mapPayPalFastlaneProfileToBcCustomerData' method is responsible for:\n     * - mapping PayPal Fastlane Profile data to BC data shape\n     * - returning mapped data to use for updating PaymentProviderCustomer state and\n     * update shipping and billing addresses\n     *\n     */\n    mapPayPalFastlaneProfileToBcCustomerData(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): PayPalFastlaneProfileToBcCustomerDataMappingResult {\n        const { authenticationState, profileData } = authenticationResult;\n\n        const paypalBillingAddress = profileData?.card?.paymentSource?.card?.billingAddress;\n        const paypalShippingAddress = profileData?.shippingAddress;\n        const paypalProfileName = profileData?.name;\n        const paypalInstrument = profileData?.card;\n\n        const shippingAddress = paypalShippingAddress\n            ? this.mapPayPalToBcAddress(\n                  paypalShippingAddress.address,\n                  paypalShippingAddress.name,\n                  paypalShippingAddress.phoneNumber,\n              )\n            : undefined;\n        const billingAddress =\n            paypalBillingAddress && paypalProfileName\n                ? this.mapPayPalToBcAddress(\n                      paypalBillingAddress,\n                      paypalProfileName,\n                      paypalShippingAddress?.phoneNumber,\n                  )\n                : undefined;\n        const instruments = paypalInstrument\n            ? this.mapPayPalToBcInstrument(methodId, paypalInstrument)\n            : [];\n\n        const addresses = this.filterAddresses([shippingAddress, billingAddress]);\n\n        return {\n            authenticationState:\n                authenticationState || PayPalFastlaneAuthenticationState.UNRECOGNIZED,\n            addresses,\n            billingAddress,\n            shippingAddress,\n            instruments,\n        };\n    }\n\n    mapPayPalToBcInstrument(\n        methodId: string,\n        instrument: PayPalFastlaneProfileCard,\n    ): CardInstrument[] {\n        const { id, paymentSource } = instrument;\n        const { brand, expiry, lastDigits } = paymentSource.card;\n\n        const [expiryYear, expiryMonth] = expiry.split('-');\n\n        return [\n            {\n                bigpayToken: id,\n                brand,\n                defaultInstrument: false,\n                expiryMonth,\n                expiryYear,\n                iin: '',\n                last4: lastDigits,\n                method: methodId,\n                provider: methodId,\n                trustedShippingAddress: false,\n                untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType.PAN,\n                type: 'card',\n            },\n        ];\n    }\n\n    mapBcToPayPalAddress(address?: Address): PayPalFastlaneAddress {\n        return {\n            company: address?.company || '',\n            addressLine1: address?.address1 || '',\n            addressLine2: address?.address2 || '',\n            adminArea1: address?.stateOrProvinceCode || address?.stateOrProvince || '',\n            adminArea2: address?.city || '',\n            postalCode: address?.postalCode || '',\n            countryCode: address?.countryCode || '',\n        };\n    }\n\n    mapPayPalToBcAddress(\n        address: PayPalFastlaneAddress,\n        profileName: PayPalFastlaneProfileName,\n        phone?: PayPalFastlaneProfilePhone,\n        customFields?: CustomerAddress['customFields'],\n    ): CustomerAddress {\n        const [firstName, lastName] = profileName.fullName.split(' ');\n\n        const phoneData = {\n            nationalNumber: phone?.nationalNumber || '',\n            countryCode: phone?.countryCode || '',\n        };\n\n        return {\n            id: Date.now(),\n            type: 'paypal-address',\n            firstName: profileName.firstName || firstName || '',\n            lastName: profileName.lastName || lastName || '',\n            company: address.company || '',\n            address1: address.addressLine1,\n            address2: address.addressLine2 || '',\n            city: address.adminArea2,\n            stateOrProvince: address.adminArea1,\n            stateOrProvinceCode: address.adminArea1,\n            country: address.countryCode || '', // TODO: update country with valid naming\n            countryCode: address.countryCode || '',\n            postalCode: address.postalCode,\n            phone: phoneData.countryCode + phoneData.nationalNumber,\n            customFields: customFields || [],\n        };\n    }\n\n    /**\n     *\n     * This method is responsible for filtering PayPal Fastlane addresses if they are the same\n     * and returns an array of addresses to use them for shipping and/or billing address selections\n     * so the customer will be able to use addresses from PayPal Fastlane in checkout flow\n     *\n     */\n    filterAddresses(addresses: Array<CustomerAddress | undefined>): CustomerAddress[] {\n        return addresses.reduce(\n            (customerAddresses: CustomerAddress[], currentAddress: CustomerAddress | undefined) => {\n                if (!currentAddress) {\n                    return customerAddresses;\n                }\n\n                const sameAddressInTheArray = customerAddresses.some((customerAddress) =>\n                    this.isEqualAddresses(customerAddress, currentAddress),\n                );\n\n                return sameAddressInTheArray\n                    ? customerAddresses\n                    : [...customerAddresses, currentAddress];\n            },\n            [],\n        );\n    }\n\n    private isEqualAddresses(\n        firstAddress: CustomerAddress,\n        secondAddress: CustomerAddress,\n    ): boolean {\n        return isEqual(this.normalizeAddress(firstAddress), this.normalizeAddress(secondAddress));\n    }\n\n    private normalizeAddress(address: CustomerAddress) {\n        return omit(address, ['id', 'phone']);\n    }\n}\n","import PayPalCommerceFastlaneUtils from './paypal-commerce-fastlane-utils';\n\nexport default function createPayPalCommerceFastlaneUtils(): PayPalCommerceFastlaneUtils {\n    return new PayPalCommerceFastlaneUtils();\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport {\n    HostedCardFieldOptions,\n    HostedCardFieldOptionsMap,\n    HostedFieldBlurEventData,\n    HostedFieldEnterEventData,\n    HostedFieldFocusEventData,\n    HostedFieldStylesMap,\n    HostedFieldType,\n    HostedFieldValidateEventData,\n    HostedFormOptions,\n    HostedInputValidateErrorData,\n    HostedInputValidateErrorDataMap,\n    HostedInstrument,\n    HostedStoredCardFieldOptionsMap,\n    InvalidArgumentError,\n    isCreditCardFormFields,\n    isCreditCardVaultedFormFields,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    isPayPalCommerceAcceleratedCheckoutCustomer,\n    PayPalCommerceFastlaneUtils,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    LiabilityShiftEnum,\n    PayPalCommerceCardFields,\n    PayPalCommerceCardFieldsConfig,\n    PayPalCommerceCardFieldsOnApproveData,\n    PayPalCommerceCardFieldsState,\n    PayPalCommerceFields,\n    PayPalCommerceHostedFieldsRenderOptions,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditCardsPaymentInitializeOptions, {\n    WithPayPalCommerceCreditCardsPaymentInitializeOptions,\n} from './paypal-commerce-credit-cards-payment-initialize-options';\n\nexport default class PayPalCommerceCreditCardsPaymentStrategy implements PaymentStrategy {\n    private executionPaymentData?: OrderPaymentRequestBody['paymentData'];\n    private isCreditCardForm?: boolean;\n    private isCreditCardVaultedForm?: boolean;\n\n    private cardFields?: PayPalCommerceCardFields;\n    private cvvField?: PayPalCommerceFields;\n    private expiryField?: PayPalCommerceFields;\n    private numberField?: PayPalCommerceFields;\n    private nameField?: PayPalCommerceFields;\n\n    private hostedFormOptions?: HostedFormOptions;\n    private returnedOrderId?: string;\n    private returnedVaultedToken?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private paypalCommerceFastlaneUtils: PayPalCommerceFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithPayPalCommerceCreditCardsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommercecreditcards, paypalcommerce } = options;\n        const paypalCommerceInitializationOptions = paypalcommercecreditcards || paypalcommerce;\n\n        const { form, onCreditCardFieldsRenderingError } =\n            paypalCommerceInitializationOptions || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!form) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.paypalcommercecreditcards.form\" argument is not provided.',\n            );\n        }\n\n        this.hostedFormOptions = form;\n\n        this.isCreditCardForm = isCreditCardFormFields(form.fields);\n        this.isCreditCardVaultedForm =\n            isCreditCardVaultedFormFields(form.fields) && !this.hasUndefinedValues();\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, undefined, true, true);\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.initializeFields(form, onCreditCardFieldsRenderingError);\n        }\n\n        if (this.shouldInitializePayPalFastlane(methodId)) {\n            await this.initializePayPalFastlaneOrThrow(methodId);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { methodId, paymentData } = payment || {};\n\n        if (!payment || !methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        this.executionPaymentData = paymentData;\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.validateHostedFormOrThrow();\n            await this.submitHostedForm();\n        } else {\n            // This condition is triggered when we pay with vaulted instrument and shipping address is truste\n            const { orderId } = await this.paypalCommerceIntegrationService.createOrderCardFields(\n                'paypalcommercecreditcardscheckout',\n                this.getInstrumentParams(),\n            );\n\n            this.returnedOrderId = orderId;\n        }\n\n        const submitPaymentPayload = this.preparePaymentPayload(\n            methodId,\n            paymentData,\n            this.returnedOrderId,\n            this.returnedVaultedToken,\n        );\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paymentIntegrationService.submitPayment(submitPaymentPayload);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.cvvField?.close();\n        await this.expiryField?.close();\n        await this.numberField?.close();\n        await this.nameField?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Submit Payment Payload preparing method\n     *\n     * `vaultedToken` is used when we pay with vaulted instrument (with trusted shipping address and untrusted)\n     * `setupToken` is used when we pay with vaulted instrument (untrusted shipping address)\n     * `orderId` is used in every case (basic card payment, trusted shipping address and untrusted)\n     */\n    private preparePaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n        orderId?: string,\n        nonce?: string,\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const instrumentId =\n            paymentData && isVaultedInstrument(paymentData) ? paymentData.instrumentId : undefined;\n\n        const bigpay_token = omitBy(\n            {\n                verification_nonce: nonce,\n                token: instrumentId,\n            },\n            isNil,\n        );\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                instrumentId,\n                formattedPayload: {\n                    ...(nonce || instrumentId ? { bigpay_token } : {}),\n                    ...(orderId ? { card_with_order: { order_id: orderId } } : {}),\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Card fields initialize\n     *\n     */\n    private async initializeFields(\n        formOptions: HostedFormOptions,\n        onCreditCardFieldsRenderingError?: PayPalCommerceCreditCardsPaymentInitializeOptions['onCreditCardFieldsRenderingError'],\n    ): Promise<void> {\n        const { fields, styles } = formOptions;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const executeCallback = this.getExecuteCallback(fields);\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        const cardFieldsConfig: PayPalCommerceCardFieldsConfig = {\n            style: this.getInputStyles(styles),\n            onApprove: ({\n                orderID,\n                vaultSetupToken,\n                liabilityShift,\n            }: PayPalCommerceCardFieldsOnApproveData) => {\n                if (\n                    features?.['PAYPAL-4591.paypal_commerce_3ds_verification'] &&\n                    (liabilityShift === LiabilityShiftEnum.No ||\n                        liabilityShift === LiabilityShiftEnum.Unknown)\n                ) {\n                    throw new Error();\n                }\n\n                return this.handleApprove({ orderID, vaultSetupToken });\n            },\n            onError: () => {\n                throw new PaymentMethodFailedError();\n            },\n            inputEvents: {\n                onChange: (event) => this.onChangeHandler(formOptions, event),\n                onFocus: (event) => this.onFocusHandler(formOptions, event),\n                onBlur: (event) => this.onBlurHandler(formOptions, event),\n                onInputSubmitRequest: (event) => this.onInputSubmitRequest(formOptions, event),\n            },\n            ...executeCallback,\n        };\n\n        this.cardFields = await paypalSdk.CardFields(cardFieldsConfig);\n\n        if (!this.cardFields.isEligible()) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            this.stylizeInputContainers(fields);\n\n            if (isCreditCardFormFields(fields)) {\n                await this.renderFields(fields);\n            }\n\n            if (isCreditCardVaultedFormFields(fields)) {\n                await this.renderVaultedFields(fields);\n            }\n        } catch (error: unknown) {\n            if (typeof onCreditCardFieldsRenderingError === 'function') {\n                onCreditCardFieldsRenderingError(error);\n            }\n        }\n    }\n\n    /**\n     *\n     * Get execute callback method\n     * Depends on shipping address is trusted or not we should pass to PP\n     * `createVaultSetupToken` callback if address is untrusted or\n     * `createOrder` if address is trusted\n     *\n     */\n    private getExecuteCallback(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ) {\n        const isVaultedForm = isCreditCardVaultedFormFields(fields);\n\n        return isVaultedForm ? this.createVaultSetupTokenCallback() : this.createOrderCallback();\n    }\n\n    private createVaultSetupTokenCallback() {\n        return {\n            createVaultSetupToken: async () => {\n                const { setupToken } =\n                    (await this.paypalCommerceIntegrationService.createOrderCardFields(\n                        'paypalcommercecreditcardscheckout',\n                        {\n                            ...this.getInstrumentParams(),\n                            setupToken: true,\n                        },\n                    )) || {};\n\n                return setupToken;\n            },\n        };\n    }\n\n    private createOrderCallback() {\n        return {\n            createOrder: async () => {\n                const { orderId } =\n                    (await this.paypalCommerceIntegrationService.createOrderCardFields(\n                        'paypalcommercecreditcardscheckout',\n                        this.getInstrumentParams(),\n                    )) || {};\n\n                return orderId;\n            },\n        };\n    }\n\n    /**\n     *\n     * onApprove method\n     * When submitting a form with a `submitHostedForm` method if there is no error\n     * then onApprove callback is triggered and depends on the flow\n     * we will receive an `orderID` if it's basic paying and `vaultSetupToken` if we are paying\n     * with vaulted instrument and shipping address is untrusted\n     *\n     */\n    private handleApprove({ orderID, vaultSetupToken }: PayPalCommerceCardFieldsOnApproveData) {\n        if (orderID) {\n            this.returnedOrderId = orderID;\n        }\n\n        if (vaultSetupToken) {\n            this.returnedVaultedToken = vaultSetupToken;\n        }\n    }\n\n    /**\n     *\n     * Rendering Card Fields methods\n     *\n     */\n    private async renderFields(fieldsOptions: HostedCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCode?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCode.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiry?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiry.containerId}`);\n        }\n\n        if (fieldsOptions.cardName?.containerId) {\n            this.nameField = cardFields.NameField({\n                placeholder: '',\n            });\n            await this.nameField.render(`#${fieldsOptions.cardName.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumber?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumber.containerId}`);\n        }\n    }\n\n    private async renderVaultedFields(fieldsOptions: HostedStoredCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCodeVerification?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCodeVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiryVerification?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiryVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumberVerification?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumberVerification.containerId}`);\n        }\n    }\n\n    /**\n     *\n     * Instrument params method\n     *\n     */\n    private getInstrumentParams(): HostedInstrument | VaultedInstrument {\n        if (!this.executionPaymentData) {\n            return {};\n        }\n\n        if (isHostedInstrumentLike(this.executionPaymentData)) {\n            const { shouldSaveInstrument, shouldSetAsDefaultInstrument } =\n                this.executionPaymentData;\n\n            return {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            };\n        }\n\n        if (isVaultedInstrument(this.executionPaymentData)) {\n            const { instrumentId } = this.executionPaymentData;\n\n            return {\n                instrumentId,\n            };\n        }\n\n        return {};\n    }\n\n    private getFieldTypeByEmittedField({\n        emittedBy,\n    }: PayPalCommerceCardFieldsState):\n        | HostedFieldBlurEventData\n        | HostedFieldEnterEventData\n        | HostedFieldFocusEventData {\n        return {\n            fieldType: this.mapFieldType(emittedBy),\n        };\n    }\n\n    /**\n     *\n     * Form submit method\n     * Triggers a form submit\n     * */\n    private async submitHostedForm() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n\n        const submitConfig = {\n            billingAddress: {\n                company: billingAddress.company,\n                addressLine1: billingAddress.address1,\n                addressLine2: billingAddress.address2,\n                adminArea1: billingAddress.stateOrProvinceCode,\n                adminArea2: billingAddress.city,\n                postalCode: billingAddress.postalCode,\n                countryCode: billingAddress.countryCode,\n            },\n        };\n\n        try {\n            if (this.isCreditCardVaultedForm) {\n                await cardFields.submit();\n            } else {\n                await cardFields.submit(submitConfig);\n            }\n        } catch (_) {\n            throw new PaymentMethodFailedError(\n                'Failed authentication. Please try to authorize again.',\n            );\n        }\n    }\n\n    /**\n     *\n     * Validation and errors\n     *\n     */\n    private async validateHostedFormOrThrow() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const cardFieldsState = await cardFields.getState().then((data) => data);\n        const validationData = this.getValidityData(cardFieldsState);\n\n        if (validationData.isValid) {\n            return;\n        }\n\n        this.hostedFormOptions?.onValidate?.(validationData);\n\n        throw new PaymentInvalidFormError(this.mapValidationErrors(validationData.errors));\n    }\n\n    private getValidityData({\n        fields,\n    }: PayPalCommerceCardFieldsState): HostedFieldValidateEventData {\n        const updatedFields = { ...fields };\n\n        delete updatedFields.cardNameField;\n\n        const fieldsKeys = Object.keys(updatedFields) as Array<\n            keyof PayPalCommerceCardFieldsState['fields']\n        >;\n\n        const isValid = fieldsKeys.every((key) => updatedFields[key]?.isValid);\n\n        const errors = fieldsKeys.reduce((fieldsErrors, key) => {\n            const fieldType = this.mapFieldType(key);\n\n            return {\n                ...fieldsErrors,\n                [fieldType]: updatedFields[key]?.isValid\n                    ? undefined\n                    : [this.getInvalidErrorByFieldType(fieldType)],\n            };\n        }, {});\n\n        return { isValid, errors };\n    }\n\n    private getInvalidErrorByFieldType(fieldType: string): HostedInputValidateErrorData {\n        switch (fieldType) {\n            case HostedFieldType.CardCode:\n            case HostedFieldType.CardCodeVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                };\n\n            case HostedFieldType.CardNumber:\n            case HostedFieldType.CardNumberVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                };\n\n            case HostedFieldType.CardExpiry:\n            case HostedFieldType.CardExpiryVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card expiry',\n                    type: 'invalid_card_expiry',\n                };\n\n            default:\n                return {\n                    fieldType,\n                    message: 'Invalid field',\n                    type: 'invalid',\n                };\n        }\n    }\n\n    private mapValidationErrors(\n        validationErrors: HostedInputValidateErrorDataMap = {},\n    ): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n        const validationErrorsKeys = Object.keys(validationErrors) as Array<\n            keyof HostedInputValidateErrorDataMap\n        >;\n\n        validationErrorsKeys.forEach((key) => {\n            errors[key] = [\n                {\n                    message: validationErrors[key]?.[0]?.message || '',\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n\n    /**\n     *\n     * Fields mappers\n     *\n     */\n    private mapFieldType(type: string): HostedFieldType {\n        switch (type) {\n            case 'name':\n                return HostedFieldType.CardName;\n\n            case 'cardNumberField':\n            case 'number':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardNumber\n                    : HostedFieldType.CardNumberVerification;\n\n            case 'cardExpiryField':\n            case 'expiry':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardExpiry\n                    : HostedFieldType.CardExpiryVerification;\n\n            case 'cardCvvField':\n            case 'cvv':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardCode\n                    : HostedFieldType.CardCodeVerification;\n\n            default:\n                throw new Error('Unexpected field type');\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     */\n    private getCardFieldsOrThrow(): PayPalCommerceCardFields {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.cardFields;\n    }\n\n    private getInputStyles(\n        styles?: HostedFieldStylesMap,\n    ): PayPalCommerceHostedFieldsRenderOptions['styles'] {\n        const commonStyles = {\n            'font-size': styles?.default?.fontSize || '1rem',\n            'font-family':\n                styles?.default?.fontFamily || 'Montserrat, Arial, Helvetica, sans-serif',\n            'font-weight': styles?.default?.fontWeight || '400',\n            outline: 'none',\n            padding: '9px 13px',\n        };\n\n        const defaultStyles = { ...commonStyles, color: '#333333' };\n        const errorStyles = { ...commonStyles, color: 'red' };\n\n        return {\n            input: defaultStyles,\n            '.invalid': errorStyles,\n            '.valid': defaultStyles,\n            ':focus': defaultStyles,\n        };\n    }\n\n    private stylizeInputContainers(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ): void {\n        Object.values(fields || {}).forEach((id: HostedCardFieldOptions) => {\n            const element = document.getElementById(`${id?.containerId || ''}`);\n\n            if (element) {\n                element.style.padding = '0px';\n                element.style.boxShadow = 'none';\n                element.style.border = 'none';\n                element.style.background = 'transparent';\n                element.style.marginBottom = '10px';\n                element.style.marginLeft = '-5px';\n            }\n        });\n    }\n\n    private hasUndefinedValues() {\n        if (this.hostedFormOptions) {\n            return Object.values(this.hostedFormOptions.fields).some(\n                (value) => value === undefined,\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     *\n     * Input events methods\n     *\n     */\n    private onChangeHandler(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onValidate?.(this.getValidityData(event));\n    }\n\n    private onFocusHandler(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onFocus?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onBlurHandler(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onBlur?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onInputSubmitRequest(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onEnter?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    /**\n     *\n     * PayPal Commerce Accelerated checkout related methods\n     *\n     */\n    // TODO: remove this part when PPCP AXO A/B testing will be finished\n    private shouldInitializePayPalFastlane(methodId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const paypalCommercePaymentProviderCustomer = isPayPalCommerceAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        return (\n            paymentMethod?.initializationData?.isAcceleratedCheckoutEnabled &&\n            paymentMethod?.initializationData?.isPayPalCommerceAnalyticsV2Enabled &&\n            !paypalCommercePaymentProviderCustomer?.authenticationState\n        );\n    }\n\n    // TODO: remove this part when PPCP AXO A/B testing will be finished\n    private async initializePayPalFastlaneOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n            const { initializationData } = paymentMethod;\n\n            if (!initializationData?.connectClientToken) {\n                return;\n            }\n\n            const payPalFastlaneSdk = await this.paypalCommerceSdk.getPayPalFastlaneSdk(\n                paymentMethod,\n                cart.currency.code,\n                cart.id,\n            );\n\n            await this.paypalCommerceFastlaneUtils.initializePayPalFastlane(\n                payPalFastlaneSdk,\n                !!initializationData?.isDeveloperModeApplicable,\n            );\n        } catch (_: unknown) {\n            // We should avoid throwing any error from this flow to do no brake default flow\n            // This flow is optional\n        }\n    }\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isPayPalCommerceAcceleratedCheckoutCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    createPayPalCommerceFastlaneUtils,\n    createPayPalCommerceSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditCardsPaymentStrategy from './paypal-commerce-credit-cards-payment-strategy';\n\nconst createPaypalCommerceCreditCardsPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceCreditCardsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditCardsPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        createPayPalCommerceSdk(),\n        createPayPalCommerceFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createPaypalCommerceCreditCardsPaymentStrategy, [\n    { id: 'paypalcommercecreditcards' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    BirthDate,\n    PayPalCommerceInitializationData,\n    PayPalOrderStatus,\n} from '../paypal-commerce-types';\n\nimport {\n    PaypalCommerceRatePay,\n    WithPayPalCommerceRatePayPaymentInitializeOptions,\n} from './paypal-commerce-ratepay-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class PaypalCommerceRatepayPaymentStrategy implements PaymentStrategy {\n    private guid?: string;\n    private paypalcommerceratepay?: PaypalCommerceRatePay;\n    private loadingIndicatorContainer?: string;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithPayPalCommerceRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, paypalcommerceratepay } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerceratepay) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerceratepay\" argument is not provided.`,\n            );\n        }\n\n        const { legalTextContainer, container, loadingContainerId } = paypalcommerceratepay;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.container\" argument is not provided.`,\n            );\n        }\n\n        if (!legalTextContainer) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.legalTextContainer\" argument is not provided.`,\n            );\n        }\n\n        if (!loadingContainerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.loadingContainerId\" argument is not provided.`,\n            );\n        }\n\n        this.loadingIndicatorContainer = loadingContainerId;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { merchantId } = paymentMethod.initializationData || {};\n\n        if (!merchantId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because merchantId argument is not provided.`,\n            );\n        }\n\n        this.paypalcommerceratepay = paypalcommerceratepay;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.createFraudNetScript(merchantId, methodId, gatewayId);\n\n        this.loadFraudnetConfig();\n\n        this.renderLegalText(legalTextContainer, container);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        const { getFieldsValues } = this.paypalcommerceratepay || {};\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!getFieldsValues || typeof getFieldsValues !== 'function') {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.getFieldsValues\" argument is not provided.`,\n            );\n        }\n\n        this.toggleLoadingIndicator(true);\n\n        try {\n            const orderId = await this.paypalCommerceIntegrationService.createOrder(\n                'paypalcommercealternativemethodscheckout',\n                { metadataId: this.guid },\n            );\n\n            const { ratepayBirthDate, ratepayPhoneNumber, ratepayPhoneCountryCode } =\n                getFieldsValues();\n\n            const paymentData = {\n                formattedPayload: {\n                    vault_payment_instrument: null,\n                    set_as_default_stored_instrument: null,\n                    device_info: null,\n                    method_id: payment.methodId,\n                    rate_pay: {\n                        birth_date: this.normalizeDate(ratepayBirthDate),\n                        phone: {\n                            national_number: ratepayPhoneNumber,\n                            country_code: ratepayPhoneCountryCode.split('+')[1],\n                        },\n                    },\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n\n            return await new Promise((resolve, reject) => {\n                this.initializePollingMechanism(\n                    payment.methodId,\n                    resolve,\n                    reject,\n                    payment.gatewayId,\n                );\n            });\n        } catch (error: unknown) {\n            this.handleError(error);\n\n            return new Promise((_resolve, reject) => reject());\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        const { legalTextContainer } = this.paypalcommerceratepay || {};\n        const fraudNetScript = document.querySelectorAll('[data-id=\"fraudnetScript\"]')[0];\n        const fraudNetConfig = document.querySelectorAll('[data-id=\"fraudnetConfig\"]')[0];\n\n        this.deinitializePollingMechanism();\n\n        fraudNetScript.remove();\n        fraudNetConfig.remove();\n\n        if (legalTextContainer) {\n            const legalTextContainerElement = document.getElementById(legalTextContainer);\n\n            legalTextContainerElement?.remove();\n        }\n\n        return Promise.resolve();\n    }\n\n    private normalizeDate(date: BirthDate) {\n        const formattedDate = this.formatDate(date.getDate());\n        const formattedMonth = this.formatDate(date.getMonth() + 1);\n\n        return `${date.getFullYear()}-${formattedMonth}-${formattedDate}`;\n    }\n\n    private formatDate(date: number): string {\n        return `${date < 10 ? 0 : ''}${date}`;\n    }\n\n    private renderLegalText(legalTextContainerElementId: string, container: string) {\n        const legalTextContainerId = legalTextContainerElementId;\n        const buttonContainerId = container.split('#')[1];\n        const buttonContainer = document.getElementById(buttonContainerId);\n        const buttonContainerParent = buttonContainer?.parentNode;\n        const legalTextContainer = document.createElement('div');\n\n        legalTextContainer.style.marginBottom = '20px';\n        legalTextContainer.setAttribute('id', legalTextContainerId);\n        buttonContainerParent?.prepend(legalTextContainer);\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const ratePayButton = paypalSdk.Legal({\n            fundingSource: paypalSdk.Legal.FUNDING.PAY_UPON_INVOICE,\n        });\n        const legalTextContainerElement = document.getElementById(legalTextContainerId);\n\n        if (legalTextContainerElement) {\n            ratePayButton.render(`#${legalTextContainerId}`);\n        } else {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"legalTextContainerElement\" argument is not found.`,\n            );\n        }\n    }\n\n    private handleError(error: unknown): void {\n        const { onError } = this.paypalcommerceratepay || {};\n\n        this.resetPollingMechanism();\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private createFraudNetScript(merchantId: string, methodId: string, gatewayId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n        const { testMode } = paymentMethod.config;\n        const scriptElement = document.createElement('script');\n\n        scriptElement.setAttribute('type', 'application/json');\n        scriptElement.setAttribute('fncls', 'fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99');\n        scriptElement.setAttribute('data-id', 'fraudnetScript');\n        this.guid = this.generateGUID();\n\n        const fraudNetConfig = {\n            f: this.guid,\n            s: `${merchantId}_checkout-page`,\n            sandbox: testMode,\n        };\n\n        scriptElement.innerHTML = JSON.stringify(fraudNetConfig);\n        document.body.appendChild(scriptElement);\n    }\n\n    private generateGUID() {\n        let guid = '';\n        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        for (let i = 0; i < 32; i += 1) {\n            const randomIndex = Math.floor(Math.random() * characters.length);\n\n            guid += characters[randomIndex];\n        }\n\n        return guid;\n    }\n\n    private loadFraudnetConfig() {\n        const script = document.createElement('script');\n\n        script.setAttribute('data-id', 'fraudnetConfig');\n        script.src = 'https://c.paypal.com/da/r/fb.js';\n        document.body.appendChild(script);\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions & WithPayPalCommerceRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: () => void,\n        rejectPromise: () => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.paypalCommerceIntegrationService.getOrderStatus(\n                'paypalcommercealternativemethods',\n                {\n                    params: {\n                        useMetadata: true,\n                    },\n                },\n            );\n\n            const isOrderApproved = orderStatus === PayPalOrderStatus.PollingStop;\n            const isPollingError = orderStatus === PayPalOrderStatus.PollingError;\n\n            if (isOrderApproved) {\n                this.deinitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (!isOrderApproved && this.pollingTimer < this.maxPollingIntervalTime) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                paypalcommerceratepay: this.paypalcommerceratepay,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            this.handleError(error);\n            rejectPromise();\n        }\n    }\n\n    private deinitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deinitializePollingMechanism();\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PaypalCommerceRatepayPaymentStrategy from './paypal-commerce-ratepay-payment-strategy';\n\nconst createPaypalCommerceRatepayPaymentStrategy: PaymentStrategyFactory<\n    PaypalCommerceRatepayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PaypalCommerceRatepayPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: { ...LOADING_INDICATOR_STYLES, position: 'fixed' },\n        }),\n    );\n\nexport default toResolvableModule(createPaypalCommerceRatepayPaymentStrategy, [\n    { gateway: 'paypalcommercealternativemethods', id: 'ratepay' },\n]);\n","import { omitBy } from 'lodash';\n\nimport { FastlaneStylesSettings, PayPalFastlaneStylesOption } from '../index';\n\nfunction isInvalidStyleOption(styleOption: unknown) {\n    return typeof styleOption !== 'string';\n}\n\nexport default function getFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n) {\n    if (!uiStyles && !styleSettings) {\n        return undefined;\n    }\n\n    return cleanUpFastlaneStyles(mergeFastlaneStyles(styleSettings, uiStyles));\n}\n\nfunction mergeFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n): PayPalFastlaneStylesOption {\n    return {\n        root: {\n            backgroundColorPrimary:\n                styleSettings?.fastlaneRootSettingsBackgroundColor ||\n                uiStyles?.root?.backgroundColorPrimary,\n            errorColor: styleSettings?.fastlaneRootSettingsErrorColor || uiStyles?.root?.errorColor,\n            fontFamily: styleSettings?.fastlaneRootSettingsFontFamily || uiStyles?.root?.fontFamily,\n            fontSizeBase:\n                styleSettings?.fastlaneRootSettingsFontSize || uiStyles?.root?.fontSizeBase,\n            padding: styleSettings?.fastlaneRootSettingsPadding || uiStyles?.root?.padding,\n            primaryColor:\n                styleSettings?.fastlaneRootSettingsPrimaryColor || uiStyles?.root?.primaryColor,\n        },\n        input: {\n            borderRadius:\n                styleSettings?.fastlaneInputSettingsBorderRadius || uiStyles?.input?.borderRadius,\n            borderColor:\n                styleSettings?.fastlaneInputSettingsBorderColor || uiStyles?.input?.borderColor,\n            focusBorderColor:\n                styleSettings?.fastlaneInputSettingsFocusBorderBase ||\n                uiStyles?.input?.focusBorderColor,\n            backgroundColor:\n                styleSettings?.fastlaneInputSettingsBackgroundColor ||\n                uiStyles?.input?.backgroundColor,\n            borderWidth:\n                styleSettings?.fastlaneInputSettingsBorderWidth || uiStyles?.input?.borderWidth,\n            textColorBase:\n                styleSettings?.fastlaneInputSettingsTextColorBase || uiStyles?.input?.textColorBase,\n        },\n        toggle: {\n            colorPrimary:\n                styleSettings?.fastlaneToggleSettingsColorPrimary || uiStyles?.toggle?.colorPrimary,\n            colorSecondary:\n                styleSettings?.fastlaneToggleSettingsColorSecondary ||\n                uiStyles?.toggle?.colorSecondary,\n        },\n        text: {\n            body: {\n                color: styleSettings?.fastlaneTextBodySettingsColor || uiStyles?.text?.body?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextBodySettingsFontSize ||\n                    uiStyles?.text?.body?.fontSize,\n            },\n            caption: {\n                color:\n                    styleSettings?.fastlaneTextCaptionSettingsColor ||\n                    uiStyles?.text?.caption?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextCaptionSettingsFontSize ||\n                    uiStyles?.text?.caption?.fontSize,\n            },\n        },\n        branding: styleSettings?.fastlaneBrandingSettings || uiStyles?.branding,\n    };\n}\n\nfunction cleanUpFastlaneStyles(styles: PayPalFastlaneStylesOption) {\n    const fastlaneStyles: PayPalFastlaneStylesOption = {};\n\n    const root = omitBy(styles.root, isInvalidStyleOption);\n    const input = omitBy(styles.input, isInvalidStyleOption);\n    const toggle = omitBy(styles.toggle, isInvalidStyleOption);\n    const textBody = omitBy(styles.text?.body, isInvalidStyleOption);\n    const textCaption = omitBy(styles.text?.caption, isInvalidStyleOption);\n    const branding = styles.branding;\n\n    if (Object.keys(root).length) {\n        fastlaneStyles.root = root;\n    }\n\n    if (Object.keys(input).length) {\n        fastlaneStyles.input = input;\n    }\n\n    if (Object.keys(toggle).length) {\n        fastlaneStyles.toggle = toggle;\n    }\n\n    if (Object.keys(textBody).length) {\n        fastlaneStyles.text = {};\n        fastlaneStyles.text.body = textBody;\n    }\n\n    if (Object.keys(textCaption).length) {\n        fastlaneStyles.text = {\n            ...fastlaneStyles.text,\n        };\n        fastlaneStyles.text.caption = textCaption;\n    }\n\n    if (branding) {\n        fastlaneStyles.branding = branding;\n    }\n\n    return fastlaneStyles;\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n// TODO: update PayPalConnectCustomer with PayPalFastlaneCustomer\nexport default function isPayPalFastlaneCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    CardInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getFastlaneStyles,\n    isPayPalFastlaneCustomer,\n    isPaypalFastlaneRequestError,\n    PayPalCommerceFastlaneUtils,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneCardComponentMethods,\n    PayPalFastlaneCardComponentOptions,\n    PayPalFastlanePaymentFormattedPayload,\n    PayPalFastlaneSdk,\n    TDSecureAuthenticationState,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport PayPalCommerceRequestSender from '../paypal-commerce-request-sender';\nimport { LiabilityShiftEnum } from '../paypal-commerce-types';\n\nimport PayPalCommerceFastlanePaymentInitializeOptions, {\n    WithPayPalCommerceFastlanePaymentInitializeOptions,\n} from './paypal-commerce-fastlane-payment-initialize-options';\n\nexport default class PaypalCommerceFastlanePaymentStrategy implements PaymentStrategy {\n    private paypalComponentMethods?: PayPalFastlaneCardComponentMethods;\n    private paypalFastlaneSdk?: PayPalFastlaneSdk;\n    private threeDSVerificationMethod?: string;\n    private paypalcommercefastlane?: PayPalCommerceFastlanePaymentInitializeOptions;\n    private orderId?: string;\n    private methodId?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private paypalCommerceFastlaneUtils: PayPalCommerceFastlaneUtils,\n    ) {}\n\n    /**\n     *\n     * Default methods\n     *\n     * */\n    async initialize(\n        options: PaymentInitializeOptions & WithPayPalCommerceFastlanePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommercefastlane } = options;\n        this.methodId = methodId;\n\n        this.paypalcommercefastlane = paypalcommercefastlane;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercefastlane) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercefastlane\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercefastlane.onInit || typeof paypalcommercefastlane.onInit !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercefastlane.onInit\" argument is not provided or it is not a function.',\n            );\n        }\n\n        if (\n            !paypalcommercefastlane.onChange ||\n            typeof paypalcommercefastlane.onChange !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercefastlane.onChange\" argument is not provided or it is not a function.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isDeveloperModeApplicable, isFastlaneStylingEnabled } =\n            paymentMethod.initializationData || {};\n\n        this.threeDSVerificationMethod =\n            paymentMethod.initializationData?.threeDSVerificationMethod;\n\n        this.paypalFastlaneSdk = await this.paypalCommerceSdk.getPayPalFastlaneSdk(\n            paymentMethod,\n            cart.currency.code,\n            cart.id,\n        );\n\n        const paypalFastlaneStyling = isFastlaneStylingEnabled\n            ? paymentMethod?.initializationData?.fastlaneStyles\n            : {};\n\n        const fastlaneStyles = getFastlaneStyles(\n            paypalFastlaneStyling,\n            paypalcommercefastlane?.styles,\n        );\n\n        await this.paypalCommerceFastlaneUtils.initializePayPalFastlane(\n            this.paypalFastlaneSdk,\n            !!isDeveloperModeApplicable,\n            fastlaneStyles,\n        );\n\n        if (this.shouldRunAuthenticationFlow()) {\n            await this.runPayPalAuthenticationFlowOrThrow(methodId);\n        }\n\n        await this.initializePayPalPaymentComponent();\n\n        paypalcommercefastlane.onInit((container: string) =>\n            this.renderPayPalPaymentComponent(container),\n        );\n        paypalcommercefastlane.onChange(() => this.handlePayPalStoredInstrumentChange(methodId));\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { paymentData, methodId } = payment;\n\n        const isVaultedFlow = paymentData && isVaultedInstrument(paymentData);\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n\n            const paymentPayload = isVaultedFlow\n                ? await this.prepareVaultedInstrumentPaymentPayload(methodId, paymentData)\n                : await this.preparePaymentPayload(methodId, paymentData);\n\n            await this.paymentIntegrationService.submitPayment<PayPalFastlanePaymentFormattedPayload>(\n                paymentPayload,\n            );\n\n            this.paypalCommerceFastlaneUtils.removeStorageSessionId();\n        } catch (error) {\n            if (\n                isPaypalFastlaneRequestError(error) &&\n                error.response.body.name === 'INVALID_REQUEST'\n            ) {\n                const invalidRequestError = {\n                    translationKey: 'payment.errors.invalid_request_error',\n                };\n\n                this.handleError(invalidRequestError);\n\n                return Promise.reject();\n            }\n\n            if (error instanceof Error && error.name !== 'FastlaneError') {\n                throw error;\n            }\n\n            return Promise.reject();\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    private shouldRunAuthenticationFlow(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const customer = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n            ? paymentProviderCustomer\n            : {};\n\n        const paypalFastlaneSessionId = this.paypalCommerceFastlaneUtils.getStorageSessionId();\n\n        if (\n            !customer.isGuest ||\n            paypalFastlaneCustomer?.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED\n        ) {\n            return false;\n        }\n\n        return !paypalFastlaneCustomer?.authenticationState && paypalFastlaneSessionId === cart.id;\n    }\n\n    private async runPayPalAuthenticationFlowOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const customer = state.getCustomer();\n            const billingAddress = state.getBillingAddress();\n            const customerEmail = customer?.email || billingAddress?.email || '';\n\n            const { customerContextId } =\n                await this.paypalCommerceFastlaneUtils.lookupCustomerOrThrow(customerEmail);\n\n            const authenticationResult =\n                await this.paypalCommerceFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                    customerContextId,\n                );\n\n            const { authenticationState, addresses, instruments } =\n                this.paypalCommerceFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                    methodId,\n                    authenticationResult,\n                );\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                authenticationState,\n                addresses,\n                instruments,\n            });\n\n            const isAuthenticationFlowCanceled =\n                authenticationResult.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED;\n\n            if (isAuthenticationFlowCanceled) {\n                this.paypalCommerceFastlaneUtils.removeStorageSessionId();\n            } else {\n                this.paypalCommerceFastlaneUtils.updateStorageSessionId(cart.id);\n            }\n        } catch (error) {\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n    }\n\n    /**\n     *\n     * PayPal Fastlane Card Component rendering method\n     *\n     */\n    private async initializePayPalPaymentComponent(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const phone = billingAddress.phone;\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const paypalFastlane = this.paypalCommerceFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const cardComponentOptions: PayPalFastlaneCardComponentOptions = {\n            fields: {\n                cardholderName: {\n                    prefill: fullName,\n                    enabled: true,\n                },\n                ...(phone && {\n                    phoneNumber: {\n                        prefill: phone,\n                    },\n                }),\n            },\n        };\n\n        this.paypalComponentMethods = await paypalFastlane.FastlaneCardComponent(\n            cardComponentOptions,\n        );\n    }\n\n    private renderPayPalPaymentComponent(container?: string): void {\n        const paypalComponentMethods = this.getPayPalComponentMethodsOrThrow();\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render card component because \"container\" argument is not provided.',\n            );\n        }\n\n        paypalComponentMethods.render(container);\n    }\n\n    private getPayPalComponentMethodsOrThrow(): PayPalFastlaneCardComponentMethods {\n        if (!this.paypalComponentMethods) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalComponentMethods;\n    }\n\n    /**\n     *\n     * Payment Payload preparation methods\n     *\n     */\n    private async prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paymentData: VaultedInstrument,\n    ): Promise<Payment<PayPalFastlanePaymentFormattedPayload>> {\n        const { instrumentId } = paymentData;\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const is3DSEnabled =\n            this.isPaypalCommerceFastlaneThreeDSAvailable() && paymentMethod.config.is3dsEnabled;\n\n        if (!is3DSEnabled) {\n            await this.createOrder(instrumentId);\n        }\n\n        const fastlaneToken = is3DSEnabled ? await this.get3DSNonce(instrumentId) : instrumentId;\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: this.orderId,\n                        token: fastlaneToken,\n                    },\n                },\n            },\n        };\n    }\n\n    private async preparePaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Promise<Payment<PayPalFastlanePaymentFormattedPayload>> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const { getPaymentToken } = this.getPayPalComponentMethodsOrThrow();\n\n        const { id } = await getPaymentToken({\n            name: { fullName },\n            billingAddress: this.paypalCommerceFastlaneUtils.mapBcToPayPalAddress(billingAddress),\n        });\n\n        const is3DSEnabled =\n            this.isPaypalCommerceFastlaneThreeDSAvailable() && paymentMethod.config.is3dsEnabled;\n\n        if (!is3DSEnabled) {\n            await this.createOrder(id);\n        }\n\n        const fastlaneToken = is3DSEnabled ? await this.get3DSNonce(id) : id;\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        return {\n            methodId,\n            paymentData: {\n                ...paymentData,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: this.orderId,\n                        token: fastlaneToken,\n                    },\n                },\n            },\n        };\n    }\n\n    private async createOrder(id: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        if (this.methodId) {\n            const { orderId } = await this.paypalCommerceRequestSender.createOrder(this.methodId, {\n                cartId,\n                fastlaneToken: id,\n            });\n\n            this.orderId = orderId;\n        }\n    }\n\n    /**\n     *\n     * 3DSecure methods\n     *\n     * */\n    private async get3DSNonce(paypalNonce: string): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const order = state.getOrderOrThrow();\n        const checkoutUrl = state.getStoreConfigOrThrow().links.checkoutLink;\n\n        const threeDomainSecureComponent = this.paypalFastlaneSdk?.ThreeDomainSecureClient;\n\n        if (!threeDomainSecureComponent) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const threeDomainSecureParameters = {\n            amount: order.orderAmount.toFixed(2),\n            currency: cart.currency.code,\n            nonce: paypalNonce,\n            threeDSRequested: this.threeDSVerificationMethod === 'SCA_ALWAYS',\n            transactionContext: {\n                experience_context: {\n                    locale: 'en-US',\n                    return_url: checkoutUrl,\n                    cancel_url: checkoutUrl,\n                },\n            },\n        };\n\n        const isThreeDomainSecureEligible = await threeDomainSecureComponent.isEligible(\n            threeDomainSecureParameters,\n        );\n\n        if (isThreeDomainSecureEligible) {\n            const { liabilityShift, authenticationState, nonce } =\n                await threeDomainSecureComponent.show();\n\n            if (\n                liabilityShift === LiabilityShiftEnum.No ||\n                liabilityShift === LiabilityShiftEnum.Unknown\n            ) {\n                throw new PaymentMethodInvalidError();\n            }\n\n            await this.createOrder(paypalNonce);\n\n            if (authenticationState === TDSecureAuthenticationState.Succeeded) {\n                return nonce;\n            }\n\n            // Cancelled or errored, merchant can choose to send the customer back to 3D Secure or submit a payment and or vault the payment token.\n            if (authenticationState === TDSecureAuthenticationState.Errored) {\n                throw new PaymentMethodInvalidError();\n            }\n\n            if (authenticationState === TDSecureAuthenticationState.Cancelled) {\n                console.error('3DS check was canceled');\n                throw new PaymentMethodInvalidError();\n            }\n        }\n\n        return paypalNonce;\n    }\n\n    /**\n     *\n     * PayPal Fastlane instrument change\n     *\n     */\n    private async handlePayPalStoredInstrumentChange(\n        methodId: string,\n    ): Promise<CardInstrument | undefined> {\n        const paypalAxoSdk = this.paypalCommerceFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const { selectionChanged, selectedCard } = await paypalAxoSdk.profile.showCardSelector();\n\n        if (selectionChanged) {\n            const state = this.paymentIntegrationService.getState();\n            const paymentProviderCustomer = state.getPaymentProviderCustomer();\n            const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n                ? paymentProviderCustomer\n                : {};\n\n            const selectedInstrument = this.paypalCommerceFastlaneUtils.mapPayPalToBcInstrument(\n                methodId,\n                selectedCard,\n            )[0];\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                ...paypalFastlaneCustomer,\n                instruments: [selectedInstrument],\n            });\n\n            return selectedInstrument;\n        }\n\n        return undefined;\n    }\n\n    /**\n     *\n     * PayPal Fastlane experiments handling\n     *\n     */\n    private isPaypalCommerceFastlaneThreeDSAvailable(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        return isExperimentEnabled(features, 'PROJECT-7080.paypalcommerce_fastlane_three_ds');\n    }\n\n    private handleError(error: unknown): void {\n        if (\n            this.paypalcommercefastlane?.onError &&\n            typeof this.paypalcommercefastlane.onError === 'function'\n        ) {\n            this.paypalcommercefastlane.onError(error);\n        }\n    }\n}\n","export interface PaypalFastlaneRequestError {\n    name: string;\n    message: string;\n    response: {\n        body: {\n            name: string;\n        };\n    };\n}\n\nexport default function isPaypalFastlaneRequestError(\n    error: unknown,\n): error is PaypalFastlaneRequestError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'message' in error &&\n        'response' in error &&\n        'body' in (error as PaypalFastlaneRequestError).response &&\n        'name' in (error as PaypalFastlaneRequestError).response.body\n    );\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    createPayPalCommerceFastlaneUtils,\n    createPayPalCommerceSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceRequestSender from '../paypal-commerce-request-sender';\n\nimport PayPalCommerceFastlanePaymentStrategy from './paypal-commerce-fastlane-payment-strategy';\n\nconst createPayPalCommerceFastlanePaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceFastlanePaymentStrategy\n> = (paymentIntegrationService) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceFastlanePaymentStrategy(\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        createPayPalCommerceSdk(),\n        createPayPalCommerceFastlaneUtils(),\n    );\n};\n\nexport default toResolvableModule(createPayPalCommerceFastlanePaymentStrategy, [\n    { id: 'paypalcommerceacceleratedcheckout' }, // PayPal Fastlane relates to 'paypalcommerceacceleratedcheckout' method id\n]);\n","import { CardinalThreeDSecureFlow } from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class PaypalProPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        protected paymentIntegrationService: PaymentIntegrationService,\n        private threeDSecureFlow: CardinalThreeDSecureFlow,\n    ) {\n        super(paymentIntegrationService);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await super.initialize(options);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this.threeDSecureFlow.prepare(paymentMethod);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment: { methodId = '' } = {} } = payload;\n\n        const state = this.paymentIntegrationService.getState();\n\n        if (state.getPaymentStatus() === PaymentStatusTypes.ACKNOWLEDGE) {\n            await this.paymentIntegrationService.submitOrder(\n                {\n                    ...payload,\n                    payment: { methodId },\n                },\n                options,\n            );\n\n            return Promise.resolve();\n        }\n\n        if (state.getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this.threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PaypalProPaymentStrategy from './paypal-pro-payment-strategy';\n\nconst createPayPalProPaymentStrategy: CheckoutButtonStrategyFactory<PaypalProPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new PaypalProPaymentStrategy(\n        paymentIntegrationService,\n        new CardinalThreeDSecureFlow(\n            paymentIntegrationService,\n            new CardinalClient(new CardinalScriptLoader(getScriptLoader())),\n        ),\n    );\n\nexport default toResolvableModule(createPayPalProPaymentStrategy, [{ id: 'paypal' }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    getBrowserInfo,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class SagePayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private _formPoster: FormPoster,\n    ) {\n        super(paymentIntegrationService);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment } = payload;\n\n        if (!payment) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { paymentData } = payment;\n\n        if (!paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (this._isThreeDSTwoExperimentOn()) {\n            const newPaymentData = {\n                ...paymentData,\n                browser_info: getBrowserInfo(),\n            };\n\n            if (payload.payment) {\n                payload.payment.paymentData = newPaymentData;\n            }\n        }\n\n        return super.execute(payload, options).catch((error: Error) => {\n            if (\n                !isRequestError(error) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                return Promise.reject(error);\n            }\n\n            return new Promise(() => {\n                let payload;\n\n                if (this._isThreeDSTwoExperimentOn() && !error.body.three_ds_result.merchant_data) {\n                    payload = {\n                        creq: error.body.three_ds_result.payer_auth_request,\n                    };\n                } else {\n                    payload = {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    };\n                }\n\n                this._formPoster.postForm(\n                    error.body.three_ds_result.acs_url,\n                    payload,\n                    undefined,\n                    '_top',\n                );\n            });\n        });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const order = state.getOrder();\n\n        if (order && state.getPaymentStatus() === PaymentStatusTypes.FINALIZE) {\n            this.paymentIntegrationService.finalizeOrder(options);\n        }\n\n        return super.finalize();\n    }\n\n    private _isThreeDSTwoExperimentOn(): boolean {\n        return (\n            this.paymentIntegrationService.getState().getStoreConfigOrThrow().checkoutSettings\n                .features['INT-4994.Opayo_3DS2'] === true\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport SagePayPaymentStrategy from './sage-pay-payment-strategy';\n\nconst createSagePayPaymentStrategy: PaymentStrategyFactory<SagePayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new SagePayPaymentStrategy(paymentIntegrationService, createFormPoster());\n};\n\nexport default toResolvableModule(createSagePayPaymentStrategy, [{ id: 'sagepay' }]);\n","import { ExternalPaymentStrategy } from '@bigcommerce/checkout-sdk/external-integration';\n\nexport default class SezzlePaymentStrategy extends ExternalPaymentStrategy {\n    protected redirectUrl(url: string): void {\n        window.location.replace(url);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport SezzlePaymentStrategy from './sezzle-payment-strategy';\n\nconst createSezzlePaymentStrategy: PaymentStrategyFactory<SezzlePaymentStrategy> = (\n    paymentIntegrationService,\n) => new SezzlePaymentStrategy(createFormPoster(), paymentIntegrationService);\n\nexport default toResolvableModule(createSezzlePaymentStrategy, [{ id: 'sezzle' }]);\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs/operators\");","export enum SquareIntent {\n    CHARGE = 'CHARGE',\n    STORE = 'STORE',\n}\n","import { fromEvent, merge, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport {\n    BillingAddress,\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentExecuteError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { SquareIntent } from './enums';\nimport SquareV2PaymentInitializeOptions from './squarev2-payment-initialize-options';\nimport SquareV2ScriptLoader from './squarev2-script-loader';\nimport {\n    BillingContact,\n    Card,\n    CardInputEvent,\n    CardInputEventTypes,\n    ChargeVerifyBuyerDetails,\n    Payments,\n    SqEvent,\n    StoreVerifyBuyerDetails,\n} from './types';\n\nexport interface SquareV2PaymentProcessorOptions {\n    applicationId: string;\n    locationId?: string;\n    testMode?: boolean;\n}\n\nexport default class SquareV2PaymentProcessor {\n    private _payments?: Payments;\n    private _card?: Card;\n    private _formValidationSubscription?: Subscription;\n\n    constructor(\n        private _scriptLoader: SquareV2ScriptLoader,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async initialize({\n        testMode,\n        applicationId,\n        locationId,\n    }: SquareV2PaymentProcessorOptions): Promise<void> {\n        const square = await this._scriptLoader.load(testMode);\n\n        this._payments = square.payments(applicationId, locationId);\n    }\n\n    async deinitialize(): Promise<void> {\n        if (this._formValidationSubscription) {\n            this._formValidationSubscription.unsubscribe();\n        }\n\n        if (this._card) {\n            await this._card.destroy();\n        }\n\n        this._formValidationSubscription = undefined;\n        this._card = undefined;\n        this._payments = undefined;\n    }\n\n    async initializeCard({\n        containerId,\n        style,\n        onValidationChange,\n    }: SquareV2PaymentInitializeOptions): Promise<void> {\n        const { postalCode } = this._paymentIntegrationService.getState().getBillingAddress() || {};\n\n        this._card = await this._getPayments().card();\n        await this._card.attach(`#${containerId}`);\n\n        try {\n            await this._card.configure({ postalCode, style });\n        } catch (_error) {\n            /* Do nothing: we should not block shoppers from buying. */\n        }\n\n        if (onValidationChange) {\n            this._formValidationSubscription = this._subscribeToFormValidation(\n                this._card,\n                onValidationChange,\n            );\n        }\n    }\n\n    async tokenize(): Promise<string> {\n        const result = await this._getCard().tokenize();\n\n        if (result.status !== 'OK' || !result.token) {\n            let errorMessage = `Tokenization failed with status: ${result.status}`;\n\n            if (result.errors) {\n                errorMessage += ` and errors: ${JSON.stringify(result.errors)}`;\n            }\n\n            throw new PaymentExecuteError(\n                'payment.errors.card_error',\n                'SquareV2TokenizationError',\n                errorMessage,\n            );\n        }\n\n        return result.token;\n    }\n\n    async verifyBuyer(token: string, intent: SquareIntent): Promise<string> {\n        return intent === SquareIntent.CHARGE\n            ? this._chargeVerifyBuyer(token)\n            : this._storeVerifyBuyer(token);\n    }\n\n    private _getPayments(): Payments {\n        return guard(\n            this._payments,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _subscribeToFormValidation(\n        card: Card,\n        observer: Required<SquareV2PaymentInitializeOptions>['onValidationChange'],\n    ): Subscription {\n        const blacklist = ['cardNumber', 'cvv'];\n        const invalidFields = new Set<string>(blacklist);\n        const eventObservables = [\n            'focusClassAdded',\n            'focusClassRemoved',\n            'errorClassAdded',\n            'errorClassRemoved',\n            'cardBrandChanged',\n            'postalCodeChanged',\n        ].map((eventType) => fromEvent(card, eventType as CardInputEventTypes));\n\n        return merge(...eventObservables)\n            .pipe(\n                map((event: SqEvent<CardInputEvent>): boolean => {\n                    const {\n                        detail: {\n                            field,\n                            currentState: { isCompletelyValid },\n                        },\n                    } = event;\n\n                    if (blacklist.includes(field)) {\n                        invalidFields[isCompletelyValid ? 'delete' : 'add'](field);\n                    }\n\n                    return invalidFields.size === 0;\n                }),\n                distinctUntilChanged(),\n            )\n            .subscribe(observer);\n    }\n\n    private _getCard(): Card {\n        return guard(\n            this._card,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _mapToSquareBillingContact({\n        firstName: givenName,\n        lastName: familyName,\n        address1,\n        address2,\n        city,\n        stateOrProvinceCode: state,\n        postalCode,\n        countryCode,\n        email,\n        phone,\n    }: BillingAddress): BillingContact {\n        return {\n            givenName,\n            familyName,\n            addressLines: [address1, address2],\n            city,\n            state,\n            postalCode,\n            countryCode,\n            email,\n            phone,\n        };\n    }\n\n    private async _chargeVerifyBuyer(token: string): Promise<string> {\n        const { getCheckoutOrThrow, getBillingAddressOrThrow } =\n            this._paymentIntegrationService.getState();\n        const { outstandingBalance, cart } = getCheckoutOrThrow();\n\n        const details: ChargeVerifyBuyerDetails = {\n            amount: outstandingBalance.toString(),\n            billingContact: this._mapToSquareBillingContact(getBillingAddressOrThrow()),\n            currencyCode: cart.currency.code,\n            intent: SquareIntent.CHARGE,\n        };\n\n        const response = await this._getPayments().verifyBuyer(token, details);\n\n        return response ? response.token : '';\n    }\n\n    private async _storeVerifyBuyer(token: string): Promise<string> {\n        const { getBillingAddressOrThrow } = this._paymentIntegrationService.getState();\n\n        const details: StoreVerifyBuyerDetails = {\n            billingContact: this._mapToSquareBillingContact(getBillingAddressOrThrow()),\n            intent: SquareIntent.STORE,\n        };\n\n        const response = await this._getPayments().verifyBuyer(token, details);\n\n        return response ? response.token : '';\n    }\n}\n","import {\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { SquareIntent } from './enums';\nimport { WithSquareV2PaymentInitializeOptions } from './squarev2-payment-initialize-options';\nimport SquareV2PaymentProcessor from './squarev2-payment-processor';\nimport {\n    SquareCreditCardTokens,\n    SquareFormattedVaultedInstrument,\n    SquareInitializationData,\n    SquarePaymentMethodInitializationData,\n} from './types';\n\nexport default class SquareV2PaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _squareV2PaymentProcessor: SquareV2PaymentProcessor,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithSquareV2PaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.squarev2?.containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        const { methodId, squarev2 } = options;\n        const {\n            config: { testMode },\n            initializationData,\n        } = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<SquarePaymentMethodInitializationData>(methodId);\n        const { applicationId, locationId } = initializationData || {};\n\n        if (!applicationId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this._squareV2PaymentProcessor.initialize({\n            applicationId,\n            locationId,\n            testMode,\n        });\n        await this._squareV2PaymentProcessor.initializeCard(squarev2);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, paymentData } = payment;\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        await this._paymentIntegrationService.submitOrder();\n\n        const submitPaymentPayload =\n            paymentData && isVaultedInstrument(paymentData)\n                ? await this._getVaultedInstrumentPayload(methodId, paymentData)\n                : await this._getCardPayload(methodId, shouldSaveInstrument);\n\n        await this._paymentIntegrationService.submitPayment({\n            ...payment,\n            paymentData: {\n                formattedPayload: {\n                    ...submitPaymentPayload,\n                    vault_payment_instrument: shouldSaveInstrument || false,\n                    set_as_default_stored_instrument: shouldSetAsDefaultInstrument || false,\n                },\n            },\n        });\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return this._squareV2PaymentProcessor.deinitialize();\n    }\n\n    private shouldVerify(): boolean {\n        const { features } = this._paymentIntegrationService\n            .getState()\n            .getStoreConfigOrThrow().checkoutSettings;\n\n        return features['PROJECT-3828.add_3ds_support_on_squarev2'];\n    }\n\n    private async _getCardPayload(methodId: string, shouldSaveInstrument?: boolean) {\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const { initializationData } = getPaymentMethodOrThrow<SquareInitializationData>(methodId);\n\n        const cardTokenizationResult = await this._squareV2PaymentProcessor.tokenize();\n\n        if (\n            initializationData && 'isSquareV2ApiV2Enabled' in initializationData\n                ? !initializationData.isSquareV2ApiV2Enabled\n                : !this.shouldVerify()\n        ) {\n            return {\n                credit_card_token: {\n                    token: cardTokenizationResult,\n                },\n            };\n        }\n\n        let tokenData: SquareCreditCardTokens = {\n            nonce: cardTokenizationResult,\n            token: await this._squareV2PaymentProcessor.verifyBuyer(\n                cardTokenizationResult,\n                SquareIntent.CHARGE,\n            ),\n        };\n\n        if (shouldSaveInstrument) {\n            // INFO: additional 'tokenize' is required to verify and save the card\n            // for each 'verifyBuyer' we need to generate new token\n            const tokenForSavingCard = await this._squareV2PaymentProcessor.tokenize();\n\n            tokenData = {\n                ...tokenData,\n                store_card_nonce: tokenForSavingCard,\n                store_card_token: await this._squareV2PaymentProcessor.verifyBuyer(\n                    tokenForSavingCard,\n                    SquareIntent.STORE,\n                ),\n            };\n        }\n\n        return {\n            credit_card_token: {\n                token: JSON.stringify(tokenData),\n            },\n        };\n    }\n\n    private async _getVaultedInstrumentPayload(\n        methodId: string,\n        paymentData: VaultedInstrument,\n    ): Promise<SquareFormattedVaultedInstrument> {\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const { initializationData } = getPaymentMethodOrThrow<SquareInitializationData>(methodId);\n\n        const { instrumentId } = paymentData;\n        const shouldVerify =\n            initializationData && 'isSquareV2ApiV2Enabled' in initializationData\n                ? initializationData.isSquareV2ApiV2Enabled\n                : this.shouldVerify();\n        const verificationToken = shouldVerify\n            ? await this._squareV2PaymentProcessor.verifyBuyer(\n                  await this._getSquareCardIdOrThrow(methodId, instrumentId),\n                  SquareIntent.CHARGE,\n              )\n            : undefined;\n\n        return {\n            bigpay_token: {\n                token: instrumentId,\n                ...(verificationToken && { three_d_secure: { token: verificationToken } }),\n            },\n        };\n    }\n\n    private async _getSquareCardIdOrThrow(methodId: string, instrumentId: string): Promise<string> {\n        const state = await this._paymentIntegrationService.loadPaymentMethod(methodId, {\n            params: { method: methodId, bigpayToken: instrumentId },\n        });\n\n        const { initializationData } =\n            state.getPaymentMethodOrThrow<SquareInitializationData>(methodId);\n        const { cardId } = initializationData || {};\n\n        if (!cardId) {\n            throw new PaymentArgumentInvalidError(['cardId']);\n        }\n\n        return cardId;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport assertSquareV2Window from './is-squarev2-window';\nimport { Square } from './types';\n\nexport enum SquareV2WebPaymentsSdkEnv {\n    LIVE = 'https://web.squarecdn.com/v1/square.js',\n    SANDBOX = 'https://sandbox.web.squarecdn.com/v1/square.js',\n}\n\nexport default class SquareV2ScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    async load(testMode = false): Promise<Square> {\n        await this._scriptLoader.loadScript(\n            testMode ? SquareV2WebPaymentsSdkEnv.SANDBOX : SquareV2WebPaymentsSdkEnv.LIVE,\n        );\n\n        assertSquareV2Window(window);\n\n        return window.Square;\n    }\n}\n","import { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport type { Square } from './types';\n\ninterface SquareV2HostWindow extends Window {\n    Square: Square;\n}\n\nfunction isSquareV2Window(window: Window): window is SquareV2HostWindow {\n    return 'Square' in window;\n}\n\nexport default function assertSquareV2Window(window: Window): asserts window is SquareV2HostWindow {\n    if (!isSquareV2Window(window)) {\n        throw new PaymentMethodClientUnavailableError();\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategy,\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport SquareV2PaymentProcessor from './squarev2-payment-processor';\nimport SquareV2PaymentStrategy from './squarev2-payment-strategy';\nimport SquareV2ScriptLoader from './squarev2-script-loader';\n\nconst createSquareV2PaymentStrategy: PaymentStrategyFactory<PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new SquareV2PaymentStrategy(\n        paymentIntegrationService,\n        new SquareV2PaymentProcessor(\n            new SquareV2ScriptLoader(getScriptLoader()),\n            paymentIntegrationService,\n        ),\n    );\n};\n\nexport default toResolvableModule(createSquareV2PaymentStrategy, [{ id: 'squarev2' }]);\n","import { IndividualCardElementOptions } from './stripev3';\n\nexport default function isIndividualCardElementOptions(\n    individualCardElementOptions: any,\n): individualCardElementOptions is IndividualCardElementOptions {\n    return (\n        individualCardElementOptions !== null &&\n        typeof individualCardElementOptions === 'object' &&\n        'cardNumberElementOptions' in individualCardElementOptions &&\n        'cardCvcElementOptions' in individualCardElementOptions &&\n        'cardExpiryElementOptions' in individualCardElementOptions &&\n        typeof individualCardElementOptions.cardNumberElementOptions !== 'undefined' &&\n        typeof individualCardElementOptions.cardCvcElementOptions !== 'undefined' &&\n        typeof individualCardElementOptions.cardExpiryElementOptions !== 'undefined'\n    );\n}\n","interface BaseElementOptions {\n    /**\n     * Customize the appearance of an element using CSS properties passed in a [Style](https://stripe.com/docs/js/appendix/style) object,\n     * which consists of CSS properties nested under objects for each variant.\n     */\n    style?: StripeElementStyle;\n\n    /**\n     * Set custom class names on the container DOM element when the Stripe element is in a particular state.\n     */\n    classes?: StripeElementClasses;\n\n    /**\n     * Applies a disabled state to the Element such that user input is not accepted. Default is false.\n     */\n    disabled?: boolean;\n}\n\nexport interface CreatePaymentMethodCardData extends PaymentMethodCreateParams {\n    card?: StripeElement;\n}\n\nexport interface CreatePaymentMethodIdealData extends PaymentMethodCreateParams {\n    ideal?: StripeElement;\n}\n\nexport interface CreatePaymentMethodSepaData extends PaymentMethodCreateParams {\n    sepa_debit?: StripeElement;\n}\n\n/**\n * The PaymentIntent object.\n */\nexport interface PaymentIntent {\n    /**\n     * Unique identifier for the object.\n     */\n    id: string;\n\n    /**\n     * Status of this PaymentIntent. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).\n     */\n    status: 'succeeded' | string;\n\n    /**\n     * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n     */\n    last_payment_error: LastPaymentError | null;\n}\n\n/**\n * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n */\nexport interface LastPaymentError {\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n}\n\n/**\n * The PaymentMethod object\n */\nexport interface PaymentMethod {\n    /**\n     * Unique identifier for the object.\n     */\n    id: string;\n\n    /**\n     * The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value.\n     * It contains additional information specific to the PaymentMethod type.\n     */\n    type: string;\n}\n\nexport interface PaymentMethodCreateParams {\n    /**\n     * Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.\n     */\n    billing_details?: StripeBillingDetails;\n}\n\nexport interface StripeError {\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n\n    /**\n     * The PaymentIntent object.\n     */\n    payment_intent: PaymentIntent;\n\n    /**\n     * A human-readable code for the error obtained\n     */\n    code?: string;\n}\n\n/**\n * CSS properties supported by Stripe.js.\n */\ninterface StripeElementCSSProperties {\n    /**\n     * The [background-color](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color) CSS property.\n     *\n     * This property works best with the `::selection` pseudo-class.\n     * In other cases, consider setting the background color on the element's container instaed.\n     */\n    backgroundColor?: string;\n\n    /**\n     * The [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color) CSS property.\n     */\n    color?: string;\n\n    /**\n     * The [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) CSS property.\n     */\n    fontFamily?: string;\n\n    /**\n     * The [font-size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) CSS property.\n     */\n    fontSize?: string;\n\n    /**\n     * The [font-smoothing](https://developer.mozilla.org/en-US/docs/Web/CSS/font-smoothing) CSS property.\n     */\n    fontSmoothing?: string;\n\n    /**\n     * The [font-style](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style) CSS property.\n     */\n    fontStyle?: string;\n\n    /**\n     * The [font-variant](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant) CSS property.\n     */\n    fontVariant?: string;\n\n    /**\n     * The [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) CSS property.\n     */\n    fontWeight?: string;\n\n    /**\n     * A custom property, used to set the color of the icons that are rendered in an element.\n     */\n    iconColor?: string;\n\n    /**\n     * The [line-height](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height) CSS property.\n     *\n     * To avoid cursors being rendered inconsistently across browsers, consider using a padding on the element's container instead.\n     */\n    lineHeight?: string;\n\n    /**\n     * The [letter-spacing](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing) CSS property.\n     */\n    letterSpacing?: string;\n\n    /**\n     * The [text-align](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) CSS property.\n     *\n     * Available for the `cardNumber`, `cardExpiry`, and `cardCvc` elements.\n     */\n    textAlign?: string;\n\n    /**\n     * The [padding](https://developer.mozilla.org/en-US/docs/Web/CSS/padding) CSS property.\n     *\n     * Available for the `idealBank` element.\n     * Accepts integer `px` values.\n     */\n    padding?: string;\n\n    /**\n     * The [text-decoration](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration) CSS property.\n     */\n    textDecoration?: string;\n\n    /**\n     * The [text-shadow](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow) CSS property.\n     */\n    textShadow?: string;\n\n    /**\n     * The [text-transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) CSS property.\n     */\n    textTransform?: string;\n}\n\ninterface StripeElementStyleVariant extends StripeElementCSSProperties {\n    ':hover'?: StripeElementCSSProperties;\n\n    ':focus'?: StripeElementCSSProperties;\n\n    '::placeholder'?: StripeElementCSSProperties;\n\n    '::selection'?: StripeElementCSSProperties;\n\n    ':-webkit-autofill'?: StripeElementCSSProperties;\n\n    /**\n     * Available for all elements except the `paymentRequestButton` element\n     */\n    ':disabled'?: StripeElementCSSProperties;\n\n    /**\n     * Available for the `cardNumber`, `cardExpiry`, and `cardCvc` elements.\n     */\n    '::-ms-clear'?: StripeElementCSSProperties & { display: string };\n}\n\nexport interface CardElementOptions extends BaseElementOptions {\n    /**\n     * A pre-filled set of values to include in the input (e.g., {postalCode: '94110'}).\n     * Note that sensitive card information (card number, CVC, and expiration date)\n     * cannot be pre-filled\n     */\n    value?: string;\n\n    /**\n     * Hide the postal code field. Default is false. If you are already collecting a\n     * full billing address or postal code elsewhere, set this to true.\n     */\n    hidePostalCode?: boolean;\n\n    /**\n     * Appearance of the icon in the Element.\n     */\n    iconStyle?: IconStyle;\n\n    /*\n     * Hides the icon in the Element, Default is false\n     */\n    hideIcon?: boolean;\n}\n\ninterface BaseIndividualElementOptions extends BaseElementOptions {\n    containerId: string;\n}\n\nexport interface CardNumberElementOptions extends BaseIndividualElementOptions {\n    /*\n     * Placeholder\n     */\n    placeholder?: string;\n\n    showIcon?: boolean;\n    /**\n     * Appearance of the icon in the Element. Either `solid` or `default`\n     */\n    iconStyle?: IconStyle;\n}\n\nexport interface CardExpiryElementOptions extends BaseIndividualElementOptions {\n    /*\n     * Placeholder\n     */\n    placeholder?: string;\n}\n\nexport interface CardCvcElementOptions extends BaseIndividualElementOptions {\n    /*\n     * Placeholder\n     */\n    placeholder?: string;\n}\n\nexport interface IbanElementOptions extends BaseElementOptions {\n    /**\n     * Specify the list of countries or country-groups whose IBANs you want to allow.\n     * Must be ['SEPA'].\n     */\n    supportedCountries?: string[];\n\n    /**\n     * Customize the country and format of the placeholder IBAN. Default is DE.\n     */\n    placeholderCountry?: string;\n\n    /**\n     * Appearance of the icon in the Element.\n     */\n    iconStyle?: IconStyle;\n}\n\nexport interface IdealElementOptions extends BaseElementOptions {\n    value?: string;\n\n    /**\n     * Hides the icon in the Element. Default is false.\n     */\n    hideIcon?: boolean;\n}\n\nexport interface ZipCodeElementOptions {\n    containerId: string;\n}\n\nexport enum IconStyle {\n    Solid = 'solid',\n    Default = 'default',\n}\n\nexport interface StripeElementStyle {\n    /**\n     * Base variant—all other variants inherit from these styles.\n     */\n    base?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has valid input.\n     */\n    complete?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has no customer input.\n     */\n    empty?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has invalid input.\n     */\n    invalid?: StripeElementStyleVariant;\n}\n\nexport interface StripeElementClasses {\n    /**\n     * The base class applied to the container. Defaults to StripeElement.\n     */\n    base?: string;\n\n    /**\n     * The class name to apply when the Element is complete. Defaults to StripeElement--complete.\n     */\n    complete?: string;\n\n    /**\n     * The class name to apply when the Element is empty. Defaults to StripeElement--empty.\n     */\n    empty?: string;\n\n    /**\n     * The class name to apply when the Element is focused. Defaults to StripeElement--focus.\n     */\n    focus?: string;\n\n    /**\n     * The class name to apply when the Element is invalid. Defaults to StripeElement--invalid.\n     */\n    invalid?: string;\n\n    /**\n     * The class name to apply when the Element has its value autofilled by the browser\n     * (only on Chrome and Safari). Defaults to StripeElement--webkit-autofill.\n     */\n    webkitAutoFill?: string;\n}\n\nexport interface StripeAddress {\n    /**\n     * City, district, suburb, town, or village.\n     */\n    city?: string;\n\n    /**\n     * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n     */\n    country?: string;\n\n    /**\n     * Address line 1 (e.g., street, PO Box, or company name).\n     */\n    line1: string;\n\n    /**\n     * Address line 2 (e.g., apartment, suite, unit, or building).\n     */\n    line2?: string;\n\n    /**\n     * ZIP or postal code.\n     */\n    postal_code?: string;\n\n    /**\n     * State, county, province, or region.\n     */\n    state?: string;\n}\n\nexport interface StripeBillingDetails {\n    /**\n     * Billing address.\n     */\n    address?: StripeAddress;\n\n    /**\n     * Email address.\n     */\n    email?: string;\n\n    /**\n     * Full name.\n     */\n    name?: string;\n\n    /**\n     * Billing phone number (including extension).\n     */\n    phone?: string;\n}\n\nexport interface StripeShippingAddress {\n    /**\n     * Shipping Address\n     */\n    address: StripeAddress;\n\n    /**\n     * Recipient name\n     */\n    name: string;\n\n    /**\n     * The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.\n     */\n    carrier?: string;\n\n    /**\n     * Recipient phone (including extension).\n     */\n    phone?: string;\n\n    /**\n     * The tracking number for a physical product, obtained from the delivery service.\n     * If multiple tracking numbers were generated for this purchase, please separate them with commas.\n     */\n    tracking_number?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmAlipayPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmAlipayPaymentData {\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmCardPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmCardPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodCardData;\n\n    /*\n     * The [shipping details](https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n     *\n     * @recommended\n     */\n    shipping?: StripeShippingAddress;\n\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n\n    /**\n     * Indicates that you intend to make future payments with this PaymentIntent's payment method.\n     *\n     * If present, the payment method used with this PaymentIntent can be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer, even after the transaction completes.\n     *\n     * Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow.\n     */\n    setup_future_usage?: 'off_session' | 'on_session' | null;\n}\n\n/**\n * Data to be sent with a `stripe.confirmIdealPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmIdealPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodIdealData;\n\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmSEPAPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmSepaPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodSepaData;\n}\n\nexport type StripeConfirmPaymentData =\n    | StripeConfirmAlipayPaymentData\n    | StripeConfirmCardPaymentData\n    | StripeConfirmIdealPaymentData\n    | StripeConfirmSepaPaymentData\n    | undefined;\n\nexport type StripeElementOptions =\n    | CardElementOptions\n    | CardExpiryElementOptions\n    | CardNumberElementOptions\n    | CardCvcElementOptions\n    | IdealElementOptions\n    | IbanElementOptions\n    | ZipCodeElementOptions;\n\nexport interface StripeElement {\n    /**\n     * The `element.mount` method attaches your element to the DOM.\n     */\n    mount(domElement: string | HTMLElement): void;\n\n    /**\n     * Removes the element from the DOM and destroys it.\n     * A destroyed element can not be re-activated or re-mounted to the DOM.\n     */\n    destroy(): void;\n\n    /**\n     * Unmounts the element from the DOM.\n     * Call `element.mount` to re-attach it to the DOM.\n     */\n    unmount(): void;\n}\n\nexport interface StripeElements {\n    /**\n     * Creates a `AlipayElement` | `CardElement` | `CardCvcElement` |`CardExpiryElement` | `CardExpiryElement` | `CardNumberElement` | `IdealBankElement` | `IbanElement`.\n     */\n    create(elementType: StripeElementType, options?: StripeElementOptions): StripeElement;\n\n    /**\n     * Looks up a previously created `Element` by its type.\n     */\n    getElement(elementType: StripeElementType): StripeElement | null;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CssFontSource {\n    /**\n     * A relative or absolute URL pointing to a CSS file with [@font-face](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face) definitions, for example:\n     * `https://fonts.googleapis.com/css?family=Open+Sans`\n     * Note that if you are using a [content security policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) (CSP),\n     * [additional directives](https://stripe.com/docs/security#content-security-policy) may be necessary.\n     */\n    cssSrc: string;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CustomFontSource {\n    /**\n     * The name to give the font.\n     */\n    family: string;\n\n    /**\n     * A valid [src](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src) value pointing to your\n     * custom font file. This is usually (though not always) a link to a file with a .woff , .otf, or .svg suffix.\n     */\n    src: string;\n\n    /**\n     * A valid [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) value.\n     */\n    display?: string;\n\n    /**\n     * One of normal, italic, oblique. Defaults to normal.\n     */\n    style?: string;\n\n    /**\n     * A valid [unicode-range](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/unicode-range) value.\n     */\n    unicodeRange?: string;\n\n    /**\n     * A valid [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight). Note that this is a string, not a number.\n     */\n    weight?: string;\n}\n\nexport type CustomFont = CssFontSource | CustomFontSource;\n\nexport interface StripeElementsOptions {\n    /**\n     * An array of custom fonts, which elements created from the Elements object can use.\n     * Fonts can be specified as [CssFontSource](https://stripe.com/docs/js/appendix/css_font_source_object)\n     * or [CustomFontSource](https://stripe.com/docs/js/appendix/custom_font_source_object) objects.\n     */\n    fonts?: CustomFont[];\n\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n}\n\nexport interface StripeConfirmPaymentOptions {\n    /**\n     * Set this to false if you want to [manually handle the authorization redirect](https://stripe.com/docs/payments/ideal#handle-redirect). Default is true.\n     */\n    handleActions?: boolean;\n}\n\nexport interface StripeV3Client {\n    /**\n     * Create an `Elements` instance, which manages a group of elements.\n     */\n    elements(options?: StripeElementsOptions): StripeElements;\n\n    /*\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_alipay_payment\n     *\n     * Use `stripe.confirmAlipayPayment` in the Alipay payment method creation flow when the customer submits your payment form.\n     * When called, it will confirm the [PaymentIntent](https://stripe.com/docs/api/payment_intents) with data you provide, and it will automatically\n     * redirect the customer to the authorize the transaction. Once authorization is complete, the customer will be redirected\n     * back to your specified `return_url`. When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * If you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\n     * These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * `stripe.confirmAlipayPayment` by default, will trigger a redirect when successful. If there is an error, or when handling\n     * `next_actions` manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result` object.\n     * This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that `stripe.confirmAlipayPayment` may take several seconds to complete. During that time, you should disable your\n     * form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should\n     * be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     */\n    confirmAlipayPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmAlipayPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_card_payment\n     *\n     * Use `stripe.confirmCardPayment` when the customer submits your payment form.\n     * When called, it will confirm the [PaymentIntent](https://stripe.com/docs/api/payment_intents)\n     * with `data` you provide and carry out 3DS or other next actions if they are required.\n     *\n     * If you are using [Dynamic 3D Secure](https://stripe.com/docs/payments/3d-secure#three-ds-radar), `stripe.confirmCardPayment` will\n     * trigger your Radar rules to execute and may open a dialog for your customer to authenticate their payment.\n     *\n     * When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * It can also be called with an existing `PaymentMethod`, or if you have already attached a PaymentMethod you can call this\n     * method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * `stripe.confirmCardPayment` will return a Promise which resolves with a result object.\n     * This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that stripe.confirmCardPayment may take several seconds to complete. During that time, you should disable\n     * your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result,\n     * you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     *\n     * Additionally, `stripe.confirmCardPayment may trigger` a [3D Secure](https://stripe.com/docs/payments/3d-secure) authentication\n     * challenge. This will be shown in a modal dialog and may be confusing for customers using assistive technologies like\n     * screen readers. You should make your form accessible by ensuring that success or error messages are clearly read out\n     * after this method completes.\n     *\n     */\n    confirmCardPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmCardPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_ideal_payment\n     *\n     * Use `stripe.confirmIdealPayment` in the [iDEAL Payments with Payment Methods](https://stripe.com/docs/payments/ideal)\n     * flow when the customer submits your payment form. When called, it will confirm the `PaymentIntent` with `data` you\n     * provide, and it will automatically redirect the customer to the authorize the transaction.\n     * Once authorization is complete, the customer will be redirected back to your specified `return_url`.\n     *\n     * When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * It can also be called with an existing `PaymentMethod`, or if you have already attached a PaymentMethod you can call this\n     * method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * By default, `stripe.confirmIdealPayment` will trigger a redirect when successful. If there is an error, or when handling\n     * next actions manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result`\n     * object. This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that `stripe.confirmIdealPayment` may take several seconds to complete. During that time, you should disable\n     * your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result,\n     * you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     */\n    confirmIdealPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmIdealPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     *\n     * Use `stripe.confirmSepaDebitPayment` in the [SEPA Direct Debit Payments](https://stripe.com/docs/payments/sepa-debit)\n     * with Payment Methods flow when the customer submits your payment form. When called, it will confirm the\n     * [PaymentIntent](https://stripe.com/docs/api/payment_intents) with `data` you provide. Note that there are some additional\n     * requirements to this flow that are not covered in this reference. Refer to our [integration guide](https://stripe.com/docs/payments/sepa-debit\n     * for more details.\n     *\n     * When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent,\n     * this method can automatically create and attach a new PaymentMethod for you. If you have already attached a\n     * [PaymentMethod](https://stripe.com/docs/api/payment_methods) you can call this method without needing to provide any additional data.\n     * These use cases are detailed in the sections that follow.\n     *\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_sepa_debit_payment\n     */\n    confirmSepaDebitPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n         */\n        data?: StripeConfirmSepaPaymentData,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     * Use stripe.createPaymentMethod to convert payment information collected by elements into a PaymentMethod\n     * object that you safely pass to your server to use in an API call.\n     *\n     * @docs https://stripe.com/docs/js/payment_methods/create_payment_method\n     *\n     * @param type: String, The type of the PaymentMethod to create. Refer to the PaymentMethod API for all possible values.\n     * @param card: StripeElement, A card or cardNumber Element.\n     * @param billing_details: StripeBillingDetails, Billing information associated with the PaymentMethod that\n     * may be used or required by particular types of payment methods.\n     */\n    createPaymentMethod(\n        params: CreatePaymentMethodParams,\n    ): Promise<{ paymentMethod?: PaymentMethod; error?: StripeError }>;\n\n    /*\n     * Use stripe.handleCardAction in the Payment Intents API manual confirmation flow to handle a PaymentIntent\n     * with the requires_action status. It will throw an error if the PaymentIntent has a different status.\n     *\n     * @docs https://stripe.com/docs/js/payment_intents/handle_card_action\n     *\n     * @param paymentIntentClientSecret: String, The client secret of the PaymentIntent to handle.\n     */\n    handleCardAction(\n        paymentIntentClientSecret: string,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n}\n\nexport interface CreatePaymentMethodParams {\n    type: StripePaymentMethodType;\n    card: StripeElement;\n    billing_details?: StripeBillingDetails;\n}\n\nexport interface StripeHostWindow extends Window {\n    Stripe?(stripePublishableKey: string, options?: StripeConfigurationOptions): StripeV3Client;\n}\n\nexport enum StripeElementType {\n    Alipay = 'alipay',\n    CardCvc = 'cardCvc',\n    CardExpiry = 'cardExpiry',\n    CardNumber = 'cardNumber',\n    CreditCard = 'card',\n    IDEAL = 'idealBank',\n    Sepa = 'iban',\n}\n\nexport enum StripePaymentMethodType {\n    Alipay = 'alipay',\n    CreditCard = 'card',\n    IDEAL = 'ideal',\n    Sepa = 'sepa_debit',\n}\n\n/**\n * Initialization options.\n */\nexport interface StripeConfigurationOptions {\n    /**\n     * For usage with [Connect](https://stripe.com/docs/connect) only.\n     * Specifying a connected account ID (e.g., acct_24BFMpJ1svR5A89k) allows you to perform actions on behalf of that account.\n     */\n    stripeAccount: string;\n\n    /**\n     * Override your account's [API version](https://stripe.com/docs/api/versioning)\n     */\n    apiVersion?: string;\n\n    /**\n     * A locale used to globally configure localization in Stripe. Setting the locale here will localize error strings for all Stripe.js methods. It will also configure the locale for Elements and Checkout. Default is auto (Stripe detects the locale of the browser).\n     * Note that Checkout supports a slightly different set of locales than Stripe.js.\n     */\n    locale?: string;\n\n    betas?: string[];\n}\n\nexport interface StripeAdditionalActionData {\n    redirect_url?: string;\n    intent?: string;\n}\n\nexport interface StripeAdditionalAction {\n    type: string;\n    data: StripeAdditionalActionData;\n}\n\nexport interface StripeCardElements {\n    [index: number]: StripeElement;\n}\n\nexport interface IndividualCardElementOptions {\n    cardCvcElementOptions: CardCvcElementOptions;\n    cardExpiryElementOptions: CardExpiryElementOptions;\n    cardNumberElementOptions: CardNumberElementOptions;\n    zipCodeElementOptions?: ZipCodeElementOptions;\n}\n\nexport interface StripeV3PaymentMethod extends PaymentMethod {\n    initializationData: StripeV3InitializationData;\n}\n\nexport interface StripeV3InitializationData {\n    stripePublishableKey: string;\n    stripeConnectedAccount: string;\n    useIndividualCardFields: boolean;\n}\n","import { StandardError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport enum StripeV3ErrorType {\n    AuthFailure = 'auth_failure',\n}\n\nexport default class StripeV3Error extends StandardError {\n    subtype: string;\n\n    constructor(subtype: StripeV3ErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'stripev3_error';\n        this.subtype = subtype;\n    }\n}\n\nfunction getErrorMessage(type: StripeV3ErrorType) {\n    switch (type) {\n        case StripeV3ErrorType.AuthFailure:\n            return `User did not authenticate`;\n\n        default:\n            return 'There was an error while processing your payment. Please try again or contact us.';\n    }\n}\n","import { includes, isEmpty, omitBy, some } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    Customer,\n    HostedForm,\n    HostedFormOptions,\n    InvalidArgumentError,\n    isBillingAddressLike,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    StripeV3FormattedPayload,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isIndividualCardElementOptions from './is-individual-card-element-options';\nimport {\n    PaymentIntent,\n    StripeAdditionalAction,\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElements,\n    StripeConfirmIdealPaymentData,\n    StripeConfirmPaymentData,\n    StripeConfirmSepaPaymentData,\n    StripeElement,\n    StripeElementOptions,\n    StripeElements,\n    StripeElementType,\n    StripeError,\n    PaymentMethod as StripePaymentMethod,\n    StripePaymentMethodType,\n    StripeV3Client,\n    StripeV3PaymentMethod,\n} from './stripev3';\nimport StripeV3Error, { StripeV3ErrorType } from './stripev3-error';\nimport StripeV3PaymentInitializeOptions, {\n    WithStripeV3PaymentInitializeOptions,\n} from './stripev3-initialize-options';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nconst APM_REDIRECT = [StripeElementType.Alipay, StripeElementType.IDEAL];\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private initializeOptions?: StripeV3PaymentInitializeOptions;\n    private stripeV3Client?: StripeV3Client;\n    private stripeElements?: StripeElements;\n    private stripeElement?: StripeElement;\n    private stripeCardElements?: StripeCardElements;\n    private useIndividualCardFields?: boolean;\n    private hostedForm?: HostedForm;\n    private isDeinitialize?: boolean;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeV3ScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions & WithStripeV3PaymentInitializeOptions) {\n        const { stripev3, methodId, gatewayId } = options;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        this.initializeOptions = stripev3;\n        this.isDeinitialize = false;\n\n        const paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(methodId);\n\n        const {\n            initializationData: {\n                stripePublishableKey,\n                stripeConnectedAccount,\n                useIndividualCardFields,\n            },\n        } = paymentMethod as StripeV3PaymentMethod;\n\n        const form = this.getInitializeOptions().form;\n\n        this.useIndividualCardFields = useIndividualCardFields;\n        this.stripeV3Client = await this.loadStripeJs(stripePublishableKey, stripeConnectedAccount);\n\n        if (\n            this.isCreditCard(methodId) &&\n            this.shouldShowTSVHostedForm(methodId, gatewayId) &&\n            form\n        ) {\n            this.hostedForm = await this.mountCardVerificationFields(form);\n        } else {\n            this.stripeElement = await this.mountCardFields(methodId);\n        }\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        let formattedPayload: StripeV3FormattedPayload;\n        let stripeError: StripeError | undefined;\n\n        if (!payment || !payment.paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { paymentData, gatewayId, methodId } = payment;\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        const shouldSubmitOrderBeforeLoadingAPM = includes(APM_REDIRECT, methodId);\n\n        const { isStoreCreditApplied: useStoreCredit } = this.paymentIntegrationService\n            .getState()\n            .getCheckoutOrThrow();\n\n        if (useStoreCredit) {\n            await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        }\n\n        try {\n            if (shouldSubmitOrderBeforeLoadingAPM) {\n                await this.paymentIntegrationService.submitOrder(order, options);\n            }\n\n            if (gatewayId) {\n                await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n                    params: { method: methodId },\n                });\n            }\n\n            const state = this.paymentIntegrationService.getState();\n\n            if (isVaultedInstrument(paymentData)) {\n                await this.paymentIntegrationService.submitOrder(order, options);\n\n                const { instrumentId } = paymentData;\n                const paymentMethod = state.getPaymentMethodOrThrow(payment.methodId);\n                const clientToken = paymentMethod.clientToken;\n\n                if (!clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return await this.executeWithVaulted(\n                    payment,\n                    instrumentId,\n                    shouldSetAsDefaultInstrument,\n                    clientToken,\n                );\n            }\n\n            const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n            const result = await this.confirmStripePayment(paymentMethod);\n            const { clientToken, method } = paymentMethod;\n            const { id: token } = result.paymentIntent ?? result.paymentMethod ?? { id: '' };\n\n            stripeError = result.error;\n\n            formattedPayload = {\n                credit_card_token: { token },\n                vault_payment_instrument: shouldSaveInstrument,\n                confirm: false,\n                set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n            };\n\n            if (method === StripeElementType.CreditCard) {\n                formattedPayload.client_token = clientToken;\n            }\n\n            if (!shouldSubmitOrderBeforeLoadingAPM) {\n                await this.paymentIntegrationService.submitOrder(order, options);\n            }\n\n            const paymentPayload = this.buildPaymentPayload(\n                methodId,\n                formattedPayload,\n                shouldSetAsDefaultInstrument,\n            );\n\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            await this.processAdditionalAction(\n                this.handleEmptyPaymentIntentError(error, stripeError),\n                methodId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.hostedForm) {\n            this.hostedForm.detach();\n        }\n\n        this.isDeinitialize = true;\n        this.unmountElement();\n\n        return Promise.resolve();\n    }\n\n    private buildPaymentPayload(\n        methodId: string,\n        formattedPayload: StripeV3FormattedPayload,\n        shouldSetAsDefaultInstrument: boolean | undefined,\n    ): Payment {\n        const paymentData = shouldSetAsDefaultInstrument\n            ? {\n                  formattedPayload: {\n                      ...formattedPayload,\n                      set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                  },\n              }\n            : { formattedPayload };\n\n        return { methodId, paymentData };\n    }\n\n    private isCancellationError(stripeError: StripeError | undefined) {\n        return (\n            stripeError &&\n            stripeError.payment_intent.last_payment_error?.message?.indexOf('canceled') !== -1\n        );\n    }\n\n    private isAuthError(stripeError: StripeError | undefined) {\n        return stripeError?.code === 'payment_intent_authentication_failure';\n    }\n\n    private isCreditCard(methodId: string): boolean {\n        return methodId === StripePaymentMethodType.CreditCard;\n    }\n\n    private isHostedFieldAvailable(): boolean {\n        const options = this.getInitializeOptions();\n        const definedFields = omitBy(options.form?.fields, isEmpty);\n\n        return !isEmpty(definedFields);\n    }\n\n    private isHostedPaymentFormEnabled(methodId: string, gatewayId?: string): boolean {\n        const { getPaymentMethodOrThrow } = this.paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return Boolean(paymentMethod.config.isHostedFormEnabled);\n    }\n\n    private async confirmStripePayment(paymentMethod: PaymentMethod): Promise<{\n        paymentIntent?: PaymentIntent | undefined;\n        paymentMethod?: StripePaymentMethod | undefined;\n        error?: StripeError | undefined;\n    }> {\n        const { clientToken: clientSecret, method, returnUrl } = paymentMethod;\n\n        if (!clientSecret) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        switch (method) {\n            case StripeElementType.Alipay:\n                return this.getStripeJs().confirmAlipayPayment(\n                    clientSecret,\n                    { return_url: returnUrl },\n                    { handleActions: false },\n                );\n\n            case StripeElementType.IDEAL: {\n                const data = this.mapStripePaymentData(StripePaymentMethodType.IDEAL, returnUrl);\n\n                return this.getStripeJs().confirmIdealPayment(clientSecret, data, {\n                    handleActions: false,\n                });\n            }\n\n            case StripeElementType.Sepa: {\n                const data = this.mapStripePaymentData(StripePaymentMethodType.Sepa);\n\n                return this.getStripeJs().confirmSepaDebitPayment(clientSecret, data);\n            }\n\n            default: {\n                const card = this.useIndividualCardFields\n                    ? this.getStripeCardElements()[0]\n                    : this.getStripeElement();\n                const billingDetails = this.mapStripeBillingDetails(\n                    this.paymentIntegrationService.getState().getBillingAddress(),\n                    this.paymentIntegrationService.getState().getCustomer(),\n                );\n\n                return this.getStripeJs().createPaymentMethod({\n                    type: StripePaymentMethodType.CreditCard,\n                    card,\n                    billing_details: billingDetails,\n                });\n            }\n        }\n    }\n\n    private async executeWithVaulted(\n        payment: OrderPaymentRequestBody,\n        token: string,\n        shouldSetAsDefaultInstrument: boolean | undefined,\n        clientToken: string,\n    ): Promise<any> {\n        const formattedPayload = {\n            bigpay_token: { token },\n            confirm: true,\n            client_token: clientToken,\n            set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n        };\n\n        if (\n            this.isHostedPaymentFormEnabled(payment.methodId, payment.gatewayId) &&\n            this.hostedForm\n        ) {\n            const form = this.hostedForm;\n\n            if (payment.paymentData && isVaultedInstrument(payment.paymentData)) {\n                payment.paymentData = {\n                    ...payment.paymentData,\n                    instrumentId: JSON.stringify({\n                        token: payment.paymentData?.instrumentId || '',\n                        client_token: clientToken,\n                    }),\n                };\n            }\n\n            await form.validate();\n            await form.submit(payment);\n\n            return this.paymentIntegrationService.loadCurrentOrder();\n        }\n\n        const paymentPayload = this.buildPaymentPayload(\n            payment.methodId,\n            formattedPayload,\n            shouldSetAsDefaultInstrument,\n        );\n\n        return this.paymentIntegrationService.submitPayment(paymentPayload);\n    }\n\n    private getInitializeOptions(): StripeV3PaymentInitializeOptions {\n        if (!this.initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.initializeOptions;\n    }\n\n    private getStripeCardElements(): StripeCardElements {\n        if (!this.stripeCardElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.stripeCardElements;\n    }\n\n    private getStripeElement(): StripeElement {\n        if (!this.stripeElement) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.stripeElement;\n    }\n\n    private getStripeJs(): StripeV3Client {\n        if (!this.stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.stripeV3Client;\n    }\n\n    private handleEmptyPaymentIntentError(error: unknown, stripeError: StripeError | undefined) {\n        if (!isRequestError(error)) {\n            return error;\n        }\n\n        return some(error.body.errors, { code: 'required_field' }) && stripeError\n            ? new Error(stripeError.message)\n            : error;\n    }\n\n    private async loadStripeJs(\n        stripePublishableKey: string,\n        stripeConnectedAccount: string,\n    ): Promise<StripeV3Client> {\n        if (this.stripeV3Client) {\n            return Promise.resolve(this.stripeV3Client);\n        }\n\n        return this.scriptLoader.load(\n            stripePublishableKey,\n            stripeConnectedAccount,\n            this.paymentIntegrationService.getState().getLocale(),\n        );\n    }\n\n    private mapStripeAddress(address?: Address): StripeAddress {\n        if (address) {\n            const {\n                city,\n                countryCode: country,\n                address1: line1,\n                address2: line2,\n                postalCode,\n                stateOrProvinceCode: state,\n            } = address;\n\n            return { city, country, line1, line2, postal_code: postalCode, state };\n        }\n\n        return { line1: '' };\n    }\n\n    private mapStripeBillingDetails(\n        billingAddress?: BillingAddress,\n        customer?: Customer,\n    ): StripeBillingDetails {\n        const { firstName, lastName } = billingAddress ||\n            customer || { firstName: 'Guest', lastName: '' };\n        const name = `${firstName} ${lastName}`.trim();\n        const { options } = this.getInitializeOptions();\n\n        if (this.useIndividualCardFields && isIndividualCardElementOptions(options)) {\n            const { zipCodeElementOptions } = options;\n\n            if (zipCodeElementOptions) {\n                const postalCode = document.getElementById(zipCodeElementOptions.containerId)\n                    ? (\n                          document.getElementById(\n                              zipCodeElementOptions.containerId,\n                          ) as HTMLInputElement\n                      ).value\n                    : '';\n\n                if (postalCode && billingAddress) {\n                    billingAddress = { ...billingAddress, postalCode };\n                }\n            }\n        }\n\n        const address = {\n            address: this.mapStripeAddress(billingAddress),\n        };\n\n        if (customer && customer.addresses[0] && isBillingAddressLike(customer.addresses[0])) {\n            const customerAddress = customer.addresses[0];\n            const { email } = customer;\n            const { phone } = customerAddress;\n\n            return phone ? { ...address, email, name, phone } : { ...address, email, name };\n        }\n\n        if (billingAddress) {\n            const { email, phone } = billingAddress;\n\n            return phone ? { ...address, email, name, phone } : { ...address, email, name };\n        }\n\n        return { ...address, name };\n    }\n\n    private mapStripePaymentData(\n        stripePaymentMethodType: StripePaymentMethodType.IDEAL,\n        returnUrl?: string,\n    ): StripeConfirmIdealPaymentData;\n    private mapStripePaymentData(\n        stripePaymentMethodType: StripePaymentMethodType.Sepa,\n    ): StripeConfirmSepaPaymentData;\n    private mapStripePaymentData(\n        stripePaymentMethodType: StripePaymentMethodType,\n        returnUrl?: string,\n    ): StripeConfirmPaymentData {\n        const customer = this.paymentIntegrationService.getState().getCustomer();\n        const billingAddress = this.paymentIntegrationService.getState().getBillingAddress();\n\n        const result: Partial<StripeConfirmPaymentData> = {\n            payment_method: {\n                [stripePaymentMethodType]: this.getStripeElement(),\n                billing_details: this.mapStripeBillingDetails(billingAddress, customer),\n            },\n        };\n\n        if (stripePaymentMethodType === StripePaymentMethodType.IDEAL) {\n            return { ...result, return_url: returnUrl };\n        }\n\n        return result;\n    }\n\n    private mountCardFields(methodId: string): Promise<StripeElement> {\n        const { options, containerId } = this.getInitializeOptions();\n\n        let stripeElement: StripeElement;\n\n        return new Promise((resolve, reject) => {\n            if (!this.stripeElements) {\n                this.stripeElements = this.getStripeJs().elements();\n            }\n\n            switch (methodId) {\n                case StripeElementType.CreditCard:\n                    if (this.useIndividualCardFields && isIndividualCardElementOptions(options)) {\n                        const {\n                            cardNumberElementOptions,\n                            cardExpiryElementOptions,\n                            cardCvcElementOptions,\n                        } = options;\n\n                        const cardNumberElement =\n                            this.stripeElements.getElement(StripeElementType.CardNumber) ||\n                            this.stripeElements.create(\n                                StripeElementType.CardNumber,\n                                cardNumberElementOptions,\n                            );\n                        const cardExpiryElement =\n                            this.stripeElements.getElement(StripeElementType.CardExpiry) ||\n                            this.stripeElements.create(\n                                StripeElementType.CardExpiry,\n                                cardExpiryElementOptions,\n                            );\n                        const cardCvcElement =\n                            this.stripeElements.getElement(StripeElementType.CardCvc) ||\n                            this.stripeElements.create(\n                                StripeElementType.CardCvc,\n                                cardCvcElementOptions,\n                            );\n\n                        this.stripeCardElements = [\n                            cardNumberElement,\n                            cardExpiryElement,\n                            cardCvcElement,\n                        ];\n                        stripeElement = this.stripeCardElements[0];\n\n                        try {\n                            cardNumberElement.mount(`#${cardNumberElementOptions.containerId}`);\n                            cardExpiryElement.mount(`#${cardExpiryElementOptions.containerId}`);\n                            cardCvcElement.mount(`#${cardCvcElementOptions.containerId}`);\n                        } catch (error) {\n                            if (!this.isDeinitialize) {\n                                reject(\n                                    new InvalidArgumentError(\n                                        'Unable to mount Stripe component without valid container ID.',\n                                    ),\n                                );\n                            }\n                        }\n                    } else {\n                        stripeElement =\n                            this.stripeElements.getElement(methodId) ||\n                            this.stripeElements.create(methodId, options as StripeElementOptions);\n\n                        try {\n                            stripeElement.mount(`#${containerId}`);\n                        } catch (error) {\n                            if (!this.isDeinitialize) {\n                                reject(\n                                    new InvalidArgumentError(\n                                        'Unable to mount Stripe component without valid container ID.',\n                                    ),\n                                );\n                            }\n                        }\n                    }\n\n                    break;\n\n                case StripeElementType.IDEAL:\n                case StripeElementType.Sepa:\n                    stripeElement =\n                        this.stripeElements.getElement(methodId) ||\n                        this.stripeElements.create(methodId, options as StripeElementOptions);\n\n                    try {\n                        stripeElement.mount(`#${containerId}`);\n                    } catch (error) {\n                        if (!this.isDeinitialize) {\n                            reject(\n                                new InvalidArgumentError(\n                                    'Unable to mount Stripe component without valid container ID.',\n                                ),\n                            );\n                        }\n                    }\n\n                    break;\n\n                case StripeElementType.Alipay:\n                    break;\n            }\n\n            resolve(stripeElement);\n        });\n    }\n\n    private async mountCardVerificationFields(formOptions: HostedFormOptions): Promise<HostedForm> {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const bigpayBaseUrl = storeConfig.paymentSettings.bigpayBaseUrl;\n\n        const form = this.paymentIntegrationService.createHostedForm(bigpayBaseUrl, formOptions);\n\n        await form.attach();\n\n        return form;\n    }\n\n    private async processAdditionalAction(\n        error: unknown,\n        methodId: string,\n        shouldSaveInstrument = false,\n        shouldSetAsDefaultInstrument = false,\n    ): Promise<any | never> {\n        if (!isRequestError(error)) {\n            throw error;\n        }\n\n        const isAdditionalActionError = some(error.body.errors, {\n            code: 'additional_action_required',\n        });\n        const isThreeDSecureRequiredError = some(error.body.errors, {\n            code: 'three_d_secure_required',\n        });\n\n        if (isAdditionalActionError) {\n            const action: StripeAdditionalAction = error.body.additional_action_required;\n\n            if (action && action.type === 'redirect_to_url') {\n                return new Promise(() => {\n                    if (action.data.redirect_url) {\n                        window.location.replace(action.data.redirect_url);\n                    }\n                });\n            }\n        }\n\n        if (isThreeDSecureRequiredError) {\n            const clientSecret = error.body.three_ds_result.token;\n            const needsConfirm = false;\n            let catchedConfirmError = false;\n            let result;\n\n            try {\n                result = await this.getStripeJs().confirmCardPayment(clientSecret);\n            } catch (error) {\n                catchedConfirmError = true;\n            }\n\n            if (result?.error) {\n                if (this.isCancellationError(result.error)) {\n                    throw new PaymentMethodCancelledError();\n                }\n\n                if (this.isAuthError(result.error)) {\n                    throw new StripeV3Error(StripeV3ErrorType.AuthFailure);\n                }\n\n                throw new Error(result.error.message);\n            }\n\n            const token = this.getPaymentToken(\n                result?.paymentIntent,\n                clientSecret,\n                catchedConfirmError,\n            );\n\n            const formattedPayload = {\n                credit_card_token: { token },\n                vault_payment_instrument: shouldSaveInstrument,\n                confirm: needsConfirm,\n            };\n\n            const paymentPayload = this.buildPaymentPayload(\n                methodId,\n                formattedPayload,\n                shouldSetAsDefaultInstrument,\n            );\n\n            try {\n                return await this.paymentIntegrationService.submitPayment(paymentPayload);\n            } catch (error) {\n                throw this.handleEmptyPaymentIntentError(error, result?.error);\n            }\n        }\n\n        throw error;\n    }\n\n    private getPaymentToken(\n        paymentIntent: PaymentIntent | undefined,\n        clientSecret: string,\n        catchedConfirmError: boolean,\n    ): string {\n        if (!paymentIntent || catchedConfirmError) {\n            return clientSecret;\n        }\n\n        return paymentIntent.id;\n    }\n\n    private shouldShowTSVHostedForm(methodId: string, gatewayId: string): boolean {\n        return (\n            this.isHostedFieldAvailable() && this.isHostedPaymentFormEnabled(methodId, gatewayId)\n        );\n    }\n\n    private unmountElement(): void {\n        if (this.stripeElement) {\n            this.stripeElement.unmount();\n            this.stripeElement = undefined;\n        }\n    }\n}\n","import BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: any): address is BillingAddress {\n    return (\n        typeof address === 'object' &&\n        address !== null &&\n        'id' in address &&\n        typeof address.id !== 'undefined'\n    );\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private stripeWindow: StripeHostWindow = window,\n    ) {}\n\n    load(\n        stripePublishableKey: string,\n        stripeAccount: string,\n        locale?: string,\n    ): Promise<StripeV3Client> {\n        return this.scriptLoader.loadScript('https://js.stripe.com/v3/').then(() => {\n            if (!this.stripeWindow.Stripe) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this.stripeWindow.Stripe(stripePublishableKey, {\n                stripeAccount,\n                locale,\n                betas: ['payment_intent_beta_3', 'alipay_pm_beta_1'],\n                apiVersion: '2020-03-02;alipay_beta=v1',\n            });\n        });\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport StripeV3PaymentStrategy from './stripev3-payment-strategy';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nconst createStripeV3PaymentStrategy: PaymentStrategyFactory<any> = (paymentIntegrationService) => {\n    return new StripeV3PaymentStrategy(\n        paymentIntegrationService,\n        new StripeV3ScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createStripeV3PaymentStrategy, [{ gateway: 'stripev3' }]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    StripeClient,\n    StripeElements,\n    StripeElementsOptions,\n    StripeHostWindow,\n    StripeInitializationData,\n} from './stripe';\n\nexport default class StripeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private stripeWindow: StripeHostWindow = window,\n    ) {}\n\n    async getStripeClient(\n        initializationData: StripeInitializationData,\n        betas?: string[],\n        apiVersion?: string,\n    ): Promise<StripeClient> {\n        if (this.stripeWindow.bcStripeClient) {\n            return this.stripeWindow.bcStripeClient;\n        }\n\n        const stripe = await this.load();\n        const { stripePublishableKey, stripeConnectedAccount } = initializationData;\n        const options = {\n            ...(stripeConnectedAccount ? { stripeAccount: stripeConnectedAccount } : {}),\n            ...(betas ? { betas } : {}),\n            ...(apiVersion ? { apiVersion } : {}),\n        };\n\n        const stripeClient = stripe<StripeClient>(stripePublishableKey, options);\n\n        Object.assign(this.stripeWindow, { bcStripeClient: stripeClient });\n\n        return stripeClient;\n    }\n\n    async getElements(\n        stripeClient: StripeClient,\n        options: StripeElementsOptions,\n    ): Promise<StripeElements> {\n        let stripeElements = this.stripeWindow.bcStripeElements;\n\n        if (!stripeElements) {\n            stripeElements = stripeClient.elements(options);\n\n            Object.assign(this.stripeWindow, { bcStripeElements: stripeElements });\n        } else {\n            await this.updateStripeElements(options);\n        }\n\n        return stripeElements;\n    }\n\n    async updateStripeElements(options: StripeElementsOptions) {\n        const stripeElements = this.stripeWindow.bcStripeElements;\n\n        if (!stripeElements) {\n            return;\n        }\n\n        stripeElements.update(options);\n        await stripeElements.fetchUpdates();\n    }\n\n    private async load() {\n        if (!this.stripeWindow.Stripe) {\n            await this.scriptLoader.loadScript('https://js.stripe.com/v3/');\n\n            if (!this.stripeWindow.Stripe) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.stripeWindow.Stripe;\n    }\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeLinkV2Event, StripeLinkV2ShippingRate } from '../stripe-ocs/stripe-ocs';\n\n/**\n * Initialization options.\n */\nexport interface StripeConfigurationOptions {\n    /**\n     * For usage with [Connect](https://stripe.com/docs/connect) only.\n     * Specifying a connected account ID (e.g., acct_24BFMpJ1svR5A89k) allows you to perform actions on behalf of that account.\n     */\n    stripeAccount?: string;\n\n    /**\n     * Override your account's [API version](https://stripe.com/docs/api/versioning)\n     */\n    apiVersion?: string;\n\n    /**\n     * A locale used to globally configure localization in Stripe. Setting the locale here will localize error strings for all Stripe.js methods. It will also configure the locale for Elements and Checkout. Default is auto (Stripe detects the locale of the browser).\n     * Note that Checkout supports a slightly different set of locales than Stripe.js.\n     */\n    locale?: string;\n\n    betas?: string[];\n}\n\nexport interface StripeAdditionalActionData {\n    redirect_url?: string;\n    intent?: string;\n}\n\nexport interface StripeAdditionalAction {\n    type: string;\n    data: StripeAdditionalActionData;\n}\n\n/**\n * The PaymentIntent object.\n */\nexport interface PaymentIntent {\n    /**\n     * Unique identifier for the object.\n     */\n    id: string;\n\n    /**\n     * Status of this PaymentIntent. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).\n     */\n    status: 'succeeded' | string;\n\n    /**\n     * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n     */\n    last_payment_error: LastPaymentError | null;\n\n    payment_method_options?: StripePIPaymentMethodOptions;\n}\n\nexport interface StripePIPaymentMethodOptions {\n    card?: {\n        setup_future_usage?: StripeInstrumentSetupFutureUsage;\n    };\n}\n\n/**\n * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n */\nexport interface LastPaymentError {\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CssFontSource {\n    /**\n     * A relative or absolute URL pointing to a CSS file with [@font-face](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face) definitions, for example:\n     * `https://fonts.googleapis.com/css?family=Open+Sans`\n     * Note that if you are using a [content security policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) (CSP),\n     * [additional directives](https://stripe.com/docs/security#content-security-policy) may be necessary.\n     */\n    cssSrc: string;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CustomFontSource {\n    /**\n     * The name to give the font.\n     */\n    family: string;\n\n    /**\n     * A valid [src](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src) value pointing to your\n     * custom font file. This is usually (though not always) a link to a file with a .woff , .otf, or .svg suffix.\n     */\n    src: string;\n\n    /**\n     * A valid [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) value.\n     */\n    display?: string;\n\n    /**\n     * One of normal, italic, oblique. Defaults to normal.\n     */\n    style?: string;\n\n    /**\n     * A valid [unicode-range](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/unicode-range) value.\n     */\n    unicodeRange?: string;\n\n    /**\n     * A valid [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight). Note that this is a string, not a number.\n     */\n    weight?: string;\n}\n\nexport type StripeCustomFont = CssFontSource | CustomFontSource;\n\nexport interface StripeError {\n    /**\n     * type of error. When the error type is card_error or validation_error, you can display the error message in error.message directly to your user.\n     */\n    type: string;\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n\n    /**\n     * The PaymentIntent object.\n     */\n    payment_intent: PaymentIntent;\n}\n\nexport interface StripeElement {\n    /**\n     * The `element.mount` method attaches your element to the DOM.\n     */\n    mount(domElement: string | HTMLElement): void;\n\n    /**\n     * Removes the element from the DOM and destroys it.\n     * A destroyed element can not be re-activated or re-mounted to the DOM.\n     */\n    destroy(): void;\n\n    /**\n     * Unmounts the element from the DOM.\n     * Call `element.mount` to re-attach it to the DOM.\n     */\n    unmount(): void;\n\n    /**\n     * The change event is triggered when the Element's value changes. The event payload always contains certain keys,\n     * in addition to some Element-specific keys.\n     * https://stripe.com/docs/js/element/events/on_change?type=paymentElement\n     */\n    on(event: StripeElementEvent, handler: (event: StripeEventType) => void): void;\n\n    /**\n     * Updates the options the Payment Element was initialized with. Updates are merged into the existing configuration.\n     * https://docs.stripe.com/js/elements_object/update_payment_element\n     */\n    update(options?: StripeElementsCreateOptions): void;\n\n    /**\n     * This method collapses the Payment Element into a row of payment method tabs.\n     * https://docs.stripe.com/js/elements_object/collapse_payment_element\n     */\n    collapse(): void;\n}\n\nexport interface StripeEvent {\n    complete: boolean;\n    elementType: string;\n    empty: boolean;\n}\n\nexport interface StripeCustomerEvent extends StripeEvent {\n    collapsed?: boolean;\n    authenticated: boolean;\n    value: {\n        email: string;\n    };\n}\n\nexport interface StripeShippingEvent extends StripeEvent {\n    mode?: string;\n    isNewAddress?: boolean;\n    phoneFieldRequired: boolean;\n    value: {\n        address: Address;\n        name?: string;\n        firstName?: string;\n        lastName?: string;\n        phone?: string;\n    };\n    fields?: {\n        phone: string;\n    };\n    display?: {\n        name: string;\n    };\n}\n\nexport interface StripePaymentEvent extends StripeEvent {\n    value: {\n        type: StripePaymentMethodType;\n    };\n    collapsed?: boolean;\n}\n\nexport interface Address {\n    city: string;\n    country: string;\n    line1: string;\n    line2?: string;\n    postal_code: string;\n    state: string;\n}\n\nexport type StripeEventType =\n    | StripeShippingEvent\n    | StripeCustomerEvent\n    | StripePaymentEvent\n    | StripeLinkV2Event;\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n * https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-shipping\n */\nexport type AddressOptions = Partial<Address>;\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n * https://stripe.com/docs/js/elements_object/create_payment_element\n */\nexport interface AddressProperties {\n    city?: AutoOrNever;\n    country?: AutoOrNever;\n    state?: AutoOrNever;\n    postalCode?: AutoOrNever;\n    line1?: AutoOrNever;\n    line2?: AutoOrNever;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface BillingDetailsOptions {\n    name?: string;\n    email?: string;\n    address?: AddressOptions;\n    phone?: string;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface BillingDetailsProperties {\n    name?: AutoOrNever;\n    email?: AutoOrNever;\n    address?: AutoOrNever | AddressProperties;\n    phone?: AutoOrNever;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface PaymentMethodDataOptions {\n    billing_details: BillingDetailsOptions;\n}\n\n/**\n * Parameters that will be passed on to the Stripe API to confirm the PaymentIntent.\n */\nexport interface StripeConfirmParams {\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n    payment_method_data?: PaymentMethodDataOptions;\n}\n\n/**\n * Data to be sent with a `stripe.confirmPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/js/payment_intents/confirm_payment) for a full list of parameters.\n */\nexport interface StripeConfirmPaymentData {\n    /**\n     * The Elements instance that was used to create the Payment Element.\n     */\n    elements: StripeElements;\n\n    /**\n     * Parameters that will be passed on to the Stripe API to confirm the PaymentIntent.\n     */\n    confirmParams?: StripeConfirmParams;\n\n    /**\n     * By default, confirmPayment will always redirect to your return_url after a successful confirmation.\n     * If you set redirect: \"if_required\", then confirmPayment will only redirect if your user chooses a redirect-based payment method.\n     */\n    redirect?: StripeStringConstants.ALWAYS | StripeStringConstants.IF_REQUIRED;\n\n    clientSecret?: string;\n}\n\nexport interface FieldsOptions {\n    billingDetails?: AutoOrNever | BillingDetailsProperties;\n    phone?: string;\n}\n\nexport interface WalletOptions {\n    applePay?: AutoOrNever;\n    googlePay?: AutoOrNever;\n    link?: AutoOrNever;\n}\n\nexport interface TermOptions {\n    card?: AutoOrNever;\n}\n\nexport interface StripeLayoutOptions {\n    type?: 'accordion' | 'tabs';\n    linkInAccordion?: boolean;\n    defaultCollapsed?: boolean;\n    radios?: boolean;\n    spacedAccordionItems?: boolean;\n    visibleAccordionItemsCount?: number;\n}\n\n/**\n * All available options are here https://stripe.com/docs/js/elements_object/create_payment_element\n */\nexport interface StripeElementsCreateOptions {\n    mode?: string;\n    fields?: FieldsOptions;\n    wallets?: WalletOptions;\n    allowedCountries?: string[];\n    defaultValues?: ShippingDefaultValues | CustomerDefaultValues | PaymentDefaultValues;\n    validation?: validationElement;\n    display?: { name: DisplayName };\n    terms?: TermOptions;\n    layout?: StripeLayoutOptions;\n    paymentMethodOrder?: string[];\n    //  Link v2 options\n    lineItems?: LineItem[];\n    allowedShippingCountries?: string[];\n    shippingAddressRequired?: boolean;\n    shippingRates?: StripeLinkV2ShippingRate[];\n    billingAddressRequired?: boolean;\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    paymentMethods?: {\n        link: StripeStringConstants.AUTO;\n        applePay: StripeStringConstants.NEVER;\n        googlePay: StripeStringConstants.NEVER;\n        amazonPay: StripeStringConstants.NEVER;\n        paypal: StripeStringConstants.NEVER;\n        klarna: StripeStringConstants.NEVER;\n    };\n    buttonHeight?: number;\n    savePaymentMethod?: StripeSavePaymentMethod;\n}\n\ninterface validationElement {\n    phone?: validationRequiredElement;\n}\n\ninterface validationRequiredElement {\n    required?: string;\n}\n\ninterface PaymentDefaultValues {\n    savePaymentMethod?: boolean;\n    billingDetails?: BillingDetailsOptions;\n}\n\ninterface ShippingDefaultValues {\n    name?: string;\n    firstName?: string;\n    lastName?: string;\n    phone: string;\n    address: Address;\n}\n\n/*\nDecide which mode you are going to use the Address Element\nShipping: is used with the Payment Element and Link Authentication Element, it will automatically pass shipping\ninformation when confirming Payment Intent or Setup Intent.\nBilling: is used with the Payment Element, it will automatically pass the billing information when confirming\nPayment Intent or Setup Intent.\n */\nexport enum StripeFormMode {\n    SHIPPING = 'shipping',\n    BILLING = 'billing',\n}\n\nexport enum DisplayName {\n    SPLIT = 'split',\n    FULL = 'full',\n    ORGANIZATION = 'organization',\n}\n\ninterface CustomerDefaultValues {\n    mode: StripeFormMode;\n    email: string;\n    allowedCountries?: string[];\n    display?: {\n        name: DisplayName;\n    };\n}\n\nexport interface StripeElements {\n    /**\n     * Creates an Elements instance, which manages a group of elements.\n     * https://stripe.com/docs/js/elements_object/create\n     */\n    create(elementType: StripeElementType, options?: StripeElementsCreateOptions): StripeElement;\n\n    /**\n     * Looks up a previously created element.\n     * https://stripe.com/docs/js/elements_object/get_payment_element or\n     * https://stripe.com/docs/js/elements_object/get_link_authentication_element\n     */\n    getElement(elementType: StripeElementType): StripeElement | null;\n\n    /**\n     * Updates options on an existing instance of Elements.\n     * https://stripe.com/docs/js/elements_object/update\n     */\n    update(options?: StripeUpdateElementsOptions): StripeElement;\n\n    /**\n     * Fetches updates from the associated PaymentIntent or SetupIntent on an existing instance of Elements,\n     * and reflects these updates in the Payment Element.\n     * https://stripe.com/docs/js/elements_object/fetch_updates\n     */\n    fetchUpdates(): Promise<void>;\n}\n\n/**\n * All available options are here https://stripe.com/docs/stripe-js/appearance-api#supported-css-properties\n */\nexport interface StripeAppearanceOptions {\n    variables?: Record<string, StripeAppearanceValues>;\n\n    rules?: Record<string, Record<string, StripeAppearanceValues>>;\n}\n\nexport type StripeAppearanceValues = string | string[] | number | undefined;\n\nexport interface StripeElementsOptions {\n    /**\n     * An array of custom fonts, which elements created from the Elements object can use.\n     * Fonts can be specified as [CssFontSource](https://stripe.com/docs/js/appendix/css_font_source_object)\n     * or [CustomFontSource](https://stripe.com/docs/js/appendix/custom_font_source_object) objects.\n     */\n    fonts?: StripeCustomFont[];\n\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n\n    /**\n     * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.\n     * The client secret can be used to complete a payment from your frontend.\n     * It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer.\n     * Make sure that you have TLS enabled on any page that includes the client secret.\n     * Refer to our docs to accept a payment and learn about how client_secret should be handled.\n     */\n    clientSecret?: string;\n\n    /**\n     * A token that represents the Stripe customer session.\n     * Stripe documentation: https://docs.stripe.com/api/checkout/sessions\n     */\n    customerSessionClientSecret?: string;\n\n    /**\n     * Match the design of your site with the appearance option.\n     * The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n     */\n    appearance?: StripeAppearanceOptions;\n\n    mode?: string;\n    amount?: number;\n    currency?: string;\n    paymentMethodTypes?: string[];\n}\n\nexport interface StripeUpdateElementsOptions {\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n\n    /**\n     * Match the design of your site with the appearance option.\n     * The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n     */\n    appearance?: StripeAppearanceOptions;\n    mode?: string;\n    amount?: number;\n    currency?: string;\n}\n\nexport interface StripeClient {\n    /**\n     * Use confirmPayment to confirm a PaymentIntent using data collected by the Payment Element.\n     * When called, confirmPayment will attempt to complete any required actions,\n     * such as authenticating your user by displaying a 3DS dialog or redirecting them to a bank authorization page.\n     */\n    confirmPayment(options: StripeConfirmPaymentData): Promise<StripeResult>;\n\n    /**\n     * When called, it will confirm the PaymentIntent with data you provide and carry out 3DS or other next actions if they are required.\n     */\n    confirmCardPayment(clientSecret: string): Promise<StripeResult>;\n\n    /**\n     * Retrieve a PaymentIntent using its client secret.\n     */\n    retrievePaymentIntent(clientSecret: string): Promise<StripeResult>;\n\n    /**\n     * Create an `Elements` instance, which manages a group of elements.\n     */\n    elements(options: StripeElementsOptions): StripeElements;\n}\n\nexport interface StripeResult {\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n}\n\nexport interface StripeHostWindow extends Window {\n    bcStripeClient?: StripeClient;\n    bcStripeElements?: StripeElements;\n    Stripe?<T = StripeClient>(\n        stripePublishableKey: string,\n        options?: StripeConfigurationOptions,\n    ): T;\n}\n\nexport enum StripePaymentMethodType {\n    CreditCard = 'card',\n    Link = 'link',\n    EPS = 'eps',\n    GRABPAY = 'grabpay',\n    BANCONTACT = 'bancontact',\n    IDEAL = 'ideal',\n    ALIPAY = 'alipay',\n    KLARNA = 'klarna',\n    OCS = 'optimized_checkout',\n}\n\ntype AutoOrNever = StripeStringConstants.AUTO | StripeStringConstants.NEVER;\n\nexport enum StripeStringConstants {\n    NEVER = 'never',\n    AUTO = 'auto',\n    ALWAYS = 'always',\n    PAYMENT = 'payment',\n    IF_REQUIRED = 'if_required',\n}\n\nexport enum StripeElementType {\n    PAYMENT = 'payment',\n    AUTHENTICATION = 'linkAuthentication',\n    SHIPPING = 'address',\n    EXPRESS_CHECKOUT = 'expressCheckout',\n}\n\nexport enum StripePaymentIntentStatus {\n    REQUIRES_PAYMENT_METHOD = 'requires_payment_method',\n    REQUIRES_CONFIRMATION = 'requires_confirmation',\n    REQUIRES_ACTION = 'requires_action',\n    PROCESSING = 'processing',\n    SUCCEEDED = 'succeeded',\n    CANCELED = 'canceled',\n}\n\nexport interface StripePaymentMethod extends PaymentMethod {\n    initializationData: StripeInitializationData;\n}\n\nexport interface StripeInitializationData {\n    stripePublishableKey: string;\n    stripeConnectedAccount: string;\n    shopperLanguage: string;\n    customerSessionToken?: string;\n    enableLink?: boolean;\n}\n\nexport interface StripeElementUpdateOptions {\n    shouldShowTerms?: boolean;\n}\n\nexport interface StripeAdditionalActionRequired {\n    type: string;\n    data: {\n        token?: string;\n        redirect_url?: string;\n    };\n}\n\nexport interface StripeAdditionalActionResponseBody {\n    additional_action_required: StripeAdditionalActionRequired;\n    three_ds_result: {\n        token?: string;\n    };\n}\n\nexport enum StripeElementEvent {\n    CLICK = 'click',\n    CHANGE = 'change',\n    READY = 'ready',\n    SHIPPING_ADDRESS_CHANGE = 'shippingaddresschange',\n    SHIPPING_RATE_CHANGE = 'shippingratechange',\n    CONFIRM = 'confirm',\n}\n\nexport interface LineItem {\n    name: string;\n    amount: number;\n}\n\nexport interface StripeSavePaymentMethod {\n    maxVisiblePaymentMethods?: number;\n}\n\nexport enum StripeInstrumentSetupFutureUsage {\n    ON_SESSION = 'on_session',\n    OFF_SESSION = 'off_session',\n}\n","import { includes, some } from 'lodash';\n\nimport {\n    Address,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport StripeOCSPaymentInitializeOptions from '../stripe-ocs/stripe-ocs-initialize-options';\nimport StripeUPEPaymentInitializeOptions from '../stripe-upe/stripe-upe-initialize-options';\n\nimport { isStripeError } from './is-stripe-error';\nimport {\n    AddressOptions,\n    StripeAdditionalActionRequired,\n    StripeClient,\n    StripeConfirmPaymentData,\n    StripeElement,\n    StripeElements,\n    StripeElementType,\n    StripeError,\n    StripePaymentIntentStatus,\n    StripeStringConstants,\n} from './stripe';\nimport StripeScriptLoader from './stripe-script-loader';\n\nexport default class StripeIntegrationService {\n    private isMounted = false;\n    private checkoutEventsUnsubscribe?: () => void;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeScriptLoader,\n    ) {}\n\n    deinitialize(): void {\n        this.checkoutEventsUnsubscribe?.();\n        this.isMounted = false;\n    }\n\n    initCheckoutEventsSubscription(\n        gatewayId: string,\n        methodId: string,\n        stripeInitializationOptions:\n            | StripeUPEPaymentInitializeOptions\n            | StripeOCSPaymentInitializeOptions,\n        stripeElements?: StripeElements,\n    ): void {\n        this.checkoutEventsUnsubscribe = this.paymentIntegrationService.subscribe(\n            async () => {\n                const paymentElement = stripeElements?.getElement(StripeElementType.PAYMENT);\n\n                if (!paymentElement) {\n                    return;\n                }\n\n                try {\n                    await this.updateStripePaymentIntent(gatewayId, methodId);\n                } catch (error) {\n                    if (this.isMounted) {\n                        paymentElement.unmount();\n                        this.isMounted = false;\n                    }\n\n                    if (error instanceof Error) {\n                        stripeInitializationOptions.onError?.(error);\n                    }\n\n                    return;\n                }\n\n                if (!this.isMounted) {\n                    await stripeElements?.fetchUpdates();\n                    this.mountElement(paymentElement, stripeInitializationOptions.containerId);\n                }\n            },\n            (state) => state.getCheckout()?.outstandingBalance,\n            (state) => state.getCheckout()?.coupons,\n        );\n    }\n\n    mountElement(stripeElement: StripeElement, containerId: string): void {\n        if (!document.getElementById(containerId)) {\n            return;\n        }\n\n        stripeElement.mount(`#${containerId}`);\n        this.isMounted = true;\n    }\n\n    mapAppearanceVariables(styles: NonNullable<StripeUPEPaymentInitializeOptions['style']>) {\n        return {\n            colorPrimary: styles.fieldInnerShadow,\n            colorBackground: styles.fieldBackground,\n            colorText: styles.labelText,\n            colorDanger: styles.fieldErrorText,\n            colorTextSecondary: styles.labelText,\n            colorTextPlaceholder: styles.fieldPlaceholderText,\n            colorIcon: styles.fieldPlaceholderText,\n        };\n    }\n\n    mapInputAppearanceRules(styles: NonNullable<StripeUPEPaymentInitializeOptions['style']>) {\n        return {\n            borderColor: styles.fieldBorder,\n            color: styles.fieldText,\n            boxShadow: styles.fieldInnerShadow,\n        };\n    }\n\n    throwStripeError(stripeError?: unknown): never {\n        if (isStripeError(stripeError)) {\n            this.throwDisplayableStripeError(stripeError);\n\n            if (this.isCancellationError(stripeError)) {\n                throw new PaymentMethodCancelledError();\n            }\n        }\n\n        throw new PaymentMethodFailedError();\n    }\n\n    throwDisplayableStripeError(stripeError: StripeError) {\n        if (\n            includes(['card_error', 'invalid_request_error', 'validation_error'], stripeError.type)\n        ) {\n            throw new Error(stripeError.message);\n        }\n    }\n\n    isCancellationError(stripeError?: StripeError): boolean {\n        const errorMessage = stripeError?.payment_intent.last_payment_error?.message;\n\n        return !!errorMessage && errorMessage.indexOf('canceled') !== -1;\n    }\n\n    throwPaymentConfirmationProceedMessage() {\n        // INFO: for case if payment was successfully confirmed on Stripe side but on BC side something go wrong, request failed and order status hasn't changed yet\n        // For shopper we need to show additional message that BC is waiting for stripe confirmation, to prevent additional payment creation\n        throw new PaymentMethodFailedError(\n            \"We've received your order and are processing your payment. Once the payment is verified, your order will be completed. We will send you an email when it's completed. Please note, this process may take a few minutes depending on the processing times of your chosen method.\",\n        );\n    }\n\n    async isPaymentCompleted(methodId: string, stripeUPEClient?: StripeClient): Promise<boolean> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { features } = state.getStoreConfigOrThrow().checkoutSettings;\n\n        if (\n            !paymentMethod.clientToken ||\n            !stripeUPEClient ||\n            !features['PI-626.Block_unnecessary_payment_confirmation_for_StripeUPE']\n        ) {\n            return false;\n        }\n\n        const { paymentIntent } = await stripeUPEClient.retrievePaymentIntent(\n            paymentMethod.clientToken,\n        );\n\n        return paymentIntent?.status === StripePaymentIntentStatus.SUCCEEDED;\n    }\n\n    mapStripePaymentData(\n        stripeElements?: StripeElements,\n        returnUrl?: string,\n    ): StripeConfirmPaymentData {\n        const billingAddress = this.paymentIntegrationService.getState().getBillingAddress();\n        const { firstName, lastName, email } = billingAddress || {};\n        const address = this._mapStripeAddress(billingAddress);\n\n        if (!stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!email || !address || !address.city || !address.country || !firstName || !lastName) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        return {\n            elements: stripeElements,\n            redirect: StripeStringConstants.IF_REQUIRED,\n            confirmParams: {\n                payment_method_data: {\n                    billing_details: {\n                        email,\n                        address,\n                        name: `${firstName} ${lastName}`,\n                    },\n                },\n                ...(returnUrl && { return_url: returnUrl }),\n            },\n        };\n    }\n\n    isAdditionalActionError(errors: Array<{ code: string }>): boolean {\n        return some(errors, { code: 'additional_action_required' });\n    }\n\n    isRedirectAction(additionalAction: StripeAdditionalActionRequired): boolean {\n        const {\n            type,\n            data: { redirect_url },\n        } = additionalAction;\n\n        return type === 'redirect_to_url' && !!redirect_url;\n    }\n\n    isOnPageAdditionalAction(additionalAction: StripeAdditionalActionRequired): boolean {\n        const {\n            type,\n            data: { token },\n        } = additionalAction;\n\n        return type === 'additional_action_requires_payment_method' && !!token;\n    }\n\n    async updateStripePaymentIntent(gatewayId: string, methodId: string): Promise<void> {\n        // INFO: to trigger payment intent update on the BE side we need to make stripe config request\n        const state = await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId },\n        });\n        const { clientToken } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.scriptLoader.updateStripeElements({ clientSecret: clientToken });\n    }\n\n    private _mapStripeAddress(address?: Address): AddressOptions {\n        if (address) {\n            const {\n                city,\n                address1,\n                address2,\n                countryCode: country,\n                postalCode,\n                stateOrProvinceCode,\n            } = address;\n\n            return {\n                city,\n                country,\n                postal_code: postalCode,\n                line1: address1,\n                line2: address2,\n                ...(stateOrProvinceCode ? { state: stateOrProvinceCode } : {}),\n            };\n        }\n\n        throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n    }\n}\n","import { StripeError } from './stripe';\n\nexport function isStripeError(error: unknown): error is StripeError {\n    return typeof error === 'object' && error !== null && 'type' in error;\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripePaymentMethod } from './stripe';\n\nexport function isStripePaymentMethodLike(\n    paymentMethod: PaymentMethod,\n): paymentMethod is StripePaymentMethod {\n    return (\n        typeof paymentMethod === 'object' &&\n        paymentMethod !== null &&\n        'initializationData' in paymentMethod &&\n        (paymentMethod as StripePaymentMethod).initializationData !== undefined &&\n        (paymentMethod as StripePaymentMethod).initializationData !== null &&\n        typeof (paymentMethod as StripePaymentMethod).initializationData === 'object' &&\n        'stripePublishableKey' in (paymentMethod as StripePaymentMethod).initializationData &&\n        'stripeConnectedAccount' in (paymentMethod as StripePaymentMethod).initializationData &&\n        'shopperLanguage' in (paymentMethod as StripePaymentMethod).initializationData &&\n        typeof (paymentMethod as StripePaymentMethod).initializationData.stripePublishableKey !==\n            'undefined' &&\n        typeof (paymentMethod as StripePaymentMethod).initializationData.stripeConnectedAccount !==\n            'undefined' &&\n        typeof (paymentMethod as StripePaymentMethod).initializationData.shopperLanguage !==\n            'undefined'\n    );\n}\n","export const supportedLocales: Record<string, string[]> = {\n    ar: ['ar'],\n    bg: ['bg'],\n    cs: ['cs'],\n    da: ['da'],\n    de: ['de'],\n    el: ['el'],\n    en: ['en', 'en-GB'],\n    es: ['es', 'es-419'],\n    et: ['et'],\n    fi: ['fi'],\n    fil: ['fil'],\n    fr: ['fr', 'fr-CA'],\n    he: ['he'],\n    hr: ['hr'],\n    hu: ['hu'],\n    id: ['id'],\n    it: ['it'],\n    ja: ['ja'],\n    ko: ['ko'],\n    lt: ['lt'],\n    lv: ['lv'],\n    ms: ['ms'],\n    mt: ['mt'],\n    nb: ['nb'],\n    nl: ['nl'],\n    pl: ['pl'],\n    pt: ['pt', 'pt-BR'],\n    ro: ['ro'],\n    ru: ['ru'],\n    sk: ['sk'],\n    sl: ['sl'],\n    sv: ['sv'],\n    th: ['th'],\n    tr: ['tr'],\n    vi: ['vi'],\n    zh: ['zh', 'zh-HK', 'zh-TW'],\n};\n","import { supportedLocales } from './stripe-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace(/_/g, '-').toLowerCase().split('-');\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'auto';\n    }\n\n    const formattedLocale = country ? `${language}-${country.toUpperCase()}` : language;\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","import {\n    PaymentProviderCustomer,\n    StripeAcceleratedCheckoutCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isStripeAcceleratedCheckoutCustomer(\n    customer: PaymentProviderCustomer,\n): customer is StripeAcceleratedCheckoutCustomer {\n    return 'stripeLinkAuthenticationState' in customer;\n}\n","export const STRIPE_CLIENT_BETAS = [\n    'payment_element_beta_2',\n    'alipay_pm_beta_1',\n    'link_default_integration_beta_1',\n    'shipping_address_element_beta_1',\n    'address_element_beta_1',\n];\n\nexport const STRIPE_CLIENT_API_VERSION = '2020-03-02;alipay_beta=v1;link_beta=v1';\n","import { some } from 'lodash';\n\nimport {\n    FormattedHostedInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    RequestError,\n    StripeUPEIntent,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    formatLocale,\n    isStripePaymentMethodLike,\n    StripeAdditionalActionRequired,\n    StripeAppearanceOptions,\n    StripeClient,\n    StripeElement,\n    StripeElementEvent,\n    StripeElements,\n    StripeElementsCreateOptions,\n    StripeElementType,\n    StripeElementUpdateOptions,\n    StripeError,\n    StripeEventType,\n    StripeInitializationData,\n    StripeIntegrationService,\n    StripePaymentMethodType,\n    StripeResult,\n    StripeScriptLoader,\n    StripeStringConstants,\n} from '../stripe-utils';\n\nimport isStripeAcceleratedCheckoutCustomer from './is-stripe-accelerated-checkout-customer';\nimport { STRIPE_CLIENT_API_VERSION, STRIPE_CLIENT_BETAS } from './stripe-upe-constants';\nimport StripeUPEPaymentInitializeOptions, {\n    WithStripeUPEPaymentInitializeOptions,\n} from './stripe-upe-initialize-options';\n\nexport default class StripeUPEPaymentStrategy implements PaymentStrategy {\n    private _stripeUPEClient?: StripeClient;\n    private _stripeElements?: StripeElements;\n    private _isStripeElementUpdateEnabled?: boolean;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeScriptLoader,\n        private stripeIntegrationService: StripeIntegrationService,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithStripeUPEPaymentInitializeOptions,\n    ): Promise<void> {\n        const { stripeupe, methodId, gatewayId } = options;\n\n        if (!stripeupe?.containerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        this._loadStripeElement(stripeupe, gatewayId, methodId).catch((error) =>\n            stripeupe.onError?.(error),\n        );\n\n        this.stripeIntegrationService.initCheckoutEventsSubscription(\n            gatewayId,\n            methodId,\n            stripeupe,\n            this._stripeElements,\n        );\n\n        return Promise.resolve();\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment || !payment.paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        if (!this._stripeUPEClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { paymentData, methodId, gatewayId } = payment;\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n        const state = this.paymentIntegrationService.getState();\n        const { isStoreCreditApplied: useStoreCredit } = state.getCheckoutOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const stripePaymentProviderCustomer = isStripeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n        const stripeLinkAuthenticationState =\n            stripePaymentProviderCustomer.stripeLinkAuthenticationState;\n\n        if (useStoreCredit) {\n            await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        }\n\n        if (gatewayId) {\n            await this.stripeIntegrationService.updateStripePaymentIntent(gatewayId, methodId);\n\n            const { email } = state.getCustomerOrThrow();\n\n            if (stripeLinkAuthenticationState !== undefined && !email) {\n                const billingAddress = state.getBillingAddressOrThrow();\n\n                await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n            }\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        if (isVaultedInstrument(paymentData)) {\n            const { instrumentId } = paymentData;\n\n            await this._executeWithVaulted(\n                payment.methodId,\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n            );\n\n            return;\n        }\n\n        await this._executeWithStripeConfirmation(\n            payment.methodId,\n            stripeLinkAuthenticationState ? false : shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this._stripeElements?.getElement(StripeElementType.PAYMENT)?.unmount();\n        this.stripeIntegrationService.deinitialize();\n        this._stripeElements = undefined;\n        this._stripeUPEClient = undefined;\n\n        return Promise.resolve();\n    }\n\n    private async _executeWithStripeConfirmation(\n        methodId: string,\n        shouldSaveInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const { clientToken } = state.getPaymentMethodOrThrow(methodId);\n        const paymentPayload = this._getPaymentPayload(\n            methodId,\n            clientToken || '',\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        );\n\n        try {\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            await this._processAdditionalActionWithStripeConfirmation(\n                error,\n                methodId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private async _executeWithVaulted(\n        methodId: string,\n        token: string,\n        shouldSetAsDefaultInstrument: boolean,\n    ): Promise<PaymentIntegrationSelectors | void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const cartId = state.getCart()?.id;\n\n        try {\n            const paymentPayload = {\n                methodId,\n                paymentData: {\n                    formattedPayload: {\n                        cart_id: cartId,\n                        bigpay_token: { token },\n                        confirm: false,\n                        client_token: paymentMethod.clientToken,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                    },\n                },\n            };\n\n            return await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            return this._processVaultedAdditionalAction(\n                error,\n                methodId,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private async _loadStripeElement(\n        stripeupe: StripeUPEPaymentInitializeOptions,\n        gatewayId: string,\n        methodId: string,\n    ) {\n        const { containerId, style, render, initStripeElementUpdateTrigger } = stripeupe;\n        const state = await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId },\n        });\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { checkoutSettings } = state.getStoreConfigOrThrow();\n\n        if (!isStripePaymentMethodLike(paymentMethod)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientToken, initializationData } = paymentMethod;\n        const { shopperLanguage } = initializationData;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._stripeUPEClient = await this._loadStripeJs(initializationData);\n        this._isStripeElementUpdateEnabled =\n            !!checkoutSettings.features['PI-1679.trigger_update_stripe_payment_element'] &&\n            typeof initStripeElementUpdateTrigger === 'function';\n\n        let appearance: StripeAppearanceOptions | undefined;\n\n        if (style) {\n            const styles = style;\n\n            appearance = {\n                variables: this.stripeIntegrationService.mapAppearanceVariables(style),\n                rules: {\n                    '.Input': this.stripeIntegrationService.mapInputAppearanceRules(styles),\n                },\n            };\n        }\n\n        this._stripeElements = await this.scriptLoader.getElements(this._stripeUPEClient, {\n            clientSecret: clientToken,\n            locale: formatLocale(shopperLanguage),\n            appearance,\n        });\n\n        const { getBillingAddress, getShippingAddress } = state;\n        const { postalCode } = getShippingAddress() || getBillingAddress() || {};\n\n        const stripeElement: StripeElement =\n            this._stripeElements.getElement(StripeElementType.PAYMENT) ||\n            this._stripeElements.create(StripeElementType.PAYMENT, {\n                fields: {\n                    billingDetails: {\n                        email: StripeStringConstants.NEVER,\n                        address: {\n                            country: StripeStringConstants.NEVER,\n                            city: StripeStringConstants.NEVER,\n                            postalCode: postalCode\n                                ? StripeStringConstants.NEVER\n                                : StripeStringConstants.AUTO,\n                        },\n                    },\n                },\n                wallets: {\n                    applePay: StripeStringConstants.NEVER,\n                    googlePay: StripeStringConstants.NEVER,\n                },\n                ...this._getStripeElementTerms(),\n            });\n\n        this.stripeIntegrationService.mountElement(stripeElement, containerId);\n\n        stripeElement.on(StripeElementEvent.READY, () => {\n            render();\n        });\n\n        stripeElement.on(StripeElementEvent.CHANGE, (event: StripeEventType) => {\n            if (!event?.value || !('type' in event.value)) {\n                return;\n            }\n\n            this._updateStripeLinkStateByElementType(event.value.type);\n        });\n\n        if (this._isStripeElementUpdateEnabled) {\n            initStripeElementUpdateTrigger?.(this._updateStripeElement.bind(this));\n        }\n    }\n\n    private async _processAdditionalActionWithStripeConfirmation(\n        error: unknown,\n        methodId: string,\n        shouldSaveInstrument = false,\n        shouldSetAsDefaultInstrument = false,\n    ): Promise<void> {\n        if (\n            !isRequestError(error) ||\n            !this.stripeIntegrationService.isAdditionalActionError(error.body.errors)\n        ) {\n            throw error;\n        }\n\n        if (!this._stripeUPEClient || !this._stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { data: additionalActionData } = error.body.additional_action_required;\n        const { token } = additionalActionData;\n\n        const { paymentIntent } = await this._confirmStripePaymentOrThrow(\n            methodId,\n            additionalActionData,\n        );\n\n        const paymentPayload = this._getPaymentPayload(\n            methodId,\n            paymentIntent?.id || token,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        );\n\n        try {\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            this.stripeIntegrationService.throwPaymentConfirmationProceedMessage();\n        }\n    }\n\n    private async _confirmStripePaymentOrThrow(\n        methodId: string,\n        additionalActionData: StripeAdditionalActionRequired['data'],\n    ): Promise<StripeResult | never> {\n        const { token, redirect_url } = additionalActionData;\n        const stripePaymentData = this.stripeIntegrationService.mapStripePaymentData(\n            this._stripeElements,\n            redirect_url,\n        );\n        let stripeError: StripeError | undefined;\n\n        try {\n            const isPaymentCompleted = await this.stripeIntegrationService.isPaymentCompleted(\n                methodId,\n                this._stripeUPEClient,\n            );\n\n            const confirmationResult = !isPaymentCompleted\n                ? await this._stripeUPEClient?.confirmPayment(stripePaymentData)\n                : await this._stripeUPEClient?.retrievePaymentIntent(token || '');\n\n            stripeError = confirmationResult?.error;\n\n            if (stripeError || !confirmationResult?.paymentIntent) {\n                throw new PaymentMethodFailedError();\n            }\n\n            return confirmationResult;\n        } catch (error: unknown) {\n            this.stripeIntegrationService.throwStripeError(stripeError);\n        }\n    }\n\n    private async _processVaultedAdditionalAction(\n        error: unknown,\n        methodId?: string,\n        shouldSetAsDefaultInstrument = false,\n    ): Promise<PaymentIntegrationSelectors | never> {\n        if (\n            !methodId ||\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'three_d_secure_required' })\n        ) {\n            throw error;\n        }\n\n        if (!this._stripeUPEClient || !this._stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const clientSecret = error.body.three_ds_result.token;\n        let result;\n        let catchedConfirmError = false;\n\n        try {\n            result = await this._stripeUPEClient.confirmCardPayment(clientSecret);\n        } catch (error) {\n            try {\n                result = await this._stripeUPEClient.retrievePaymentIntent(clientSecret);\n            } catch (error) {\n                catchedConfirmError = true;\n            }\n        }\n\n        if (result?.error) {\n            this.stripeIntegrationService.throwStripeError(result.error);\n        }\n\n        if (!result?.paymentIntent && !catchedConfirmError) {\n            throw new RequestError();\n        }\n\n        const paymentPayload = this._getPaymentPayload(\n            methodId,\n            catchedConfirmError ? clientSecret : result?.paymentIntent?.id,\n            false,\n            shouldSetAsDefaultInstrument,\n        );\n\n        return this.paymentIntegrationService.submitPayment(paymentPayload);\n    }\n\n    private async _loadStripeJs(\n        initializationData: StripeInitializationData,\n    ): Promise<StripeClient> {\n        if (this._stripeUPEClient) {\n            return this._stripeUPEClient;\n        }\n\n        return this.scriptLoader.getStripeClient(\n            initializationData,\n            STRIPE_CLIENT_BETAS,\n            STRIPE_CLIENT_API_VERSION,\n        );\n    }\n\n    private _getPaymentPayload(\n        methodId: string,\n        token: string,\n        shouldSaveInstrument = false,\n        shouldSetAsDefaultInstrument = false,\n    ): Payment {\n        const cartId = this.paymentIntegrationService.getState().getCart()?.id || '';\n        const formattedPayload: StripeUPEIntent & FormattedHostedInstrument = {\n            cart_id: cartId,\n            credit_card_token: { token },\n            confirm: false,\n            vault_payment_instrument: shouldSaveInstrument,\n            set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n        };\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload,\n            },\n        };\n    }\n\n    private _updateStripeElement({ shouldShowTerms }: StripeElementUpdateOptions): void {\n        const stripeElement = this._stripeElements?.getElement(StripeElementType.PAYMENT);\n\n        stripeElement?.update({\n            ...this._getStripeElementTerms(shouldShowTerms),\n        });\n    }\n\n    private _getStripeElementTerms(\n        shouldShowTerms?: boolean,\n    ): Pick<StripeElementsCreateOptions, 'terms'> {\n        let card = StripeStringConstants.AUTO;\n\n        if (this._isStripeElementUpdateEnabled) {\n            card = shouldShowTerms ? StripeStringConstants.AUTO : StripeStringConstants.NEVER;\n        }\n\n        return {\n            terms: {\n                card,\n            },\n        };\n    }\n\n    private _updateStripeLinkStateByElementType(paymentElementType: StripePaymentMethodType): void {\n        const state = this.paymentIntegrationService.getState();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const isStripeLinkElementType = paymentElementType === StripePaymentMethodType.Link;\n\n        // INFO: Trigger additional update only if Stripe Link Authentication was skipped on the customer step, but the Link payment element was rendered.\n        if (\n            !isStripeAcceleratedCheckoutCustomer(paymentProviderCustomer) &&\n            isStripeLinkElementType\n        ) {\n            this.paymentIntegrationService.updatePaymentProviderCustomer({\n                stripeLinkAuthenticationState: isStripeLinkElementType,\n            });\n        }\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeIntegrationService, StripeScriptLoader } from '../stripe-utils';\n\nimport StripeUPEPaymentStrategy from './stripe-upe-payment-strategy';\n\nconst createStripeUPEPaymentStrategy: PaymentStrategyFactory<StripeUPEPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const stripeScriptLoader = new StripeScriptLoader(getScriptLoader());\n\n    return new StripeUPEPaymentStrategy(\n        paymentIntegrationService,\n        stripeScriptLoader,\n        new StripeIntegrationService(paymentIntegrationService, stripeScriptLoader),\n    );\n};\n\nexport default toResolvableModule(createStripeUPEPaymentStrategy, [\n    { gateway: 'stripeupe' },\n    { gateway: 'stripeupe', id: 'klarna' },\n]);\n","import { StripePaymentEvent } from './stripe';\n\nexport const isStripePaymentEvent = (event: unknown): event is StripePaymentEvent => {\n    return typeof event === 'object' && event !== null && 'value' in event && 'collapsed' in event;\n};\n","import {\n    InvalidArgumentError,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    formatLocale,\n    isStripePaymentEvent,\n    isStripePaymentMethodLike,\n    StripeAdditionalActionRequired,\n    StripeClient,\n    StripeElement,\n    StripeElementEvent,\n    StripeElements,\n    StripeElementType,\n    StripeError,\n    StripeEventType,\n    StripeInitializationData,\n    StripeInstrumentSetupFutureUsage,\n    StripeIntegrationService,\n    StripePIPaymentMethodOptions,\n    StripeResult,\n    StripeScriptLoader,\n    StripeStringConstants,\n} from '../stripe-utils';\n\nimport StripeOCSPaymentInitializeOptions, {\n    WithStripeOCSPaymentInitializeOptions,\n} from './stripe-ocs-initialize-options';\n\nexport default class StripeOCSPaymentStrategy implements PaymentStrategy {\n    private stripeClient?: StripeClient;\n    private stripeElements?: StripeElements;\n    private selectedMethodId?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeScriptLoader,\n        private stripeIntegrationService: StripeIntegrationService,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithStripeOCSPaymentInitializeOptions,\n    ): Promise<void> {\n        const { stripeocs, methodId, gatewayId } = options;\n\n        if (!stripeocs?.containerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        try {\n            await this._initializeStripeElement(stripeocs, gatewayId, methodId);\n        } catch (error) {\n            if (error instanceof Error) {\n                stripeocs.onError?.(error);\n            }\n        }\n\n        this.stripeIntegrationService.initCheckoutEventsSubscription(\n            gatewayId,\n            methodId,\n            stripeocs,\n            this.stripeElements,\n        );\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n        const { methodId, gatewayId } = payment || {};\n\n        if (!this.stripeClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!gatewayId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" or \"methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const { isStoreCreditApplied } = state.getCheckoutOrThrow();\n\n        if (isStoreCreditApplied) {\n            await this.paymentIntegrationService.applyStoreCredit(isStoreCreditApplied);\n        }\n\n        await this.stripeIntegrationService.updateStripePaymentIntent(gatewayId, methodId);\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        const { clientToken } = state.getPaymentMethodOrThrow(methodId);\n        const paymentPayload = this._getPaymentPayload(methodId, clientToken || '');\n\n        try {\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            await this._processAdditionalAction(error, methodId);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        const paymentElement = this.stripeElements?.getElement(StripeElementType.PAYMENT);\n\n        paymentElement?.unmount();\n        paymentElement?.destroy();\n        this.stripeIntegrationService.deinitialize();\n        this.stripeElements = undefined;\n        this.stripeClient = undefined;\n\n        return Promise.resolve();\n    }\n\n    private async _initializeStripeElement(\n        stripe: StripeOCSPaymentInitializeOptions,\n        gatewayId: string,\n        methodId: string,\n    ) {\n        let paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(methodId);\n\n        if (!paymentMethod?.clientToken) {\n            const state = await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n                params: { method: methodId },\n            });\n\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        if (!isStripePaymentMethodLike(paymentMethod)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientToken, initializationData } = paymentMethod;\n        const { shopperLanguage, customerSessionToken, enableLink } = initializationData;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.stripeClient = await this._loadStripeJs(initializationData);\n\n        const {\n            appearance,\n            containerId,\n            fonts,\n            layout,\n            render,\n            paymentMethodSelect,\n            handleClosePaymentMethod,\n        } = stripe;\n\n        this.stripeElements = await this.scriptLoader.getElements(this.stripeClient, {\n            clientSecret: clientToken,\n            customerSessionClientSecret: customerSessionToken,\n            locale: formatLocale(shopperLanguage),\n            appearance,\n            fonts,\n        });\n\n        const { getBillingAddress, getShippingAddress } = this.paymentIntegrationService.getState();\n        const billingAddress = getBillingAddress();\n        const { postalCode } = getShippingAddress() || billingAddress || {};\n\n        const stripeElement: StripeElement =\n            this.stripeElements.getElement(StripeElementType.PAYMENT) ||\n            this.stripeElements.create(StripeElementType.PAYMENT, {\n                fields: {\n                    billingDetails: {\n                        email: StripeStringConstants.NEVER,\n                        address: {\n                            country: StripeStringConstants.NEVER,\n                            city: StripeStringConstants.NEVER,\n                            postalCode: postalCode\n                                ? StripeStringConstants.NEVER\n                                : StripeStringConstants.AUTO,\n                        },\n                    },\n                },\n                wallets: {\n                    applePay: StripeStringConstants.NEVER,\n                    googlePay: StripeStringConstants.NEVER,\n                    link: enableLink ? StripeStringConstants.AUTO : StripeStringConstants.NEVER,\n                },\n                layout,\n                savePaymentMethod: {\n                    maxVisiblePaymentMethods: 20,\n                },\n                defaultValues: {\n                    billingDetails: {\n                        email: billingAddress?.email || '',\n                    },\n                },\n            });\n\n        this.stripeIntegrationService.mountElement(stripeElement, containerId);\n\n        stripeElement.on(StripeElementEvent.READY, () => {\n            render();\n        });\n\n        stripeElement.on(StripeElementEvent.CHANGE, (event: StripeEventType) => {\n            this._onStripeElementChange(event, gatewayId, methodId, paymentMethodSelect);\n        });\n\n        handleClosePaymentMethod?.(this._collapseStripeElement.bind(this));\n    }\n\n    private async _loadStripeJs(\n        initializationData: StripeInitializationData,\n    ): Promise<StripeClient> {\n        if (this.stripeClient) {\n            return this.stripeClient;\n        }\n\n        return this.scriptLoader.getStripeClient(initializationData);\n    }\n\n    private _collapseStripeElement() {\n        const stripeElement = this.stripeElements?.getElement(StripeElementType.PAYMENT);\n\n        stripeElement?.collapse();\n    }\n\n    private _getPaymentPayload(\n        methodId: string,\n        token: string,\n        shouldSaveInstrument = false,\n    ): Payment {\n        const cartId = this.paymentIntegrationService.getState().getCart()?.id || '';\n        const formattedPayload = {\n            cart_id: cartId,\n            credit_card_token: { token },\n            confirm: false,\n            payment_method_id: this.selectedMethodId,\n            vault_payment_instrument: shouldSaveInstrument,\n        };\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload,\n            },\n        };\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        methodId: string,\n    ): Promise<PaymentIntegrationSelectors | undefined> {\n        if (\n            !isRequestError(error) ||\n            !this.stripeIntegrationService.isAdditionalActionError(error.body.errors)\n        ) {\n            throw error;\n        }\n\n        if (!this.stripeClient || !this.stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { data: additionalActionData } = error.body.additional_action_required;\n        const { token } = additionalActionData;\n\n        const { paymentIntent } = await this._confirmStripePaymentOrThrow(\n            methodId,\n            additionalActionData,\n        );\n        const { id: paymentIntentId, payment_method_options: paymentMethodOptions } =\n            paymentIntent || {};\n\n        const shouldSaveCard = this._shouldSaveCard(paymentMethodOptions);\n        const paymentPayload = this._getPaymentPayload(\n            methodId,\n            paymentIntentId || token,\n            shouldSaveCard,\n        );\n\n        try {\n            return await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            this.stripeIntegrationService.throwPaymentConfirmationProceedMessage();\n        }\n    }\n\n    private async _confirmStripePaymentOrThrow(\n        methodId: string,\n        additionalActionData: StripeAdditionalActionRequired['data'],\n    ): Promise<StripeResult | never> {\n        const { token, redirect_url } = additionalActionData;\n        const stripePaymentData = this.stripeIntegrationService.mapStripePaymentData(\n            this.stripeElements,\n            redirect_url,\n        );\n        let stripeError: StripeError | undefined;\n\n        try {\n            const isPaymentCompleted = await this.stripeIntegrationService.isPaymentCompleted(\n                methodId,\n                this.stripeClient,\n            );\n\n            const confirmationResult = !isPaymentCompleted\n                ? await this.stripeClient?.confirmPayment(stripePaymentData)\n                : await this.stripeClient?.retrievePaymentIntent(token || '');\n\n            stripeError = confirmationResult?.error;\n\n            if (stripeError || !confirmationResult?.paymentIntent) {\n                throw new PaymentMethodFailedError();\n            }\n\n            return confirmationResult;\n        } catch (error: unknown) {\n            return this.stripeIntegrationService.throwStripeError(stripeError);\n        }\n    }\n\n    private _onStripeElementChange(\n        event: StripeEventType,\n        gatewayId: string,\n        methodId: string,\n        paymentMethodSelect?: (id: string) => void,\n    ) {\n        if (!isStripePaymentEvent(event) || event.collapsed) {\n            return;\n        }\n\n        this.selectedMethodId = event.value.type;\n        paymentMethodSelect?.(`${gatewayId}-${methodId}`);\n    }\n\n    private _shouldSaveCard(paymentMethodOptions?: StripePIPaymentMethodOptions) {\n        const futureUsage = paymentMethodOptions?.card?.setup_future_usage;\n\n        return (\n            futureUsage === StripeInstrumentSetupFutureUsage.ON_SESSION ||\n            futureUsage === StripeInstrumentSetupFutureUsage.OFF_SESSION\n        );\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeIntegrationService, StripeScriptLoader } from '../stripe-utils';\n\nimport StripeOCSPaymentStrategy from './stripe-ocs-payment-strategy';\n\nconst createStripeOCSPaymentStrategy: PaymentStrategyFactory<StripeOCSPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const stripeScriptLoader = new StripeScriptLoader(getScriptLoader());\n\n    return new StripeOCSPaymentStrategy(\n        paymentIntegrationService,\n        stripeScriptLoader,\n        new StripeIntegrationService(paymentIntegrationService, stripeScriptLoader),\n    );\n};\n\nexport default toResolvableModule(createStripeOCSPaymentStrategy, [\n    { gateway: 'stripeupe', id: 'stripe_ocs' },\n    { gateway: 'stripeocs', id: 'optimized_checkout' },\n]);\n","import { RequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface TdOnlineMartHostWindow extends Window {\n    customcheckout?(): TDCustomCheckoutSDK;\n}\n\nexport interface TDCustomCheckoutSDK {\n    create(fieldType: FieldType, options?: FieldOptions): TdOnlineMartElement;\n    createToken(callback: (result: CreateTokenResponse) => void): void;\n}\n\nexport interface TdOnlineMartElement {\n    mount(cssSelector: string): void;\n    unmount(): void;\n}\n\nexport enum FieldType {\n    CARD_NUMBER = 'card-number',\n    CVV = 'cvv',\n    EXPIRY = 'expiry',\n}\n\nexport interface TDOnlineMartInput {\n    id: string;\n    fieldType: FieldType;\n    inputElement?: TdOnlineMartElement;\n}\n\ninterface CreateTokenResponse {\n    code: string;\n    error?: CreateTokenError;\n    token?: string;\n    last4?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nexport interface CreateTokenError {\n    field: string;\n    type: string;\n    message: string;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface TdOnlineMartThreeDSErrorBody {\n    errors?: Array<{ code: string }>;\n    three_ds_result?: {\n        acs_url: string;\n        payer_auth_request: string;\n        merchant_data: string;\n    };\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\nexport type TdOnlineMartAdditionalAction = RequestError<TdOnlineMartThreeDSErrorBody>;\n\n// Note: The style property affects the remote styling of text inside the iframe input. The classes property updates the class list of the element the field is mounted to on your page.\ninterface FieldOptions {\n    placeholder?: string;\n    style?: Styles;\n    classes?: Classes;\n    brands?: string[];\n}\n\ninterface Classes {\n    base?: string;\n    complete?: string;\n    empty?: string;\n    focus?: string;\n    error?: string;\n}\n\ninterface Styles {\n    base?: CssStyles;\n    complete?: CssStyles;\n    empty?: CssStyles;\n    error?: CssStyles;\n}\n\ninterface CssStyles {\n    color?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontStyle?: string;\n    fontWeight?: string;\n    textDecoration?: string;\n    padding?: string;\n    paddingLeft?: string;\n    paddingTop?: string;\n    paddingRight?: string;\n    paddingBottom?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    getBrowserInfo,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isCreateTokenError from './is-create-token-error';\nimport { isTdOnlineMartAdditionalAction } from './isTdOnlineMartAdditionalAction';\nimport {\n    FieldType,\n    TDCustomCheckoutSDK,\n    TDOnlineMartInput,\n    TdOnlineMartThreeDSErrorBody,\n} from './td-online-mart';\nimport TDOnlineMartScriptLoader from './td-online-mart-script-loader';\n\nexport default class TDOnlineMartPaymentStrategy implements PaymentStrategy {\n    private tdOnlineMartClient?: TDCustomCheckoutSDK;\n    private tdInputs: TDOnlineMartInput[] = [\n        {\n            id: 'ccNumber',\n            fieldType: FieldType.CARD_NUMBER,\n        },\n        {\n            id: 'ccCvv',\n            fieldType: FieldType.CVV,\n        },\n        {\n            id: 'ccExpiry',\n            fieldType: FieldType.EXPIRY,\n        },\n    ];\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private tdOnlineMartScriptLoader: TDOnlineMartScriptLoader,\n        private formPoster: FormPoster,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        const { methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        this.tdOnlineMartClient = await this.loadTDOnlineMartJs();\n\n        this.mountHostedFields(methodId);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!payment.methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paymentPayload = await this.getPaymentPayloadOrThrow(payment);\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error: unknown) {\n            await this.processWithAdditionalAction(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.tdOnlineMartClient = undefined;\n\n        this.tdInputs.forEach(({ inputElement }: TDOnlineMartInput) => {\n            inputElement?.unmount();\n        });\n\n        return Promise.resolve();\n    }\n\n    private async getPaymentPayloadOrThrow(payment: OrderPaymentRequestBody) {\n        const { methodId, paymentData } = payment;\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n        const commonPaymentData = {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            browser_info: getBrowserInfo(),\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        };\n\n        if (\n            isHostedInstrumentLike(paymentData) &&\n            isVaultedInstrument(paymentData) &&\n            paymentData.instrumentId\n        ) {\n            const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n            const digitalItemsInCart = !!cart.lineItems.digitalItems.length;\n\n            const shouldAddVerificationToken =\n                !this.isTrustedVaultingInstrument(paymentData.instrumentId) || digitalItemsInCart;\n\n            return {\n                methodId,\n                paymentData: {\n                    ...commonPaymentData,\n                    instrumentId: paymentData.instrumentId,\n                    ...(shouldAddVerificationToken ? { nonce: paymentData.instrumentId } : {}),\n                },\n            };\n        }\n\n        let nonce: string;\n\n        try {\n            nonce = await this.getTokenOrThrow();\n        } catch (error) {\n            this.throwTokenizationError(error);\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                ...commonPaymentData,\n                nonce,\n            },\n        };\n    }\n\n    private mountHostedFields(methodId: string): void {\n        const options = this.getHostedFieldsOptions();\n        const tdOnlineMartClient = this.getTDOnlineMartClientOrThrow();\n\n        this.tdInputs.forEach((input: TDOnlineMartInput) => {\n            const inputId = `${methodId}-${input.id}`;\n\n            if (!document.getElementById(inputId)) {\n                return;\n            }\n\n            input.inputElement = tdOnlineMartClient.create(input.fieldType, options);\n            input.inputElement.mount(`#${inputId}`);\n        });\n    }\n\n    private async loadTDOnlineMartJs(): Promise<TDCustomCheckoutSDK> {\n        if (this.tdOnlineMartClient) {\n            return this.tdOnlineMartClient;\n        }\n\n        return this.tdOnlineMartScriptLoader.load();\n    }\n\n    private getTokenOrThrow(): Promise<string> {\n        return new Promise((resolve, reject) => {\n            this.getTDOnlineMartClientOrThrow().createToken((result) => {\n                const { error, token } = result;\n\n                if (error || !token) {\n                    return reject(error);\n                }\n\n                resolve(token);\n            });\n        });\n    }\n\n    private getTDOnlineMartClientOrThrow(): TDCustomCheckoutSDK {\n        if (!this.tdOnlineMartClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.tdOnlineMartClient;\n    }\n\n    private async processWithAdditionalAction(error: unknown): Promise<void> {\n        if (!isTdOnlineMartAdditionalAction(error)) {\n            throw error;\n        }\n\n        const { three_ds_result: threeDSResult }: TdOnlineMartThreeDSErrorBody = error.body;\n        const {\n            acs_url: formUrl,\n            payer_auth_request: threeDSSessionData,\n            merchant_data: creq,\n        } = threeDSResult || {};\n\n        if (!formUrl || !threeDSSessionData || !creq) {\n            throw new PaymentArgumentInvalidError(['formUrl', 'threeDSSessionData', 'creq']);\n        }\n\n        return new Promise((resolve) => {\n            this.formPoster.postForm(\n                formUrl,\n                {\n                    threeDSSessionData,\n                    creq,\n                },\n                resolve,\n                '_top',\n            );\n        });\n    }\n\n    private throwTokenizationError(error: unknown): never {\n        if (!isCreateTokenError(error)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        throw new Error(error.message);\n    }\n\n    private getHostedFieldsOptions() {\n        const style = {\n            error: {\n                color: '#d14343',\n            },\n        };\n\n        const classes = {\n            error: 'form-input--error',\n        };\n\n        return {\n            style,\n            classes,\n        };\n    }\n\n    private isTrustedVaultingInstrument(instrumentId: string): boolean {\n        const instruments = this.paymentIntegrationService.getState().getInstruments();\n\n        const { trustedShippingAddress } =\n            instruments?.find(({ bigpayToken }) => bigpayToken === instrumentId) || {};\n\n        return !!trustedShippingAddress;\n    }\n}\n","import { isArray, isObject, some } from 'lodash';\n\nimport { isRequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TdOnlineMartAdditionalAction, TdOnlineMartThreeDSErrorBody } from './td-online-mart';\n\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\nfunction isTdOnlineMartThreeDSErrorBody(\n    errorBody: unknown,\n): errorBody is TdOnlineMartThreeDSErrorBody {\n    return (\n        isObject(errorBody) &&\n        typeof errorBody === 'object' &&\n        'errors' in errorBody &&\n        'three_ds_result' in errorBody &&\n        isArray((errorBody as TdOnlineMartThreeDSErrorBody).errors) &&\n        some((errorBody as TdOnlineMartThreeDSErrorBody).errors, {\n            code: 'three_d_secure_required',\n        })\n    );\n}\n/* eslint-enable @typescript-eslint/consistent-type-assertions */\n\nexport function isTdOnlineMartAdditionalAction(\n    error: unknown,\n): error is TdOnlineMartAdditionalAction {\n    return isRequestError(error) && isTdOnlineMartThreeDSErrorBody(error.body);\n}\n","import { CreateTokenError } from './td-online-mart';\n\nexport default function isCreateTokenError(error: unknown): error is CreateTokenError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'field' in error &&\n        'type' in error &&\n        'message' in error\n    );\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TDCustomCheckoutSDK, TdOnlineMartHostWindow } from './td-online-mart';\n\nexport default class TDOnlineMartScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private tdOnlineMartWindow: TdOnlineMartHostWindow = window,\n    ) {}\n\n    async load(): Promise<TDCustomCheckoutSDK> {\n        if (!this.tdOnlineMartWindow.customcheckout) {\n            await this.scriptLoader.loadScript(\n                'https://libs.na.bambora.com/customcheckout/1/customcheckout.js',\n            );\n        }\n\n        if (!this.tdOnlineMartWindow.customcheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.tdOnlineMartWindow.customcheckout();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport TDOnlineMartPaymentStrategy from './td-online-mart-payment-strategy';\nimport TDOnlineMartScriptLoader from './td-online-mart-script-loader';\n\nconst createTDOnlineMartPaymentStrategy: PaymentStrategyFactory<TDOnlineMartPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new TDOnlineMartPaymentStrategy(\n        paymentIntegrationService,\n        new TDOnlineMartScriptLoader(getScriptLoader()),\n        createFormPoster(),\n    );\n};\n\nexport default toResolvableModule(createTDOnlineMartPaymentStrategy, [{ id: 'tdonlinemart' }]);\n","import { merge, some } from 'lodash';\n\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    isRequestError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    WithWorldpayAccessPaymentInitializeOptions,\n    WorldpayAccess3DSOptions,\n    WorldpayAccessAdditionalAction,\n    WorldpayAccessPaymentInitializeOptions,\n} from './worldpayaccess-payment-options';\n\nconst IFRAME_NAME = 'worldpay_hosted_payment_page';\nconst IFRAME_HIDDEN_NAME = 'worldpay_hosted_hidden_payment_page';\nconst PAYMENT_CANNOT_CONTINUE = 'Payment cannot continue';\n\nlet submit: (paymentPayload: OrderPaymentRequestBody) => Promise<void>;\n\nexport default class WorldpayAccessPaymentStrategy extends CreditCardPaymentStrategy {\n    private _initializeOptions?: WorldpayAccessPaymentInitializeOptions;\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithWorldpayAccessPaymentInitializeOptions,\n    ): Promise<void> {\n        this._initializeOptions = options && options.worldpay;\n\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return super.initialize(options);\n    }\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentInitializeOptions,\n    ): Promise<void> {\n        const { payment } = orderRequest;\n\n        submit = this._submitAdditionalAction();\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        try {\n            return await super.execute(orderRequest, options);\n        } catch (error) {\n            return this._processAdditionalAction(error, payment);\n        }\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        payment: OrderPaymentRequestBody,\n    ): Promise<void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            return Promise.reject(error);\n        }\n\n        return new Promise((resolve, reject) => {\n            const messageEvent = async (event: MessageEvent) => {\n                if (typeof event.data !== 'string' || !this._isValidJsonWithSessionId(event.data)) {\n                    return reject(new Error(PAYMENT_CANNOT_CONTINUE));\n                }\n\n                window.removeEventListener('message', messageEvent);\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                iframeHidden.remove();\n\n                const data = JSON.parse(event.data);\n                const paymentPayload = merge({}, payment, {\n                    paymentData: { threeDSecure: { token: data.SessionId } },\n                });\n\n                try {\n                    resolve(await submit(paymentPayload));\n                } catch (submitError) {\n                    if (\n                        !isRequestError(submitError) ||\n                        !some(submitError.body.errors, { code: 'three_d_secure_required' })\n                    ) {\n                        return reject(submitError);\n                    }\n\n                    if (!this._initializeOptions) {\n                        return reject(\n                            new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                        );\n                    }\n\n                    const { onLoad } = this._initializeOptions;\n\n                    const frame = this._createIframe(submitError.body.three_ds_result);\n\n                    try {\n                        onLoad(frame, () => reject(new Error('Payment was cancelled')));\n                    } catch (onLoadError) {\n                        reject(new Error(PAYMENT_CANNOT_CONTINUE));\n                    }\n                }\n            };\n\n            window.addEventListener('message', messageEvent);\n\n            let iframeHidden: HTMLIFrameElement;\n\n            try {\n                iframeHidden = this._createHiddenIframe(error.body);\n            } catch (e) {\n                window.removeEventListener('message', messageEvent);\n                throw new Error(PAYMENT_CANNOT_CONTINUE);\n            }\n        });\n    }\n\n    private _createHiddenIframe(body: WorldpayAccessAdditionalAction): HTMLIFrameElement {\n        const iframe = document.createElement('iframe');\n\n        document.body.appendChild(iframe);\n\n        if (!iframe.contentWindow) {\n            throw new Error();\n        }\n\n        iframe.id = IFRAME_HIDDEN_NAME;\n        iframe.height = '0px';\n        iframe.width = '0px';\n\n        const form = document.createElement('form');\n        const formId = 'collectionForm';\n\n        form.id = formId;\n        form.name = 'devicedata';\n        form.method = 'post';\n\n        const url = body.additional_action_required.data.redirect_url;\n\n        form.action = url;\n\n        const inputBin = document.createElement('input');\n\n        inputBin.name = 'Bin';\n        inputBin.type = 'hidden';\n        inputBin.value = body.provider_data.source_id;\n        form.appendChild(inputBin);\n\n        const inputJWT = document.createElement('input');\n\n        inputJWT.name = 'JWT';\n        inputJWT.type = 'hidden';\n        inputJWT.value = body.provider_data.data;\n        form.appendChild(inputJWT);\n\n        const button = document.createElement('button');\n\n        button.type = 'submit';\n        button.id = 'btnsubmit';\n        form.appendChild(button);\n\n        if (navigator.userAgent.match('Firefox')) {\n            iframe.srcdoc = form.outerHTML;\n        } else {\n            iframe.contentWindow.document.body.appendChild(form);\n        }\n\n        const script = document.createElement('script');\n\n        script.innerHTML = `\n            document.getElementById('${formId}').submit();\n        `;\n        iframe.contentWindow.document.body.appendChild(script);\n\n        return iframe;\n    }\n\n    private _createIframe(data: WorldpayAccess3DSOptions): HTMLIFrameElement {\n        const form = document.createElement('form');\n\n        form.id = 'challengeForm';\n        form.method = 'POST';\n        form.action = data.acs_url;\n\n        const inputJWT = document.createElement('input');\n\n        inputJWT.name = 'JWT';\n        inputJWT.type = 'hidden';\n        inputJWT.value = data.payer_auth_request;\n        form.appendChild(inputJWT);\n\n        const merchant = document.createElement('input');\n\n        merchant.name = 'MD';\n        merchant.type = 'hidden';\n        merchant.value = `merchantSessionId=${data.merchant_data}`;\n        form.appendChild(merchant);\n\n        const script = document.createElement('script');\n\n        script.type = 'text/javascript';\n        script.innerHTML =\n            \"window.onload = function() { document.getElementById('challengeForm').submit(); }\";\n\n        const iframe = document.createElement('iframe');\n\n        iframe.name = IFRAME_NAME;\n        iframe.height = '400';\n        iframe.width = '100%';\n        iframe.srcdoc = `${form.outerHTML} ${script.outerHTML}`;\n\n        return iframe;\n    }\n\n    private _submitAdditionalAction() {\n        if (this._shouldRenderHostedForm) {\n            if (!this._hostedForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const hostedForm = this._hostedForm;\n\n            return async (paymentPayload: OrderPaymentRequestBody) => {\n                await hostedForm.submit(paymentPayload);\n            };\n        }\n\n        return async (paymentPayload: OrderPaymentRequestBody) => {\n            await this._paymentIntegrationService.submitPayment(paymentPayload);\n        };\n    }\n\n    private _isValidJsonWithSessionId(str: string) {\n        try {\n            const data = JSON.parse(str);\n\n            if (data.SessionId) {\n                return true;\n            }\n\n            return false;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport WorldpayAccessPaymetStrategy from './worldpayaccess-payment-strategy';\n\nconst createWorldpayAccessPaymentStrategy: PaymentStrategyFactory<WorldpayAccessPaymetStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new WorldpayAccessPaymetStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createWorldpayAccessPaymentStrategy, [{ id: 'worldpayaccess' }]);\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class StorefrontPaymentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    async saveExternalId(methodId: string, token: string): Promise<void> {\n        const url = `/api/storefront/payment/${methodId}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                externalId: token,\n                provider: methodId,\n            },\n        };\n\n        await this._requestSender.post<void>(url, options);\n    }\n}\n","import {\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    StorefrontPaymentRequestSender,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private storefrontPaymentRequestSender: StorefrontPaymentRequestSender,\n    ) {}\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n        const { getPaymentMethodOrThrow } = await this.paymentIntegrationService.loadPaymentMethod(\n            methodId,\n            options,\n        );\n\n        const {\n            clientToken,\n            initializationData,\n        }: { clientToken?: string; initializationData?: { redirectUrl?: string } } =\n            getPaymentMethodOrThrow(methodId);\n        const redirectUrl = initializationData?.redirectUrl;\n\n        if (!clientToken || !redirectUrl) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { id: nonce } = JSON.parse(clientToken);\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        const { isStoreCreditApplied: useStoreCredit } = this.paymentIntegrationService\n            .getState()\n            .getCheckoutOrThrow();\n\n        await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        await this.paymentIntegrationService.initializePayment(methodId, { useStoreCredit });\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this._prepareForReferredRegistration(methodId, nonce);\n\n        try {\n            await this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: { nonce },\n            });\n        } catch (error) {\n            if (isRequestError(error) && error.body.status === 'additional_action_required') {\n                return new Promise(() => window.location.replace(redirectUrl));\n            }\n\n            throw error;\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _prepareForReferredRegistration(methodId: string, externalId: string): Promise<void> {\n        return this.storefrontPaymentRequestSender.saveExternalId(methodId, externalId);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    StorefrontPaymentRequestSender,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ZipPaymentStrategy from './zip-payment-strategy';\n\nconst createZipPaymentStrategy: PaymentStrategyFactory<ZipPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const requestSender = createRequestSender({ host: getHost() });\n    const storefrontPaymentRequestSender = new StorefrontPaymentRequestSender(requestSender);\n\n    return new ZipPaymentStrategy(paymentIntegrationService, storefrontPaymentRequestSender);\n};\n\nexport default toResolvableModule(createZipPaymentStrategy, [{ id: 'zip' }, { id: 'quadpay' }]);\n","import {\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2Placement,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    NotImplementedError,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithAmazonPayV2CustomerInitializeOptions } from './amazon-pay-v2-customer-initialize-options';\n\nexport default class AmazonPayV2CustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithAmazonPayV2CustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, amazonpay } = options;\n\n        if (!methodId || !amazonpay?.container) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        let paymentMethod: PaymentMethod<AmazonPayV2InitializeOptions>;\n\n        try {\n            paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n            paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethodOrThrow(methodId);\n        }\n\n        await this.amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        this.amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this.paymentIntegrationService.getState(),\n            containerId: amazonpay.container,\n            methodId,\n            placement: AmazonPayV2Placement.Checkout,\n        });\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.amazonPayV2PaymentProcessor.deinitialize();\n    }\n\n    signIn(): Promise<void> {\n        throw new NotImplementedError(\n            'In order to sign in via Amazon, the shopper must click on \"Amazon Pay\" button.',\n        );\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const payment = state.getPaymentId();\n\n        if (!payment) {\n            return;\n        }\n\n        await this.amazonPayV2PaymentProcessor.signout();\n        await this.paymentIntegrationService.remoteCheckoutSignOut(payment.providerId, options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n}\n","import { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AmazonPayV2CustomerStrategy from './amazon-pay-v2-customer-strategy';\n\nconst createAmazonPayV2CustomerStrategy: CustomerStrategyFactory<AmazonPayV2CustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AmazonPayV2CustomerStrategy(\n        paymentIntegrationService,\n        createAmazonPayV2PaymentProcessor(),\n    );\n};\n\nexport default toResolvableModule(createAmazonPayV2CustomerStrategy, [{ id: 'amazonpay' }]);\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    AddressRequestBody,\n    Cart,\n    Checkout,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport { WithApplePayCustomerInitializeOptions } from './apple-pay-customer-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory, { assertApplePayWindow } from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _isWebBrowserSupported?: boolean;\n    private _onAuthorizeCallback = noop;\n    private _onError = noop;\n    private _onClick = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n    private _hasApplePaySession = false;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithApplePayCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, applepay } = options;\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            container,\n            shippingLabel,\n            subtotalLabel,\n            onError = noop,\n            onClick = noop,\n            onPaymentAuthorize,\n        } = applepay;\n\n        this._shippingLabel = shippingLabel || DefaultLabels.Shipping;\n        this._subTotalLabel = subtotalLabel || DefaultLabels.Subtotal;\n        this._onAuthorizeCallback = onPaymentAuthorize;\n        this._onError = onError;\n        this._onClick = onClick;\n\n        let state = this._paymentIntegrationService.getState();\n        const { features } = state.getStoreConfigOrThrow().checkoutSettings;\n\n        this._isWebBrowserSupported = features['PAYPAL-4324.applepay_web_browser_support'];\n\n        if (this._isWebBrowserSupported) {\n            await this._applePayScriptLoader.loadSdk();\n        }\n\n        assertApplePayWindow(window);\n\n        try {\n            this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(methodId);\n            this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n\n        this._applePayButton = this._createButton(container);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        if (this._paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    signIn(): Promise<void> {\n        throw new NotImplementedError(\n            'In order to sign in via Apple, the shopper must click on \"Apple Pay\" button.',\n        );\n    }\n\n    signOut(): Promise<void> {\n        throw new NotImplementedError('Need to do signout via apple.');\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const applePayButton = this._isWebBrowserSupported\n            ? this._createThirdPartyButton()\n            : this._createNativeButton();\n\n        container.appendChild(applePayButton);\n\n        return applePayButton;\n    }\n\n    private _createThirdPartyButton(): HTMLElement {\n        const applePayButton = document.createElement('apple-pay-button');\n\n        applePayButton.setAttribute('buttonstyle', 'black');\n        applePayButton.setAttribute('type', 'plain');\n        applePayButton.setAttribute(\n            'style',\n            '--apple-pay-button-width: 100%; --apple-pay-button-height: 36px; --apple-pay-button-border-radius: 4px;',\n        );\n\n        return applePayButton;\n    }\n\n    private _createNativeButton(): HTMLElement {\n        const applePayButton = document.createElement('button');\n\n        applePayButton.setAttribute('type', 'button');\n        applePayButton.setAttribute('aria-label', 'Apple Pay');\n\n        return applePayButton;\n    }\n\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (this._hasApplePaySession) {\n            return;\n        }\n\n        this._onClick();\n\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n        this._hasApplePaySession = true;\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (err) {\n                this._onError(err);\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            this._hasApplePaySession = false;\n\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                return this._onError(new PaymentMethodCancelledError());\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n            this._hasApplePaySession = false;\n\n            return this._onError(error);\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            return this._onError(error);\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n            this._hasApplePaySession = false;\n\n            return this._onError(error);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            return this._onError(error);\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        const state = this._paymentIntegrationService.getState();\n        const braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { assertApplePayWindow } from './apple-pay-session-factory';\n\nexport default class ApplePayScriptLoader {\n    private sdkVersion = '1.latest';\n\n    constructor(private scriptLoader: ScriptLoader) {}\n\n    async loadSdk() {\n        await this.scriptLoader.loadScript(\n            `https://applepay.cdn-apple.com/jsapi/${this.sdkVersion}/apple-pay-sdk.js`,\n        );\n\n        assertApplePayWindow(window);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayCustomerStrategy from './apple-pay-customer-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayCustomerStrategy: CustomerStrategyFactory<ApplePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayCustomerStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayCustomerStrategy, [{ id: 'applepay' }]);\n","const DefaultCheckoutButtonHeight = 36;\n\nexport default DefaultCheckoutButtonHeight;\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsCustomerInitializeOptions, {\n    WithBigCommercePaymentsCustomerInitializeOptions,\n} from './bigcommerce-payments-customer-initialize-options';\n\nexport default class BigCommercePaymentsCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBigCommercePaymentsCustomerInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments.container\" argument is not provided.',\n            );\n        }\n\n        if (bigcommerce_payments.onClick && typeof bigcommerce_payments.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = bigcommerce_payments.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            // eslint-disable-next-line no-console\n            console.error(\n                '[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, bigcommerce_payments);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n\n        return Promise.resolve();\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments: BigCommercePaymentsCustomerInitializeOptions,\n    ): void {\n        const { container, onClick, onComplete } = bigcommerce_payments;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            ...defaultCallbacks,\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${container}`);\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address except shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private handleError(error: unknown) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsCustomerStrategy from './bigcommerce-payments-customer-strategy';\n\nconst createBigCommercePaymentsCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsCustomerStrategy, [\n    { id: 'bigcommerce_payments' },\n]);\n","import {\n    BigCommercePaymentsFastlaneUtils,\n    BigCommercePaymentsInitializationData,\n    getFastlaneStyles,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneStylesOption,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsFastlaneCustomerInitializeOptions, {\n    WithBigCommercePaymentsFastlaneCustomerInitializeOptions,\n} from './bigcommerce-payments-fastlane-customer-initialize-options';\n\nexport default class BigCommercePaymentsFastlaneCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsSdk: PayPalSdkHelper,\n        private bigCommercePaymentsFastlaneUtils: BigCommercePaymentsFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions &\n            WithBigCommercePaymentsFastlaneCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_fastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        try {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n            const isTestModeEnabled = !!paymentMethod.initializationData?.isDeveloperModeApplicable;\n\n            const paypalFastlaneSdk = await this.bigCommercePaymentsSdk.getPayPalFastlaneSdk(\n                paymentMethod,\n                cart.currency.code,\n                cart.id,\n            );\n\n            await this.bigCommercePaymentsFastlaneUtils.initializePayPalFastlane(\n                paypalFastlaneSdk,\n                isTestModeEnabled,\n                this.getFastlaneStyles(methodId, bigcommerce_payments_fastlane),\n            );\n        } catch (_) {\n            // TODO: add logger to be able to debug issues if there any\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n\n        return Promise.resolve();\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    async executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<void> {\n        const { checkoutPaymentMethodExecuted, continueWithCheckoutCallback, methodId } =\n            options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomerOrThrow();\n\n        if (customer.isGuest) {\n            if (\n                checkoutPaymentMethodExecuted &&\n                typeof checkoutPaymentMethodExecuted === 'function'\n            ) {\n                checkoutPaymentMethodExecuted();\n            }\n\n            try {\n                await this.runPayPalAuthenticationFlowOrThrow(methodId);\n            } catch (_) {\n                // TODO: add logger to be able to debug issues if there any\n                // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n            }\n        }\n\n        continueWithCheckoutCallback();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    private async runPayPalAuthenticationFlowOrThrow(methodId: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const customer = state.getCustomer();\n        const billingAddress = state.getBillingAddress();\n        const customerEmail = customer?.email || billingAddress?.email || '';\n\n        const { customerContextId } =\n            await this.bigCommercePaymentsFastlaneUtils.lookupCustomerOrThrow(customerEmail);\n\n        const authenticationResult =\n            await this.bigCommercePaymentsFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                customerContextId,\n            );\n\n        const isAuthenticationFlowCanceled =\n            authenticationResult.authenticationState === PayPalFastlaneAuthenticationState.CANCELED;\n\n        await this.updateCustomerDataState(methodId, authenticationResult);\n\n        if (isAuthenticationFlowCanceled) {\n            this.bigCommercePaymentsFastlaneUtils.removeStorageSessionId();\n        } else {\n            this.bigCommercePaymentsFastlaneUtils.updateStorageSessionId(cartId);\n        }\n    }\n\n    private async updateCustomerDataState(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n\n        const { authenticationState, addresses, billingAddress, shippingAddress, instruments } =\n            this.bigCommercePaymentsFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                methodId,\n                authenticationResult,\n            );\n\n        await this.paymentIntegrationService.updatePaymentProviderCustomer({\n            authenticationState,\n            addresses,\n            instruments,\n        });\n\n        if (billingAddress) {\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && cart.lineItems.physicalItems.length > 0) {\n            const updatedState = await this.paymentIntegrationService.updateShippingAddress(\n                shippingAddress,\n            );\n\n            const paymentMethod =\n                updatedState.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n                    methodId,\n                );\n            const { isFastlaneShippingOptionAutoSelectEnabled } =\n                paymentMethod.initializationData || {};\n            const consignments = updatedState.getConsignments() || [];\n            const availableShippingOptions = consignments[0]?.availableShippingOptions || [];\n            const firstShippingOption = availableShippingOptions[0];\n            const recommendedShippingOption = availableShippingOptions.find(\n                (option) => option.isRecommended,\n            );\n\n            if (\n                (recommendedShippingOption || firstShippingOption) &&\n                isFastlaneShippingOptionAutoSelectEnabled\n            ) {\n                const shippingOptionId = recommendedShippingOption?.id || firstShippingOption.id;\n\n                await this.paymentIntegrationService.selectShippingOption(shippingOptionId);\n            }\n        }\n    }\n\n    /**\n     *\n     * Fastlane styling methods\n     *\n     */\n    private getFastlaneStyles(\n        methodId: string,\n        bigcommerce_payments_fastlane:\n            | BigCommercePaymentsFastlaneCustomerInitializeOptions\n            | undefined,\n    ): PayPalFastlaneStylesOption | undefined {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        const { fastlaneStyles, isFastlaneStylingEnabled } = paymentMethod.initializationData || {};\n\n        return getFastlaneStyles(\n            isFastlaneStylingEnabled ? fastlaneStyles : {},\n            bigcommerce_payments_fastlane?.styles,\n        );\n    }\n}\n","import {\n    createBigCommercePaymentsFastlaneUtils,\n    createBigCommercePaymentsSdk,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsFastlaneCustomerStrategy from './bigcommerce-payments-fastlane-customer-strategy';\n\nconst createBigCommercePaymentsFastlaneCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsFastlaneCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsFastlaneCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsSdk(),\n        createBigCommercePaymentsFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsFastlaneCustomerStrategy, [\n    { id: 'bigcommerce_payments_fastlane' }, // this method id will be provided for users from test group\n    { id: 'bigcommerce_payments_creditcards' }, // this method id will be provided for users from control group\n]);\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPayLaterCustomerInitializeOptions, {\n    WithBigCommercePaymentsPayLaterCustomerInitializeOptions,\n} from './bigcommerce-payments-paylater-customer-initialize-options';\n\nexport default class BigCommercePaymentsPayLaterCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions &\n            WithBigCommercePaymentsPayLaterCustomerInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_paylater, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_paylater) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_paylater\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_paylater.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_paylater.container\" argument is not provided.',\n            );\n        }\n\n        if (\n            bigcommerce_payments_paylater.onClick &&\n            typeof bigcommerce_payments_paylater.onClick !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_paylater.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = bigcommerce_payments_paylater.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            // eslint-disable-next-line no-console\n            console.error(\n                '[BC BigCommercePayments PayLater]: button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, bigcommerce_payments_paylater);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        bigCommercePaymentsPayLater: BigCommercePaymentsPayLaterCustomerInitializeOptions,\n    ): void {\n        const { container, onComplete, onClick } = bigCommercePaymentsPayLater;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_paylater',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n                    fundingSource,\n                    style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle({\n                        ...checkoutTopButtonStyles,\n                        height: DefaultCheckoutButtonHeight,\n                    }),\n                    ...defaultCallbacks,\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${container}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.bigCommercePaymentsIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address except shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private handleError(error: unknown) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPayLaterCustomerStrategy from './bigcommerce-payments-paylater-customer-strategy';\n\nconst createBigCommercePaymentsPayLaterCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsPayLaterCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPayLaterCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPayLaterCustomerStrategy, [\n    { id: 'bigcommerce_payments_paylater' },\n]);\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsVenmoCustomerInitializeOptions, {\n    WithBigCommercePaymentsVenmoCustomerInitializeOptions,\n} from './bigcommerce-payments-venmo-customer-initialize-options';\n\nexport default class BigCommercePaymentsVenmoCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBigCommercePaymentsVenmoCustomerInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_venmo, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_venmo) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_venmo\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_venmo.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_venmo.container\" argument is not provided.',\n            );\n        }\n\n        if (\n            bigcommerce_payments_venmo.onClick &&\n            typeof bigcommerce_payments_venmo.onClick !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_venmo.onClick\" argument is not a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            // eslint-disable-next-line no-console\n            console.error(\n                '[BC Payments Venmo]: Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, bigcommerce_payments_venmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments_venmo: BigCommercePaymentsVenmoCustomerInitializeOptions,\n    ): void {\n        const { container, onClick } = bigcommerce_payments_venmo;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_venmo',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${container}`);\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(container);\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsVenmoCustomerStrategy from './bigcommerce-payments-venmo-customer-strategy';\n\nconst createBigCommercePaymentsVenmoCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsVenmoCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsVenmoCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsVenmoCustomerStrategy, [\n    { id: 'bigcommerce_payments_venmo' },\n]);\n","import { noop } from 'rxjs';\n\nimport {\n    CheckoutPaymentMethodExecutedOptions,\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    isCustomError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    PaymentMethodInvalidError,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BoltCheckout, BoltHostWindow, BoltInitializationData } from './bolt';\nimport { WithBoltCustomerInitializeOptions } from './bolt-customer-initialize-options';\nimport BoltScriptLoader from './bolt-script-loader';\n\nexport default class BoltCustomerStrategy implements CustomerStrategy {\n    private boltHostWindow: BoltHostWindow = window;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private boltScriptLoader: BoltScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBoltCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bolt } = options;\n        const { onInit } = bolt || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const paymentMethod: PaymentMethod<BoltInitializationData> = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<BoltInitializationData>(methodId);\n\n        if (!paymentMethod.initializationData?.publishableKey) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { developerConfig, publishableKey } = paymentMethod.initializationData;\n\n        await this.boltScriptLoader.loadBoltClient(\n            publishableKey,\n            paymentMethod.config.testMode,\n            developerConfig,\n        );\n\n        if (onInit && typeof onInit === 'function') {\n            const email = this.getCustomerEmail();\n            const hasBoltAccount = await this.hasBoltAccount(email);\n\n            onInit(hasBoltAccount, email);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n\n        return Promise.resolve();\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    async executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<void> {\n        const {\n            continueWithCheckoutCallback = noop,\n            checkoutPaymentMethodExecuted,\n            methodId,\n        } = options || {};\n        const email = this.getCustomerEmail();\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        if (!email) {\n            continueWithCheckoutCallback();\n\n            return;\n        }\n\n        return this.openBoltCheckoutModalOrThrow(\n            email,\n            methodId,\n            continueWithCheckoutCallback,\n            checkoutPaymentMethodExecuted,\n        );\n    }\n\n    private async openBoltCheckoutModalOrThrow(\n        email: string,\n        methodId: string,\n        continueWithCheckoutCallback: () => void,\n        checkoutPaymentMethodExecuted?: (payload: CheckoutPaymentMethodExecutedOptions) => void,\n    ): Promise<void> {\n        const boltClient = this.getBoltClientOrThrow();\n        const paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethod<BoltInitializationData>(methodId);\n\n        try {\n            if (paymentMethod?.initializationData?.embeddedOneClickEnabled) {\n                const hasBoltAccount = await this.hasBoltAccount(email);\n\n                if (hasBoltAccount) {\n                    const callbacks = {\n                        close: () => {\n                            continueWithCheckoutCallback();\n                        },\n                    };\n\n                    await boltClient.openCheckout(email, callbacks);\n                } else {\n                    continueWithCheckoutCallback();\n                }\n\n                if (typeof checkoutPaymentMethodExecuted === 'function') {\n                    checkoutPaymentMethodExecuted({ hasBoltAccount });\n                }\n            } else {\n                continueWithCheckoutCallback();\n            }\n        } catch (error) {\n            if (\n                isCustomError(error) &&\n                error.name !== 'MissingDataError' &&\n                error.name !== 'NotInitializedError'\n            ) {\n                throw new PaymentMethodFailedError(error.message);\n            }\n\n            throw error;\n        }\n    }\n\n    private getBoltClientOrThrow(): BoltCheckout {\n        const boltClient = this.boltHostWindow.BoltCheckout;\n\n        if (!boltClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return boltClient;\n    }\n\n    private async hasBoltAccount(email: string) {\n        const boltClient = this.getBoltClientOrThrow();\n\n        try {\n            return await boltClient.hasBoltAccount(email);\n        } catch {\n            throw new PaymentMethodInvalidError();\n        }\n    }\n\n    private getCustomerEmail() {\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomer();\n        const billingAddress = state.getBillingAddress();\n\n        return customer?.email || billingAddress?.email || '';\n    }\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BoltCustomerStrategy from './bolt-customer-strategy';\nimport BoltScriptLoader from './bolt-script-loader';\n\nconst createBoltCustomerStrategy: CustomerStrategyFactory<BoltCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BoltCustomerStrategy(\n        paymentIntegrationService,\n        new BoltScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createBoltCustomerStrategy, [{ id: 'bolt' }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCustomerInitializeOptions, {\n    WithBraintreePaypalCustomerInitializeOptions,\n} from './braintree-paypal-customer-initialize-options';\n\nexport default class BraintreePaypalCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBraintreePaypalCustomerInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypal, methodId } = options;\n        const { container, onError } = braintreepaypal || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal.container\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<BraintreeInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n            if (!paymentMethod.clientToken) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n            }\n        } catch (_e) {\n            state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        const { clientToken, config, initializationData } = paymentMethod;\n        const { paymentButtonStyles } = initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n            commit: false,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                methodId,\n                Boolean(config.testMode),\n                checkoutTopButtonStyles,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, container, onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n        methodId: string,\n        testMode: boolean,\n        buttonStyles: PaypalStyleOptions,\n    ): void {\n        const { container, onClick = noop } = braintreepaypal;\n\n        const { paypal } = this.braintreeHostWindow;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            const paypalButtonRender = paypal.Buttons({\n                env: this.braintreeIntegrationService.getBraintreeEnv(testMode),\n                fundingSource,\n                style: { ...buttonStyles, height: DefaultCheckoutButtonHeight },\n                createOrder: () =>\n                    this.setupPayment(braintreePaypalCheckout, braintreepaypal, methodId),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this.tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        braintreepaypal,\n                    ),\n                onClick,\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${container}`);\n            }\n        } else {\n            this.braintreeIntegrationService.removeElement(container);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        try {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            const state = this.paymentIntegrationService.getState();\n            const amount = state.getCheckoutOrThrow().outstandingBalance;\n            const currency = state.getCartOrThrow().currency.code;\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n            const address = customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? this.braintreeIntegrationService.mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency,\n                offerCredit: false,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            const { container, onError } = braintreepaypal;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            const { container, onError } = braintreepaypal;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCustomerStrategy from './braintree-paypal-customer-strategy';\n\nconst createBraintreePaypalCustomerStrategy: CustomerStrategyFactory<\n    BraintreePaypalCustomerStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalCustomerStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCustomerStrategy, [\n    { id: 'braintreepaypal' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditCustomerInitializeOptions, {\n    WithBraintreePaypalCreditCustomerInitializeOptions,\n} from './braintree-paypal-credit-customer-initialize-options';\n\nexport default class BraintreePaypalCreditCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBraintreePaypalCreditCustomerInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypalcredit, methodId } = options;\n        const { container, onError } = braintreepaypalcredit || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit.container\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<BraintreeInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        const { clientToken, config, initializationData } = paymentMethod;\n        const { paymentButtonStyles } = initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n            commit: false,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                methodId,\n                Boolean(config.testMode),\n                { ...checkoutTopButtonStyles, height: DefaultCheckoutButtonHeight },\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, container, onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n        methodId: string,\n        testMode: boolean,\n        buttonStyles: PaypalStyleOptions,\n    ): void {\n        const { container, onClick = noop } = braintreepaypalcredit;\n        const { paypal } = this.braintreeHostWindow;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n\n            fundingSources.forEach((fundingSource) => {\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        fundingSource,\n                        style: buttonStyles,\n                        createOrder: () =>\n                            this.setupPayment(\n                                braintreePaypalCheckout,\n                                braintreepaypalcredit,\n                                methodId,\n                            ),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this.tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                braintreepaypalcredit,\n                            ),\n                        onClick,\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${container}`);\n                        hasRenderedSmartButton = true;\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this.braintreeIntegrationService.removeElement(container);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        try {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            const state = this.paymentIntegrationService.getState();\n            const amount = state.getCheckoutOrThrow().outstandingBalance;\n            const currency = state.getCartOrThrow().currency.code;\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n            const address = customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? this.braintreeIntegrationService.mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency,\n                offerCredit: true,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            const { container, onError } = braintreepaypalcredit;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            const { container, onError } = braintreepaypalcredit;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditCustomerStrategy from './braintree-paypal-credit-customer-strategy';\n\nconst createBraintreePaypalCreditCustomerStrategy: CustomerStrategyFactory<\n    BraintreePaypalCreditCustomerStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalCreditCustomerStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCreditCustomerStrategy, [\n    { id: 'braintreepaypalcredit' },\n]);\n","import {\n    BraintreeInitializationData,\n    getFastlaneStyles,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithBraintreeFastlaneCustomerInitializeOptions } from './braintree-fastlane-customer-initialize-options';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nexport default class BraintreeFastlaneCustomerStrategy implements CustomerStrategy {\n    private isAcceleratedCheckoutEnabled = false;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeFastlaneUtils: BraintreeFastlaneUtils,\n    ) {}\n\n    async initialize({\n        methodId,\n        braintreefastlane,\n    }: CustomerInitializeOptions & WithBraintreeFastlaneCustomerInitializeOptions): Promise<void> {\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        const paymentMethod = await this.getValidPaymentMethodOrThrow(methodId);\n\n        const { isAcceleratedCheckoutEnabled, isFastlaneStylingEnabled } =\n            paymentMethod.initializationData || {};\n\n        const paypalFastlaneStylesSettings = isFastlaneStylingEnabled\n            ? paymentMethod.initializationData?.fastlaneStyles\n            : undefined;\n\n        this.isAcceleratedCheckoutEnabled = !!isAcceleratedCheckoutEnabled;\n\n        try {\n            if (this.isAcceleratedCheckoutEnabled) {\n                const fastlaneStyles = getFastlaneStyles(\n                    paypalFastlaneStylesSettings,\n                    braintreefastlane?.styles,\n                );\n\n                await this.braintreeFastlaneUtils.initializeBraintreeFastlaneOrThrow(\n                    paymentMethod.id,\n                    fastlaneStyles,\n                );\n            }\n        } catch (_) {\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n\n        return Promise.resolve();\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    async executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<void> {\n        const { checkoutPaymentMethodExecuted, continueWithCheckoutCallback } = options || {};\n\n        if (typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomerOrThrow();\n\n        if (this.isAcceleratedCheckoutEnabled && customer.isGuest) {\n            const shouldRunAuthenticationFlow = await this.shouldRunAuthenticationFlow();\n\n            if (\n                checkoutPaymentMethodExecuted &&\n                typeof checkoutPaymentMethodExecuted === 'function'\n            ) {\n                checkoutPaymentMethodExecuted();\n            }\n\n            if (shouldRunAuthenticationFlow) {\n                await this.braintreeFastlaneUtils.runPayPalAuthenticationFlowOrThrow(\n                    undefined,\n                    true,\n                );\n            }\n        }\n\n        continueWithCheckoutCallback();\n    }\n\n    // TODO: remove this method after A/B testing finished\n    private async shouldRunAuthenticationFlow(): Promise<boolean> {\n        const primaryMethodId = 'braintreeacceleratedcheckout';\n\n        try {\n            // Info: we should load payment method each time to detect if the user\n            // should be in a test or in a control group\n            await this.paymentIntegrationService.loadPaymentMethod(primaryMethodId);\n\n            const state = this.paymentIntegrationService.getState();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(primaryMethodId);\n\n            // Info: shouldRunAcceleratedCheckout is responsible for the flow of A/B testing purposes\n            // when shouldRunAcceleratedCheckout is true, the lookup PayPal Connect method should be called,\n            // otherwise AcceleratedCheckout should not be available for the customer\n            return paymentMethod.initializationData?.shouldRunAcceleratedCheckout || false;\n        } catch (_) {\n            return false;\n        }\n    }\n\n    private async getValidPaymentMethodOrThrow(\n        methodId: string,\n    ): Promise<PaymentMethod<BraintreeInitializationData>> {\n        let validPaymentMethodId = methodId;\n\n        try {\n            await this.paymentIntegrationService.loadPaymentMethod(validPaymentMethodId);\n        } catch {\n            validPaymentMethodId =\n                methodId === 'braintree' ? 'braintreeacceleratedcheckout' : 'braintree';\n            await this.paymentIntegrationService.loadPaymentMethod(validPaymentMethodId);\n        }\n\n        return this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<BraintreeInitializationData>(validPaymentMethodId);\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeFastlaneCustomerStrategy from './braintree-fastlane-customer-strategy';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nconst createBraintreeFastlaneCustomerStrategy: CustomerStrategyFactory<\n    BraintreeFastlaneCustomerStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n    const braintreeFastlaneUtils = new BraintreeFastlaneUtils(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n    );\n\n    return new BraintreeFastlaneCustomerStrategy(paymentIntegrationService, braintreeFastlaneUtils);\n};\n\n// Info: braintree method id was added only for A/B testing purposes.\n// The main reason why we can't go in other way, because braintreeacceleratedcheckout\n// may be turned on only when BE knows customer's email address (to understand should we show the feature for the user or not).\n// So { id: 'braintree' }, should be removed after A/B testing\nexport default toResolvableModule(createBraintreeFastlaneCustomerStrategy, [\n    { id: 'braintreeacceleratedcheckout' },\n    { id: 'braintree' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeDataCollector,\n    BraintreeSdk,\n    BraintreeVisaCheckout,\n    VisaCheckoutAddress,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    LegacyAddress,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithBraintreeVisaCheckoutCustomerInitializeOptions } from './braintree-visa-customer-initialize-options';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private buttonClassName = 'visa-checkout-wrapper';\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBraintreeVisaCheckoutCustomerInitializeOptions,\n    ): Promise<void> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const checkout = state.getCheckoutOrThrow();\n\n        const { clientToken, config } = state.getPaymentMethodOrThrow(methodId);\n\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken);\n\n        const braintreeVisaCheckout = await this.braintreeSdk.getBraintreeVisaCheckout();\n\n        const visaCheckoutInstance = await this.braintreeSdk.getVisaCheckoutSdk(config.testMode);\n\n        const { container, onError } = visaCheckoutOptions;\n\n        this.onError = onError || noop;\n\n        const initOptions = braintreeVisaCheckout.createInitOptions({\n            paymentRequest: {\n                currencyCode: storeConfig.currency.code,\n                subtotal: String(checkout.subtotal),\n            },\n            settings: {\n                locale: storeConfig.storeProfile.storeLanguage,\n                shipping: {\n                    collectShipping: true,\n                },\n            },\n        });\n\n        const signInButton = this.createSignInButton(container, this.buttonClassName);\n\n        await visaCheckoutInstance.init(initOptions);\n\n        visaCheckoutInstance.on(\n            'payment.success',\n            (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                this.tokenizePayment(braintreeVisaCheckout, paymentSuccessPayload)\n                    .then(() => this.paymentIntegrationService.loadCheckout())\n                    .catch((error) => this.handleError(error)),\n        );\n\n        visaCheckoutInstance.on('payment.error', (_, error) => this.handleError(error));\n\n        signInButton.style.visibility = 'visible';\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n    }\n\n    signIn(): Promise<void> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.',\n        );\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private async tokenizePayment(\n        braintreeVisaCheckout: BraintreeVisaCheckout,\n        payment: VisaCheckoutPaymentSuccessPayload,\n    ) {\n        return Promise.all([\n            braintreeVisaCheckout.tokenize(payment),\n            this.braintreeSdk.getDataCollectorOrThrow(),\n        ]).then(([payload, deviceData]) => {\n            const state = this.paymentIntegrationService.getState();\n\n            const shipping = state.getShippingAddress();\n            const billing = state.getBillingAddress();\n\n            const {\n                shippingAddress = this.mapToVisaCheckoutAddress(shipping),\n                billingAddress = this.mapToVisaCheckoutAddress(billing),\n            } = payload;\n\n            return this.postForm(\n                {\n                    ...payload,\n                    shippingAddress,\n                    billingAddress,\n                },\n                deviceData,\n            );\n        });\n    }\n\n    private postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: paymentData.type,\n            nonce: paymentData.nonce,\n            provider: 'braintreevisacheckout',\n            action: 'set_external_checkout',\n            device_data: deviceData,\n            card_information: JSON.stringify({\n                type: cardInformation.cardType,\n                number: cardInformation.lastTwo,\n            }),\n            billing_address: JSON.stringify(this.getAddress(userEmail, billingAddress)),\n            shipping_address: JSON.stringify(this.getAddress(userEmail, shippingAddress)),\n        });\n    }\n\n    private mapToVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Unable to proceed because the provided container ID is not valid.');\n        }\n\n        return this.insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource =\n            'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n\n        visaCheckoutButton.style.display = 'flex';\n        visaCheckoutButton.style.flexDirection = 'column';\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.style.width = 'max-content';\n\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n\n    private handleError(error: Error) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n    VisaCheckoutHostWindow,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVisaCheckoutCustomerStrategy from './braintree-visa-checkout-customer-strategy';\n\nconst createBraintreeVisaCheckoutCustomerStrategy: CustomerStrategyFactory<\n    BraintreeVisaCheckoutCustomerStrategy\n> = (paymentIntegrationService) => {\n    const hostWindow: VisaCheckoutHostWindow & BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(getScriptLoader(), hostWindow, braintreeSDKVersionManager),\n    );\n\n    return new BraintreeVisaCheckoutCustomerStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVisaCheckoutCustomerStrategy, [\n    { id: 'braintreevisacheckout' },\n]);\n","import {\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    guard,\n    InvalidArgumentError,\n    NotImplementedError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCustomerInitializeOptions, {\n    WithGooglePayCustomerInitializeOptions,\n} from './google-pay-customer-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    GooglePayError,\n    GooglePayInitializationData,\n    GooglePayPaymentOptions,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _paymentButton?: HTMLElement;\n    private _methodId?: keyof WithGooglePayCustomerInitializeOptions;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {}\n\n    async initialize(\n        options?: CustomerInitializeOptions & WithGooglePayCustomerInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        const googlePayOptions = options[this._getMethodId()];\n\n        if (!googlePayOptions) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        let state = this._paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<GooglePayInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodId());\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodId());\n        }\n\n        try {\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(paymentMethod.initializationData?.storeCountry),\n            );\n        } catch {\n            return;\n        }\n\n        this._addPaymentButton(googlePayOptions);\n    }\n\n    signIn(): Promise<void> {\n        return Promise.reject(\n            new NotImplementedError(\n                'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.',\n            ),\n        );\n    }\n\n    async signOut(): Promise<void> {\n        const providerId = this._paymentIntegrationService.getState().getPaymentId()?.providerId;\n\n        if (providerId) {\n            await this._googlePayPaymentProcessor.signOut(providerId);\n        }\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentButton?.remove();\n        this._paymentButton = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _getGooglePayClientOptions(countryCode?: string): GooglePayPaymentOptions {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({\n                    callbackTrigger,\n                    shippingAddress,\n                    shippingOptionData,\n                    offerData,\n                }) => {\n                    const {\n                        availableTriggers,\n                        addressChangeTriggers,\n                        shippingOptionsChangeTriggers,\n                        offerChangeTriggers,\n                    } = this._googlePayPaymentProcessor.getCallbackTriggers();\n\n                    if (!availableTriggers.includes(callbackTrigger)) {\n                        return;\n                    }\n\n                    const availableShippingOptions = addressChangeTriggers.includes(callbackTrigger)\n                        ? await this._googlePayPaymentProcessor.handleShippingAddressChange(\n                              shippingAddress,\n                          )\n                        : undefined;\n\n                    if (shippingOptionsChangeTriggers.includes(callbackTrigger)) {\n                        await this._googlePayPaymentProcessor.handleShippingOptionChange(\n                            shippingOptionData.id,\n                        );\n                    }\n\n                    const { newOfferInfo = undefined, error: couponsError = undefined } =\n                        offerChangeTriggers.includes(callbackTrigger)\n                            ? await this._googlePayPaymentProcessor.handleCoupons(offerData)\n                            : {};\n\n                    // We can add another errors if needed 'couponsError || shippingError || anotherError'\n                    const error: GooglePayError | undefined = couponsError;\n\n                    await this._paymentIntegrationService.loadCheckout();\n\n                    const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n                    const { code: currencyCode } = this._paymentIntegrationService\n                        .getState()\n                        .getCartOrThrow().currency;\n\n                    return {\n                        newTransactionInfo: {\n                            ...(countryCode && { countryCode }),\n                            currencyCode,\n                            totalPriceStatus: TotalPriceStatusType.FINAL,\n                            totalPrice,\n                        },\n                        ...(availableShippingOptions && {\n                            newShippingOptionParameters: availableShippingOptions,\n                        }),\n                        ...(newOfferInfo && {\n                            newOfferInfo,\n                        }),\n                        ...(error && {\n                            error,\n                        }),\n                    };\n                },\n            },\n        };\n    }\n\n    private _addPaymentButton({\n        container,\n        buttonColor,\n        buttonType,\n        onClick,\n        onError,\n    }: GooglePayCustomerInitializeOptions): void {\n        this._paymentButton =\n            this._paymentButton ??\n            this._googlePayPaymentProcessor.addPaymentButton(container, {\n                buttonColor: buttonColor ?? 'default',\n                buttonType: buttonType ?? 'plain',\n                onClick: this._handleClick(onError, onClick),\n            });\n    }\n\n    private _handleClick(\n        onError: GooglePayCustomerInitializeOptions['onError'],\n        onClick: GooglePayCustomerInitializeOptions['onClick'],\n    ): (event: MouseEvent) => Promise<void> {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            if (onClick && typeof onClick === 'function') {\n                onClick();\n            }\n\n            // TODO: Dispatch Widget Actions\n            try {\n                await this._googlePayPaymentProcessor.initializeWidget();\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n        };\n    }\n\n    private async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n        const shippingAddress =\n            this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(response);\n\n        const siteLink =\n            window.location.pathname === '/embedded-checkout'\n                ? this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink\n                : undefined;\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress) {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutForm(\n            this._getMethodId(),\n            response,\n            siteLink,\n        );\n    }\n\n    private _getMethodId(): keyof WithGooglePayCustomerInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2CustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV2CustomerStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3CustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV3CustomerStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeDotNetCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAuthorizeDotNetCustomerStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComCustomerStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourceCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCybersourceCustomerStrategy, [\n    { id: 'googlepaycybersourcev2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBnzCustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBnzCustomerStrategy, [{ id: 'googlepaybnz' }]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalCustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayOrbitalCustomerStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripeCustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayStripeCustomerStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeocs' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripeUpeCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayStripeUpeCustomerStrategy, [\n    { id: 'googlepaystripeupe' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayWorldpayAccessCustomerStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreePaymentStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeSdk),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreePaymentStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\n\nconst createGooglePayPayPalCommerceCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(\n                paymentIntegrationService,\n                new PayPalCommerceSdk(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommerceCustomerStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PayPalSdkHelper } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayBigCommercePaymentsGateway from './google-pay-bigcommerce-payments-gateway';\n\nconst createGooglePayBigCommercePaymentsCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBigCommercePaymentsGateway(\n                paymentIntegrationService,\n                new PayPalSdkHelper(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBigCommercePaymentsCustomerStrategy, [\n    { id: 'googlepay_bigcommerce_payments' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayTdOnlineMartGateway from '../../gateways/google-pay-tdonlinemart-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayTdOnlineMartCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayTdOnlineMartGateway(paymentIntegrationService, createFormPoster()),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayTdOnlineMartCustomerStrategy, [\n    { id: 'googlepaytdonlinemart' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCustomerInitializeOptions, {\n    WithPayPalCommerceCustomerInitializeOptions,\n} from './paypal-commerce-customer-initialize-options';\n\nexport default class PayPalCommerceCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceCustomerInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommerce, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerce.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerce.container\" argument is not provided.',\n            );\n        }\n\n        if (paypalcommerce.onClick && typeof paypalcommerce.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerce.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = paypalcommerce.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            console.error(\n                '[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, paypalcommerce);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n\n        return Promise.resolve();\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        paypalcommerce: PayPalCommerceCustomerInitializeOptions,\n    ): void {\n        const { container, onClick, onComplete } = paypalcommerce;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            createOrder: () => this.paypalCommerceIntegrationService.createOrder('paypalcommerce'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            ...defaultCallbacks,\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${container}`);\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address except shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private handleError(error: unknown) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCustomerStrategy from './paypal-commerce-customer-strategy';\n\nconst createPayPalCommerceCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCustomerStrategy, [{ id: 'paypalcommerce' }]);\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditCustomerInitializeOptions, {\n    WithPayPalCommerceCreditCustomerInitializeOptions,\n} from './paypal-commerce-credit-customer-initialize-options';\n\nexport default class PayPalCommerceCreditCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceCreditCustomerInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercecredit, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercecredit.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercecredit.container\" argument is not provided.',\n            );\n        }\n\n        if (paypalcommercecredit.onClick && typeof paypalcommercecredit.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercecredit.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = paypalcommercecredit.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            console.error(\n                '[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, paypalcommercecredit);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        paypalCommerceCredit: PayPalCommerceCreditCustomerInitializeOptions,\n    ): void {\n        const { container, onComplete, onClick } = paypalCommerceCredit;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercecredit'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n                    fundingSource,\n                    style: this.paypalCommerceIntegrationService.getValidButtonStyle({\n                        ...checkoutTopButtonStyles,\n                        height: DefaultCheckoutButtonHeight,\n                    }),\n                    ...defaultCallbacks,\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${container}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.paypalCommerceIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address except shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private handleError(error: unknown) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditCustomerStrategy from './paypal-commerce-credit-customer-strategy';\n\nconst createPayPalCommerceCreditCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceCreditCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditCustomerStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoCustomerInitializeOptions, {\n    WithPayPalCommerceVenmoCustomerInitializeOptions,\n} from './paypal-commerce-venmo-customer-initialize-options';\n\nexport default class PayPalCommerceVenmoCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceVenmoCustomerInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercevenmo, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercevenmo.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercevenmo.container\" argument is not provided.',\n            );\n        }\n\n        if (paypalcommercevenmo.onClick && typeof paypalcommercevenmo.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercevenmo.onClick\" argument is not a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            console.error(\n                '[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoCustomerInitializeOptions,\n    ): void {\n        const { container, onClick } = paypalcommercevenmo;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmo'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${container}`);\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(container);\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoCustomerStrategy from './paypal-commerce-venmo-customer-strategy';\n\nconst createPayPalCommerceVenmoCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceVenmoCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoCustomerStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getFastlaneStyles,\n    PayPalCommerceFastlaneUtils,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneStylesOption,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceFastlaneCustomerInitializeOptions, {\n    WithPayPalCommerceFastlaneCustomerInitializeOptions,\n} from './paypal-commerce-fastlane-customer-initialize-options';\n\nexport default class PayPalCommerceFastlaneCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private paypalCommerceFastlaneUtils: PayPalCommerceFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceFastlaneCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommercefastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        try {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n            const isTestModeEnabled = !!paymentMethod.initializationData?.isDeveloperModeApplicable;\n\n            const paypalFastlaneSdk = await this.paypalCommerceSdk.getPayPalFastlaneSdk(\n                paymentMethod,\n                cart.currency.code,\n                cart.id,\n            );\n\n            await this.paypalCommerceFastlaneUtils.initializePayPalFastlane(\n                paypalFastlaneSdk,\n                isTestModeEnabled,\n                this.getFastlaneStyles(methodId, paypalcommercefastlane),\n            );\n        } catch (_) {\n            // TODO: add logger to be able to debug issues if there any\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n\n        return Promise.resolve();\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    async executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<void> {\n        const { checkoutPaymentMethodExecuted, continueWithCheckoutCallback, methodId } =\n            options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomerOrThrow();\n\n        if (customer.isGuest) {\n            if (\n                checkoutPaymentMethodExecuted &&\n                typeof checkoutPaymentMethodExecuted === 'function'\n            ) {\n                checkoutPaymentMethodExecuted();\n            }\n\n            try {\n                await this.runPayPalAuthenticationFlowOrThrow(methodId);\n            } catch (_) {\n                // TODO: add logger to be able to debug issues if there any\n                // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n            }\n        }\n\n        continueWithCheckoutCallback();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    private async runPayPalAuthenticationFlowOrThrow(methodId: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const customer = state.getCustomer();\n        const billingAddress = state.getBillingAddress();\n        const customerEmail = customer?.email || billingAddress?.email || '';\n\n        const { customerContextId } = await this.paypalCommerceFastlaneUtils.lookupCustomerOrThrow(\n            customerEmail,\n        );\n\n        const authenticationResult =\n            await this.paypalCommerceFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                customerContextId,\n            );\n\n        const isAuthenticationFlowCanceled =\n            authenticationResult.authenticationState === PayPalFastlaneAuthenticationState.CANCELED;\n\n        await this.updateCustomerDataState(methodId, authenticationResult);\n\n        if (isAuthenticationFlowCanceled) {\n            this.paypalCommerceFastlaneUtils.removeStorageSessionId();\n        } else {\n            this.paypalCommerceFastlaneUtils.updateStorageSessionId(cartId);\n        }\n    }\n\n    private async updateCustomerDataState(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n\n        const { authenticationState, addresses, billingAddress, shippingAddress, instruments } =\n            this.paypalCommerceFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                methodId,\n                authenticationResult,\n            );\n\n        await this.paymentIntegrationService.updatePaymentProviderCustomer({\n            authenticationState,\n            addresses,\n            instruments,\n        });\n\n        if (billingAddress) {\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && cart.lineItems.physicalItems.length > 0) {\n            const updatedState = await this.paymentIntegrationService.updateShippingAddress(\n                shippingAddress,\n            );\n\n            const paymentMethod =\n                updatedState.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n            const { isFastlaneShippingOptionAutoSelectEnabled } =\n                paymentMethod.initializationData || {};\n            const consignments = updatedState.getConsignments() || [];\n            const availableShippingOptions = consignments[0]?.availableShippingOptions || [];\n            const firstShippingOption = availableShippingOptions[0];\n            const recommendedShippingOption = availableShippingOptions.find(\n                (option) => option.isRecommended,\n            );\n\n            if (\n                (recommendedShippingOption || firstShippingOption) &&\n                isFastlaneShippingOptionAutoSelectEnabled\n            ) {\n                const shippingOptionId = recommendedShippingOption?.id || firstShippingOption.id;\n\n                await this.paymentIntegrationService.selectShippingOption(shippingOptionId);\n            }\n        }\n    }\n\n    /**\n     *\n     * Fastlane styling methods\n     *\n     */\n    private getFastlaneStyles(\n        methodId: string,\n        paypalcommercefastlane: PayPalCommerceFastlaneCustomerInitializeOptions | undefined,\n    ): PayPalFastlaneStylesOption | undefined {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        const { fastlaneStyles, isFastlaneStylingEnabled } = paymentMethod.initializationData || {};\n\n        return getFastlaneStyles(\n            isFastlaneStylingEnabled ? fastlaneStyles : {},\n            paypalcommercefastlane?.styles,\n        );\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    createPayPalCommerceFastlaneUtils,\n    createPayPalCommerceSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceFastlaneCustomerStrategy from './paypal-commerce-fastlane-customer-strategy';\n\nconst createPayPalCommerceFastlaneCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceFastlaneCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceFastlaneCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceSdk(),\n        createPayPalCommerceFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createPayPalCommerceFastlaneCustomerStrategy, [\n    { id: 'paypalcommerceacceleratedcheckout' }, // this method id will be provided for users from test group\n    { id: 'paypalcommercecreditcards' }, // this method id will be provided for users from control group\n]);\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    isStripePaymentMethodLike,\n    StripeAppearanceOptions,\n    StripeClient,\n    StripeElementEvent,\n    StripeElements,\n    StripeElementType,\n    StripeEventType,\n    StripeFormMode,\n    StripeScriptLoader,\n} from '../stripe-utils';\n\nimport isStripeAcceleratedCheckoutCustomer from './is-stripe-accelerated-checkout-customer';\nimport { STRIPE_CLIENT_API_VERSION, STRIPE_CLIENT_BETAS } from './stripe-upe-constants';\nimport { WithStripeUPECustomerInitializeOptions } from './stripeupe-customer-initialize-options';\n\nexport default class StripeUPECustomerStrategy implements CustomerStrategy {\n    private _stripeElements?: StripeElements;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithStripeUPECustomerInitializeOptions,\n    ): Promise<void> {\n        let stripeUPEClient: StripeClient;\n\n        if (!options.stripeupe) {\n            throw new InvalidArgumentError(\n                `Unable to proceed because \"options\" argument is not provided.`,\n            );\n        }\n\n        const { container, gatewayId, methodId, onEmailChange, getStyles, isLoading } =\n            options.stripeupe;\n\n        Object.entries(options.stripeupe).forEach(([key, value]) => {\n            if (!value) {\n                throw new InvalidArgumentError(\n                    `Unable to proceed because \"${key}\" argument is not provided.`,\n                );\n            }\n        });\n\n        await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId },\n        });\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n        const { clientToken } = paymentMethod;\n\n        if (!isStripePaymentMethodLike(paymentMethod) || !clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        const { email } = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const stripePaymentProviderCustomer = isStripeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n        const stripeLinkAuthenticationState =\n            stripePaymentProviderCustomer.stripeLinkAuthenticationState;\n\n        if (!email) {\n            let appearance: StripeAppearanceOptions | undefined;\n            const styles = typeof getStyles === 'function' && getStyles();\n\n            if (styles) {\n                appearance = {\n                    variables: {\n                        colorPrimary: styles.fieldInnerShadow,\n                        colorBackground: styles.fieldBackground,\n                        colorText: styles.labelText,\n                        colorDanger: styles.fieldErrorText,\n                        colorTextSecondary: styles.labelText,\n                        colorTextPlaceholder: styles.fieldPlaceholderText,\n                    },\n                    rules: {\n                        '.Input': {\n                            borderColor: styles.fieldBorder,\n                            color: styles.fieldText,\n                            boxShadow: styles.fieldInnerShadow,\n                        },\n                    },\n                };\n            } else {\n                appearance = {};\n            }\n\n            stripeUPEClient = await this.scriptLoader.getStripeClient(\n                paymentMethod.initializationData,\n                STRIPE_CLIENT_BETAS,\n                STRIPE_CLIENT_API_VERSION,\n            );\n\n            this._stripeElements = await this.scriptLoader.getElements(stripeUPEClient, {\n                clientSecret: clientToken,\n                appearance,\n            });\n\n            const { getBillingAddress, getConsignments } =\n                this.paymentIntegrationService.getState();\n            const consignments = getConsignments();\n            const id = consignments?.[0]?.id;\n            const { email: billingEmail } = getBillingAddress() || {};\n            const options = billingEmail\n                ? { defaultValues: { mode: StripeFormMode.SHIPPING, email: billingEmail } }\n                : {};\n            const linkAuthenticationElement =\n                this._stripeElements.getElement(StripeElementType.AUTHENTICATION) ||\n                this._stripeElements.create(StripeElementType.AUTHENTICATION, options);\n\n            linkAuthenticationElement.on(StripeElementEvent.CHANGE, (event: StripeEventType) => {\n                if (!('authenticated' in event)) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCustomer);\n                }\n\n                this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    stripeLinkAuthenticationState: event.authenticated,\n                });\n\n                if (event.complete) {\n                    onEmailChange(event.authenticated, event.value.email);\n                } else {\n                    onEmailChange(false, '');\n                }\n\n                if (isLoading) {\n                    isLoading(false);\n                }\n\n                if (stripeLinkAuthenticationState === undefined && event.authenticated && id) {\n                    this.paymentIntegrationService.deleteConsignment(id);\n                }\n            });\n            linkAuthenticationElement.mount(`#${container}`);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        this._stripeElements?.getElement(StripeElementType.AUTHENTICATION)?.unmount();\n\n        return Promise.resolve();\n    }\n\n    signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        this.paymentIntegrationService.signInCustomer(credentials, options);\n\n        return Promise.resolve();\n    }\n\n    signOut(options?: RequestOptions): Promise<void> {\n        this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeScriptLoader } from '../stripe-utils';\n\nimport StripeUPECustomerStrategy from './stripe-upe-customer-strategy';\n\nconst createStripeUPECustomerStrategy: CustomerStrategyFactory<StripeUPECustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new StripeUPECustomerStrategy(\n        paymentIntegrationService,\n        new StripeScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createStripeUPECustomerStrategy, [{ id: 'stripeupe' }]);\n","export const expressCheckoutAllowedCountryCodes = [\n    'AC',\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CV',\n    'CW',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SZ',\n    'TA',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'XK',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n    'ZZ',\n];\n","import { round } from 'lodash';\n\nimport {\n    AmountTransformer,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    InvalidArgumentError,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethodFailedError,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { StripeIntegrationService, StripePaymentMethodType } from '../stripe-utils';\nimport { isStripePaymentMethodLike } from '../stripe-utils/is-stripe-payment-method-like';\nimport {\n    StripeAdditionalActionRequired,\n    StripeClient,\n    StripeElement,\n    StripeElementEvent,\n    StripeElements,\n    StripeElementsCreateOptions,\n    StripeElementType,\n    StripeError,\n    StripeEventType,\n    StripeResult,\n    StripeStringConstants,\n} from '../stripe-utils/stripe';\nimport StripeScriptLoader from '../stripe-utils/stripe-script-loader';\n\nimport { expressCheckoutAllowedCountryCodes } from './constants';\nimport { StripeLinkV2Event, StripeLinkV2Options, StripeLinkV2ShippingRate } from './stripe-ocs';\nimport { WithStripeOCSCustomerInitializeOptions } from './stripe-ocs-customer-initialize-options';\n\nexport default class StripeLinkV2CustomerStrategy implements CustomerStrategy {\n    private _stripeClient?: StripeClient;\n    private _stripeElements?: StripeElements;\n    private _linkV2Element?: StripeElement;\n    private _amountTransformer?: AmountTransformer;\n    private _onComplete?: (orderId?: number) => Promise<never>;\n    private _loadingIndicatorContainer?: string;\n\n    private _currencyCode?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeScriptLoader,\n        private stripeIntegrationService: StripeIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithStripeOCSCustomerInitializeOptions,\n    ): Promise<void> {\n        const { stripeocs } = options || {};\n\n        if (!stripeocs) {\n            throw new InvalidArgumentError(\n                `Unable to proceed because \"options\" argument is not provided.`,\n            );\n        }\n\n        const { methodId, gatewayId, container } = stripeocs;\n\n        if (!container || !methodId || !gatewayId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId },\n        });\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n        const { loadingContainerId, buttonHeight, onComplete } = stripeocs;\n\n        this._loadingIndicatorContainer = loadingContainerId;\n\n        this._onComplete = onComplete;\n\n        if (!isStripePaymentMethodLike(paymentMethod)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = paymentMethod;\n\n        this._stripeClient = await this.scriptLoader.getStripeClient(initializationData);\n\n        await this._mountExpressCheckoutElement(\n            methodId,\n            container,\n            this._stripeClient,\n            buttonHeight,\n        );\n\n        return Promise.resolve();\n    }\n\n    signIn() {\n        return Promise.resolve();\n    }\n\n    signOut() {\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout() {\n        return Promise.resolve();\n    }\n\n    deinitialize() {\n        return Promise.resolve();\n    }\n\n    private async _mountExpressCheckoutElement(\n        methodId: string,\n        container: string,\n        stripeExpressCheckoutClient: StripeClient,\n        buttonHeight = 40,\n    ) {\n        const shouldRequireShippingAddress = this._shouldRequireShippingAddress();\n        const expressCheckoutOptions: StripeElementsCreateOptions = {\n            shippingAddressRequired: shouldRequireShippingAddress,\n            ...(shouldRequireShippingAddress\n                ? { allowedShippingCountries: await this._getAvailableCountries() }\n                : {}),\n            ...(shouldRequireShippingAddress\n                ? { shippingRates: [{ id: '_', amount: 0, displayName: 'Pending rates' }] }\n                : {}),\n            billingAddressRequired: true,\n            emailRequired: true,\n            phoneNumberRequired: true,\n            paymentMethods: {\n                link: StripeStringConstants.AUTO,\n                applePay: StripeStringConstants.NEVER,\n                googlePay: StripeStringConstants.NEVER,\n                amazonPay: StripeStringConstants.NEVER,\n                paypal: StripeStringConstants.NEVER,\n                klarna: StripeStringConstants.NEVER,\n            },\n            // Minimal buttonHeight value is 40\n            buttonHeight,\n        };\n\n        const { cartAmount } = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        const elementsOptions: StripeLinkV2Options = {\n            mode: 'payment',\n            amount: this._toCents(cartAmount),\n            currency: this._getCurrency(),\n        };\n\n        this._stripeElements = stripeExpressCheckoutClient.elements(elementsOptions);\n\n        this._linkV2Element = this._stripeElements.create(\n            StripeElementType.EXPRESS_CHECKOUT,\n            expressCheckoutOptions,\n        );\n        this._linkV2Element.mount(`#${container}`);\n        this._initializeEvents(this._linkV2Element, methodId);\n    }\n\n    /** Events * */\n\n    private _initializeEvents(expressCheckoutElement: StripeElement, methodId: string): void {\n        const shouldRequireShippingAddress = this._shouldRequireShippingAddress();\n\n        if (shouldRequireShippingAddress) {\n            expressCheckoutElement.on(StripeElementEvent.SHIPPING_ADDRESS_CHANGE, async (event) =>\n                this._onShippingAddressChange(event),\n            );\n            expressCheckoutElement.on(StripeElementEvent.SHIPPING_RATE_CHANGE, async (event) =>\n                this._onShippingRateChange(event),\n            );\n        }\n\n        expressCheckoutElement.on(StripeElementEvent.CONFIRM, async (event) =>\n            this._onConfirm(event, methodId),\n        );\n    }\n\n    private async _onShippingAddressChange(event: StripeEventType) {\n        if ('address' in event) {\n            const shippingAddress = event.address;\n            // Depending on the country, some fields can be missing or partially redacted.\n            // For example, the shipping address in the US can only contain a city, state, and ZIP code.\n            // The full shipping address appears in the confirm event object after the purchase is confirmed in the browser’s payment interface.\n            const result = {\n                firstName: '',\n                lastName: '',\n                phone: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: shippingAddress?.city || '',\n                countryCode: shippingAddress?.country || '',\n                postalCode: shippingAddress?.postal_code || '',\n                stateOrProvince: shippingAddress?.state || '',\n                stateOrProvinceCode: '',\n                customFields: [],\n            };\n\n            await this.paymentIntegrationService.updateShippingAddress(result);\n\n            const shippingRates = await this._getAvailableShippingOptions();\n\n            await this._updateDisplayedPrice();\n\n            event.resolve({\n                shippingRates,\n            });\n        }\n    }\n\n    private async _onShippingRateChange(event: StripeEventType) {\n        if ('shippingRate' in event) {\n            const { shippingRate } = event;\n\n            await this._handleShippingOptionChange(shippingRate?.id);\n\n            await this._updateDisplayedPrice();\n\n            event.resolve({});\n        }\n    }\n\n    /** Confirm methods * */\n    private async _onConfirm(event: StripeEventType, methodId: string) {\n        if (\n            'billingDetails' in event &&\n            'shippingAddress' in event &&\n            this._stripeClient &&\n            this._stripeElements\n        ) {\n            await this._updateShippingAndBillingAddress(event);\n            await this.paymentIntegrationService.submitOrder();\n\n            const paymentMethod = this._getPaymentPayload(methodId);\n\n            try {\n                await this.paymentIntegrationService.submitPayment(paymentMethod);\n            } catch (error) {\n                await this._processAdditionalAction(error, methodId);\n            }\n        }\n\n        return Promise.resolve();\n    }\n\n    private async _updateShippingAndBillingAddress(event: StripeLinkV2Event) {\n        const shouldRequireShippingAddress = this._shouldRequireShippingAddress();\n\n        const firstName =\n            event.shippingAddress?.name?.split(' ')[0] ||\n            event.billingDetails?.name?.split(' ')[0] ||\n            '';\n        const lastName =\n            event.shippingAddress?.name?.split(' ')[1] ||\n            event.billingDetails?.name?.split(' ')[1] ||\n            '';\n\n        if (shouldRequireShippingAddress) {\n            const shippingAddress = this._mapShippingAddress(\n                event.shippingAddress,\n                event.billingDetails,\n                firstName,\n                lastName,\n            );\n\n            await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        const billingAddress = this._mapBillingAddress(\n            event.shippingAddress,\n            event.billingDetails,\n            firstName,\n            lastName,\n        );\n\n        await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n    }\n\n    private _mapShippingAddress(\n        shippingAddress: StripeLinkV2Event['shippingAddress'],\n        billingDetails: StripeLinkV2Event['billingDetails'],\n        firstName: string,\n        lastName: string,\n    ) {\n        return {\n            firstName,\n            lastName,\n            phone: billingDetails?.phone || '',\n            company: '',\n            address1: shippingAddress?.address?.line1 || '',\n            address2: shippingAddress?.address?.line2 || '',\n            city: shippingAddress?.address?.city || '',\n            countryCode: shippingAddress?.address?.country || '',\n            postalCode: shippingAddress?.address?.postal_code || '',\n            stateOrProvince: shippingAddress?.address?.state || '',\n            stateOrProvinceCode: shippingAddress?.address?.state || '',\n            customFields: [],\n        };\n    }\n\n    private _mapBillingAddress(\n        shippingAddress: StripeLinkV2Event['shippingAddress'],\n        billingDetails: StripeLinkV2Event['billingDetails'],\n        firstName: string,\n        lastName: string,\n    ) {\n        return {\n            email: billingDetails?.email || '',\n            firstName,\n            lastName,\n            phone: billingDetails?.phone || '',\n            company: '',\n            address1: billingDetails?.address?.line1 || '',\n            address2: '',\n            city: billingDetails?.address?.city || '',\n            countryCode: billingDetails?.address?.country || '',\n            postalCode: billingDetails?.address?.postal_code || '',\n            stateOrProvince: billingDetails?.address?.state || '',\n            stateOrProvinceCode: shippingAddress?.address?.state || '',\n            customFields: [],\n        };\n    }\n\n    private async _processAdditionalAction(error: unknown, methodId: string): Promise<void> {\n        if (\n            !isRequestError(error) ||\n            !this.stripeIntegrationService.isAdditionalActionError(error.body.errors)\n        ) {\n            throw error;\n        }\n\n        if (!this._stripeClient || !this._stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { data: additionalActionData } = error.body.additional_action_required;\n        const { token } = additionalActionData;\n\n        const { paymentIntent } = await this._confirmStripePaymentOrThrow(\n            additionalActionData,\n            methodId,\n        );\n\n        const paymentPayload = this._getPaymentPayload(methodId, paymentIntent?.id || token);\n\n        try {\n            this._toggleLoadingIndicator(true);\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n            await this._completeCheckoutFlow();\n            this._toggleLoadingIndicator(false);\n        } catch (error) {\n            this._toggleLoadingIndicator(false);\n            this.stripeIntegrationService.throwPaymentConfirmationProceedMessage();\n        }\n    }\n\n    private async _confirmStripePaymentOrThrow(\n        additionalActionData: StripeAdditionalActionRequired['data'],\n        methodId: string,\n    ): Promise<StripeResult | never> {\n        const { token, redirect_url } = additionalActionData;\n        const stripePaymentData = this.stripeIntegrationService.mapStripePaymentData(\n            this._stripeElements,\n            redirect_url,\n        );\n        let stripeError: StripeError | undefined;\n\n        try {\n            const isPaymentCompleted = await this.stripeIntegrationService.isPaymentCompleted(\n                methodId,\n                this._stripeClient,\n            );\n\n            const confirmationResult = !isPaymentCompleted\n                ? await this._stripeClient?.confirmPayment({\n                      elements: stripePaymentData.elements,\n                      clientSecret: token,\n                      redirect: StripeStringConstants.IF_REQUIRED,\n                      confirmParams: {\n                          return_url: stripePaymentData.confirmParams?.return_url,\n                      },\n                  })\n                : await this._stripeClient?.retrievePaymentIntent(token || '');\n\n            stripeError = confirmationResult?.error;\n\n            if (stripeError || !confirmationResult?.paymentIntent) {\n                throw new PaymentMethodFailedError();\n            }\n\n            return confirmationResult;\n        } catch (error: unknown) {\n            return this.stripeIntegrationService.throwStripeError(stripeError);\n        }\n    }\n\n    private async _completeCheckoutFlow() {\n        if (typeof this._onComplete === 'function') {\n            return this._onComplete();\n        }\n\n        window.location.replace('/order-confirmation');\n\n        return Promise.resolve();\n    }\n\n    private _getPaymentPayload(methodId: string, token?: string): Payment {\n        const cartId = this.paymentIntegrationService.getState().getCart()?.id || '';\n        const formattedPayload = {\n            cart_id: cartId,\n            ...(token ? { credit_card_token: { token } } : {}),\n            confirm: false,\n            payment_method_id: StripePaymentMethodType.Link,\n        };\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload,\n            },\n        };\n    }\n\n    /** Utils * */\n\n    private _shouldRequireShippingAddress() {\n        const { getCartOrThrow } = this.paymentIntegrationService.getState();\n        const { lineItems } = getCartOrThrow();\n\n        return !!lineItems.physicalItems.length;\n    }\n\n    private async _updateDisplayedPrice() {\n        if (this._stripeElements) {\n            this._stripeElements.update({\n                currency: this._getCurrency(),\n                mode: 'payment',\n                amount: await this._getTotalPrice(),\n            });\n        }\n    }\n\n    private _getCurrency() {\n        if (!this._currencyCode) {\n            const { code: currencyCode } = this.paymentIntegrationService\n                .getState()\n                .getCartOrThrow().currency;\n\n            this._currencyCode = currencyCode.toLowerCase();\n        }\n\n        return this._currencyCode;\n    }\n\n    private async _getTotalPrice(): Promise<number> {\n        await this.paymentIntegrationService.loadCheckout();\n\n        const { getCheckoutOrThrow, getCartOrThrow } = this.paymentIntegrationService.getState();\n        const { decimalPlaces } = getCartOrThrow().currency;\n        const totalPrice = round(getCheckoutOrThrow().outstandingBalance, decimalPlaces).toFixed(\n            decimalPlaces,\n        );\n\n        return this._toCents(+totalPrice);\n    }\n\n    private async _getAvailableCountries(): Promise<string[]> {\n        const countries = await this.paymentIntegrationService.loadShippingCountries();\n        const deliverableCountries =\n            countries.getShippingCountries()?.map((country) => country.code) || [];\n\n        return deliverableCountries.filter((code) => {\n            return expressCheckoutAllowedCountryCodes.includes(code);\n        });\n    }\n\n    private async _getAvailableShippingOptions(): Promise<StripeLinkV2ShippingRate[] | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const consignments = state.getConsignments();\n\n        if (!consignments?.[0]) {\n            return;\n        }\n\n        const consignment = consignments[0];\n        const options = (consignment.availableShippingOptions || []).map(\n            this._getStripeShippingOption.bind(this),\n        );\n\n        const selectedId = consignment.selectedShippingOption?.id;\n\n        if (!selectedId) {\n            await this._handleShippingOptionChange(options[0]?.id);\n        } else {\n            // Set selected shipping option first in the array, as it will be selected by default\n            options.sort((option) => (option.id === selectedId ? -1 : 0));\n        }\n\n        return options;\n    }\n\n    private _getStripeShippingOption({ id, cost, description }: ShippingOption) {\n        return {\n            id,\n            displayName: description,\n            amount: this._toCents(cost),\n        };\n    }\n\n    private async _handleShippingOptionChange(optionId?: string) {\n        if (!optionId || optionId === 'shipping_option_unselected') {\n            return;\n        }\n\n        return this.paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private _getAmountTransformer() {\n        if (this._amountTransformer) {\n            return this._amountTransformer;\n        }\n\n        const { getCart } = this.paymentIntegrationService.getState();\n        const { currency } = getCart() || {};\n\n        if (currency) {\n            const amountTransformer = new AmountTransformer(currency.decimalPlaces);\n\n            return amountTransformer;\n        }\n    }\n\n    private _toCents(amount: number) {\n        const fallbackValue = Math.round(amount * 100);\n        const amountTransformer = this._getAmountTransformer();\n\n        if (amountTransformer) {\n            return amountTransformer.toInteger(amount);\n        }\n\n        return fallbackValue;\n    }\n\n    private _toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this._loadingIndicatorContainer) {\n            this.loadingIndicator.show(this._loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { DEFAULT_CONTAINER_STYLES, LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { StripeIntegrationService, StripeScriptLoader } from '../stripe-utils';\n\nimport StripeLinkV2CustomerStrategy from './stripe-link-v2-customer-strategy';\n\nconst createStripeLinkV2CustomerStrategy: CustomerStrategyFactory<StripeLinkV2CustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const stripeScriptLoader = new StripeScriptLoader(getScriptLoader());\n    const loadingIndicator = new LoadingIndicator({\n        containerStyles: DEFAULT_CONTAINER_STYLES,\n    });\n\n    return new StripeLinkV2CustomerStrategy(\n        paymentIntegrationService,\n        stripeScriptLoader,\n        new StripeIntegrationService(paymentIntegrationService, stripeScriptLoader),\n        loadingIndicator,\n    );\n};\n\nexport default toResolvableModule(createStripeLinkV2CustomerStrategy, [{ id: 'stripeocs' }]);\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","require","message","object","name","type","setPrototypeOf","__proto__","Error","captureStackTrace","stack","_scriptLoader","_stylesheetLoader","_window","load","configuration","Promise","all","this","loadStylesheet","environment","prepend","attributes","integrity","crossorigin","loadScript","async","AdyenCheckout","toResolvableModule","resolveIds","assign","AdyenV3ActionType","AdyenV2ActionType","AdyenComponentType","AdyenPaymentMethodType","HTTPMethod","ResultCode","AdyenCardFields","isCardState","param","data","paymentMethod","encryptedSecurityCode","encryptedExpiryMonth","invalidFields","join","NotInitializedErrorType","subtype","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","getErrorMessage","isVaultedInstrument","instrument","Boolean","instrumentId","getBrowserInfo","language","navigator","window","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","height","screen_width","width","time_zone_offset","Date","getTimezoneOffset","toString","error","details","_paymentIntegrationService","initialize","options","adyenv2","_paymentInitializeOptions","getState","getPaymentMethodOrThrow","methodId","initializationData","originKey","clientKey","paymentMethodsResponse","clientSideAuthentication","value","locale","getLocale","translations","es","_adyenClient","_mountPaymentComponent","_paymentComponent","method","CreditCard","Bancontact","_mountCardVerificationComponent","_cardVerificationComponent","resolve","execute","payload","payment","order","paymentData","shouldSaveInstrument","shouldSetAsDefaultInstrument","_validateCardData","submitOrder","reject","componentState","_componentState","bigpayToken","encryptedCardNumber","encryptedExpiryYear","credit_card_number_confirmation","expiry_month","expiry_year","verification_value","indexOf","submitPayment","formattedPayload","bigpay_token","token","origin","location","browser_info","set_as_default_stored_instrument","_processAdditionalAction","credit_card_token","JSON","stringify","vault_payment_instrument","finalize","deinitialize","undefined","unmount","_getAdyenClient","_getPaymentInitializeOptions","_getThreeDS2ChallengeWidgetSize","additionalActionOptions","threeDS2Options","widgetSize","_handleAction","additionalAction","threeDS2ContainerId","onBeforeLoad","containerId","onLoad","onComplete","adyenAction","parse","action","additionalActionComponent","createFromAction","onAdditionalDetails","additionalActionState","paymentPayload","paymentMethodType","nonce","size","onError","ThreeDS2Challenge","QRCode","mount","_mapAdyenPlaceholderData","billingAddress","prefillCardHolderName","firstName","lastName","street","houseNumberOrName","postalCode","city","stateOrProvince","country","holderName","cardVerificationComponent","adyenClient","cardVerificationContainerId","create","SecuredFields","styles","placeholder","color","caretColor","onChange","_updateComponentState","validateState","validateCardFields","onFieldValid","paymentComponent","ACH","getBillingAddress","IDEAL","SEPA","hasVaultedInstruments","AliPay","GiroPay","Sofort","Klarna","KlarnaPayNow","KlarnaAccount","Vipps","WeChatPayQR","some","body","errors","code","provider_data","cardComponent","componentRef","showValidation","state","keys","length","isValid","issuer","props","values","trim","_mapCardErrors","cardStateErrors","forEach","paymentIntegrationService","getScriptLoader","getStylesheetLoader","gateway","isHostedInstrumentLike","adyenv3","installmentOptions","paymentMethodsConfiguration","klarna","useKlarnaWidget","klarna_account","klarna_paynow","card","showInstallmentAmounts","_getLocale","showPayButton","submit","paymentToken","socialSecurityNumber","shopperName","isBoletoState","installments","plan","substring","onActionHandled","componentType","challengeWindowSize","ThreeDS2","Sdk","_mountElement","showBrandsUnderCardNumber","billingAddressRequired","showEmailAddress","onSubmit","adyenComponent","document","getElementById","MissingDataErrorType","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","DEFAULT_RESPONSE","headers","status","response","_decimalPlaces","toInteger","amount","Math","round","cart","config","lineItems","physicalItems","lineItem","isShippingRequired","customItems","affirmScriptLoader","loadPaymentMethod","clientToken","testMode","affirm","useStoreCredit","initializeAffirmCheckout","affirmCheckout","checkout_token","checkout","getCheckoutInformation","open","onFail","failObject","reason","onSuccess","successObject","ui","on","getStoreConfig","consignments","getConsignments","getOrder","getCart","amountTransformer","currency","decimalPlaces","retrievedShippingAddress","getShippingAddress","shippingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","shipping","billing","items","getItems","metadata","shipping_type","getShippingType","mode","platform_type","platform_version","platform_affirm","discounts","getDiscounts","order_id","orderId","shipping_amount","shippingCostTotal","tax_amount","taxTotal","total","orderAmount","consignment","selectedShippingOption","first","last","full","address","line1","address1","line2","address2","stateOrProvinceCode","zipcode","countryCode","phone_number","phone","email","item","push","display_name","sku","unit_price","salePrice","qty","quantity","item_image_url","imageUrl","item_url","url","categories","getCategories","digitalItems","giftCertificates","listPrice","coupons","line","discountedAmount","discount_amount","discount_display_name","displayName","discountAmount","DISCOUNTED_AMOUNT","map","categoryTree","category","AFFIRM_SCRIPTS","affirmWindow","apikey","scriptURI","SANDBOX","PROD","m","g","n","e","h","b","k","createElement","p","getElementsByTagName","l","c","_","arguments","f","a1","c1","split","a2","c2","src","parentNode","insertBefore","public_api_key","script","id","_afterpayScriptLoader","getPaymentMethod","gatewayId","currencyCode","_mapCurrencyToISO2","_afterpaySdk","applyStoreCredit","_loadPaymentMethod","validateCheckout","getCheckout","_redirectToAfterpay","getPaymentId","getContextConfig","providerId","forgetCheckout","loadPaymentMethods","redirect","AUD","NZD","CAD","USD","params","SCRIPTS_DEFAULT","SCRIPTS_US","_getScriptURI","then","isAfterpayWindow","AfterPay","createScriptLoader","guard","errorFactory","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","AmazonPayV2ButtonDesign","amazonPayV2Regions","de","jp","uk","us","amazonPayV2ScriptLoader","amazonPayV2SDK","buttonParentContainer","createAmazonPayButtonParentContainer","amazonPayV2Button","remove","bindButton","buttonId","sessionId","changeAction","getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","renderButton","prepareCheckout","createCheckoutSessionConfig","requestConfig","prepareRequestConfig","getAmazonPayV2Button","onClick","initCheckout","prepareCheckoutWithCreationRequestConfig","createCheckoutConfig","estimatedOrderAmount","productType","signout","renderAmazonPayButton","buttonColor","checkoutState","decoupleCheckoutInitiation","placement","isButtonMicroTextDisabled","container","querySelector","parentContainerId","appendChild","getButtonParentContainer","design","C0001","amazonPayV2ButtonOptions","getAmazonPayV2ButtonOptions","updateBuyNowFlowFlag","isBuyNowFlow","isPh4Enabled","features","storeCountryCode","isPh4UsOnly","publicKeyId","signedPayload","isEnvironmentSpecific","uid","random","substr","parentContainer","Gold","getCheckoutState","getStoreConfigOrThrow","merchantId","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","buttonBaseConfig","sandbox","filter","addedByPromotion","reduce","getShippableItemsCount","PayOnly","PayAndShip","storeProfile","shopPath","outstandingBalance","buttonOptions","tmpConfig","createCheckoutSession","test","getOrThrow","checkoutSelectors","paymentMethods","scriptLoader","windowWithAmazonPay","region","amazonPayV2Region","amazon","createAmazonPayV2PaymentProcessor","amazonPayV2PaymentProcessor","amazonpay","checkoutSettings","_isReadyToPay","editButtonId","_bindEditButton","_isModalFlow","_createContainer","_amazonPayButton","_isOneTimeTransaction","toUpperCase","Checkout","errorBody","additional_action_required","redirect_url","_getAmazonPayButton","click","onFocus","removeEventListener","addEventListener","noop","isModalFlow","button","clone","cloneNode","replaceChild","_showLoadingSpinner","widgetInteraction","style","display","isExperimentEnabled","experimentName","BRAINTREE_SDK_DEFAULT_VERSION","BRAINTREE_SDK_STABLE_VERSION","getSDKVersion","storeConfig","TotalPriceStatusType","BraintreeOrderStatus","NonInstantLocalPaymentMethods","BraintreeFastlaneAuthenticationState","BraintreeErrorType","BraintreeErrorCode","isBraintreeError","braintreeScriptLoader","setClientToken","teardownModule","dataCollector","getClient","client","getClientTokenOrThrow","loadClient","clientCreator","authorization","getDataCollectorOrThrow","emptyDataCollector","deviceData","teardown","loadDataCollector","dataCollectorConfig","kount","KountNotEnabled","getBraintreeGooglePayment","googlePayment","loadGooglePayment","braintreeGooglePayment","getBraintreeThreeDS","threeDS","load3DS","threeDSecure","version","getBraintreeLocalPayment","merchantAccountId","braintreeLocalPayment","loadLocalPayment","getUsBankAccount","usBankAccount","loadUsBankAccount","getBraintreeVisaCheckout","visaCheckout","loadVisaCheckout","getVisaCheckoutSdk","visaCheckoutSDK","loadVisaCheckoutSdk","getVenmoCheckoutOrThrow","braintreeVenmo","loadVenmoCheckout","venmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","braintreeVenmoCheckout","isBrowserSupported","BraintreeEnv","BraintreeModuleName","BraintreeFormFieldType","BRAINTREE_SDK_SCRIPTS_INTEGRITY","Client","PaypalCheckout","Paypal","LocalPayment","DataCollector","UsBankAccount","GooglePayment","ThreeDSecure","VisaCheckout","Venmo","HostedFields","Fastlane","braintreeHostWindow","braintreeSDKVersionManager","loadBraintreeModuleOrThrow","loadFastlane","loadPaypalCheckout","loadPaypal","loadHostedFields","V","hash","braintreeModuleName","fileName","getBraintreeModule","braintreeSdkVersion","scriptPath","getIntegrityValuesByModuleName","braintree","moduleName","ApplePayGatewayType","DefaultLabels","_requestSender","_sessionFactory","_braintreeSdk","_shippingLabel","Shipping","_subTotalLabel","Subtotal","_storeCreditLabel","StoreCredit","applepay","shippingLabel","subtotalLabel","storeCreditLabel","BRAINTREE","_initializeBraintreeSdk","request","_getBaseRequest","applePaySession","begin","_handleApplePayEvents","getCheckoutOrThrow","getCartOrThrow","storeName","merchantCapabilities","supportedNetworks","grandTotal","isStoreCreditApplied","label","subtotal","toFixed","taxes","tax","storeCredit","getCustomerOrThrow","min","promise","onvalidatemerchant","event","_onValidateMerchant","merchantSession","completeMerchantValidation","oncancel","onpaymentauthorized","_onPaymentAuthorized","validationURL","hostname","post","bigPayEndpoint","paymentsUrl","credentials","Accept","_getBraintreeDeviceData","deviceSessionId","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","completePayment","ApplePaySession","STATUS_SUCCESS","STATUS_FAILURE","braintreePaymentMethod","BRAINTREE_FASTLANE","assertApplePayWindow","isApplePayWindow","getHost","createRequestSender","host","DEFAULT_STYLES","backgroundColor","DEFAULT_CONTAINER_STYLES","position","ROTATION_ANIMATION","containerStyles","defineAnimation","buildContainer","indicator","buildIndicator","show","parentId","visibility","opacity","hide","handleTransitionEnd","bottom","left","right","top","transition","setStyleAttribute","borderRadius","border","borderColor","margin","transform","transformStyle","animation","element","attrs","setProperty","head","sheet","CSSStyleSheet","insertRule","LOADING_INDICATOR_STYLES","CartSource","LiabilityShiftEnum","BigCommercePaymentsIntent","StyleButtonLabel","StyleButtonColor","StyleButtonShape","NonInstantAlternativePaymentMethods","PayPalOrderStatus","formPoster","bigCommercePaymentsRequestSender","bigCommercePaymentsScriptLoader","loadPayPalSdk","providedCurrencyCode","initializesOnCheckoutPage","forceLoad","getPayPalSDK","paypalSdk","getPayPalSdkOrThrow","createBuyNowCartOrThrow","buyNowInitializeOptions","cartRequestBody","getBuyNowCartRequestBody","createBuyNowCart","createOrder","requestBody","cartId","createOrderCardFields","setupToken","updateOrder","getConsignmentsOrThrow","availableShippingOptions","getOrderStatus","tokenizePayment","postForm","payment_type","provider","source","BuyNow","cart_id","device_info","method_id","paypal_account","getShippingOptionOrThrow","selectedShippingOptionId","recommendedShippingOption","find","option","isRecommended","shippingOptionToSelect","getAddress","company","customFields","getBillingAddressFromOrderDetails","payer","given_name","surname","email_address","address_line_1","address_line_2","admin_area_2","country_code","postal_code","admin_area_1","national_number","getShippingAddressFromOrderDetails","orderDetails","getValidButtonStyle","shape","validStyles","getValidHeight","omitBy","isNil","removeElement","elementId","ContentType","INTERNAL_USE_ONLY","SDK_VERSION_HEADERS","requestSender","Json","put","paypalSdkScriptConfig","getPayPalSdkScriptConfigOrThrow","loadPayPalSDK","paypal","transformConfig","scriptQuery","URLSearchParams","scriptSrc","clientId","intent","buyerCountry","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isPayPalCreditAvailable","isDeveloperModeApplicable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","isGooglePayEnabled","commit","shouldEnableCard","enableCardFunding","disableCardFunding","enableCreditFunding","disableCreditFunding","shouldEnableAPMs","enableVenmoFunding","disableVenmoFunding","enableAPMsFunding","disableAPMsFunding","apm","includes","googlePayComponent","cardFieldsComponent","disableFunding","enableFunding","components","transformedConfig","Array","isArray","createFormPoster","bigCommercePaymentsIntegrationService","loadingIndicator","bigcommerce_payments","loadingIndicatorContainer","onInit","shouldRenderPayPalButtonOnInitialization","shouldHandleInstrumentDeclinedError","isPayPalVaultedInstrumentPaymentData","prepareVaultedInstrumentPaymentPayload","preparePaymentPayload","isProviderError","_resolve","paypalButton","close","handleError","paypalOrderId","shouldConfirmInstrument","isTrustedVaultingFlow","checkoutPaymentButtonStyles","onRenderButton","onValidate","submitForm","fundingSource","FUNDING","PAYPAL","actions","handleClick","onApprove","handleApprove","onCancel","toggleLoadingIndicator","Buttons","isEligible","render","orderID","fieldsValues","getFieldsValues","instruments","getInstruments","trustedShippingAddress","isLoading","isBigCommercePaymentsProviderError","provider_error","getPayPalFastlaneSdk","paypalFastlaneSdk","getPayPalFastlaneSdkConfiguration","getPayPalGooglePaySdk","paypalGooglePay","getPayPalGooglePaySdkScriptConfigOrThrow","getPayPalApmsSdk","paypalApms","getPayPalApmSdkConfiguration","getPayPalMessages","paypalMessages","paypalSdkMessagesConfig","getPayPalSdkMessagesConfiguration","scriptOptions","scriptAttributes","replace","createBigCommercePaymentsSdk","UntrustedShippingCardVerificationType","cookieKey","encodeURIComponent","cookie","firstIndex","lastIndex","decodeURIComponent","set","secure","cookieText","expires","path","domain","toUTCString","now","setTime","getTime","minutes","CookieStorage","TDSecureAuthenticationState","PayPalFastlaneAuthenticationState","initializePayPalFastlane","isTestModeEnabled","localStorage","setItem","paypalFastlane","defaultStyles","root","backgroundColorPrimary","getPayPalFastlaneOrThrow","lookupCustomerOrThrow","identity","lookupCustomerByEmail","triggerAuthenticationFlowOrThrow","customerContextId","triggerAuthenticationFlow","updateStorageSessionId","setDate","getDate","cookiesOption","removeStorageSessionId","getStorageSessionId","mapPayPalFastlaneProfileToBcCustomerData","authenticationResult","authenticationState","profileData","paypalBillingAddress","paymentSource","paypalShippingAddress","paypalProfileName","paypalInstrument","mapPayPalToBcAddress","phoneNumber","mapPayPalToBcInstrument","addresses","filterAddresses","UNRECOGNIZED","brand","expiry","lastDigits","expiryYear","defaultInstrument","expiryMonth","iin","last4","untrustedShippingCardVerificationMode","PAN","mapBcToPayPalAddress","addressLine1","addressLine2","adminArea1","adminArea2","profileName","fullName","phoneData","nationalNumber","customerAddresses","currentAddress","customerAddress","isEqualAddresses","firstAddress","secondAddress","isEqual","normalizeAddress","omit","createBigCommercePaymentsFastlaneUtils","isInvalidStyleOption","styleOption","getFastlaneStyles","styleSettings","uiStyles","fastlaneStyles","input","toggle","textBody","text","textCaption","caption","branding","cleanUpFastlaneStyles","fastlaneRootSettingsBackgroundColor","errorColor","fastlaneRootSettingsErrorColor","fontFamily","fastlaneRootSettingsFontFamily","fontSizeBase","fastlaneRootSettingsFontSize","padding","fastlaneRootSettingsPadding","primaryColor","fastlaneRootSettingsPrimaryColor","fastlaneInputSettingsBorderRadius","fastlaneInputSettingsBorderColor","focusBorderColor","fastlaneInputSettingsFocusBorderBase","fastlaneInputSettingsBackgroundColor","borderWidth","fastlaneInputSettingsBorderWidth","textColorBase","fastlaneInputSettingsTextColorBase","colorPrimary","fastlaneToggleSettingsColorPrimary","colorSecondary","fastlaneToggleSettingsColorSecondary","fastlaneTextBodySettingsColor","fontSize","fastlaneTextBodySettingsFontSize","fastlaneTextCaptionSettingsColor","fastlaneTextCaptionSettingsFontSize","fastlaneBrandingSettings","mergeFastlaneStyles","isPayPalFastlaneCustomer","customer","bigCommercePaymentsSdk","bigCommercePaymentsFastlaneUtils","bigcommerce_payments_fastlane","isFastlaneStylingEnabled","threeDSVerificationMethod","paypalFastlaneStyling","shouldRunAuthenticationFlow","runPayPalAuthenticationFlowOrThrow","initializePayPalPaymentComponent","renderPayPalPaymentComponent","handlePayPalStoredInstrumentChange","orderRequest","isVaultedFlow","invalidRequestError","translationKey","paymentProviderCustomer","getPaymentProviderCustomer","paypalFastlaneCustomer","paypalFastlaneSessionId","isGuest","CANCELED","getCustomer","customerEmail","updatePaymentProviderCustomer","getBillingAddressOrThrow","cardComponentOptions","fields","cardholderName","prefill","enabled","FastlaneCardComponent","paypalComponentMethods","getPayPalComponentMethodsOrThrow","is3DSEnabled","isBigcommercePaymentsFastlaneThreeDSAvailable","is3dsEnabled","get3DSNonce","fastlaneToken","paypal_fastlane_token","getPaymentToken","paypalNonce","getOrderOrThrow","checkoutUrl","threeDomainSecureComponent","ThreeDomainSecureClient","threeDomainSecureParameters","threeDSRequested","transactionContext","experience_context","return_url","cancel_url","liabilityShift","No","Unknown","Succeeded","Errored","Cancelled","console","profile","showCardSelector","selectionChanged","selectedCard","selectedInstrument","messagesStyles","layout","logo","ratio","paypalSdkHelper","bigcommerce_payments_paylater","paypalBNPLConfiguration","bannerContainerId","bannerConfiguration","renderMessages","bigCommercePaymentsButtons","bigCommerceSdk","fundingSources","PAYLATER","CREDIT","hasRenderedSmartButton","onValidationPassed","paypalMessagesOptions","Messages","pollingInterval","maxPollingIntervalTime","pollingTimer","stopPolling","bigcommerce_payments_ratepay","legalTextContainer","loadingContainerId","createFraudNetScript","loadFraudnetConfig","renderLegalText","metadataId","guid","ratepayBirthDate","ratepayPhoneNumber","ratepayPhoneCountryCode","rate_pay","birth_date","normalizeDate","initializePollingMechanism","fraudNetScript","querySelectorAll","fraudNetConfig","deinitializePollingMechanism","legalTextContainerElement","date","formattedDate","formatDate","formattedMonth","getMonth","getFullYear","legalTextContainerElementId","legalTextContainerId","buttonContainerId","buttonContainer","buttonContainerParent","marginBottom","setAttribute","ratePayButton","Legal","PAY_UPON_INVOICE","resetPollingMechanism","scriptElement","generateGUID","s","innerHTML","i","floor","characters","reinitializeStrategy","resolvePromise","rejectPromise","timeout","setTimeout","clearTimeout","useMetadata","orderStatus","isOrderApproved","PollingStop","isPollingError","PollingError","HostedFieldType","isCreditCardFormFields","CardNumber","CardName","CardExpiry","isCreditCardVaultedFormFields","CardNumberVerification","CardCodeVerification","CardExpiryVerification","bigcommerce_payments_creditcards","form","onCreditCardFieldsRenderingError","hostedFormOptions","isCreditCardForm","isCreditCardVaultedForm","hasUndefinedValues","initializeFields","shouldInitializePayPalFastlane","initializePayPalFastlaneOrThrow","executionPaymentData","validateHostedFormOrThrow","submitHostedForm","getInstrumentParams","returnedOrderId","submitPaymentPayload","returnedVaultedToken","cvvField","expiryField","numberField","nameField","verification_nonce","card_with_order","formOptions","executeCallback","getExecuteCallback","cardFieldsConfig","getInputStyles","vaultSetupToken","inputEvents","onChangeHandler","onFocusHandler","onBlur","onBlurHandler","onInputSubmitRequest","CardFields","cardFields","stylizeInputContainers","renderFields","renderVaultedFields","createVaultSetupTokenCallback","createOrderCallback","createVaultSetupToken","fieldsOptions","getCardFieldsOrThrow","cardCode","CVVField","cardExpiry","ExpiryField","cardName","NameField","cardNumber","NumberField","cardCodeVerification","cardExpiryVerification","cardNumberVerification","getFieldTypeByEmittedField","emittedBy","fieldType","mapFieldType","submitConfig","cardFieldsState","validationData","getValidityData","mapValidationErrors","updatedFields","cardNameField","fieldsKeys","every","fieldsErrors","getInvalidErrorByFieldType","CardCode","validationErrors","commonStyles","default","fontWeight","outline","boxShadow","background","marginLeft","onEnter","bigCommercePaymentsPaymentProviderCustomer","isAcceleratedCheckoutEnabled","isBigCommercePaymentsAnalyticsV2Enabled","connectClientToken","payPalFastlaneSdk","bigCommercePaymentsSdkHelper","isPollingEnabled","bigcommerce_payments_apms","bigCommercePaymentsAlternativeMethods","shouldRenderFields","isNonInstantPaymentMethod","bigCommercePaymentsButton","Approved","deInitializePollingMechanism","paypalAmpsSdk","getPaypalAmpsSdkOrThrow","buttonStyle","onInitButton","onCreateOrder","handleFailure","apmFieldsContainer","apmFieldsStyles","fieldContainerElement","PaymentFields","bigcommerce_payments_venmo","VENMO","blueSnapSdk","_blueSnapSdk","initialize3ds","cardData","_getBlueSnapSdk","threeDsPaymentsSetup","sdkResponse","threeDSecureReferenceId","threeDsPaymentsSubmitData","isHostedCardFieldOptionsMap","isHostedStoredCardFieldOptionsMap","_blueSnapDirectHostedForm","_blueSnapDirect3ds","creditCard","_paymentFieldsToken","_shouldUseHostedFields","attach","_getPaymentFieldsToken","pfToken","validate","_getBlueSnapDirectThreeDSecureData","bluesnapSubmitedForm","getCardInstrumentOrThrow","previouslyUsedCard","last4Digits","ccType","cardHolderName","detach","billingFirstName","billingLastName","billingCountry","billingCity","billingZip","shippingFirstName","shippingLastName","shippingCountry","shippingCity","shippingZip","BlueSnapDirectCardType","BlueSnapDirectEventOrigin","BlueSnapDirectErrorDescription","BlueSnapDirectErrorCode","BlueSnapDirectHostedFieldTagId","BlueSnapHostedFieldType","CREDIT_CARD_ERRORS","empty","invalid","_nameOnCardInput","_hostedInputValidator","initializeValidationFields","paymentFieldsToken","enable3DS","callbacksAndStyles","_onValidate","_setCustomBlueSnapAttributes","_setCustomStoredCardsBlueSnapAttributes","_getHostedPaymentFieldsOptions","hostedPaymentFieldsCreate","accessibilityLabel","results","entries","result","threeDSecureData","shouldSendName","hostedPaymentFieldsSubmitData","_isBlueSnapDirectCallbackError","statusCode","THREE_DS_AUTH_FAILED","errorDescription","getValue","onCardTypeChange","onFieldEventHandler","setupComplete","_usetUiEventCallback","_handleError","onType","_tagId","cardType","onValid","tagId","ccnPlaceHolder","cvvPlaceHolder","expPlaceHolder","_mapStyles","focus","selector","declaration","declarationBlock","property","kebabCase","errorCode","eventOrigin","INVALID_OR_EMPTY","EMPTY","INVALID","callback","cardNumberContainer","cardExpiryContainer","cardCodeContainer","cardNameContainer","dataset","bluesnap","_errors","_updateErrors","errorData","_style","_create","_getInput","_handleFocus","_handleBlur","_handleEnter","_input","_applyStyles","target","HTMLInputElement","ON_BLUR","allowedStyle","styleKeys","field","_configureInput","autocomplete","inputMode","maxLength","BlueSnapDirectSdkEnv","PRODUCTION","_formatePaymentPayload","_isBlueSnapDirectRedirectResponse","providerData","partialValue","merchantid","isBlueSnapDirectRedirectResponseProviderData","providerDataQuery","ecp","account_number","accountNumber","account_type","accountType","shopper_permission","shopperPermission","routing_number","routingNumber","companyName","company_name","sepa_direct_debit","iban","first_name","last_name","isIdealInstrument","ideal","bic","isPayByBankInstrument","pay_by_bank","partialResponse","partialBody","cancellable","cancel","race","PaymentStatusTypes","_initializeOptions","frame","_createIframe","initializeOffsitePayment","getPaymentStatus","ACKNOWLEDGE","FINALIZE","finalizeOrder","bluesnapv2","iframe","storage","saveExtraItemsData","productId","categoryNames","getStorageKey","err","readExtraItemsData","getItem","itemsData","isObject","hasNotExtraItems","isExtraItemsData","clearExtraItemData","removeItem","isWithAccountCreation","BoltError","getError","boltScriptLoader","analyticsExtraItemsManager","useBoltClient","useBoltEmbedded","bolt","onPaymentSelect","useBigCommerceCheckout","loadBoltClient","boltClient","publishableKey","developerConfig","embeddedOneClickEnabled","loadBoltEmbedded","boltEmbedded","mountBoltEmbeddedField","hasBoltAccount","embeddedField","setExtraItemsForAnalytics","isBoltPaymentData","getBoltClientPaymentPayload","getBoltEmbeddedPaymentPayload","getBoltFullCheckoutPaymentPayload","orderToken","getBoltClientOrThrow","callbacks","success","transaction","reference","configure","boltTransaction","validateTokenizeResultOrThrow","tokenize","tokenizeResult","last_four_digits","bin","expiration_month","expiration","expiration_year","create_account","shouldCreateAccount","embedded_checkout","setBoltOrderId","getTransactionReference","transactionReference","getBoltEmbeddedOrThrow","setOrderId","renderSeparateFields","lastFourDigits","expirationMonth","expirationYear","Number","isNaN","isAnalyticsEnabled","isAnalyticsTrackerWindow","BoltDeveloperMode","StyleButtonSize","boltHostWindow","developerModeParams","storefrontApiToken","BoltCheckout","getDomainURL","getScriptOptions","Bolt","developerMode","StagingMode","DevelopmentMode","developerDomain","isUsBankAccountInstrumentLike","braintreeSdk","braintreeach","getMandateText","handleBraintreeError","isSubmittingWithVaultingInstrument","tokenizePaymentForVaultedInstrument","preparePaymentDataForVaultedInstrument","preparePaymentData","getUsBankAccountOrThrow","mandateText","bankDetails","getBankDetails","isVaultingEnabled","tokenized_bank_account","masked_account_number","ownershipType","toLowerCase","businessName","streetAddress","extendedAddress","locality","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","MessagingPlacements","PAYPAL_COMPONENTS","overlay","dataCollectors","getBraintreeFastlane","cardId","braintreeFastlane","getSessionId","braintreeFastlaneCreator","getPaypal","braintreePaypal","newWindowFlow","supportsPopups","focusWindow","enableShippingAddress","flow","useraction","catch","getPaypalCheckout","paypalCheckout","paypalCheckoutConfig","paypalCheckoutCallback","braintreePaypalCheckout","paypalSdkLoadConfig","isCreditEnabled","getDataCollector","cacheKey","cached","getBraintreeEnv","isTestMode","Sandbox","Production","mapToBraintreeShippingAddressOverride","recipientName","mapToLegacyShippingAddress","mapToLegacyBillingAddress","riskCorrelationId","messagingContainer","PAYMENT","CART","removeAttribute","cartAmount","getPaypalMessagesStylesFromBNPLConfig","_createElements","closeElement","mainElement","_element","_closeElement","_mainElement","parentElement","_registerClick","_unregisterClick","_removeAfterTransition","classLayout","classClose","classOverlayText","transitionDuration","hasCloseButton","innerHtml","overlayText","className","addClassLayout","innerText","getOverlayStyle","_addEventListener","_removeEventListener","handleTransition","propertyName","braintreeIntegrationService","braintreeMessages","braintreeOptions","loadPaypalCheckoutInstance","paypalButtonRender","braintreeTokenizePayload","getOutstandingBalance","storeLanguage","shippingAddressOverride","offerCredit","shippingAddressEditable","vaultPaymentInstrument","renderPayPalMessages","renderPayPalButton","onPaymentError","env","setupPayment","authorizeData","tokenizePaymentOrThrow","createPayment","isBraintreePaypalProviderError","braintreeRequestSender","isLPMsUpdateExperimentEnabled","braintreelocalmethods","executeWithNotInstantLPM","executeWithInstantLPM","getLPMsBasicPaymentData","basicPaymentData","isBraintreeRedirectError","startPayment","getInstantLPMConfig","getInstantLPMCallback","paymentType","fallback","buttonText","shippingAddressRequired","givenName","onPaymentStart","start","paymentId","isBraintreeOrderSavedResponse","order_id_saved_successfully","startPaymentError","payloadData","isOrderPending","Pending","Completed","Failed","isBraintreeAcceleratedCheckoutCustomer","braintreeFastlaneUtils","braintreefastlane","isThreeDSExperimentEnabled","paypalFastlaneStyleSettings","initializeBraintreeFastlaneOrThrow","initializeCardComponent","renderBraintreeCardComponent","handleBraintreeStoredInstrumentChange","removeSessionIdFromCookies","braintreeCardComponent","paypalPaymentComponent","getBraintreeFastlaneComponentOrThrow","getBraintreeCardComponentOrThrow","getPayPalInstruments","getDeviceSessionId","get3DS","mapToPayPalAddress","binGuest","binDetails","verifyCard","onLookupComplete","_data","next","verifyError","countryCodeAlpha2","braintreePaymentProviderCustomer","getSessionIdFromCookies","getPaymentProviderCustomerOrThrow","getBraintreeFastlaneOrThrow","braintreeFastlaneCustomer","selectedInstruments","shouldSetShippingOption","getMethodIdOrThrow","isFastlaneShippingOptionAutoSelectEnabled","saveSessionIdToCookies","shippingAddresses","getPayPalBillingAddresses","billingAddresses","mergeShippingAndBillingAddresses","updateBillingAddress","digitalItemBilling","updateShippingAddress","setShippingOption","phones","countries","getCountries","matchedCountry","filteredBillingAddresses","selectedOption","selectShippingOption","_isHostedPaymentFormEnabled","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","_isHostedFieldAvailable","bigpayBaseUrl","createHostedForm","_hostedForm","isHostedFormEnabled","AdditionalActionType","_processResponse","loadCurrentOrder","additionalActionRequired","OffsiteRedirect","_performRedirect","_createFormattedPayload","fawryPaymentData","customerMobile","isThreeDSecureRequiredError","_handleThreeDSecure","three_ds_result","acs_url","payer_auth_request","callback_url","merchant_data","PaReq","TermUrl","MD","DOCUMENT_SUPPORTED_APMS","ccDocument","_clearpayScriptLoader","_clearpaySdk","_isCountrySupported","_redirectToClearpay","_getScriptUrl","_cardinalClient","prepare","_getClientToken","hostedForm","getCardInstrument","getBin","runBinProcess","merge","getThreeDSecureData","_getOrderData","CardinalEventType","CardinalInitializationType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","CardinalSignatureValidationErrors","_provider","_testMode","_configurationToken","_sdk","_getClientSDK","SetupCompleted","off","Validated","ActionCode","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","trigger","BinProcess","Status","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","Payload","partialOrder","_mapToPartialOrder","continue","CCA","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","ccNumber","ExpirationMonth","ccExpiry","month","ExpirationYear","year","NameOnAccount","ccName","ccCvv","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","Cardinal","_threeDSecureFlow","bind","xid","_getBin","_submitPayment","threeDsResult","threeDsToken","store","isCreditCardInstrument","hostedFormBin","_formPoster","_isAdditionalActionRequired","redirectUrl","isAdditionalActionRequiredErrorResponse","descriptor","bindMethodDecorator","decoratedTarget","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","format","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","integerAmount","decimalAmount","parsedIntegerAmount","precision","_storeConfig","_customerFormatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","CurrencyService","PayPalCommerceIntent","GooglePayCardNetwork","CallbackIntentsType","ErrorReasonType","CallbackTriggerType","isGooglePayCardNetworkKey","_gatewayIdentifier","_isBuyNowFlow","mapToShippingAddressRequestBody","_mapToAddressRequestBody","mapToBillingAddressRequestBody","paymentMethodData","info","mapToExternalCheckoutData","number","card_information","getRequiredData","emailRequired","_isShippingAddressRequired","loadShippingCountries","allowedCountryCodes","getShippingCountries","shippingAddressParameters","phoneNumberRequired","shippingOptionRequired","getCallbackIntents","OFFER","SHIPPING_ADDRESS","SHIPPING_OPTION","getCallbackTriggers","isGooglePayCouponsExperimentOn","availableTriggers","INITIALIZE","initializationTrigger","addressChangeTriggers","shippingOptionsChangeTriggers","offerChangeTriggers","getNonce","extraPaymentData","getMerchantInfo","getGooglePayInitializationData","merchantName","authJwt","getTransactionInfo","_getCurrencyCodeOrThrow","storeCountry","totalPriceStatus","ESTIMATED","totalPrice","getPaymentGatewayParameters","gatewayMerchantId","getCardParameters","allowedAuthMethods","allowedCardNetworks","supportedCards","billingAddressParameters","_getPaymentMethodFn","_currencyCode","handleShippingAddressChange","mappedShippingAddress","_currencyService","_getGooglePayShippingOption","shippingOption","handleShippingOptionChange","defaultSelectedOptionId","shippingOptions","optionId","getTotalPrice","handleCoupons","offerData","newCouponsState","appliedCoupons","getAppliedCoupons","exists","applyCoupon","appliedCouponError","coupon","redemptionCode","removeCoupon","newOfferInfo","offers","description","OFFER_INVALID","getGatewayIdentifier","setGatewayIdentifier","address3","_getFirstAndLastName","nameParts","slice","cost","additionalDescription","formattedCost","service","_service","googlePayToken","processAdditionalAction","_gateway","_baseRequest","apiVersion","apiVersionMinor","googlePayPaymentOptions","getGooglePaymentsClient","_paymentsClient","_buildButtonPayloads","initializeWidget","_buildWidgetPayloads","_determineReadinessToPay","_prefetchGooglePaymentData","addPaymentButton","paymentButton","_getPaymentsClient","allowedPaymentMethods","_getBaseCardPaymentMethod","showPaymentSheet","paymentDataRequest","_getPaymentDataRequest","loadPaymentData","setExternalCheckoutXhr","_setExternalCheckout","setExternalCheckoutForm","siteLink","signOut","useFormPoster","transactionInfo","prefetchPaymentData","isReadyToPay","_getIsReadyToPayRequest","_baseCardPaymentMethod","parameters","baseCardPaymentMethod","_cardPaymentMethod","tokenizationSpecification","merchantInfo","_paymentDataRequest","callbackIntents","offerInfo","_isReadyToPayRequest","_getOrThrow","isGooglePayErrorObject","GooglePayKey","isGooglePayKey","_googlePayPaymentProcessor","_loadingIndicator","_methodId","googlePayOptions","_getMethodId","walletButton","_loadingIndicatorContainer","_getGooglePayClientOptions","_addPaymentButton","extraData","_clickListener","_paymentButton","_handleClick","preventDefault","_interactWithPaymentSheet","_toggleLoadingIndicator","loadCheckout","_getIsSignedInOrThrow","_handleOfferTrigger","isSignedIn","errorMessage","paymentDataCallbacks","onPaymentDataChanged","callbackTrigger","newTransactionInfo","FINAL","google","payments","api","PaymentsClient","createGooglePayScriptLoader","btoa","isGooglePayAuthorizeNetInitializationData","assertsIsGooglePayAuthorizeNetInitializationData","paymentGatewayId","assertIsGooglePayCheckoutComInitializationData","isGooglePayCheckoutComInitializationData","threeDSBody","isGooglePayThreeDSecureResult","isGooglePayTokenObject","assertIsGooglePayTokenObject","_tokenize","checkoutcomkey","token_data","Authorization","assertsIsGooglePayStripeInitializationData","isGooglePayStripeInitializationData","isGooglePayStripeTokenObject","assertIsGooglePayStripeTokenObject","stripeVersion","stripePublishableKey","stripeConnectedAccount","isStripeGooglePay3dsExperimentIsOn","loadStripeJs","stripeUPEClient","clientSecret","catchedConfirmError","confirmCardPayment","retrievePaymentIntent","_throwDisplayableStripeError","_isCancellationError","paymentIntent","getStripeClient","stripeError","payment_intent","last_payment_error","stripeWindow","stripeAccount","stripeClient","bcStripeClient","stripe","betas","Stripe","_braintreeGooglePayment","isThreeDSecureEnabled","isNetworkTokenized","_braintreePresent3DSChallenge","isGooglePayBraintreeTokenObject","assertIsGooglePayBraintreeTokenObject","androidPayCards","createPaymentDataRequest","cardRequirements","billingAddressFormat","paymentMethodTokenizationParameters","assertsIsGooglePayPayPalCommercePaymentMethod","isGooglePayPaypalCommercePaymentMethod","payPalCommerceSdk","googlePaySdk","Googlepay","googlepayConfig","ConfirmOrderStatus","_payPalCommerceSdk","getOrderId","confirmOrderData","tokenizationData","atob","cardNetwork","cardDetails","confirmOrder","payPalSDK","PayerActionRequired","initiatePayerAction","requestData","payPalSdkHelper","_payPalSdkHelper","isTdOnlineMartAdditionalAction","threeDSResult","formUrl","threeDSSessionData","creq","processable","isOffsiteRedirectResponse","handleOffsiteRedirectResponse","supportedCountries","supportedCountriesRequiringStates","klarnaScriptLoader","klarnaCredit","unsubscribe","subscribe","isPaymentMethodInitialized","loadWidget","authorize","authorizationToken","initializePayment","init","client_token","getUpdateSessionData","billing_address","mapToKlarnaAddress","shipping_address","needsStateCode","klarnaAddress","street_address","family_name","street_address2","updateSessionData","res","approved","show_form","klarnaWindow","Credit","klarnav2ScriptLoader","klarnav2TokenUpdater","klarnaPayments","loadPaymentsWidget","klarnaOrderInitialization","isKlarnaSingleRadioButtonEnabled","authorizeOrThrow","klarnav2","updateClientToken","payment_method_category","enableBillie","organization_name","Payments","JsonV1","MolliePaymentMethodType","methodsNotAllowedWhenDigitalOrder","mollieScriptLoader","mollie","controllers","each","controller","initializeOptions","isCreditCard","shouldShowTSVHostedForm","mountCardVerificationfields","loadMollieJs","mollieClient","mountElements","disableButton","loadPaymentMethodsAllowed","executeWithVaulted","executeWithCC","executeWithAPM","cardHolderElement","cardNumberElement","verificationCodeElement","expiryDateElement","getMollieClient","createToken","shopper_locale","getShopperLocale","isHostedPaymentFormEnabled","CREDIT_CARD","isHostedFieldAvailable","paymentSettings","getInitializeOptions","testmode","cardNumberId","cardCvcId","cardExpiryId","cardHolderId","createComponent","cartDigitalItems","paragraph","unsupportedMethodMessage","mollieHostWindow","isMollieWindow","Mollie","monerisOptions","profileId","createIframe","windowEventListener","removeChild","instrumentSettings","frameref","contentWindow","postMessage","monerisURL","handleMonerisResponse","definedFields","isEmpty","monerisQueryParams","pmmsg","display_labels","enable_exp","enable_cvd","css_body","cssBody","css_textbox","cssTextbox","css_textbox_pan","cssTextboxCardNumber","css_textbox_exp","cssTextboxExpiryDate","css_textbox_cvd","cssTextboxCVV","css_input_label","cssInputLabel","pan_label","creditCardLabel","exp_label","expiryDateLabel","cvd_label","cvdLabel","queryString","allow","monerisResponse","responseCode","dataKey","orderPayload","_shouldSubmitFullPayload","paypalCommerceRequestSender","paypalCommerceScriptLoader","paypalCommerceIntegrationService","paypalCommerceSdk","paypalcommerce","isRedirectActionError","isPaypalCommerceProviderError","createPayPalCommerceSdk","paypalcommercecredit","paypalOptions","paypalcommercevenmo","paypalcommercealternativemethods","createPayPalCommerceFastlaneUtils","paypalCommerceFastlaneUtils","paypalcommercecreditcards","paypalCommercePaymentProviderCustomer","isPayPalCommerceAnalyticsV2Enabled","paypalcommerceratepay","paypalcommercefastlane","isPaypalCommerceFastlaneThreeDSAvailable","threeDSecureFlow","_isThreeDSTwoExperimentOn","newPaymentData","SquareIntent","applicationId","locationId","square","_payments","_formValidationSubscription","_card","destroy","initializeCard","onValidationChange","_getPayments","_subscribeToFormValidation","_getCard","verifyBuyer","CHARGE","_chargeVerifyBuyer","_storeVerifyBuyer","observer","blacklist","Set","eventObservables","eventType","fromEvent","pipe","isCompletelyValid","distinctUntilChanged","_mapToSquareBillingContact","familyName","addressLines","billingContact","STORE","_squareV2PaymentProcessor","squarev2","_getVaultedInstrumentPayload","_getCardPayload","shouldVerify","cardTokenizationResult","isSquareV2ApiV2Enabled","tokenData","tokenForSavingCard","store_card_nonce","store_card_token","_getSquareCardIdOrThrow","verificationToken","three_d_secure","SquareV2WebPaymentsSdkEnv","LIVE","isSquareV2Window","assertSquareV2Window","Square","isIndividualCardElementOptions","individualCardElementOptions","cardNumberElementOptions","cardCvcElementOptions","cardExpiryElementOptions","IconStyle","StripeElementType","StripePaymentMethodType","StripeV3ErrorType","AuthFailure","APM_REDIRECT","Alipay","stripev3","isDeinitialize","useIndividualCardFields","stripeV3Client","mountCardVerificationFields","mountCardFields","stripeElement","shouldSubmitOrderBeforeLoadingAPM","confirmStripePayment","confirm","buildPaymentPayload","handleEmptyPaymentIntentError","unmountElement","isCancellationError","isAuthError","returnUrl","getStripeJs","confirmAlipayPayment","handleActions","mapStripePaymentData","confirmIdealPayment","Sepa","confirmSepaDebitPayment","getStripeCardElements","getStripeElement","billingDetails","mapStripeBillingDetails","createPaymentMethod","billing_details","stripeCardElements","mapStripeAddress","zipCodeElementOptions","isBillingAddressLike","stripePaymentMethodType","stripeElements","elements","getElement","cardExpiryElement","cardCvcElement","CardCvc","isAdditionalActionError","needsConfirm","getElements","bcStripeElements","updateStripeElements","update","fetchUpdates","StripeFormMode","DisplayName","StripeStringConstants","StripePaymentIntentStatus","StripeElementEvent","StripeInstrumentSetupFutureUsage","isMounted","checkoutEventsUnsubscribe","initCheckoutEventsSubscription","stripeInitializationOptions","paymentElement","updateStripePaymentIntent","mountElement","mapAppearanceVariables","fieldInnerShadow","colorBackground","fieldBackground","colorText","labelText","colorDanger","fieldErrorText","colorTextSecondary","colorTextPlaceholder","fieldPlaceholderText","colorIcon","mapInputAppearanceRules","fieldBorder","fieldText","throwStripeError","throwDisplayableStripeError","throwPaymentConfirmationProceedMessage","isPaymentCompleted","SUCCEEDED","_mapStripeAddress","IF_REQUIRED","confirmParams","payment_method_data","isRedirectAction","isOnPageAdditionalAction","isStripePaymentMethodLike","shopperLanguage","supportedLocales","ar","bg","cs","da","el","en","et","fi","fil","fr","he","hr","hu","it","ja","ko","lt","lv","ms","mt","nb","nl","pl","pt","ro","ru","sk","sl","sv","th","tr","vi","zh","formatLocale","localeLanguage","countryLocales","formattedLocale","isStripeAcceleratedCheckoutCustomer","STRIPE_CLIENT_BETAS","STRIPE_CLIENT_API_VERSION","stripeIntegrationService","stripeupe","_loadStripeElement","_stripeElements","_stripeUPEClient","stripePaymentProviderCustomer","stripeLinkAuthenticationState","_executeWithVaulted","_executeWithStripeConfirmation","_getPaymentPayload","_processAdditionalActionWithStripeConfirmation","_processVaultedAdditionalAction","initStripeElementUpdateTrigger","_loadStripeJs","_isStripeElementUpdateEnabled","appearance","variables","rules","NEVER","AUTO","wallets","applePay","googlePay","_getStripeElementTerms","READY","CHANGE","_updateStripeLinkStateByElementType","_updateStripeElement","additionalActionData","_confirmStripePaymentOrThrow","stripePaymentData","confirmPayment","confirmationResult","shouldShowTerms","terms","paymentElementType","isStripeLinkElementType","Link","stripeScriptLoader","stripeocs","_initializeStripeElement","customerSessionToken","enableLink","fonts","paymentMethodSelect","handleClosePaymentMethod","customerSessionClientSecret","link","savePaymentMethod","maxVisiblePaymentMethods","defaultValues","_onStripeElementChange","_collapseStripeElement","collapse","payment_method_id","selectedMethodId","paymentIntentId","paymentMethodOptions","shouldSaveCard","_shouldSaveCard","isStripePaymentEvent","collapsed","futureUsage","setup_future_usage","ON_SESSION","OFF_SESSION","FieldType","tdOnlineMartScriptLoader","tdInputs","CARD_NUMBER","CVV","EXPIRY","loadTDOnlineMartJs","tdOnlineMartClient","mountHostedFields","getPaymentPayloadOrThrow","processWithAdditionalAction","inputElement","commonPaymentData","digitalItemsInCart","shouldAddVerificationToken","isTrustedVaultingInstrument","getTokenOrThrow","throwTokenizationError","getHostedFieldsOptions","getTDOnlineMartClientOrThrow","inputId","isCreateTokenError","classes","tdOnlineMartWindow","customcheckout","PAYMENT_CANNOT_CONTINUE","worldpay","_submitAdditionalAction","iframeHidden","messageEvent","_isValidJsonWithSessionId","SessionId","onLoadError","_createHiddenIframe","formId","inputBin","source_id","inputJWT","userAgent","match","srcdoc","outerHTML","str","saveExternalId","externalId","storefrontPaymentRequestSender","_prepareForReferredRegistration","signIn","remoteCheckoutSignOut","executePaymentMethodCheckout","continueWithCheckoutCallback","_applePayScriptLoader","_onAuthorizeCallback","_onError","_onClick","_hasApplePaySession","onPaymentAuthorize","_isWebBrowserSupported","loadSdk","_paymentMethod","verifyCheckoutSpamProtection","_applePayButton","_createButton","_handleWalletButtonClick","applePayButton","_createThirdPartyButton","_createNativeButton","requiresShipping","requiredBillingContactFields","requiredShippingContactFields","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","_transformContactToAddress","shippingContact","abort","selectionShippingOptionId","availableOptions","unselectedOptions","detail","identifier","completeShippingContactSelection","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","selectedOptionId","_updateShippingOption","newShippingMethods","newTotal","newLineItems","_getUpdatedLineItems","completeShippingMethodSelection","transformedBillingAddress","transformedShippingAddress","emailAddress","contact","administrativeArea","sdkVersion","ScriptLoader","signInCustomer","signOutCustomer","checkoutTopButtonStyles","defaultCallbacks","hostedCheckoutCallbacks","onShippingAddressChange","onShippingOptionsChange","onHostedCheckoutApprove","buttonRenderOptions","checkoutPaymentMethodExecuted","isAuthenticationFlowCanceled","updateCustomerDataState","updatedState","firstShippingOption","shippingOptionId","bigCommercePaymentsPayLater","getCustomerEmail","openBoltCheckoutModalOrThrow","openCheckout","braintreepaypal","paymentButtonStyles","paypalCheckoutOptions","paypalCheckoutSuccessCallback","paypalCheckoutErrorCallback","buttonStyles","loadDefaultCheckout","tokenizePayload","device_data","onErrorCallback","braintreepaypalcredit","getValidPaymentMethodOrThrow","paypalFastlaneStylesSettings","primaryMethodId","shouldRunAcceleratedCheckout","validPaymentMethodId","buttonClassName","visaCheckoutOptions","braintreeVisaCheckout","visaCheckoutInstance","initOptions","createInitOptions","paymentRequest","String","settings","collectShipping","signInButton","createSignInButton","paymentSuccessPayload","mapToVisaCheckoutAddress","userData","cardInformation","userEmail","lastTwo","buttonClass","insertVisaCheckoutButton","buttonTemplate","visaCheckoutButton","flexDirection","hostWindow","shippingOptionData","newShippingOptionParameters","buttonType","pathname","paypalCommerceCredit","onEmailChange","getStyles","billingEmail","SHIPPING","linkAuthenticationElement","AUTHENTICATION","authenticated","complete","deleteConsignment","expressCheckoutAllowedCountryCodes","buttonHeight","_onComplete","_stripeClient","_mountExpressCheckoutElement","stripeExpressCheckoutClient","shouldRequireShippingAddress","_shouldRequireShippingAddress","_getAvailableCountries","allowedShippingCountries","expressCheckoutOptions","shippingRates","amazonPay","elementsOptions","_toCents","_getCurrency","_linkV2Element","EXPRESS_CHECKOUT","_initializeEvents","expressCheckoutElement","SHIPPING_ADDRESS_CHANGE","_onShippingAddressChange","SHIPPING_RATE_CHANGE","_onShippingRateChange","CONFIRM","_onConfirm","_getAvailableShippingOptions","_updateDisplayedPrice","shippingRate","_handleShippingOptionChange","_updateShippingAndBillingAddress","_mapShippingAddress","_mapBillingAddress","_completeCheckoutFlow","_getTotalPrice","_getStripeShippingOption","selectedId","sort","_getAmountTransformer","_amountTransformer","fallbackValue"],"sourceRoot":""}