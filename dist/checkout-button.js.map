{"version":3,"file":"checkout-button.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/webpack/runtime/compat get default export","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/webpack/runtime/make namespace object","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/request-sender\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/form-poster\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"tslib\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/data-store\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unrecoverable-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"lodash\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-internal-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-payment-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-storefront-error-response.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs/operators\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/error-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/omit-deep.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/clear-error-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-set.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-plain-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/array-replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-merge.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/merge-or-push.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-flatten.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-with-sorted-keys.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/memoize\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"reselect\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/create-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/with-memoized-combiner.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/create-freeze-proxy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/supported-payment-instruments.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/is-address-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-internal-checkout-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/create-request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-action-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store-reducer.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/bigpay-client\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/create-payment-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cache-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/is-action-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cachable-action-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/apple-pay/is-apple-pay-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-request-sender.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/script-loader\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/throw-error-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-or-merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-default-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/errors/checkout-not-available-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-comparator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-changed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-validator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/order-tax-provider-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/map-to-internal-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/is-billing-address-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-coupon.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/generated/checkout-button-method-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-gift-certificate.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-items.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-cart.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/promotion/map-to-discount-notifications.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/map-to-internal-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"card-validator\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-number-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/map-to-internal-order.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/map-to-internal-shipping-option.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-params.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/payment-human-verification-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/mutation-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/create-spam-protection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/errors/update-subscriptions-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/clone-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/default-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/create-data-store-projection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/payment-integration-store-projection-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"shallowequal\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-maps.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-resolver.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-private.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/selector-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-error-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-status-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/is-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/set-unique-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getShippableItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getLineItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/apple-pay/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-get-first-and-last-name.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv3-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-bnz-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-checkoutcom-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-cybersourcev2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-orbital-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-upe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/apple-pay/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/map-to-braintree-shipping-address-override.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-billing-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-shipping-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-supported-locales.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/format-locale.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/get-callback-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-inline-checkout-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/resolve-id-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/is-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/create-amazon-pay-v2-payment-processor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/request-sender\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/form-poster\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"tslib\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/data-store\");","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, { InternalErrorResponseBody, StorefrontErrorResponseBody } from './error-response-body';\nimport { mapFromInternalErrorResponse, mapFromPaymentErrorResponse, mapFromStorefrontErrorResponse, RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\nimport { LoadFormFieldsAction } from '../form';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadFormFieldsAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    UpdateSubscriptionsRequestedAction |\n    UpdateSubscriptionsSucceededAction |\n    UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!Object.prototype.hasOwnProperty.call(objectB, key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && Object.prototype.hasOwnProperty.call(object, key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nfunction arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n\nexport default objectMerge;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n    host?: string;\n    locale?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\nimport { SpamProtectionAction } from '../spam-protection';\n\nimport Customer from './customer';\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n\n    CreateCustomerRequested = 'CREATE_CUSTOMER_REQUESTED',\n    CreateCustomerSucceeded = 'CREATE_CUSTOMER_SUCCEEDED',\n    CreateCustomerFailed = 'CREATE_CUSTOMER_FAILED',\n\n    CreateCustomerAddressRequested = 'CREATE_CUSTOMER_ADDRESS_REQUESTED',\n    CreateCustomerAddressSucceeded = 'CREATE_CUSTOMER_ADDRESS_SUCCEEDED',\n    CreateCustomerAddressFailed = 'CREATE_CUSTOMER_ADDRESS_FAILED',\n\n    StripeLinkAuthenticated = 'STRIPE_LINK_AUTHENTICATED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction |\n    CreateCustomerAddressAction |\n    CreateCustomerAction;\n\nexport type CreateCustomerAction =\n    CreateCustomerRequestedAction |\n    CreateCustomerSucceededAction |\n    CreateCustomerFailedAction |\n    SpamProtectionAction |\n    LoadCheckoutAction;\n\nexport type CreateCustomerAddressAction =\n    CreateCustomerAddressRequestedAction |\n    CreateCustomerAddressSucceededAction |\n    CreateCustomerAddressFailedAction |\n    LoadCheckoutAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface StripeLinkAuthenticatedAction extends Action {\n    type: CustomerActionType.StripeLinkAuthenticated;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n\nexport interface CreateCustomerRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerRequested;\n}\n\nexport interface CreateCustomerSucceededAction extends Action {\n    type: CustomerActionType.CreateCustomerSucceeded;\n}\n\nexport interface CreateCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerFailed;\n}\n\nexport interface CreateCustomerAddressRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerAddressRequested;\n}\n\nexport interface CreateCustomerAddressSucceededAction extends Action<Customer> {\n    type: CustomerActionType.CreateCustomerAddressSucceeded;\n}\n\nexport interface CreateCustomerAddressFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerAddressFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n    statuses: CustomerStatusesState;\n    errors: CustomerErrorsState;\n}\n\nexport interface CustomerErrorsState {\n    createError?: Error;\n    createAddressError?: Error;\n}\n\nexport interface CustomerStatusesState {\n    isCreating?: boolean;\n    isCreatingAddress?: boolean;\n}\n\nexport const DEFAULT_STATE: CustomerState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    ExecutePaymentMethodCheckoutFailed = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_FAILED',\n    ExecutePaymentMethodCheckoutRequested = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_REQUESTED',\n    ExecutePaymentMethodCheckoutSucceeded = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyExecutePaymentMethodCheckoutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyExecutePaymentMethodCheckoutAction =\n    ExecutePaymentMethodCheckoutRequestedAction |\n    ExecutePaymentMethodCheckoutSucceededAction |\n    ExecutePaymentMethodCheckoutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface ExecutePaymentMethodCheckoutRequestedAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested;\n}\n\nexport interface ExecutePaymentMethodCheckoutSucceededAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded;\n}\n\nexport interface ExecutePaymentMethodCheckoutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Customer from './customer';\nimport { CustomerAction, CustomerActionType, StripeLinkAuthenticatedAction } from './customer-actions';\nimport CustomerState, { CustomerErrorsState, CustomerStatusesState, DEFAULT_STATE } from './customer-state';\n\ntype ReducerActionType = CheckoutAction | ContinueAsGuestAction | CustomerAction | StripeLinkAuthenticatedAction;\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: ReducerActionType\n): CustomerState {\n    const reducer = combineReducers<CustomerState, ReducerActionType>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: ReducerActionType\n): Customer | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectMerge(data, action.payload);\n    case CustomerActionType.StripeLinkAuthenticated:\n            return objectSet(data, 'isStripeLinkAuthenticated', action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CustomerErrorsState = DEFAULT_STATE.errors,\n    action: ReducerActionType\n): CustomerErrorsState {\n    switch (action.type) {\n    case CustomerActionType.CreateCustomerRequested:\n    case CustomerActionType.CreateCustomerSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case CustomerActionType.CreateCustomerFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case CustomerActionType.CreateCustomerAddressRequested:\n    case CustomerActionType.CreateCustomerAddressSucceeded:\n        return objectSet(errors, 'createAddressError', undefined);\n\n    case CustomerActionType.CreateCustomerAddressFailed:\n        return objectSet(errors, 'createAddressError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStatusesState = DEFAULT_STATE.statuses,\n    action: ReducerActionType\n): CustomerStatusesState {\n    switch (action.type) {\n    case CustomerActionType.CreateCustomerRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case CustomerActionType.CreateCustomerFailed:\n    case CustomerActionType.CreateCustomerSucceeded:\n        return objectSet(statuses, 'isCreating', false);\n\n    case CustomerActionType.CreateCustomerAddressRequested:\n        return objectSet(statuses, 'isCreatingAddress', true);\n\n    case CustomerActionType.CreateCustomerAddressFailed:\n    case CustomerActionType.CreateCustomerAddressSucceeded:\n        return objectSet(statuses, 'isCreatingAddress', false);\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    executePaymentMethodCheckoutError?: Error;\n    executePaymentMethodCheckoutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isExecutingPaymentMethodCheckout?: boolean;\n    executePaymentMethodCheckoutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { FormFields } from './form-field';\n\nexport enum FormFieldsActionType {\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\n}\n\nexport type LoadFormFieldsAction =\n    LoadFormFieldsRequestedAction |\n    LoadFormFieldsSucceededAction |\n    LoadFormFieldsFailedAction;\n\nexport interface LoadFormFieldsRequestedAction extends Action {\n    type: FormFieldsActionType.LoadFormFieldsRequested;\n}\n\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\n}\n\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\n    type: FormFieldsActionType.LoadFormFieldsFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n        return objectMerge(errors, {\n            executePaymentMethodCheckoutError: undefined,\n            executePaymentMethodCheckoutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n        return objectMerge(errors, {\n            executePaymentMethodCheckoutError: action.payload,\n            executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n        return objectMerge(statuses, {\n            isExecutingPaymentMethodCheckout: true,\n            executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n        return objectMerge(statuses, {\n            isExecutingPaymentMethodCheckout: false,\n            executePaymentMethodCheckoutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import { FormFields } from './form-field';\n\nexport default interface FormFieldsState {\n    data?: FormFields;\n    errors: FormFieldsErrorState;\n    statuses: FormFieldsStatusesState;\n}\n\nexport interface FormFieldsErrorState {\n    loadError?: Error;\n}\n\nexport interface FormFieldsStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: FormFieldsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { FormFields } from './form-field';\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsState, { DEFAULT_STATE, FormFieldsErrorState, FormFieldsStatusesState } from './form-fields-state';\n\nexport default function formFieldsReducer(\n    state: FormFieldsState = DEFAULT_STATE,\n    action: Action\n): FormFieldsState {\n    const reducer = combineReducers<FormFieldsState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: FormFields | undefined,\n    action: LoadFormFieldsAction\n): FormFields | undefined {\n    switch (action.type) {\n    case FormFieldsActionType.LoadFormFieldsSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\n    action: LoadFormFieldsAction\n): FormFieldsErrorState {\n    switch (action.type) {\n    case FormFieldsActionType.LoadFormFieldsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case FormFieldsActionType.LoadFormFieldsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\n    action: LoadFormFieldsAction\n): FormFieldsStatusesState {\n    switch (action.type) {\n    case FormFieldsActionType.LoadFormFieldsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case FormFieldsActionType.LoadFormFieldsSucceeded:\n    case FormFieldsActionType.LoadFormFieldsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    ForgetCheckoutRemoteCustomerRequested = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_REQUESTED',\n    ForgetCheckoutRemoteCustomerSucceeded = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_SUCCEEDED',\n    ForgetCheckoutRemoteCustomerFailed = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_FAILED',\n\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = ForgetCheckoutRemoteCustomerAction |\n    InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type ForgetCheckoutRemoteCustomerAction = ForgetCheckoutRemoteCustomerRequestedAction |\n    ForgetCheckoutRemoteCustomerSucceededAction |\n    ForgetCheckoutRemoteCustomerFailedAction;\n\nexport interface ForgetCheckoutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested;\n}\n\nexport interface ForgetCheckoutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded;\n}\n\nexport interface ForgetCheckoutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed;\n}\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): PaymentInstrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { PickupOptionMeta, PickupOptionResult } from './pickup-option';\n\nexport enum PickupOptionActionType {\n    LoadPickupOptionsRequested = 'LOAD_PICKUP_OPTIONS_REQUESTED',\n    LoadPickupOptionsSucceeded = 'LOAD_PICKUP_OPTIONS_SUCCEEDED',\n    LoadPickupOptionsFailed = 'LOAD_PICKUP_OPTIONS_FAILED',\n}\n\nexport type LoadPickupOptionsAction =\n    PickupOptionRequestedAction |\n    LoadPickupOptionsSucceededAction |\n    LoadPickupOptionsFailedAction;\n\nexport interface PickupOptionRequestedAction extends Action {\n    type: PickupOptionActionType.LoadPickupOptionsRequested;\n}\n\nexport interface LoadPickupOptionsSucceededAction extends Action<PickupOptionResult[], PickupOptionMeta> {\n    type: PickupOptionActionType.LoadPickupOptionsSucceeded;\n}\n\nexport interface LoadPickupOptionsFailedAction extends Action<Error> {\n    type: PickupOptionActionType.LoadPickupOptionsFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","/**\n * Takes a nested object and flattens it.\n */\nexport default function objectFlatten(\n    object: { [ key: string ]: any },\n    parent?: string\n): { [ key: string ]: any } {\n    const flattened: {[key: string]: any} = {};\n    Object.keys(object).forEach((key: string) => {\n        const value = object[key];\n        const keyString = parent ? parent + '.' + key : key;\n        if (typeof value === 'object') {\n            Object.assign(flattened, objectFlatten(value, keyString));\n        } else {\n            flattened[keyString] = value;\n        }\n    });\n\n    return flattened;\n}\n","export default function objectWithSortedKeys(\n    object: { [ key: string ]: any }\n) {\n    const keys = Object.keys(object);\n    const sortedKeys = keys.sort();\n\n    const sortedArray = sortedKeys.reduce((previous, current) => ({\n        ...previous,\n        [current]: object[current],\n    }), {});\n\n    return sortedArray;\n}\n","import { PickupOptionQueryMap } from './pickup-option';\n\nexport default interface PickupOptionState {\n    data?: PickupOptionQueryMap;\n    errors: PickupOptionErrorsState;\n    statuses: PickupOptionStatusesState;\n}\n\nexport interface PickupOptionErrorsState {\n    loadError?: Error;\n}\n\nexport interface PickupOptionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: PickupOptionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectFlatten, objectSet, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionQueryMap } from './pickup-option';\nimport { LoadPickupOptionsAction, PickupOptionActionType } from './pickup-option-actions';\nimport PickupOptionState, { DEFAULT_STATE, PickupOptionErrorsState, PickupOptionStatusesState } from './pickup-option-state';\n\nexport default function pickupOptionReducer(\n    state: PickupOptionState = DEFAULT_STATE,\n    action: Action\n): PickupOptionState {\n    const reducer = combineReducers<PickupOptionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PickupOptionQueryMap | undefined,\n    action: LoadPickupOptionsAction\n): PickupOptionQueryMap | undefined {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            if (action.meta) {\n                const optionQuery = {\n                    consignmentId: action.meta.consignmentId,\n                    searchArea: action.meta.searchArea,\n                };\n                const flattenedMeta = objectFlatten(optionQuery);\n                const sortedflattenedMeta = objectWithSortedKeys(flattenedMeta);\n                const keyString = btoa(`${JSON.stringify(sortedflattenedMeta)}`);\n\n                return objectSet(data, keyString , action.payload);\n            }\n            break;\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: PickupOptionErrorsState = DEFAULT_STATE.errors,\n    action: Action\n) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PickupOptionStatusesState = DEFAULT_STATE.statuses,\n    action: Action\n) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction |\n    ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    SendSignInEmailRequestedAction |\n    SendSignInEmailSucceededAction |\n    SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionStarted:\n    case ShippingStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionFinished:\n    case ShippingStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, { DEFAULT_STATE, SignInEmailErrorsState, SignInEmailStatusesState } from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction\n): SignInEmail | undefined {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction\n): SignInEmailErrorsState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(errors, 'sendError', undefined);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n        return objectSet(errors, 'sendError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction\n): SignInEmailStatusesState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n        return objectSet(statuses, 'isSending', true);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(statuses, 'isSending', false);\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    VerifyCheckoutRequested = 'SPAM_PROTECTION_CHECKOUT_VERIFY_REQUESTED',\n    VerifyCheckoutSucceeded = 'SPAM_PROTECTION_CHECKOUT_VERIFY_SUCCEEDED',\n    VerifyCheckoutFailed = 'SPAM_PROTECTION_CHECKOUT_VERIFY_FAILED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    CheckoutVerifyRequestedAction |\n    CheckoutVerifyFailedAction |\n    CheckoutVerifySucceededAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<{ token: string }> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n\nexport interface CheckoutVerifyRequestedAction extends Action {\n    type: SpamProtectionActionType.VerifyCheckoutRequested;\n}\n\nexport interface CheckoutVerifyFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.VerifyCheckoutFailed;\n}\n\nexport interface CheckoutVerifySucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.VerifyCheckoutSucceeded;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, { DEFAULT_STATE, SubscriptionsErrorsState, SubscriptionsStatusesState } from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction\n): SubscriptionsErrorsState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction\n): SubscriptionsStatusesState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | SpamProtectionAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case SpamProtectionActionType.VerifyCheckoutSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case SpamProtectionActionType.ExecuteRequested:\n        return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n    case SpamProtectionActionType.ExecuteFailed:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n    default:\n        return statuses;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/memoize\");","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCustomer:\n        return 'Unable to proceed because customer data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"reselect\");","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'mollie.credit_card': {\n        provider: 'mollie',\n        method: 'credit_card',\n    },\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv3.scheme': {\n        provider: 'adyenv3',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    barclays: {\n        provider: 'barclays',\n        method: 'credit_card',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.credit_card': {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.card': {\n        provider: 'checkoutcom',\n        method: 'card',\n    },\n    sagepay: {\n        provider: 'sagepay',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    'stripeupe.card': {\n        provider: 'stripeupe',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    cybersourcev2: {\n        provider: 'cybersourcev2',\n        method: 'credit_card',\n    },\n    bnz: {\n        provider: 'bnz',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n    digitalriver: {\n        provider: 'digitalriver',\n        method: 'credit_card',\n    },\n    moneris: {\n        provider: 'moneris',\n        method: 'credit_card',\n    },\n    cba_mpgs: {\n        provider: 'cba_mpgs',\n        method: 'credit_card',\n    },\n    worldpayaccess: {\n        provider: 'worldpayaccess',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createPickupOptionSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createPickupOptionSelector = createPickupOptionSelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.formFields);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const pickupOptions = createPickupOptionSelector(state.pickupOptions);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n        const config = createConfigSelector(state.config, state.formFields);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            pickupOptions,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        getBillingAddress => () => {\n            return guard(getBillingAddress(), () => new MissingDataError(MissingDataErrorType.MissingBillingAddress));\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n    getCustomerOrThrow(): Customer;\n    getCreateAccountError(): Error | undefined;\n    isCreatingCustomerAccount(): boolean;\n    getCreateAddressError(): Error | undefined;\n    isCreatingCustomerAddress(): boolean;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    const getCustomerOrThrow = createSelector(\n        getCustomer,\n        getCustomer => () => {\n            return guard(getCustomer(), () => new MissingDataError(MissingDataErrorType.MissingCustomer));\n        }\n    );\n\n    const getCreateAccountError = createSelector(\n        (state: CustomerState) => state.errors.createError,\n        error => () => error\n    );\n\n    const isCreatingCustomerAccount = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreating,\n        status => () => status\n    );\n\n    const getCreateAddressError = createSelector(\n        (state: CustomerState) => state.errors.createAddressError,\n        error => () => error\n    );\n\n    const isCreatingCustomerAddress = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreatingAddress,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n            getCustomerOrThrow: getCustomerOrThrow(state),\n            getCreateAccountError: getCreateAccountError(state),\n            isCreatingCustomerAccount: isCreatingCustomerAccount(state),\n            getCreateAddressError: getCreateAddressError(state),\n            isCreatingCustomerAddress: isCreatingCustomerAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n    getShippingAddressOrThrow(): Address;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            const shippingConsignment = consignments?.find(consignment => !consignment.selectedPickupOption);\n\n            return shippingConsignment?.shippingAddress;\n        }\n    );\n\n    const getShippingAddressOrThrow = createSelector(\n        getShippingAddress,\n        getShippingAddress => () => {\n            return guard(getShippingAddress(), () => new MissingDataError(MissingDataErrorType.MissingShippingAddress));\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n            getShippingAddressOrThrow: getShippingAddressOrThrow(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentIdOrThrow(): { providerId: string; gatewayId?: string };\n    getPaymentStatus(): string | undefined;\n    getPaymentStatusOrThrow(): string;\n    getPaymentToken(): string | undefined;\n    getPaymentTokenOrThrow(): string;\n    getPaymentRedirectUrl(): string | undefined;\n    getPaymentRedirectUrlOrThrow(): string;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentIdOrThrow = createSelector(\n        getPaymentId,\n        getPaymentId => () => {\n            return guard(getPaymentId(), () => new MissingDataError(MissingDataErrorType.MissingPaymentId));\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentStatusOrThrow = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => () => {\n            return guard(getPaymentStatus(), () => new MissingDataError(MissingDataErrorType.MissingPaymentStatus));\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentTokenOrThrow = createSelector(\n        getPaymentToken,\n        getPaymentToken => () => {\n            return guard(getPaymentToken(), () => new MissingDataError(MissingDataErrorType.MissingPaymentToken));\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const getPaymentRedirectUrlOrThrow = createSelector(\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrl => () => {\n            return guard(getPaymentRedirectUrl(), () => new MissingDataError(MissingDataErrorType.MissingPaymentRedirectUrl));\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentIdOrThrow: getPaymentIdOrThrow({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentStatusOrThrow: getPaymentStatusOrThrow({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentTokenOrThrow: getPaymentTokenOrThrow({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            getPaymentRedirectUrlOrThrow: getPaymentRedirectUrlOrThrow({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        signInEmail => () => signInEmail\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        error => () => error\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SignInEmailState = DEFAULT_STATE\n    ): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getCartOrThrow = createSelector(\n        getCart,\n        getCart => () => {\n          return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { FormFieldsState } from '../form';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getHost(): string | undefined;\n    getLocale(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (\n    state: ConfigState,\n    formState: FormFieldsState\n) => ConfigSelector;\n\ninterface ConfigSelectorDependencies {\n    formState: FormFieldsState;\n}\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        data => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined ?\n                flashMessages.filter(({ type }) => filterType === type) :\n                flashMessages;\n        }\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\n        (data, formFields) => () => data && formFields ? ({\n            ...data.storeConfig,\n            formFields,\n        }) : undefined\n    );\n\n    const getStoreConfigOrThrow = createSelector(\n        getStoreConfig,\n        getStoreConfig => () => {\n          return guard(getStoreConfig(), () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig));\n        }\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getHost = createSelector(\n        (state: ConfigState) => state.meta?.host,\n        data => () => data\n    );\n\n    const getLocale = createSelector(\n        (state: ConfigState) => state.meta?.locale,\n        data => () => data\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE,\n        formState: FormFieldsState\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getFlashMessages: getFlashMessages(state),\n            getStoreConfig: getStoreConfig(state, { formState }),\n            getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getHost: getHost(state),\n            getLocale: getLocale(state),\n            getVariantIdentificationToken: getVariantIdentificationToken(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getExecutePaymentMethodCheckoutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getExecutePaymentMethodCheckoutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutError,\n        (executePaymentMethodCheckoutMethodId, executePaymentMethodCheckoutError) => (methodId?: string) => {\n            if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                return;\n            }\n\n            return executePaymentMethodCheckoutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isExecutingPaymentMethodCheckout = createSelector(\n        (state: CustomerStrategyState) => state.statuses.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isExecutingPaymentMethodCheckout,\n        (executePaymentMethodCheckoutMethodId, isExecutingPaymentMethodCheckout) => (methodId?: string) => {\n            if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecutingPaymentMethodCheckout;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getExecutePaymentMethodCheckoutError: getExecutePaymentMethodCheckoutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\nimport { createSelector } from '../../common/selector';\nimport { guard } from '../../common/utility';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getCardInstrumentOrThrow(instrumentId: string): CardInstrument;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway ? `${paymentMethod.gateway}.${paymentMethod.id}` : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        }\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) => (instrumentId: string) => {\n            const cards = values(supportedInstruments);\n\n            return instruments?.find((instrument): instrument is CardInstrument =>\n                instrument.bigpayToken === instrumentId &&\n                instrument.type === 'card' &&\n                cards.some(card => isMatch(instrument, card))\n            );\n        }\n    );\n\n    const getCardInstrumentOrThrow = createSelector(\n        getCardInstrument,\n        getCardInstrument => (instrumentId: string) => {\n            return guard(getCardInstrument(instrumentId), () => new MissingDataError(MissingDataErrorType.MissingPaymentInstrument));\n        }\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, supportedProvider =>\n                filter(instruments, (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                    return isMatch(instrument, supportedProvider);\n                })\n            );\n\n            return allSupportedInstruments;\n        }\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getCardInstrumentOrThrow: getCardInstrumentOrThrow(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getCustomerAccountFields(): FormField[];\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        formFields => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = formFields ? formFields.shippingAddress : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        formFields => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = formFields ? formFields.billingAddress : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getCustomerAccountFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        formFields => () => formFields ? formFields.customerAccount : []\n    );\n\n    const getLoadError = createSelector(\n        (state: FormFieldsState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: FormFieldsState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: FormFieldsState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId ?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        getPaymentMethod => (methodId: string, gatewayId?: string) => {\n            return guard(getPaymentMethod(methodId, gatewayId), () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { objectFlatten, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionResult, SearchArea } from './pickup-option';\nimport PickupOptionState, { DEFAULT_STATE } from './pickup-option-state';\n\nexport default interface PickupOptionSelector {\n    getPickupOptions(consignmentId: string, searchArea: SearchArea): PickupOptionResult[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type PickupOptionSelectorFactory = (state: PickupOptionState) => PickupOptionSelector;\n\nexport function createPickupOptionSelectorFactory(): PickupOptionSelectorFactory {\n    const getPickupOptions = createSelector(\n        (state: PickupOptionState) => state.data,\n        pickupOptions => (consignmentId: string, searchArea: SearchArea) => {\n            if (!pickupOptions) {\n                return;\n            }\n            const flattenedParams = objectFlatten({ consignmentId, searchArea });\n            const sortedFlattenedParams = objectWithSortedKeys(flattenedParams);\n            const keyString = btoa(`${JSON.stringify(sortedFlattenedParams)}`);\n\n            return pickupOptions[keyString];\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PickupOptionState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: PickupOptionState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: PickupOptionState = DEFAULT_STATE\n    ): PickupOptionSelector => {\n        return {\n            getPickupOptions: getPickupOptions(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentsOrThrow(): Consignment[];\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentsOrThrow = createSelector(\n        getConsignments,\n        getConsignments => () => {\n            return guard(getConsignments(), () => new MissingDataError(MissingDataErrorType.MissingConsignments));\n        }\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentsOrThrow: getConsignmentsOrThrow(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getCheckoutOrThrow = createSelector(\n        getCheckout,\n        getCheckout => () => {\n            return guard(getCheckout(), () => new MissingDataError(MissingDataErrorType.MissingCheckout));\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        isExecutingSpamCheck => () => isExecutingSpamCheck === true\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isExecutingSpamCheck: isExecutingSpamCheck(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    getOrderPaymentId(methodId: string): string | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderOrThrow = createSelector(\n        getOrder,\n        getOrder => () => {\n            return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getOrderPaymentId = createSelector(\n        (state: OrderState) => state.data?.payments,\n        (payments = []) => (methodId: string) => {\n            const currentPayment = payments.find(({ providerId }) => providerId === methodId);\n\n            return currentPayment?.paymentId;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            getOrderPaymentId: getOrderPaymentId(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SubscriptionsState = DEFAULT_STATE\n    ): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        Object.prototype.hasOwnProperty.call(object, key)\n    );\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { formFieldsReducer } from '../form';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, pickupOptionReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        formFields: formFieldsReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        pickupOptions: pickupOptionReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/bigpay-client\");","// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" /> \nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","export interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nexport default function isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { filter } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { PaymentMethod } from '.';\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport { isApplePayWindow } from './strategies/apple-pay';\n\nconst APPLEPAYID = 'applepay';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            const state = store.getState();\n            const cart = state.cart.getCartOrThrow();\n\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods({ ...options, params: { ...options?.params, cartId: cart.id } })\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n                    const methods = response.body;\n                    const filteredMethods = Array.isArray(methods) ? this._filterApplePay(methods) : methods;\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, filteredMethods, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): ThunkAction<LoadPaymentMethodAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            const state = store.getState();\n            const cartId = state.cart.getCart()?.id;\n            const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, { ...options, params })\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n\n    private _filterApplePay(methods: PaymentMethod[]): PaymentMethod[] {\n\n        return filter(methods, method => {\n            if (method.id === APPLEPAYID && !isApplePayWindow(window)) {\n                return false;\n            }\n\n            return true;\n        });\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout, params }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout, params }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/script-loader\");","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options\n                        );\n\n                        return createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body);\n                    })\n                ).pipe(\n                    catchError(error => throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error))\n                ),\n                this._updateCustomerConsent(credentials, options)\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _updateCustomerConsent(\n        {\n            email,\n            acceptsAbandonedCartEmails,\n            acceptsMarketingNewsletter,\n        }: GuestCredentials,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        if ((acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions({\n            email,\n            acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n            acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n        }, options);\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { FormFieldsActionCreator } from '../form';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true, params: {...options?.params, checkoutId: id} }),\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig(),\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true })\n            ),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = []\n): string {\n    return Array.isArray(includeDictionaryOrList) ?\n        joinIncludes([\n            ...baseIncludes,\n            ...includeDictionaryOrList,\n        ]) :\n        mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean }\n): string {\n    const deletions = keys(pickBy(includesDictionary, on => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([\n            ...difference(baseIncludes, deletions),\n            ...additions,\n        ]);\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinOrMergeIncludes, ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.get<Checkout>(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { ComparableCheckout } from '../../checkout';\nimport { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    data: { previous: ComparableCheckout; updated: ComparableCheckout };\n\n    constructor(\n        previous: ComparableCheckout,\n        updated: ComparableCheckout\n    ) {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n        this.data = {\n            previous,\n            updated,\n        };\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { Cart, CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\nexport type ComparableCheckout = Pick<Checkout, 'outstandingBalance' | 'coupons' | 'giftCertificates'>\n    & {\n        cart: Partial<Cart>;\n    };\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.outstandingBalance === response.body.outstandingBalance\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError(\n                    this._getComparableCheckout(checkout),\n                    this._getComparableCheckout(response.body)\n                );\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n\n    private _getComparableCheckout(\n        checkout: Checkout\n    ): ComparableCheckout  {\n        const { cart, coupons, giftCertificates, outstandingBalance } = checkout;\n\n        return {\n            cart: {\n                cartAmount: cart.cartAmount,\n                currency: cart.currency,\n                lineItems: cart.lineItems,\n            },\n            coupons,\n            giftCertificates,\n            outstandingBalance,\n        };\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutNotAvailableError } from '../checkout/errors';\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout, params }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get<Config>(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n            throw error;\n        });\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsRequestSender from './form-fields-request-sender';\n\nexport default class FormFieldsActionCreator {\n    constructor(\n        private _formFieldsRequestSender: FormFieldsRequestSender\n    ) {}\n\n    @cachableAction\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\n        return concat(\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\n            defer(async () => {\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\n\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\n            })\n        ).pipe(\n            catchError(response => throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { FormFields } from './form-field';\n\nexport default class FormFieldsRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\n        const url = '/api/storefront/form-fields';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam check. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload?: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const variantIdentificationToken = state.config.getVariantIdentificationToken();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (checkout.shouldExecuteSpamCheck) {\n                    throw new SpamProtectionNotCompletedError();\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(\n                            this._mapToOrderRequestBody(\n                                payload ?? {},\n                                checkout.id,\n                                checkout.customerMessage,\n                                externalSource\n                            ),\n                            {\n                                ...options,\n                                headers: {\n                                    checkoutVariant: variantIdentificationToken,\n                                },\n                            }))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        cartId: string,\n        customerMessage: string,\n        externalSource?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                cartId,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            cartId,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Checkout prevents consumers from placing their orders when a merchant wishes\n * to be able to block transactions if the automated tax provider cannot be reached.\n */\nexport default class OrderTaxProviderUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The tax provider is unavailable.');\n\n        this.name = 'OrderTaxProviderUnavailableError';\n        this.type = 'tax_provider_unavailable';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { isNil, omitBy } from 'lodash';\n\nimport { joinIncludes, ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { OrderTaxProviderUnavailableError } from './errors';\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport interface SubmitOrderRequestOptions extends RequestOptions {\n    headers?: {\n        checkoutVariant?: string;\n    };\n}\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body?: InternalOrderRequestBody, { headers, timeout }: SubmitOrderRequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post<InternalOrderResponseBody>(url, {\n            body,\n            headers: omitBy({\n                'X-Checkout-Variant': headers && headers.checkoutVariant,\n                ...SDK_VERSION_HEADERS,\n            }, isNil),\n            timeout,\n        }).catch(error => {\n            if (error.body.type === 'tax_provider_unavailable') {\n                throw new OrderTaxProviderUnavailableError();\n            }\n\n            throw error;\n        });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport Payment, { FormattedHostedInstrument, FormattedPayload, FormattedVaultedInstrument } from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\ninterface InitializeOffsitePaymentSettings {\n    methodId: string;\n    gatewayId?: string;\n    instrumentId?: string;\n    target?: string;\n    promise?: Promise<undefined>;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n\ntype InitializeOffsitePayment = (settings: InitializeOffsitePaymentSettings)\n    => ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors>;\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            defer(async () => {\n                try {\n                    return await this._paymentRequestSender.submitPayment(\n                        this._paymentRequestTransformer.transform(payment, store.getState())\n                    );\n                } catch (error) {\n                    const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n                    return await this._paymentRequestSender.submitPayment(\n                        this._paymentRequestTransformer.transform({ ...payment, additionalAction }, store.getState())\n                    );\n                }\n            })\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment: InitializeOffsitePayment = ({\n        methodId,\n        gatewayId,\n        instrumentId,\n        target,\n        promise,\n        shouldSaveInstrument,\n        shouldSetAsDefaultInstrument,\n    }) => {\n        return store => {\n            let paymentData: FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument> | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = {\n                    formattedPayload: {\n                        vault_payment_instrument: shouldSaveInstrument,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                };\n            }\n\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId, paymentData }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                Promise.race([this._paymentRequestSender.initializeOffsitePayment(payload, target), promise].filter(Boolean))\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response<any> {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { isBillingAddressLike, BillingAddress } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[]\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","enum CheckoutButtonMethodType {\n    APPLEPAY = \"applepay\",\n    AMAZON_PAY_V2 = \"amazonpay\",\n    BRAINTREE_PAYPAL = \"braintreepaypal\",\n    BRAINTREE_VENMO = \"braintreevenmo\",\n    BRAINTREE_PAYPAL_CREDIT = \"braintreepaypalcredit\",\n    GOOGLEPAY_ADYENV2 = \"googlepayadyenv2\",\n    GOOGLEPAY_ADYENV3 = \"googlepayadyenv3\",\n    GOOGLEPAY_AUTHORIZENET = \"googlepayauthorizenet\",\n    GOOGLEPAY_BNZ = \"googlepaybnz\",\n    GOOGLEPAY_BRAINTREE = \"googlepaybraintree\",\n    GOOGLEPAY_CHECKOUTCOM = \"googlepaycheckoutcom\",\n    GOOGLEPAY_CYBERSOURCEV2 = \"googlepaycybersourcev2\",\n    GOOGLEPAY_ORBITAL = \"googlepayorbital\",\n    GOOGLEPAY_STRIPE = \"googlepaystripe\",\n    GOOGLEPAY_STRIPEUPE = \"googlepaystripeupe\",\n    MASTERPASS = \"masterpass\",\n    PAYPALEXPRESS = \"paypalexpress\",\n    PAYPALCOMMERCE = \"paypalcommerce\",\n    PAYPALCOMMERCE_CREDIT = \"paypalcommercecredit\",\n    PAYPALCOMMERCE_APMS = \"paypalcommercealternativemethods\",\n    PAYPALCOMMERCE_INLINE = \"paypalcommerceinline\",\n    PAYPALCOMMERCE_VENMO = \"paypalcommercevenmo\"\n}\nexport default CheckoutButtonMethodType;\n\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear = year.length === 4 ? year.slice(-2) : (year ? year.slice(0, 2) : month.slice(2));\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"card-validator\");","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map(info => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter(gapIndex => unformattedValue.length > gapIndex)\n            .reduce((output, gapIndex, index) => (\n                [\n                    output.slice(0, gapIndex + index),\n                    output.slice(gapIndex + index),\n                ].join(NUMBER_SEPARATOR)\n            ), unformattedValue);\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && find(lineItem.socialMedia, item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress, Address } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { CheckoutButtonMethodType } from '../checkout-buttons/strategies';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport { CardExpiryFormatter, CardNumberFormatter, HostedInputValues } from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, { HostedCreditCardInstrument, HostedVaultedInstrument, PaymentInstrument } from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n        const shippingAddress = this._mapShippingAddress(checkoutState, paymentMethod);\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) || isFormattedVaultedInstrument(payment.paymentData)) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(values: HostedInputValues, data: HostedFormOrderData, nonce: string): PaymentRequestBody {\n        const { additionalAction, authToken, checkout, config, order, orderMeta, payment = {}, paymentMethod, paymentMethodMeta } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            additionalAction,\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer: order && order.billingAddress && checkout && mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress: order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress: shippingAddress && checkout && mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment, nonce),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: config && pick(config.storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        if (paymentMethod.id === CheckoutButtonMethodType.BRAINTREE_VENMO) {\n            return { ...paymentMethod, id: CheckoutButtonMethodType.BRAINTREE_PAYPAL };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(\n        values: HostedInputValues,\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\n        nonce: string\n    ): PaymentInstrument {\n        return 'instrumentId' in payment ?\n            {\n                ...payment,\n                ccCvv: values.cardCodeVerification,\n                ccNumber: values.cardNumberVerification && this._cardNumberFormatter.unformat(values.cardNumberVerification),\n                hostedFormNonce: nonce,\n            } :\n            {\n                ...payment,\n                ccCvv: values.cardCode,\n                ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                ccName: values.cardName || '',\n                ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n                hostedFormNonce: nonce,\n            };\n    }\n\n    private _mapShippingAddress(checkoutState: InternalCheckoutSelectors, paymentMethod?: PaymentMethod): Address | undefined {\n        if (paymentMethod) {\n            const isBopisEnabled = paymentMethod.initializationData?.bopis?.enabled;\n            const requiredAddress = paymentMethod.initializationData?.bopis?.requiredAddress;\n            const consignments = checkoutState.consignments.getConsignments();\n            const isPickup = consignments?.every(consignment => consignment.selectedPickupOption);\n\n            if (isBopisEnabled && isPickup && requiredAddress === 'none') {\n                return undefined;\n            }\n        }\n\n        return checkoutState.shippingAddress.getShippingAddress();\n    }\n}\n","import { FormattedPayload, FormattedVaultedInstrument, HostedVaultedInstrument, PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(instrument: PaymentInstrument): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(instrument: PaymentInstrument): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>).formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token);\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { CheckoutIncludes, CheckoutParams, CheckoutRequestSender, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, { ConsignmentsRequestBody, ConsignmentAssignmentBaseRequestBodyWithAddress, ConsignmentAssignmentBaseRequestBodyWithShippingAddress, ConsignmentAssignmentRequestBody, ConsignmentCreateRequestBody, ConsignmentLineItem, ConsignmentRequestBody, ConsignmentShippingOptionRequestBody, ConsignmentUpdateRequestBody } from './consignment';\nimport { ConsignmentActionType, CreateConsignmentsAction, DeleteConsignmentAction, LoadShippingOptionsAction, UpdateConsignmentAction, UpdateShippingOptionAction } from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const address = this._consignmentHasAddress(consignment) ? consignment.address : consignment.shippingAddress;\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                address,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const address = this._consignmentHasAddress(consignment) ? consignment.address : consignment.shippingAddress;\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                address,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        address: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            address,\n            lineItems: [ ...physicalItems, ...customItems ].map(item => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n\n    private _consignmentHasAddress(\n        consignment: ConsignmentAssignmentBaseRequestBodyWithAddress | ConsignmentAssignmentBaseRequestBodyWithShippingAddress\n    ): consignment is ConsignmentAssignmentBaseRequestBodyWithAddress {\n        return typeof consignment === 'object' && 'address' in consignment;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport { joinIncludes, joinOrMergeIncludes, ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n    'consignments.availableShippingOptions',\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'promotions.banners',\n];\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection challenge. Please try again.');\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class CardingProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('Please complete our human verification challenge and try again.');\n\n        this.name = 'CardingProtectionChallengeNotCompletedError';\n        this.type = 'carding_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class CardingProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to verify that you are not a robot. Please try again.');\n\n        this.name = 'CardingProtectionFailedError';\n        this.type = 'carding_protection_failed';\n    }\n}\n","import { switchMap, take } from 'rxjs/operators';\n\nimport { RequestError } from '../common/error/errors';\nimport { PaymentAdditionalAction } from '../payment';\n\nimport { CardingProtectionChallengeNotCompletedError, CardingProtectionFailedError, SpamProtectionChallengeNotCompletedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\n\nexport default class PaymentHumanVerificationHandler {\n\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    handle(error: Error): Promise<PaymentAdditionalAction>;\n    handle(id: string, key: string): Promise<PaymentAdditionalAction>;\n    async handle(errorOrId: Error | string, key?: string): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this.handleWithRecaptchaSitekey(errorOrId, key);\n        }\n\n        return this.handleWithPaymentHumanVerificationRequestError(errorOrId);\n    }\n\n    private async handleWithPaymentHumanVerificationRequestError(error: Error): Promise<PaymentAdditionalAction> {\n        if (!this._isPaymentHumanVerificationRequest(error)) {\n            throw error;\n        }\n\n        await this._initialize(error.body.additional_action_required.data.key);\n\n        return this._performRecaptcha();\n    }\n\n    private async handleWithRecaptchaSitekey(id: string, key?: string): Promise<PaymentAdditionalAction> {\n        if (id !== 'recaptcha_v2') {\n            throw Error('Human verification method is not supported.');\n        }\n\n        if (!key) {\n            throw Error('Recaptcha site key is missing.');\n        }\n\n        await this._initialize(key);\n\n        return this._performRecaptcha();\n    }\n\n    private _performRecaptcha(): Promise<PaymentAdditionalAction> {\n        return this._googleRecaptcha.execute()\n            .pipe(take(1))\n            .pipe(switchMap(async ({ error, token }) => {\n                if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                    throw new CardingProtectionChallengeNotCompletedError();\n                }\n\n                if (error || !token) {\n                    throw new CardingProtectionFailedError();\n                }\n\n                return {\n                    type: 'recaptcha_v2_verification',\n                    data: {\n                        human_verification_token: token,\n                    },\n                };\n            })).toPromise();\n    }\n\n    private _initialize(recaptchaSitekey: string): Promise<void> {\n        const cardingProtectionElementId = 'cardingProtectionContainer';\n\n        let cardingProtectionElement = document.getElementById(cardingProtectionElementId);\n        if (cardingProtectionElement && cardingProtectionElement.parentNode) {\n            cardingProtectionElement.parentNode.removeChild(cardingProtectionElement);\n        }\n\n        cardingProtectionElement = document.createElement('div');\n        cardingProtectionElement.setAttribute('id', cardingProtectionElementId);\n        document.body.appendChild(cardingProtectionElement);\n\n        return this._googleRecaptcha.load(cardingProtectionElementId, recaptchaSitekey);\n    }\n\n    private _isPaymentHumanVerificationRequest(error: Error): error is RequestError {\n        const { additional_action_required, status } = (error as RequestError).body || {};\n\n        return status === 'additional_action_required'\n            && additional_action_required\n            && additional_action_required.type === 'recaptcha_v2_verification';\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, of, throwError, Observable, Subject } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError, SpamProtectionNotLoadedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nconst TIMEOUT = 7000;\nconst RETRY_INTERVAL = 250;\nconst MAX_RETRIES = TIMEOUT / RETRY_INTERVAL;\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => Subject<RecaptchaResult>;\n    private _widgetId?: number;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {\n        this._memoized = memoize((recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n            const event$ = new Subject<RecaptchaResult>();\n\n            if (!container) {\n                throw new Error();\n            }\n\n            this._widgetId = recaptcha.render(container.id, {\n                sitekey,\n                size: 'invisible',\n                callback: () => {\n                    event$.next({\n                        token: recaptcha.getResponse(this._widgetId),\n                    });\n                    recaptcha.reset(this._widgetId);\n                },\n                'error-callback': () => {\n                    event$.next({\n                        error: new SpamProtectionFailedError(),\n                    });\n                },\n            });\n\n            return event$;\n        }, { isEqual: (a, b) => a === b });\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                if (recaptcha) {\n                    this._event$ = this._memoized(recaptcha, sitekey, document.getElementById(containerId));\n                    this._recaptcha = recaptcha;\n                }\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        return defer(() => {\n            const event$ = this._event$;\n            const recaptcha = this._recaptcha;\n\n            if (!event$ || !recaptcha) {\n                throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n            }\n\n            return defer(() => {\n                const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n                return element ? of(element) : throwError(new SpamProtectionNotLoadedError());\n            })\n                .pipe(\n                    retryWhen(errors => errors.pipe(\n                        delay(RETRY_INTERVAL),\n                        switchMap((error, index) =>\n                            index < MAX_RETRIES ? of(error) : throwError(error)\n                        )\n                    )),\n                    switchMap(element => {\n                        this._watchRecaptchaChallengeWindow(event$, element);\n                        recaptcha.execute(this._widgetId);\n\n                        return event$;\n                    }),\n                    catchError(error => of({ error }))\n                );\n        });\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionChallengeNotCompletedError(),\n                });\n            }\n        }).observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha | undefined>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader): GoogleRecaptcha {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { Subscriptions, SubscriptionsActionType, SubscriptionsRequestSender, UpdateSubscriptionsAction } from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(\n        private _subscriptionsRequestSender: SubscriptionsRequestSender\n    ) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(subscriptions, options);\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(\n                SubscriptionsActionType.UpdateSubscriptionsFailed,\n                new UpdateSubscriptionsError(error)\n            ))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    updateSubscriptions(subscriptions: Subscriptions, { timeout }: RequestOptions = {}): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        // Fixed in later versions of typescript https://github.com/microsoft/TypeScript/issues/36390\n        return (input as any[]).map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { PaymentIntegrationSelectors } from \"@bigcommerce/checkout-sdk/payment-integration-api\";\nimport { cloneResult as clone } from \"../common/utility\";\nimport { InternalCheckoutSelectors } from \"../checkout\";\n\nexport default function createPaymentIntegrationSelectors({\n    billingAddress: { getBillingAddress, getBillingAddressOrThrow },\n    cart: { getCart, getCartOrThrow },\n    checkout: { getCheckout, getCheckoutOrThrow },\n    config: { getHost, getLocale, getStoreConfig, getStoreConfigOrThrow },\n    consignments: { getConsignments, getConsignmentsOrThrow },\n    customer: { getCustomer, getCustomerOrThrow },\n    instruments: { getCardInstrument, getCardInstrumentOrThrow },\n    order: { getOrder, getOrderOrThrow, getOrderPaymentId },\n    payment: {\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        isPaymentDataRequired,\n    },\n    paymentMethods: { getPaymentMethod, getPaymentMethodOrThrow },\n    paymentStrategies: { isInitialized: isPaymentMethodInitialized },\n    shippingAddress: { getShippingAddress, getShippingAddressOrThrow },\n}: InternalCheckoutSelectors): PaymentIntegrationSelectors {\n    return {\n        getHost: clone(getHost),\n        getLocale: clone(getLocale),\n        getBillingAddress: clone(getBillingAddress),\n        getBillingAddressOrThrow: clone(getBillingAddressOrThrow),\n        getCart: clone(getCart),\n        getCartOrThrow: clone(getCartOrThrow),\n        getCheckout: clone(getCheckout),\n        getCheckoutOrThrow: clone(getCheckoutOrThrow),\n        getStoreConfig: clone(getStoreConfig),\n        getStoreConfigOrThrow: clone(getStoreConfigOrThrow),\n        getConsignments: clone(getConsignments),\n        getConsignmentsOrThrow: clone(getConsignmentsOrThrow),\n        getCustomer: clone(getCustomer),\n        getCustomerOrThrow: clone(getCustomerOrThrow),\n        getCardInstrument: clone(getCardInstrument),\n        getCardInstrumentOrThrow: clone(getCardInstrumentOrThrow),\n        getOrder: clone(getOrder),\n        getOrderOrThrow: clone(getOrderOrThrow),\n        getOrderPaymentId: clone(getOrderPaymentId),\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        getPaymentMethod: clone(getPaymentMethod),\n        getPaymentMethodOrThrow: clone(getPaymentMethodOrThrow),\n        getShippingAddress: clone(getShippingAddress),\n        getShippingAddressOrThrow: clone(getShippingAddressOrThrow),\n        isPaymentDataRequired,\n        isPaymentMethodInitialized,\n    };\n}\n","import {\n    PaymentIntegrationService,\n    PaymentIntegrationSelectors,\n    BillingAddressRequestBody,\n    OrderRequestBody,\n    Payment,\n    ShippingAddressRequestBody,\n    RequestOptions,\n} from \"@bigcommerce/checkout-sdk/payment-integration-api\";\nimport { BillingAddressActionCreator } from \"../billing\";\nimport { CheckoutStore, CheckoutActionCreator } from \"../checkout\";\nimport { DataStoreProjection } from \"../common/data-store\";\nimport { OrderActionCreator } from \"../order\";\nimport PaymentActionCreator from \"../payment/payment-action-creator\";\nimport PaymentMethodActionCreator from \"../payment/payment-method-action-creator\";\nimport { ConsignmentActionCreator } from \"../shipping\";\n\nimport PaymentIntegrationStoreProjectionFactory from \"./payment-integration-store-projection-factory\";\n\nexport default class DefaultPaymentIntegrationService\n    implements PaymentIntegrationService\n{\n    private _storeProjection: DataStoreProjection<PaymentIntegrationSelectors>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _storeProjectionFactory: PaymentIntegrationStoreProjectionFactory,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        this._storeProjection = this._storeProjectionFactory.create(\n            this._store\n        );\n    }\n\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    subscribe(\n        subscriber: (state: PaymentIntegrationSelectors) => void,\n        ...filters: Array<(state: PaymentIntegrationSelectors) => unknown>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    getState(): PaymentIntegrationSelectors {\n        return this._storeProjection.getState();\n    }\n\n    async loadCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._checkoutActionCreator.loadCurrentCheckout()\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadDefaultCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._checkoutActionCreator.loadDefaultCheckout()\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethod(\n        methodId: string\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId)\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadCurrentOrder(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._orderActionCreator.loadCurrentOrder()\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async submitOrder(\n        payload?: OrderRequestBody\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._orderActionCreator.submitOrder(payload)\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async submitPayment(\n        payment: Payment\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentActionCreator.submitPayment(payment)\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async finalizeOrder(): Promise<PaymentIntegrationSelectors> {\n        const {\n            order: { getOrderOrThrow },\n        } = this._store.getState();\n\n        await this._store.dispatch(\n            this._orderActionCreator.finalizeOrder(getOrderOrThrow().orderId)\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async updateBillingAddress(\n        payload: BillingAddressRequestBody\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(payload)\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async updateShippingAddress(\n        payload: ShippingAddressRequestBody\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(payload)\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(id, options)\n        );\n\n        return this._storeProjection.getState();\n    }\n}\n","import { createAction, createDataStore, Action, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: ReadableDataStore<TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { PaymentIntegrationSelectors } from \"@bigcommerce/checkout-sdk/payment-integration-api\";\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from \"../checkout\";\nimport {\n    DataStoreProjection,\n    createDataStoreProjection,\n} from \"../common/data-store\";\n\nexport default class PaymentIntegrationStoreProjectionFactory {\n    constructor(\n        private _transformSelectors: (\n            selectors: InternalCheckoutSelectors\n        ) => PaymentIntegrationSelectors\n    ) {}\n\n    create(\n        store: ReadableCheckoutStore\n    ): DataStoreProjection<PaymentIntegrationSelectors> {\n        return createDataStoreProjection(store, this._transformSelectors);\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"shallowequal\");","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonOptions, CheckoutButtonInitializeOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","/* eslint-disable no-useless-escape */\nexport default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from \"@bigcommerce/data-store\";\nimport { CheckoutButtonStrategy as CheckoutButtonStrategyV2 } from \"@bigcommerce/checkout-sdk/payment-integration-api\";\nimport { concat, defer, empty, of } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\n\nimport { InternalCheckoutSelectors } from \"../checkout\";\nimport { throwErrorAction } from \"../common/error\";\nimport { Registry } from \"../common/registry\";\nimport { PaymentMethodActionCreator } from \"../payment\";\n\nimport {\n    CheckoutButtonActionType,\n    DeinitializeButtonAction,\n    InitializeButtonAction,\n} from \"./checkout-button-actions\";\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonOptions,\n} from \"./checkout-button-options\";\nimport CheckoutButtonRegistryV2 from \"./checkout-button-strategy-registry-v2\";\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from \"./strategies\";\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _registryV2: CheckoutButtonRegistryV2,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(\n        options: CheckoutButtonInitializeOptions\n    ): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = {\n                methodId: options.methodId,\n                containerId: options.containerId,\n            };\n\n            if (\n                store\n                    .getState()\n                    .checkoutButton.isInitialized(\n                        options.methodId,\n                        options.containerId\n                    )\n            ) {\n                return empty();\n            }\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.InitializeButtonRequested,\n                        undefined,\n                        meta\n                    )\n                ),\n                this._paymentMethodActionCreator.loadPaymentMethod(\n                    options.methodId,\n                    { timeout: options.timeout, useCache: true }\n                )(store),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .initialize(options)\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.InitializeButtonSucceeded,\n                                undefined,\n                                meta\n                            )\n                        )\n                )\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(\n                        CheckoutButtonActionType.InitializeButtonFailed,\n                        error,\n                        meta\n                    )\n                )\n            );\n        };\n    }\n\n    deinitialize(\n        options: CheckoutButtonOptions\n    ): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = { methodId: options.methodId };\n\n            if (\n                !store.getState().checkoutButton.isInitialized(options.methodId)\n            ) {\n                return empty();\n            }\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.DeinitializeButtonRequested,\n                        undefined,\n                        meta\n                    )\n                ),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .deinitialize()\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.DeinitializeButtonSucceeded,\n                                undefined,\n                                meta\n                            )\n                        )\n                )\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(\n                        CheckoutButtonActionType.DeinitializeButtonFailed,\n                        error,\n                        meta\n                    )\n                )\n            );\n        };\n    }\n\n    private _getStrategy(\n        methodId: CheckoutButtonMethodType\n    ): CheckoutButtonStrategy | CheckoutButtonStrategyV2 {\n        let strategy: CheckoutButtonStrategy | CheckoutButtonStrategyV2;\n\n        try {\n            strategy = this._registryV2.get({ id: methodId });\n        } catch {\n            strategy = this._registry.get(methodId);\n        }\n\n        return strategy;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\nimport Cart from './cart';\nimport BuyNowCartRequestBody from './buy-now-cart-request-body';\n\nexport default class CartRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createBuyNowCart(body: BuyNowCartRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Cart>> {\n        const url = '/api/storefront/carts';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Factory from './factory';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _defaultToken: string;\n    private _useFallback: string | boolean;\n    private _tokenResolver: (token: string, registeredTokens: string[]) => string | undefined;\n\n    constructor(\n        options?: RegistryOptions\n    ) {\n        this._factories = {};\n        this._instances = {};\n        this._defaultToken = options?.defaultToken ?? 'default';\n        this._useFallback = options?.useFallback ?? true;\n        this._tokenResolver = options?.tokenResolver ?? (token => token);\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._defaultToken,\n                cacheToken || token || this._defaultToken\n            );\n        } catch (error) {\n            if (!this._useFallback) {\n                throw error;\n            }\n\n            return this._getInstance(\n                this._defaultToken,\n                cacheToken || this._defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const resolvedToken = this._tokenResolver(token, Object.keys(this._factories));\n            const factory = resolvedToken && this._factories[resolvedToken];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport interface RegistryOptions {\n    defaultToken?: string;\n    useFallback?: boolean;\n    tokenResolver?(token: string, registeredTokens: string[]): string | undefined;\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\n}\n","import { InternalCheckoutSelectors } from '../../../../../core/src/checkout';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    Pay: AmazonPayV2Client;\n}\n\nexport interface AmazonPayV2Button {\n    /**\n     * Allows you to define custom actions.\n     */\n    onClick: (callback: () => void) => void;\n\n    /**\n     * Initiates the Amazon Pay checkout.\n     */\n    initCheckout(requestConfig: { createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig }): void;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\ninterface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * It does not have to match the final order amount if the buyer updates\n     * their order after starting checkout. Amazon Pay will use this value to\n     * assess transaction risk and prevent buyers from selecting payment methods\n     * that can't be used to process the order.\n     */\n    estimatedOrderAmount?: AmazonPayV2Price;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport interface AmazonPayV2Price {\n    /**\n     * Transaction amount.\n     */\n    amount: string;\n\n    /**\n     * Transaction currency code in ISO 4217 format. Example: USD.\n     */\n    currencyCode: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport enum AmazonPayV2Regions {\n    de = 'eu',\n    jp = 'fe',\n    uk = 'eu',\n    us = 'na',\n}\n\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n\nexport interface AmazonPayV2ButtonRenderingOptions {\n    checkoutState: InternalCheckoutSelectors;\n    containerId: string;\n    decoupleCheckoutInitiation?: boolean;\n    methodId: string;\n    options?: AmazonPayV2ButtonParameters;\n    placement: AmazonPayV2Placement;\n}\n","import { PaymentMethod } from '../..';\nimport { InternalCheckoutSelectors } from '../../../../../core/src/checkout';\nimport { getShippableItemsCount } from '../../../../../core/src/shipping';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { AmazonPayV2ButtonColor, AmazonPayV2ChangeActionType, AmazonPayV2PayOptions, AmazonPayV2Placement, AmazonPayV2SDK, AmazonPayV2ButtonParameters, AmazonPayV2Button, AmazonPayV2NewButtonParams, AmazonPayV2CheckoutSessionConfig, AmazonPayV2ButtonRenderingOptions } from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nimport { guard } from '../../../../src/common/utility';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private _amazonPayV2SDK?: AmazonPayV2SDK;\n    private _amazonPayV2Button?: AmazonPayV2Button;\n\n    constructor(\n        private _amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader\n    ) { }\n\n    async initialize(paymentMethod: PaymentMethod): Promise<void> {\n        this._amazonPayV2SDK = await this._amazonPayV2ScriptLoader.load(paymentMethod);\n    }\n\n    deinitialize(): Promise<void> {\n        this._amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(buttonId: string, sessionId: string, changeAction: AmazonPayV2ChangeActionType): void {\n        this._getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\n        this._amazonPayV2Button = this._getAmazonPayV2SDK().Pay.renderButton(`#${containerId}`, options);\n    }\n\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>): void {\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\n\n        const requestConfig = {\n            createCheckoutSessionConfig: this._isEnvironmentSpecific(publicKeyId)\n                ? signedPayload\n                : createCheckoutSessionConfig,\n        };\n\n        this._getAmazonPayV2Button().onClick(() =>\n            this._getAmazonPayV2Button().initCheckout(requestConfig)\n        );\n    }\n\n    async signout(): Promise<void> {\n        if (this._amazonPayV2SDK) {\n            this._amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton({\n        checkoutState,\n        containerId,\n        decoupleCheckoutInitiation = false,\n        methodId,\n        options,\n        placement,\n    }: AmazonPayV2ButtonRenderingOptions): HTMLElement {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to render the Amazon Pay button to an invalid HTML container element.');\n        }\n\n        const amazonPayV2ButtonOptions = options ?? this._getAmazonPayV2ButtonOptions(checkoutState, methodId, placement, decoupleCheckoutInitiation);\n\n        this.createButton(containerId, amazonPayV2ButtonOptions);\n\n        return container;\n    }\n\n    private _getAmazonPayV2ButtonOptions(\n        {\n            cart: { getCart },\n            checkout: { getCheckout },\n            config: { getStoreConfigOrThrow },\n            paymentMethods: { getPaymentMethodOrThrow },\n        }: InternalCheckoutSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        decoupleCheckoutInitiation = false\n    ): AmazonPayV2ButtonParameters {\n        const {\n            config: { merchantId, testMode },\n            initializationData: {\n                checkoutLanguage,\n                checkoutSessionMethod,\n                createCheckoutSessionConfig,\n                extractAmazonCheckoutSessionId,\n                ledgerCurrency,\n                publicKeyId,\n            },\n        } = getPaymentMethodOrThrow(methodId);\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath },\n        } = getStoreConfigOrThrow();\n\n        const cart = getCart();\n\n        if (!merchantId || !ledgerCurrency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            productType: cart && getShippableItemsCount(cart) === 0 ?\n                AmazonPayV2PayOptions.PayOnly :\n                AmazonPayV2PayOptions.PayAndShip,\n            placement,\n            buttonColor: AmazonPayV2ButtonColor.Gold,\n        };\n\n        if (features['PROJECT-3483.amazon_pay_ph4']) {\n            const amount = getCheckout()?.outstandingBalance.toString();\n            const currencyCode = cart?.currency.code;\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\n\n            if (this._isEnvironmentSpecific(publicKeyId)) {\n                buttonOptions.publicKeyId = publicKeyId;\n                tmpConfig = createCheckoutSessionConfig;\n            } else {\n                buttonOptions.sandbox = !!testMode;\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\n            }\n\n            if (!decoupleCheckoutInitiation) {\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\n            }\n\n            if (amount && currencyCode) {\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\n            }\n\n            return buttonOptions;\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: features['INT-5826.amazon_relative_url']\n                ? `/remote-checkout/${methodId}/payment-session`\n                : `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private _isEnvironmentSpecific(publicKeyId: string): boolean {\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\n    }\n\n    private _getAmazonPayV2SDK(): AmazonPayV2SDK {\n        return this._getOrThrow(this._amazonPayV2SDK);\n    }\n\n    private _getAmazonPayV2Button(): AmazonPayV2Button {\n        return this._getOrThrow(this._amazonPayV2Button);\n    }\n\n    private _getOrThrow<T>(value?: T): T {\n        return guard(value, () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { AmazonPayV2HostWindow, AmazonPayV2Regions, AmazonPayV2SDK } from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AmazonPayV2HostWindow = window\n    ) {}\n\n    async load(method: PaymentMethod): Promise<AmazonPayV2SDK> {\n        const {\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const amazonPayV2Region  = (AmazonPayV2Regions as any)[region];\n\n        await this._scriptLoader.loadScript(`https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`);\n        if (!this._window.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.amazon;\n    }\n}\n","import { assertApplePayWindow } from './is-apple-pay-window';\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { GooglePaymentData, GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1, GooglePayCreator, TokenizePayload } from '../googlepay';\nimport { PaypalAuthorizeData, PaypalButtonOptions, PaypalButtonRender, PaypalSDK } from '../paypal';\n\nimport { VisaCheckoutInitOptions, VisaCheckoutPaymentSuccessPayload, VisaCheckoutTokenizedPayload } from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\n/**\n *\n * Common\n *\n */\nexport interface BraintreeModuleCreator<TInstance, TOptions = BraintreeModuleCreatorConfig, TError = BraintreeError> {\n    create(config: TOptions, callback?: (error: TError, instance: TInstance) => void): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string;\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\nexport interface BraintreeSDK {\n    client?: BraintreeClientCreator;\n    dataCollector?: BraintreeDataCollectorCreator;\n    googlePayment?: GooglePayCreator;\n    hostedFields?: BraintreeHostedFieldsCreator;\n    paypal?: BraintreePaypalCreator;\n    paypalCheckout?: BraintreePaypalCheckoutCreator;\n    threeDSecure?: BraintreeThreeDSecureCreator;\n    venmo?: BraintreeVenmoCheckoutCreator;\n    visaCheckout?: BraintreeVisaCheckoutCreator;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport interface BraintreeDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\nexport interface BraintreeError extends Error {\n    type: 'CUSTOMER' | 'MERCHANT' | 'NETWORK' | 'INTERNAL' | 'UNKNOWN';\n    code: string;\n    details?: unknown;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeRequestData): Promise<BraintreeTokenizeResponse>;\n    getVersion(): string | void;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeTokenizeResponse {\n    creditCards: Array<{ nonce: string }>;\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<BraintreeDataCollector, BraintreeDataCollectorCreatorConfig>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean;\n    paypal?: boolean;\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n/**\n *\n * Braintree Google Pay\n *\n */\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface GooglePayBraintreeSDK extends BraintreeModule {\n    createPaymentDataRequest(request?: GooglePayBraintreeDataRequest): GooglePayBraintreePaymentDataRequestV1;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<BraintreeHostedFields, BraintreeHostedFieldsCreatorConfig>;\n\nexport interface BraintreeHostedFields {\n    teardown(): Promise<void>;\n    tokenize(options?: BraintreeHostedFieldsTokenizeOptions): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<BraintreeThreeDSecure, BraintreeThreeDSecureCreatorConfig>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(options: BraintreeThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    challengeRequested: boolean;\n    showLoader?: boolean;\n    addFrame(error: Error | undefined, iframe: HTMLIFrameElement): void;\n    removeFrame(): void;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\ninterface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(config: BraintreePaypalSdkCreatorConfig, callback: (instance: BraintreePaypalCheckout) => void): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<BraintreeVenmoCheckout, BraintreeVenmoCreatorConfig>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => void): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop: boolean;\n    paymentMethodUsage: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends Window {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n}\n","import { NotInitializedError, NotInitializedErrorType, UnsupportedBrowserError } from '../../../common/error/errors';\nimport { PaypalHostWindow } from '../paypal';\n\nimport { BraintreeClient, BraintreeDataCollector, BraintreeError, BraintreeHostedFields, BraintreeHostedFieldsCreatorConfig, BraintreeModule, BraintreePaypal, BraintreePaypalCheckout, BraintreeThreeDSecure, BraintreeVenmoCheckout, BraintreeVisaCheckout, GooglePayBraintreeSDK, PAYPAL_COMPONENTS } from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _venmoCheckout?: Promise<BraintreeVenmoCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n                .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    async getPaypalCheckout(\n        config: { currency: string },\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this._braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (error: BraintreeError, braintreePaypalCheckout: BraintreePaypalCheckout) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n            const paypalSdkLoadConfig = {\n                currency: config.currency,\n                components: PAYPAL_COMPONENTS.toString(),\n            };\n\n            if (!this._window.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this._paypalCheckout = paypalCheckout.create(paypalCheckoutConfig, paypalCheckoutCallback);\n\n        return this._paypalCheckout;\n    }\n\n    async getVenmoCheckout(\n        onSuccess: (braintreeVenmoCheckout: BraintreeVenmoCheckout) => void,\n        onError: (error: BraintreeError | UnsupportedBrowserError) => void\n    ): Promise<BraintreeVenmoCheckout> {\n        if (!this._venmoCheckout) {\n            const client = await this.getClient();\n\n            const venmoCheckout = await this._braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const venmoCheckoutCallback = (error: BraintreeError, braintreeVenmoCheckout: BraintreeVenmoCheckout): void => {\n                if (error) {\n                    return onError(error);\n                }\n\n                if (!braintreeVenmoCheckout.isBrowserSupported()) {\n                    return onError(new UnsupportedBrowserError());\n                }\n\n                onSuccess(braintreeVenmoCheckout);\n            };\n\n            this._venmoCheckout = venmoCheckout.create(venmoCheckoutConfig, venmoCheckoutCallback);\n        }\n\n        return this._venmoCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n                .then(([client, threeDSecure]) => threeDSecure.create({ client, version: 2}));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n                .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n                .catch(error => {\n                    if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                        return { deviceData: undefined, teardown: () => Promise.resolve() };\n                    }\n\n                    throw error;\n                });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n                .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>\n    ): Promise<BraintreeHostedFields> {\n        const [client, hostedFields] = await Promise.all([\n            this.getClient(),\n            this._braintreeScriptLoader.loadHostedFields(),\n        ]);\n\n        return hostedFields.create({ ...options, client });\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._googlePay),\n            this._teardown(this._paypalCheckout),\n            this._teardown(this._venmoCheckout),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n            this._paypalCheckout = undefined;\n            this._venmoCheckout = undefined;\n            this._visaCheckout = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport { BraintreeClientCreator, BraintreeDataCollectorCreator, BraintreeHostedFieldsCreator, BraintreeHostWindow, BraintreePaypalCheckoutCreator, BraintreePaypalCreator, BraintreeThreeDSecureCreator, BraintreeVenmoCheckoutCreator, BraintreeVisaCheckoutCreator } from './braintree';\n\nconst version = '3.81.0';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/client.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/three-d-secure.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/data-collector.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/visa-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/venmo.min.js`)\n            .then(() => {\n                if (!this._window.braintree?.venmo) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.venmo;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/google-payment.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        await this._scriptLoader.loadScript(`//js.braintreegateway.com/web/${version}/js/hosted-fields.min.js`);\n\n        if (!this._window.braintree || !this._window.braintree.hostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.braintree.hostedFields;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { PaymentInitializeOptions } from '../..';\nimport { Checkout, InternalCheckoutSelectors } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, BraintreeVerifyPayload, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayProviderProcessor {\n    initialize(options: PaymentInitializeOptions): Promise<void>;\n    processAdditionalAction(error: unknown): Promise<InternalCheckoutSelectors>;\n}\n\nexport type GooglePayCreator = BraintreeModuleCreator<GooglePayBraintreeSDK>\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport type GooglePayVerifyPayload = BraintreeVerifyPayload | undefined;\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    tokenFormat?: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: TokenizeType;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport enum BillingAddressFormat {\n    /*\n     * Name, country code, and postal code (default).\n     */\n    Min = 'MIN',\n    /*\n     * Name, street address, locality, region, country code, and postal code.\n     */\n    Full = 'FULL',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: BillingAddressFormat;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: TokenizationSpecification;\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","export function getFirstAndLastName(fullName: string): [string, string] {\n    const nameParts = fullName.split(' ');\n\n    if (nameParts.length === 1) {\n        return [fullName, ''];\n    }\n\n    const firstName = nameParts.slice(0, -1).join(' ');\n    const lastName = nameParts[nameParts.length - 1];\n\n    return [firstName, lastName];\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { ButtonColor, ButtonType, EnvironmentType, GooglePaymentData, GooglePayAddress, GooglePayClient, GooglePayInitializer, GooglePayPaymentDataRequestV2, GooglePaySDK, TokenizePayload } from './googlepay';\nimport { getFirstAndLastName } from './googlepay-get-first-and-last-name';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._googlePayInitializer.parseResponse(paymentData)\n            .then(tokenizePayload => this._postForm(tokenizePayload))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const features = this._store.getState().config.getStoreConfig()?.checkoutSettings.features;\n        const options = features && features['INT-5826.google_hostname_alias'] ? { params: { origin: window.location.hostname } } : undefined;\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId, options))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string, customerEmail?: string): BillingAddressUpdateRequestBody {\n        const fullName = paymentData.paymentMethodData.info.billingAddress.name;\n        const [firstName, lastName] = getFirstAndLastName(fullName);\n        const address1 =  paymentData.paymentMethodData.info.billingAddress.address1;\n        const city =  paymentData.paymentMethodData.info.billingAddress.locality;\n        const postalCode =  paymentData.paymentMethodData.info.billingAddress.postalCode;\n        const countryCode =  paymentData.paymentMethodData.info.billingAddress.countryCode;\n\n        if (!firstName || !address1 || !city || !postalCode || !countryCode) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        return {\n            id,\n            firstName,\n            lastName,\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode,\n            countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: customerEmail || paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        const [firstName, lastName] = getFirstAndLastName(address.name);\n\n        return {\n            firstName,\n            lastName,\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                tokenFormat: postPaymentData.tokenFormat,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id, remoteBillingAddress.email);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new SubscriptionsActionCreator(\n                new SubscriptionsRequestSender(requestSender)\n            )\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayAdyenV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'adyen',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayAdyenV3Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'adyen',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizationSpecification, TokenizePayload } from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress)\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePaymentDataRequest(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(paymentGatewaySpecification, supportedCards);\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n                currencyCode,\n                countryCode,\n            },\n            merchantInfo : {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(tokenizationSpecification: TokenizationSpecification, supportedCards: string[]) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: BillingAddressFormat.Full,\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayBNZInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'cybersource',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return Promise.resolve({\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        });\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { ContentType } from '../../../common/http-request';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\nimport { CheckoutcomGooglePayToken, CheckoutcomToken } from '../checkoutcom';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayCheckoutcomInitializer implements GooglePayInitializer {\n    private _publishableKey = '';\n    private _testMode = true;\n    private _errorMessage = 'Unable to parse response from GooglePay.';\n\n    constructor(\n       private _requestSender: RequestSender\n    ) {}\n\n    async initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        this._publishableKey = paymentMethod.initializationData.checkoutcomkey;\n        this._testMode = !!paymentMethod.config.testMode;\n\n        return this._mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let token;\n        try {\n            token = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError(this._errorMessage);\n        }\n\n        if (!token.signature || !token.protocolVersion || !token.signedMessage) {\n            throw new PaymentMethodFailedError(this._errorMessage);\n        }\n        const finalToken = await this._convertToken(this._testMode, this._publishableKey, token);\n\n        const payload: TokenizePayload = {\n            nonce: finalToken.token,\n            type: 'CreditCard',\n            description: paymentData.paymentMethodData.description,\n            details: {\n                cardType: paymentData.paymentMethodData.info.cardNetwork,\n                lastFour: paymentData.paymentMethodData.info.cardDetails,\n            },\n        };\n\n        if (finalToken.token_format) {\n            payload.tokenFormat = finalToken.token_format;\n        }\n\n        return payload;\n    }\n\n    private async _convertToken(testMode: boolean, checkoutcomkey: string, token: CheckoutcomGooglePayToken): Promise<CheckoutcomToken> {\n        const checkoutcomToken: CheckoutcomToken = await this._requestCheckoutcomTokenize(testMode, checkoutcomkey, {\n            type: 'googlepay',\n            token_data: token,\n        });\n\n        if (!checkoutcomToken || !checkoutcomToken.token) {\n            throw new PaymentMethodFailedError('Unable to parse response from Checkout.com');\n        }\n\n        return checkoutcomToken;\n    }\n\n    private async _requestCheckoutcomTokenize(testMode: boolean, checkoutcomKey: string, data = {}): Promise<CheckoutcomToken> {\n        const TEST_URL = 'https://api.sandbox.checkout.com/tokens';\n        const LIVE_URL = 'https://api.checkout.com/tokens';\n\n        const url = testMode ? TEST_URL : LIVE_URL;\n\n        const response = await this._requestSender.post(url, {\n            credentials: false,\n            body: data,\n            headers: {\n                'Content-Type': ContentType.Json,\n                Authorization: checkoutcomKey,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return response.body as CheckoutcomToken;\n    }\n\n    private _mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'checkoutltd',\n                        gatewayMerchantId: initializationData.checkoutcomkey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayCybersourceV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'cybersource',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayOrbitalInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'chase',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return Promise.resolve({\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            });\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n            consignments,\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n                bopis,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const isPickup = consignments?.every(consignment => consignment.selectedPickupOption);\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': stripeVersion,\n                        'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: bopis?.enabled && isPickup && bopis?.requiredAddress === 'none'\n                ? false\n                : !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayStripeUPEInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let payload;\n        try {\n            payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        if (!payload.id || !payload.type || !payload.card || !payload.card.brand || !payload.card.last4) {\n            throw new PaymentMethodFailedError('Unable to parse response from Google Pay.');\n        }\n\n        return Promise.resolve({\n            nonce: payload.id,\n            type: payload.type,\n            details: {\n                cardType: payload.card.brand,\n                lastFour: payload.card.last4,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode, decimalPlaces: decimalPlaces },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': stripeVersion,\n                        'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, decimalPlaces).toFixed(decimalPlaces),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\ninterface MasterpassScriptLoaderParams {\n    useMasterpassSrc: boolean;\n    language: string;\n    testMode?: boolean;\n    checkoutId?: string;\n  }\nexport default class MasterpassScriptLoader {\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    async load({ useMasterpassSrc, language, testMode, checkoutId }: MasterpassScriptLoaderParams): Promise<Masterpass> {\n\n        if (useMasterpassSrc) {\n            const subdomain = testMode ? 'sandbox.' : '';\n            const params = [\n                `locale=${language}`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            const sourceUrl = [\n               `https://${subdomain}src.mastercard.com/srci/integration/merchant.js`,\n               params.join('&'),\n            ].join('?');\n\n            await this._scriptLoader.loadScript(sourceUrl);\n\n            if (!this._window.masterpass) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.masterpass;\n\n        }\n\n        await this._scriptLoader.loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`);\n\n        if (!this._window.masterpass) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.masterpass;\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = { async: true, attributes: { 'data-merchant-id': merchantId } };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { FundingType, PaypalCommerceHostWindow, PaypalCommerceInitializationData, PaypalCommerceScriptParams, PaypalCommerceSDK } from './paypal-commerce-sdk';\n\nexport default class PaypalCommerceScriptLoader {\n    private _window: PaypalCommerceHostWindow;\n    private _paypalSdk?: Promise<PaypalCommerceSDK>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PaypalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n    ): Promise<PaypalCommerceSDK> {\n        if (!this._paypalSdk) {\n            this._paypalSdk = this.loadPayPalSDK(\n                this._getPayPalSdkScriptConfigOrThrow(paymentMethod, currencyCode, initializesOnCheckoutPage)\n            );\n        }\n\n        return this._paypalSdk;\n    }\n\n    private async loadPayPalSDK(paypalSdkScriptConfig: PaypalCommerceScriptParams): Promise<PaypalCommerceSDK> {\n        if (!this._window.paypalLoadScript) {\n            const PAYPAL_SDK_VERSION = '5.0.5';\n            const scriptSrc = `https://unpkg.com/@paypal/paypal-js@${PAYPAL_SDK_VERSION}/dist/iife/paypal-js.min.js`;\n\n            await this._scriptLoader.loadScript(scriptSrc, { async: true, attributes: {} });\n\n            if (!this._window.paypalLoadScript) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        await this._window.paypalLoadScript(paypalSdkScriptConfig);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n\n    private _getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PaypalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PaypalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isInlineCheckoutEnabled,\n            isPayPalCreditAvailable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const shouldShowInlineCheckout = !initializesOnCheckoutPage && isInlineCheckoutEnabled;\n\n        const commit = shouldShowInlineCheckout || isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = shouldShowInlineCheckout || id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = !shouldShowInlineCheckout && !isHostedCheckoutEnabled; // should disable APMs if Inline Checkout or Shipping Options feature enabled\n        const enableVenmoFunding = shouldEnableAPMs && isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !shouldEnableAPMs || !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter((apm: string) => !enabledAlternativePaymentMethods.includes(apm))\n            : availableAlternativePaymentMethods;\n\n        const disableFunding: FundingType = [...disableCardFunding, ...disableCreditFunding, ...disableVenmoFunding, ...disableAPMsFunding];\n        const enableFunding: FundingType = [...enableCardFunding, ...enableCreditFunding, ...enableVenmoFunding, ...enableAPMsFunding];\n\n        return {\n            'client-id': clientId,\n            'data-partner-attribution-id': attributionId,\n            'data-client-token': clientToken,\n            'merchant-id': merchantId,\n            'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n            'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n            commit,\n            components: ['buttons', 'hosted-fields', 'messages', 'payment-fields'],\n            currency: currencyCode,\n            intent,\n        };\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\n\nimport { OrderData, OrderStatus, UpdateOrderPayload } from './paypal-commerce-sdk';\n\nexport interface ParamsForProvider {\n    isCredit?: boolean;\n    isCheckout?: boolean;\n    isCreditCard?: boolean;\n    isAPM?: boolean;\n    isVenmo?: boolean;\n}\n\nexport default class PaypalCommerceRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    // TODO: this method should be removed when provider will be passed as an argument\n    // (to prevent containing unnecessary provider detecting logic inside)\n    async setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<OrderData> {\n        const { isCredit, isCheckout, isCreditCard, isAPM, isVenmo} = params;\n        let provider = 'paypalcommerce';\n\n        if (isCreditCard) {\n            provider = 'paypalcommercecreditcardscheckout';\n        } else if (isCheckout) {\n            provider = isCredit ? 'paypalcommercecreditcheckout' : 'paypalcommercecheckout';\n        } else if (isCredit) {\n            provider = 'paypalcommercecredit';\n        }\n        if (isVenmo && !isAPM) {\n            provider = isCheckout ? 'paypalcommercevenmocheckout' : 'paypalcommercevenmo';\n        }\n\n        if (isAPM) {\n            provider = isCheckout ? 'paypalcommercealternativemethodscheckout' : 'paypalcommercealternativemethod';\n        }\n\n        return this.createOrder(cartId, provider);\n    }\n\n    async createOrder(cartId: string, providerId: string): Promise<OrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.post<OrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus() {\n        const url = '/api/storefront/initialization/paypalcommerce';\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.get<OrderStatus>(url, {headers});\n\n        return res.body;\n    }\n\n    async updateOrder(payload: UpdateOrderPayload) {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = payload;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.put(url, { headers, body });\n\n        return res.body;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    forgetCheckout({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/forget-checkout`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutActionCreator } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    forgetCheckout(methodId: string, options?: RequestOptions): Observable<Action> {\n        return concat(\n            of(createAction(RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested, undefined, {methodId})),\n            defer(async () => {\n                await this._remoteCheckoutRequestSender.forgetCheckout(options);\n                await this._checkoutActionCreator.loadCurrentCheckout();\n\n                return createAction(RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded, undefined, {methodId});\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed, error, { methodId }))\n        );\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { AmazonPayV2PaymentProcessor, AmazonPayV2Placement } from '../../../payment/strategies/amazon-pay-v2';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor\n    ) { }\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { methodId, containerId, amazonpay } = options;\n\n        if (!methodId || !containerId) {\n            throw new InvalidArgumentError('Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.');\n        }\n\n        const { paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n\n        await this._amazonPayV2PaymentProcessor.initialize(getPaymentMethodOrThrow(methodId));\n\n        if (!amazonpay) {\n            await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        }\n\n        this._walletButton =\n            this._amazonPayV2PaymentProcessor.renderAmazonPayButton({\n                checkoutState: this._store.getState(),\n                containerId,\n                methodId,\n                options: amazonpay,\n                placement: AmazonPayV2Placement.Cart,\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { Cart } from '../../../cart';\nimport { Checkout, CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { StoreConfig } from '../../../config';\nimport { OrderActionCreator } from '../../../order';\nimport { Payment, PaymentActionCreator, PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { PaymentMethodCancelledError } from '../../../payment/errors';\nimport { assertApplePayWindow, ApplePaySessionFactory } from '../../../payment/strategies/apple-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nconst validationEndpoint = (bigPayEndpoint: string) => `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _requestSender: RequestSender,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _sessionFactory: ApplePaySessionFactory\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n\n        const { methodId, containerId , applepay}  = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            buttonClassName,\n            onPaymentAuthorize,\n        } = applepay;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n        this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        this._applePayButton = this._createButton(containerId, buttonClassName);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick);\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string, buttonClassName = 'apple-pay-checkout-button'): HTMLElement {\n        const container = document.getElementById(containerId);\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create wallet button without valid container ID.');\n        }\n\n        document.body.classList.add('apple-pay-supported');\n        const button = document.createElement('div');\n        button.classList.add(buttonClassName);\n        button.setAttribute('role', 'button');\n        button.setAttribute('aria-label', 'Apple Pay button');\n        container.appendChild(button);\n\n        return button;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const config = state.config.getStoreConfigOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const { storeProfile: { storeCountryCode, storeName } } = config;\n        const { currency: { code, decimalPlaces} } = cart;\n\n        const { initializationData : { merchantCapabilities, supportedNetworks } } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping ? {\n            label: storeName,\n            amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            type: 'pending',\n        } : {\n            label: storeName,\n            amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            type: 'final',\n        };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                { label: this._subTotalLabel, amount: `${checkout.subtotal.toFixed(decimalPlaces)}`},\n            ];\n\n            checkout.taxes.forEach(tax =>\n                lineItems.push({ label: tax.name, amount: `${tax.amount.toFixed(decimalPlaces)}` }));\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig\n    ) {\n        applePaySession.onvalidatemerchant = async event => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(paymentMethod, event);\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async event =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async event =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            try {\n                await this._store.dispatch(this._remoteCheckoutActionCreator.signOut(paymentMethod.id));\n\n                return this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout());\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async event =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._store.dispatch(\n                this._consignmentActionCreator.updateAddress(shippingAddress)\n            );\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        const { storeProfile: { storeName } } = config;\n        let state = this._store.getState();\n        const { currency: { decimalPlaces } } = state.cart.getCartOrThrow();\n        let checkout = state.checkout.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({id}) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(option => option.id !== selectionShippingOptionId);\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption ? [{\n            label: selectedOption.description,\n            amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n            detail: selectedOption.additionalDescription,\n            identifier: selectedOption.id,\n        }] : [];\n        unselectedOptions?.forEach(option => shippingOptions.push(\n            {\n                label: option.description,\n                amount: `${option.cost.toFixed(decimalPlaces)}`,\n                detail: option.additionalDescription,\n                identifier: option.id,\n            }\n        ));\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                []\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find(\n            option => option.isRecommended\n        );\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._store.getState();\n        checkout = state.checkout.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent\n    ) {\n        const { storeProfile: { storeName } } = config;\n        const { shippingMethod: { identifier: optionId } } = event;\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._store.getState();\n        const { currency: { decimalPlaces } } = state.cart.getCartOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(checkout: Checkout, decimalPlaces: number): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            { label: this._subTotalLabel, amount: `${checkout.subtotal.toFixed(decimalPlaces)}`},\n        ];\n\n        checkout.taxes.forEach(tax =>\n            lineItems.push({ label: tax.name, amount: `${tax.amount.toFixed(decimalPlaces)}` }));\n        lineItems.push({ label: this._shippingLabel, amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`});\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId)\n        );\n    }\n\n    private async _onValidateMerchant(paymentData: PaymentMethod, event: ApplePayJS.ApplePayValidateMerchantEvent) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(validationEndpoint(paymentData.initializationData.paymentsUrl), {\n            credentials: false,\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'X-XSRF-TOKEN': null,\n            },\n            body,\n        });\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber;\n\n        try {\n            await this._store.dispatch(\n                this._billingAddressActionCreator.updateAddress({\n                    ...transformedBillingAddress,\n                    email: emailAddress,\n                    phone,\n                })\n            );\n\n            if (requiresShipping) {\n                await this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(transformedShippingAddress)\n                );\n            }\n\n            await this._store.dispatch(this._orderActionCreator.submitOrder(\n                {\n                    useStoreCredit: false,\n                })\n            );\n            await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(contact?: ApplePayJS.ApplePayPaymentContact): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: contact?.addressLines && contact?.addressLines[0] || '',\n            address2: contact?.addressLines && contact?.addressLines[1] || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred during buy now cart creation process. Please try again later.');\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { Address } from '../../../address';\n\nimport { BraintreeShippingAddressOverride } from './braintree';\n\nexport default function mapToBraintreeShippingAddressOverride(address: Address): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { PaypalButtonStyleOptions } from '../../../payment/strategies/paypal';\n\nexport default function getValidButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n    const { color, fundingicons, height, layout, shape, size, tagline } = style;\n\n    const validStyles = {\n        color,\n        fundingicons,\n        height: getValidHeight(height),\n        layout,\n        shape: shape || 'rect',\n        size,\n        tagline,\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidHeight(height?: number): number {\n    const minHeight = 25;\n    const maxHeight = 55;\n\n    if (typeof height !== 'number' || height > maxHeight) {\n        return maxHeight;\n    }\n\n    if (height < minHeight) {\n        return minHeight;\n    }\n\n    return height;\n}\n","import { LegacyAddress } from '../../../address';\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyBillingAddress(details: BraintreeDetails): Partial<LegacyAddress> {\n    const {\n        billingAddress,\n        email,\n        firstName,\n        lastName,\n        phone,\n        shippingAddress,\n    } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n\n","import { LegacyAddress } from '../../../address';\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyShippingAddress(details: BraintreeDetails): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CartRequestSender, Cart } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport { mapToBraintreeShippingAddressOverride, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalHostWindow } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalButtonInitializeOptions } from './braintree-paypal-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<BraintreePaypalButtonInitializeOptions, 'buyNowInitializeOptions'>;\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypal, containerId, methodId } = options;\n        const { messagingContainerId, onError } = braintreepaypal || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.methodId\" argument is not provided.');\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.containerId\" argument is not provided.`);\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`);\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypal?.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypal.currencyCode) {\n                throw new InvalidArgumentError(`Unable to initialize payment because \"options.braintreepaypal.currencyCode\" argument is not provided.`);\n            }\n\n            currencyCode = braintreepaypal.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow()?.currency.code;\n        }\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions = { currency: currencyCode };\n        const paypalCheckoutSuccessCallback = (braintreePaypalCheckout: BraintreePaypalCheckout) => {\n            this._renderPayPalComponents(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode)\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, messagingContainerId, onError);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalComponents(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean\n    ): void {\n        const { messagingContainerId } = braintreepaypal;\n\n        this._renderPayPalMessages(messagingContainerId);\n        this._renderPayPalButton(braintreePaypalCheckout, braintreepaypal, containerId, methodId, testMode);\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypal;\n\n        const { paypal } = this._window;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            const validButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                commit: false,\n                fundingSource,\n                style: validButtonStyle,\n                createOrder: () => this._setupPayment(braintreePaypalCheckout, braintreepaypal),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this._tokenizePayment(authorizeData, braintreePaypalCheckout, methodId, shouldProcessPayment, onAuthorizeError),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            }\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private _renderPayPalMessages(messagingContainerId?: string): void {\n        const isMessageContainerAvailable = messagingContainerId && Boolean(document.getElementById(messagingContainerId));\n        const { paypal } = this._window;\n\n        if (paypal && isMessageContainerAvailable) {\n            const state = this._store.getState();\n            const cart = state.cart.getCartOrThrow();\n\n            const paypalMessagesRender = paypal.Messages({ amount: cart.cartAmount, placement: 'cart' });\n            paypalMessagesRender.render(`#${messagingContainerId}`);\n        } else {\n            this._removeElement(messagingContainerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions\n    ): Promise<string> {\n        const { buyNowInitializeOptions, shippingAddress, onPaymentError } = braintreepaypal;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            }\n\n            const customer = state.customer.getCustomer();\n\n            const amount = this._buyNowCart ? this._buyNowCart?.cartAmount : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode = braintreepaypal.currencyCode ?? state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses?.[0];\n            const shippingAddressOverride = address ? mapToBraintreeShippingAddressOverride(address) : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(cartRequestBody);\n\n                return cart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({ paypal: true });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...buyNowCartId && { cart_id: buyNowCartId },\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        buttonContainerId: string,\n        messagingContainerId?: string,\n        onErrorCallback?: (error: BraintreeError) => void\n    ): void {\n        this._removeElement(buttonContainerId);\n        this._removeElement(messagingContainerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","export interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalButtonStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalButtonStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CartRequestSender, Cart } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport { mapToBraintreeShippingAddressOverride, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalButtonStyleLabelOption, PaypalHostWindow } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalCreditButtonInitializeOptions } from './braintree-paypal-credit-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<BraintreePaypalCreditButtonInitializeOptions, 'buyNowInitializeOptions'>;\n\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypalcredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.methodId\" argument is not provided.');\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.containerId\" argument is not provided.`);\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`);\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypalcredit.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypalcredit.currencyCode) {\n                throw new InvalidArgumentError(`Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`);\n            }\n\n            currencyCode = braintreepaypalcredit.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow()?.currency.code;\n        }\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions = { currency: currencyCode };\n        const paypalCheckoutCallback = (braintreePaypalCheckout: BraintreePaypalCheckout) =>\n            this._renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode)\n            );\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, braintreepaypalcredit.onError);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutCallback,\n            paypalCheckoutErrorCallback\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypalcredit;\n        const { paypal } = this._window;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n            const commonButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            fundingSources.forEach(fundingSource => {\n                const buttonStyle = fundingSource === paypal.FUNDING.CREDIT\n                    ? { label: PaypalButtonStyleLabelOption.CREDIT, ...commonButtonStyle }\n                    : commonButtonStyle;\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        commit: false,\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () => this._setupPayment(braintreePaypalCheckout, braintreepaypalcredit),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this._tokenizePayment(authorizeData, braintreePaypalCheckout, methodId, shouldProcessPayment, onAuthorizeError),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${containerId}`);\n                        hasRenderedSmartButton = true;\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n    ): Promise<string> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypalcredit;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            }\n\n            const customer = state.customer.getCustomer();\n\n            const amount = this._buyNowCart ? this._buyNowCart?.cartAmount : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode = braintreepaypalcredit.currencyCode ?? state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses?.[0];\n            const shippingAddressOverride = address ? mapToBraintreeShippingAddressOverride(address) : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: true,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(cartRequestBody);\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({ paypal: true });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...buyNowCartId && { cart_id: buyNowCartId },\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        containerId: string,\n        onErrorCallback?: (error: BraintreeError) => void\n    ): void {\n        this._removeElement(containerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport { BuyNowCartRequestBody, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, UnsupportedBrowserError } from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeError, BraintreeSDKCreator, BraintreeTokenizePayload, BraintreeVenmoCheckout } from '../../../payment/strategies/braintree';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\nimport { CheckoutButtonMethodType } from '../index';\n\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\nconst venmoButtonStyle = {\n    backgroundColor: '#3D95CE',\n    backgroundPosition: '50% 50%',\n    backgroundSize: '80px auto',\n    backgroundImage: 'url(\"/app/assets/img/payment-providers/venmo-logo-white.svg\")',\n    backgroundRepeat: 'no-repeat',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    transition: '0.2s ease',\n    minHeight: '40px',\n    minWidth: '150px',\n    height: '100%',\n    width: '100%',\n};\n\nconst venmoButtonStyleHover = {\n    backgroundColor: '#0a7fc2',\n};\n\ntype BuyNowInitializeOptions = { getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void; }\n\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private _onError = noop;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.methodId\" argument is not provided.');\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.containerId\" argument is not provided.`);\n        }\n\n        this._onError = braintreevenmo?.onError || this._handleError;\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getVenmoCheckout(\n            braintreeVenmoCheckout => this._handleInitializationVenmoSuccess(braintreeVenmoCheckout, containerId, braintreevenmo?.buyNowInitializeOptions),\n            error => this._handleInitializationVenmoError(error, containerId)\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _handleError(error: BraintreeError) {\n        throw new Error(error.message);\n    }\n\n    private _handleInitializationVenmoSuccess(braintreeVenmoCheckout: BraintreeVenmoCheckout, parentContainerId: string, buyNowInitializeOptions?: BuyNowInitializeOptions): void {\n        return this._renderVenmoButton(braintreeVenmoCheckout, parentContainerId, buyNowInitializeOptions);\n    }\n\n    private _handleInitializationVenmoError(error: BraintreeError | UnsupportedBrowserError, containerId: string): void {\n        this._removeVenmoContainer(containerId);\n\n        return this._onError(error);\n    }\n\n    private _removeVenmoContainer(containerId: string): void {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (buttonContainer) {\n            buttonContainer.remove();\n        }\n    }\n\n    private _renderVenmoButton(braintreeVenmoCheckout: BraintreeVenmoCheckout, containerId: string, buyNowInitializeOptions?: BuyNowInitializeOptions): void {\n        const venmoButton = document.getElementById(containerId);\n\n        if (!venmoButton) {\n            throw new InvalidArgumentError('Unable to create wallet button without valid container ID.');\n        }\n\n        venmoButton.setAttribute('aria-label', 'Venmo');\n        Object.assign(venmoButton.style, venmoButtonStyle);\n\n        venmoButton.addEventListener('click', async () => {\n            venmoButton.setAttribute('disabled', 'true');\n\n            const buyBowCart = await this._createBuyNowCart(buyNowInitializeOptions);\n\n            if (braintreeVenmoCheckout.tokenize) {\n                braintreeVenmoCheckout.tokenize(async (error: BraintreeError, payload: BraintreeTokenizePayload) => {\n                    venmoButton.removeAttribute('disabled');\n\n                    if (error) {\n                        return this._onError(error);\n                    }\n\n                    await this._handlePostForm(payload, buyBowCart?.id);\n                });\n            }\n        });\n\n        venmoButton.addEventListener('mouseenter', () => {\n            venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\n        });\n\n        venmoButton.addEventListener('mouseleave', () => {\n            venmoButton.style.backgroundColor = venmoButtonStyle.backgroundColor;\n        });\n    }\n\n    private async _createBuyNowCart(buyNowInitializeOptions?: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(cartRequestBody);\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _handlePostForm(payload: BraintreeTokenizePayload, buyNowCartId?: string): Promise<void> {\n        const { deviceData } = await this._braintreeSDKCreator.getDataCollector();\n        const { nonce, details } = payload;\n\n        this._formPoster.postForm('/checkout.php', {\n            nonce,\n            provider: CheckoutButtonMethodType.BRAINTREE_VENMO,\n            payment_type: 'paypal',\n            device_data: deviceData,\n            action: 'set_external_checkout',\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            ...buyNowCartId && { cart_id: buyNowCartId },\n        });\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutButtonMethodType } from '../';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { GooglePayButtonInitializeOptions } from './googlepay-button-options';\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        await this._googlePayPaymentProcessor.initialize(this._getMethodId());\n\n        this._walletButton = this._createSignInButton(containerId, googlePayOptions);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string, buttonOptions: GooglePayButtonInitializeOptions): HTMLElement {\n        const container = document.getElementById(containerId);\n        const { buttonType, buttonColor } = buttonOptions;\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick, buttonType, buttonColor);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _getGooglePayOptions(options: CheckoutButtonInitializeOptions): GooglePayButtonInitializeOptions {\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV2 && options.googlepayadyenv2) {\n            return options.googlepayadyenv2;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV3 && options.googlepayadyenv3) {\n            return options.googlepayadyenv3;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET && options.googlepayauthorizenet) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_BNZ && options.googlepaybnz) {\n            return options.googlepaybnz;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM && options.googlepaycheckoutcom) {\n            return options.googlepaycheckoutcom;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2 && options.googlepaycybersourcev2) {\n            return options.googlepaycybersourcev2;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ORBITAL && options.googlepayorbital) {\n            return options.googlepayorbital;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPE && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE && options.googlepaystripeupe) {\n            return options.googlepaystripeupe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    @bind\n    private async _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n        const cart = this._store.getState().cart.getCartOrThrow();\n        const hasPhysicalItems = getShippableItemsCount(cart) > 0;\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            if (hasPhysicalItems && paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n            }\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","export const supportedLocales: {[language: string]: string[]} = {es: ['es_es', 'es_mx', 'es_pe', 'es_co', 'es_ar', 'es_cl'],\n    en: ['en_us', 'en_gb', 'en_ca', 'en_es', 'en_fr', 'en_ie', 'en_sg', 'en_au', 'en_nz', 'en_my', 'en_hk', 'en_th', 'en_ae', 'en_sa', 'en_qa', 'en_kw', 'en_za'],\n    pt: ['pt_br'],\n    zu: ['zu_za'],\n    ar: ['ar_sa', 'ar_ae', 'ar_qa', 'ar_kw'],\n    zh: ['zh_sg', 'zh_hk'],\n    ms: ['ms_my'],\n    uk: ['uk_ua'],\n    sv: ['sv_se'],\n    hr: ['hr_hr'],\n    pl: ['pl_pl'],\n    nl: ['nl_be'],\n    it: ['it_it'],\n    de: ['de_de'],\n    fr: ['fr_fr', 'fr_ca']};\n","import { supportedLocales } from './masterpass-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace('-', '_').toLowerCase().split('_');\n    const formattedLocale = `${language}_${country}`;\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'en_us';\n    }\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { formatLocale, getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: paymentMethod.config.testMode,\n                    checkoutId: paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader.load(masterpassScriptLoaderParams);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n        const state = this._store.getState();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new InvalidArgumentError('Unable to retrieve store configuration');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalButtonStyleShapeOption, PaypalButtonStyleSizeOption, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader.loadPaypal(paymentMethod.config.merchantId)\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const fundingCreditOption = paypal.FUNDING.CREDIT || 'credit';\n                const allowedSources = paypalOptions.allowCredit ? [fundingCreditOption] : [];\n                const disallowedSources = !paypalOptions.allowCredit ? [fundingCreditOption] : [];\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: PaypalButtonStyleShapeOption.RECT,\n                        ...pick(paypalOptions.style, 'layout', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                        size: (paymentMethod.id === 'paypalexpress' && paypalOptions.style?.size === 'small') ? PaypalButtonStyleSizeOption.RESPONSIVE : paypalOptions.style?.size,\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { ShippingOption } from '../../../shipping';\n\nexport interface ClickDataOptions {\n    fundingSource: string;\n}\n\nexport interface ClickActions {\n    reject(): Promise<void>;\n    resolve(): Promise<void>;\n}\n\nexport interface OrderData {\n    orderId: string;\n    approveUrl: string;\n}\n\nexport interface OrderStatus {\n    status: 'APPROVED' | 'CREATED' | string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonLayout {\n    vertical = 'vertical',\n    horizontal = 'horizontal',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect' ,\n}\n\nexport interface PaypalButtonStyleOptions {\n    layout?: StyleButtonLayout;\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n    tagline?: boolean;\n    custom?: {\n        label?: string;\n        css?: {\n            background?: string;\n            color?: string;\n            width?: string;\n        };\n    };\n}\n\nexport interface PayPalAddress {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption,\n}\n\nexport interface ApproveCallbackPayload {\n    orderID: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => PayPalOrderDetails;\n    }\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        },\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\n// TODO: this type should be merged with PayPalCheckoutButtonOptions in the future\nexport interface ButtonsOptions {\n    style?: PaypalButtonStyleOptions;\n    fundingSource?: string;\n    createOrder?(): Promise<string | void>; // TODO: this method should return only Promise<void>\n    onApprove?(data: ApproveCallbackPayload, actions?: ApproveCallbackActions): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): void;\n    onClick?(data: ClickDataOptions, actions: ClickActions): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalCheckoutButtonOptions {\n    experience: string;\n    style?: PaypalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onError(error: Error): void;\n    onShippingAddressChange(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n    onApprove(data: ApproveCallbackPayload, actions: ApproveCallbackActions): Promise<boolean>;\n    onComplete(data: CompleteCallbackDataPayload): void;\n}\n\nexport interface PaypalFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\nexport interface FieldsOptions {\n    style?: PaypalFieldsStyleOptions;\n    fundingSource: string;\n    fields: { name?: { value?: string }; email?: { value?: string } };\n}\n\nexport interface MessagesOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n    fundingSource?: string;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: string;\n}\n\nexport interface PaypalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PaypalCommerceHostedFieldOption;\n        cvv?: PaypalCommerceHostedFieldOption;\n        expirationDate?: PaypalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PaypalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PaypalCommerceHostedFields {\n    submit(options?: PaypalCommerceHostedFieldsSubmitOptions): PaypalCommerceHostedFieldsApprove;\n    getState(): PaypalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PaypalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PaypalCommerceHostedFieldsState {\n    cards: PaypalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PaypalCommerceHostedFieldsFieldData;\n        expirationDate?: PaypalCommerceHostedFieldsFieldData;\n        expirationMonth?: PaypalCommerceHostedFieldsFieldData;\n        expirationYear?: PaypalCommerceHostedFieldsFieldData;\n        cvv?: PaypalCommerceHostedFieldsFieldData;\n        postalCode?: PaypalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PaypalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface PaypalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface PaypalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PaypalCommerceFields {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceMessages {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    BANCONTACT: string;\n    GIROPAY: string;\n    P24: string;\n    EPS: string;\n    IDEAL: string;\n    MYBANK: string;\n    OXXO: string;\n    SOFORT: string;\n    SEPA: string;\n    BLIK: string;\n    TRUSTLY: string;\n    VERKKOPANKKI: string;\n    VENMO: string;\n}\n\nexport const NON_INSTANT_PAYMENT_METHODS = ['oxxo'];\n\nexport interface PaypalCommerceSDK {\n    FUNDING: PaypalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PaypalCommerceHostedFieldsRenderOptions): Promise<PaypalCommerceHostedFields>;\n    };\n    Buttons(params: ButtonsOptions | PaypalCheckoutButtonOptions): PaypalCommerceButtons;\n    PaymentFields(params: FieldsOptions): PaypalCommerceFields;\n    Messages(params: MessagesOptions): PaypalCommerceMessages;\n}\n\nexport interface PaypalCommerceHostWindow extends Window {\n    paypal?: PaypalCommerceSDK;\n    paypalLoadScript?(options: PaypalCommerceScriptParams): Promise<{ paypal: PaypalCommerceSDK }>;\n}\n\nexport type FundingType = string[];\nexport type EnableFundingType =  FundingType | string;\n\nexport interface PaypalCommerceInitializationData {\n    clientId: string;\n    merchantId?: string;\n    buyerCountry?: string;\n    isDeveloperModeApplicable?: boolean;\n    intent?: 'capture' | 'authorize';\n    isHostedCheckoutEnabled?: boolean;\n    isInlineCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    availableAlternativePaymentMethods: FundingType;\n    enabledAlternativePaymentMethods: FundingType;\n    clientToken?: string;\n    attributionId?: string;\n    isVenmoEnabled?: boolean;\n}\n\nexport type ComponentsScriptType = Array<'buttons' | 'funding-eligibility' | 'hosted-fields' | 'messages' | 'payment-fields'>;\n\nexport interface PaypalCommerceScriptParams  {\n    'client-id'?: string;\n    'merchant-id'?: string;\n    'buyer-country'?: string;\n    'disable-funding'?: FundingType;\n    'enable-funding'?: EnableFundingType;\n    'data-client-token'?: string;\n    'data-partner-attribution-id'?: string;\n    currency?: string;\n    commit?: boolean;\n    intent?: 'capture' | 'authorize';\n    components?: ComponentsScriptType;\n}\n\nexport interface UpdateOrderPayload {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { StyleButtonColor, StyleButtonLabel, StyleButtonLayout, StyleButtonShape, PaypalButtonStyleOptions } from '../../../payment/strategies/paypal-commerce';\n\nexport default function getValidButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n    const { label, color, layout, shape, height, tagline } = style;\n\n    const validStyles = {\n        color: getValidColor(color),\n        height: getValidHeight(height),\n        label: getValidLabel(label),\n        layout: getValidLayout(layout),\n        shape: getValidShape(shape),\n        tagline: getValidTagline(tagline, layout),\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidColor(color?: StyleButtonColor): StyleButtonColor | undefined {\n    return color && StyleButtonColor[color] ? color : undefined;\n}\n\nfunction getValidLabel(label?: StyleButtonLabel): StyleButtonLabel | undefined {\n    return label && StyleButtonLabel[label] ? label : undefined\n}\n\nfunction getValidLayout(layout?: StyleButtonLayout): StyleButtonLayout | undefined {\n    return layout && StyleButtonLayout[layout] ? layout : undefined\n}\n\nfunction getValidShape(shape?: StyleButtonShape): StyleButtonShape | undefined {\n    return shape && StyleButtonShape[shape] ? shape : undefined\n}\n\nfunction getValidTagline(tagline?: boolean, layout?: string): boolean | undefined {\n    if (tagline && typeof tagline === 'boolean' && layout === StyleButtonLayout[StyleButtonLayout.horizontal]) {\n        return tagline;\n    }\n\n    return undefined;\n}\n\nfunction getValidHeight(height?: number): number {\n    const defaultHeight = 40;\n    const minHeight = 25;\n    const maxHeight = 55;\n\n    if (!height || typeof height !== 'number') {\n        return defaultHeight;\n    }\n\n    if (height > maxHeight) {\n        return maxHeight;\n    }\n\n    if (height < minHeight) {\n        return minHeight;\n    }\n\n    return height;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, RequestError } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport { ApproveCallbackActions, ApproveCallbackPayload, ButtonsOptions, PaypalButtonStyleOptions, PaypalCommerceRequestSender, PaypalCommerceScriptLoader, PaypalCommerceSDK, PayPalOrderAddress, PayPalOrderDetails, ShippingAddressChangeCallbackPayload, ShippingOptionChangeCallbackPayload } from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../../../billing';\nimport { PaymentActionCreator } from '../../../payment';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { OrderActionCreator } from '../../../order';\nimport { PaypalCommerceButtonInitializeOptions } from './paypal-commerce-button-options';\nimport { CartRequestSender } from '../../../cart';\n\nexport default class PaypalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n    private _buyNowCartId?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommerce, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.methodId\" argument is not provided.');\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.containerId\" argument is not provided.`);\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`);\n        }\n\n        if (paypalcommerce.buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!paypalcommerce.currencyCode) {\n                throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.`);\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(paymentMethod, paypalcommerce.currencyCode, paypalcommerce.initializesOnCheckoutPage);\n        } else {\n            const state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            const currencyCode = state.cart.getCartOrThrow().currency.code;\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(paymentMethod, currencyCode, paypalcommerce.initializesOnCheckoutPage);\n        }\n\n        this._renderButton(containerId, methodId, paypalcommerce);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(containerId: string, methodId: string, paypalcommerce: PaypalCommerceButtonInitializeOptions): void {\n        const { buyNowInitializeOptions, initializesOnCheckoutPage, style, onComplete } = paypalcommerce;\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData;\n\n        if (isHostedCheckoutEnabled && (!onComplete || typeof onComplete !== 'function')) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommerce.onComplete\" argument is not provided or it is not a function.`);\n        }\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) => this._onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) => this._onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) => this._onHostedCheckoutApprove(data, actions, methodId, onComplete),\n            onCancel: () => this._onCancel(),\n        };\n\n        const regularCallbacks = {\n            onApprove: ({ orderID }: ApproveCallbackPayload) => this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalCallbacks = isHostedCheckoutEnabled ? hostedCheckoutCallbacks : regularCallbacks;\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource: paypalCommerceSdk.FUNDING.PAYPAL,\n            style: style ? this._getButtonStyle(style) : {},\n            onClick: () => this._handleClick(buyNowInitializeOptions),\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            ...paypalCallbacks,\n        };\n\n        const paypalButton = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceButtonInitializeOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (buyNowInitializeOptions && typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(cartRequestBody);\n                this._buyNowCartId = cart.id;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _onCancel() {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddressOrThrow();\n        const resetAddress = this._resetAddress(billingAddress);\n        try {\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(resetAddress));\n            await this._store.dispatch(this._consignmentActionCreator.updateAddress(resetAddress));\n            await this._updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private _resetAddress(address: BillingAddressRequestBody) {\n        const { firstName, lastName, address1, email } = address;\n\n        return {\n            ...address,\n            firstName: firstName !== 'Fake' ? firstName : '',\n            lastName: lastName !== 'Fake' ? lastName : '',\n            address1: address1 !== 'Fake street' ? address1 : '',\n            email: email !== 'fake@fake.fake' ? email : '',\n        }\n    }\n\n    private async _onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void\n    ): Promise<boolean> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const orderDetails = await this.getActionsOrThrow(actions);\n\n        try {\n            if (cart.lineItems.physicalItems.length > 0) {\n                const address = this._getValidAddress(\n                    orderDetails.payer.name,\n                    orderDetails.payer.email_address,\n                    orderDetails.purchase_units[0].shipping.address\n                );\n\n                await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n                await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n                await this._updateOrder();\n\n\n            } else {\n                const address = this._getValidAddress(\n                    orderDetails.payer.name,\n                    orderDetails.payer.email_address,\n                    orderDetails.payer.address\n                );\n\n                await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n\n            }\n\n            await this._store.dispatch(this._orderActionCreator.submitOrder({}, { params: { methodId } }));\n            await this._submitPayment(methodId, data.orderID);\n\n            if (onComplete) {\n                onComplete();\n            }\n\n            return true;\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async getActionsOrThrow(actions: ApproveCallbackActions) {\n        if (!actions) {\n            throw new RequestError();\n        }\n\n        return actions.order.get();\n    }\n\n    private _getValidAddress(\n        payerName: PayPalOrderDetails['payer']['name'],\n        email: string,\n        address: PayPalOrderAddress,\n    ) {\n        return this._transformAddress({\n            firstName: payerName.given_name,\n            lastName: payerName.surname,\n            email,\n            address1: address?.address_line_1,\n            city: address?.admin_area_2,\n            countryCode: address?.country_code,\n            postalCode: address?.postal_code,\n            stateOrProvinceCode: address?.admin_area_1,\n        });\n    }\n\n    private async _onShippingAddressChange(data: ShippingAddressChangeCallbackPayload): Promise<void> {\n        const address = this._transformAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and consignment addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n            await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n\n            const shippingOption = this._getShippingOptionOrThrow();\n\n            await this._store.dispatch(this._consignmentActionCreator.selectShippingOption(shippingOption.id));\n            await this._updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async _onShippingOptionsChange(data: ShippingOptionChangeCallbackPayload): Promise<void> {\n        const shippingOption = this._getShippingOptionOrThrow(data.selectedShippingOption?.id);\n        try {\n            await this._store.dispatch(this._consignmentActionCreator.selectShippingOption(shippingOption.id));\n            await this._updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async _submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData =  {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId, paymentData }));\n    }\n\n    private async _updateOrder(): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n        try {\n            await this._paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment?.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment?.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    private _transformAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || 'Fake',\n            lastName: address?.lastName || 'Fake',\n            email: address?.email || 'fake@fake.fake',\n            phone: '',\n            company: '',\n            address1: address?.address1 || 'Fake street',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private _getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this._store.getState();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment?.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(option => option.isRecommended);\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find(option => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(option => option.id === consignment?.selectedShippingOption?.id);\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error('Your order can\\'t be shipped to this address');\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage ? 'paypalcommercecheckout': 'paypalcommerce';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(cartId, providerId);\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...this._buyNowCartId && { cart_id: this._buyNowCartId },\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { color, height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { color, height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../../../billing';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator } from '../../../order';\nimport { PaymentActionCreator } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport { ApproveCallbackActions, ApproveCallbackPayload, ButtonsOptions, PaypalButtonStyleOptions, PaypalCommerceRequestSender, PaypalCommerceScriptLoader, PaypalCommerceSDK, PayPalOrderAddress, PayPalOrderDetails, ShippingAddressChangeCallbackPayload, ShippingOptionChangeCallbackPayload } from \"../../../payment/strategies/paypal-commerce\";\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceCreditButtonInitializeOptions } from './paypal-commerce-credit-button-options';\n\nexport default class PaypalCommerceCreditButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCartId?: string;\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercecredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.methodId\" argument is not provided.');\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.containerId\" argument is not provided.`);\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.`);\n        }\n\n        const { buyNowInitializeOptions, currencyCode, initializesOnCheckoutPage, messagingContainerId } = paypalcommercecredit;\n\n        if (buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!currencyCode) {\n                throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.`);\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(paymentMethod, currencyCode, initializesOnCheckoutPage);\n        } else {\n            const state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            const cart = state.cart.getCartOrThrow();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(paymentMethod, cart.currency.code, initializesOnCheckoutPage);\n        }\n\n        this._renderButton(containerId, methodId, paypalcommercecredit);\n        this._renderMessages(messagingContainerId);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(containerId: string, methodId: string, paypalcommercecredit: PaypalCommerceCreditButtonInitializeOptions): void {\n        const { buyNowInitializeOptions, initializesOnCheckoutPage, style, onComplete } = paypalcommercecredit;\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData;\n\n        if (isHostedCheckoutEnabled && (!onComplete || typeof onComplete !== 'function')) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommercecredit.onComplete\" argument is not provided or it is not a function.`);\n        }\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) => this._onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) => this._onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) => this._onHostedCheckoutApprove(data, actions, methodId, onComplete),\n            onCancel: () => this._onCancel(),\n        };\n\n        const regularCallbacks = {\n            onApprove: ({ orderID }: ApproveCallbackPayload) => this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalCallbacks = isHostedCheckoutEnabled ? hostedCheckoutCallbacks : regularCallbacks;\n\n        const fundingSources = [paypalCommerceSdk.FUNDING.PAYLATER, paypalCommerceSdk.FUNDING.CREDIT];\n\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach(fundingSource => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: ButtonsOptions = {\n                    fundingSource,\n                    style: style ? this._getButtonStyle(style) : {},\n                    onClick: () => this._handleClick(buyNowInitializeOptions),\n                    createOrder: () => this._createOrder(initializesOnCheckoutPage),\n                    ...paypalCallbacks,\n                };\n\n                const paypalButton = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _onCancel() {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddressOrThrow();\n        const resetAddress = this._resetAddress(billingAddress);\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(resetAddress));\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(resetAddress));\n        await this._updateOrder();\n    }\n\n    private _resetAddress(address: BillingAddressRequestBody) {\n        const { firstName, lastName, address1, email } = address;\n\n        return {\n            ...address,\n            firstName: firstName !== 'Fake' ? firstName : '',\n            lastName: lastName !== 'Fake' ? lastName : '',\n            address1: address1 !== 'Fake street' ? address1 : '',\n            email: email !== 'fake@fake.fake' ? email : '',\n        }\n    }\n\n    private async _onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void\n    ): Promise<boolean> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const orderDetails = await this.getActionsOrThrow(actions);\n\n        if (cart.lineItems.physicalItems.length > 0) {\n            const address = this._getValidAddress(\n                orderDetails.payer.name,\n                orderDetails.payer.email_address,\n                orderDetails.purchase_units[0].shipping.address\n            );\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n            await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n            await this._updateOrder();\n        } else {\n            const address = this._getValidAddress(\n                orderDetails.payer.name,\n                orderDetails.payer.email_address,\n                orderDetails.payer.address\n            );\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, { params: { methodId } }));\n        await this._submitPayment(methodId, data.orderID);\n\n        if (onComplete) {\n            onComplete();\n        }\n\n        return true;\n    }\n\n    private async getActionsOrThrow(actions: ApproveCallbackActions) {\n\n        if (!actions) {\n           throw new RequestError();\n        }\n\n        return actions.order.get();\n    }\n\n    private async _onShippingOptionsChange(data: ShippingOptionChangeCallbackPayload): Promise<void> {\n        const shippingOption = this._getShippingOptionOrThrow(data.selectedShippingOption?.id);\n\n        await this._store.dispatch(this._consignmentActionCreator.selectShippingOption(shippingOption.id));\n        await this._updateOrder();\n    }\n\n    private async _submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData =  {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId, paymentData }));\n    }\n\n    private async _onShippingAddressChange(data: ShippingAddressChangeCallbackPayload): Promise<void> {\n        const address = this._transformAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        // Info: we use the same address to fill billing and consignment addresses to have valid quota on BE for order updating process\n        // on this stage we don't have access to valid customer's address accept shipping data\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n\n        const shippingOption = this._getShippingOptionOrThrow();\n\n        await this._store.dispatch(this._consignmentActionCreator.selectShippingOption(shippingOption.id));\n        await this._updateOrder();\n    }\n\n    private async _updateOrder(): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        try {\n            await this._paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment?.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment?.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    private _getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this._store.getState();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment?.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(option => option.isRecommended);\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find(option => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(option => option.id === consignment?.selectedShippingOption?.id);\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error('Your order can\\'t be shipped to this address');\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private _transformAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || 'Fake',\n            lastName: address?.lastName || 'Fake',\n            email: address?.email || 'fake@fake.fake',\n            phone: '',\n            company: '',\n            address1: address?.address1 || 'Fake street',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private _getValidAddress(\n        payerName: PayPalOrderDetails['payer']['name'],\n        email: string,\n        address: PayPalOrderAddress,\n    ) {\n        return this._transformAddress({\n            firstName: payerName.given_name,\n            lastName: payerName.surname,\n            email,\n            address1: address.address_line_1,\n            city: address.admin_area_2,\n            countryCode: address.country_code,\n            postalCode: address.postal_code,\n            stateOrProvinceCode: address.admin_area_1,\n        });\n    }\n\n    private _renderMessages(messagingContainerId?: string): void {\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const isMessagesAvailable = Boolean(messagingContainerId && document.getElementById(messagingContainerId));\n\n        if (isMessagesAvailable) {\n            const state = this._store.getState();\n            const cart = state.cart.getCartOrThrow();\n\n            const paypalMessagesOptions = {\n                amount: cart.cartAmount,\n                placement: 'cart',\n                style: {\n                    layout: 'text',\n                },\n            };\n\n            const paypalMessages = paypalCommerceSdk.Messages(paypalMessagesOptions);\n\n            paypalMessages.render(`#${messagingContainerId}`);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceCreditButtonInitializeOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (buyNowInitializeOptions && typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(cartRequestBody);\n\n                this._buyNowCartId = cart.id;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage ? 'paypalcommercecreditcheckout': 'paypalcommercecredit';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(cartId, providerId);\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...this._buyNowCartId && { cart_id: this._buyNowCartId },\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { color, height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { color, height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport { ApproveCallbackPayload, ButtonsOptions, PaypalButtonStyleOptions, PaypalCommerceRequestSender, PaypalCommerceScriptLoader, PaypalCommerceSDK } from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceAlternativeMethodsButtonOptions } from './paypal-commerce-alternative-methods-button-options';\n\nexport default class PaypalCommerceAlternativeMethodsButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCartId?: string;\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercealternativemethods, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.methodId\" argument is not provided.');\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.containerId\" argument is not provided.`);\n        }\n\n        if (!paypalcommercealternativemethods) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`);\n        }\n\n        if (!paypalcommercealternativemethods.apm) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.`);\n        }\n\n        const { buyNowInitializeOptions, currencyCode, initializesOnCheckoutPage } = paypalcommercealternativemethods;\n\n        if (buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!currencyCode) {\n                throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.`);\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(paymentMethod, currencyCode, initializesOnCheckoutPage);\n        } else {\n            const state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            const cart = state.cart.getCartOrThrow();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(paymentMethod, cart.currency.code, initializesOnCheckoutPage);\n        }\n\n        this._renderButton(methodId, containerId, paypalcommercealternativemethods);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        methodId: string,\n        containerId: string,\n        paypalcommercealternativemethods: PaypalCommerceAlternativeMethodsButtonOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, initializesOnCheckoutPage, style } = paypalcommercealternativemethods;\n\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalCommerceSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(`Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.`);\n        }\n\n        const validButtonStyle = style ? this._getButtonStyle(style) : {};\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource: apm,\n            style: validButtonStyle,\n            onClick: () => this._handleClick(buyNowInitializeOptions),\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            onApprove: ({ orderID }: ApproveCallbackPayload) => this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalButtonRender = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceAlternativeMethodsButtonOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (buyNowInitializeOptions && typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(cartRequestBody);\n\n                this._buyNowCartId = cart.id;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage ? 'paypalcommercealternativemethodscheckout' : 'paypalcommercealternativemethod';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(cartId, providerId);\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...this._buyNowCartId && { cart_id: this._buyNowCartId },\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { BillingAddressActionCreator, BillingAddressRequestBody } from '../../../billing';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { OrderActionCreator } from '../../../order';\nimport { PaymentActionCreator } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { ApproveCallbackActions, ApproveCallbackPayload, CompleteCallbackDataPayload, PaypalCheckoutButtonOptions, PaypalCommerceRequestSender, PaypalCommerceScriptLoader, PaypalCommerceSDK, ShippingAddressChangeCallbackPayload, ShippingOptionChangeCallbackPayload } from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\nimport { PaypalCommerceInlineCheckoutButtonInitializeOptions } from './paypal-commerce-inline-checkout-button-options';\n\nexport default class PaypalCommerceInlineCheckoutButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { methodId, paypalcommerceinline } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.methodId\" argument is not provided.');\n        }\n\n        if (!paypalcommerceinline) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.paypalcommerceinline\" argument is not provided.');\n        }\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        const state = this._store.getState();\n        const currencyCode = state.cart.getCartOrThrow().currency.code;\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(paymentMethod, currencyCode, false);\n\n        if (!paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        this._renderButton(methodId, paypalCommerceSdk, paypalcommerceinline);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        methodId: string,\n        paypalCommerceSdk: PaypalCommerceSDK,\n        paypalcommerceinline: PaypalCommerceInlineCheckoutButtonInitializeOptions,\n    ): void {\n        const {\n            acceleratedCheckoutContainerDataId,\n            buttonContainerDataId,\n            buttonContainerClassName,\n            nativeCheckoutButtonDataId,\n            style,\n            onComplete,\n        } = paypalcommerceinline;\n\n        if (!acceleratedCheckoutContainerDataId) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommerceinline.acceleratedCheckoutContainerDataId\" argument is not provided.`);\n        }\n\n        if (!buttonContainerDataId) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommerceinline.buttonContainerDataId\" argument is not provided.`);\n        }\n\n        if (!nativeCheckoutButtonDataId) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommerceinline.nativeCheckoutButtonDataId\" argument is not provided.`);\n        }\n\n        if (!onComplete || typeof onComplete !== 'function') {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommerceinline.onComplete\" argument is not provided or it is not a function.`);\n        }\n\n        const fundingSource = paypalCommerceSdk.FUNDING.CARD;\n\n        const buttonRenderOptions: PaypalCheckoutButtonOptions = {\n            experience: 'accelerated',\n            fundingSource,\n            style,\n            createOrder: () => this._createOrder(methodId),\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) => this._onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) => this._onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) => this._onApprove(data, actions, methodId),\n            onComplete: (data: CompleteCallbackDataPayload) => this._onComplete(data, methodId, onComplete),\n            onError: (error: Error) => this._onError(error, buttonContainerDataId, nativeCheckoutButtonDataId),\n        };\n\n        const paypalButtonRender = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            this._hideNativeCheckoutButton(nativeCheckoutButtonDataId);\n\n            this._createPayPalButtonContainer(acceleratedCheckoutContainerDataId, buttonContainerDataId, buttonContainerClassName);\n            paypalButtonRender.render(`[${buttonContainerDataId}]`);\n        }\n    }\n\n    private async _createOrder(methodId: string): Promise<string> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(cart.id, methodId);\n\n        return orderId;\n    }\n\n    private async _onShippingAddressChange(data: ShippingAddressChangeCallbackPayload): Promise<void> {\n        const address = this._getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        // Info: we use the same address to fill billing and consignment addresses to have valid quota on BE for order updating process\n        // on this stage we don't have access to valid customer's address accept shipping data\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n\n        const shippingOption = this._getShippingOptionOrThrow();\n\n        await this._store.dispatch(this._consignmentActionCreator.selectShippingOption(shippingOption.id));\n        await this._updateOrder();\n    }\n\n    private async _onShippingOptionsChange(data: ShippingOptionChangeCallbackPayload): Promise<void> {\n        const shippingOption = this._getShippingOptionOrThrow(data.selectedShippingOption?.id);\n\n        await this._store.dispatch(this._consignmentActionCreator.selectShippingOption(shippingOption.id));\n        await this._updateOrder();\n    }\n\n    private async _onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n    ): Promise<boolean> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        if (cart.lineItems.physicalItems.length > 0) {\n            const { payer, purchase_units } = orderDetails;\n            const shippingAddress = purchase_units?.[0]?.shipping?.address || {};\n\n            const address = this._getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: shippingAddress.address_line_1,\n                city: shippingAddress.admin_area_2,\n                countryCode: shippingAddress.country_code,\n                postalCode: shippingAddress.postal_code,\n                stateOrProvinceCode: shippingAddress.admin_area_1,\n            });\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n            await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n            await this._updateOrder();\n        } else {\n            const { payer } = orderDetails;\n\n            const address = this._getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: payer.address.address_line_1,\n                city: payer.address.admin_area_2,\n                countryCode: payer.address.country_code,\n                postalCode: payer.address.postal_code,\n                stateOrProvinceCode: payer.address.admin_area_1,\n            });\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, { params: { methodId } }));\n        await this._submitPayment(methodId, data.orderID);\n\n        return true;\n    }\n\n    private async _onComplete(\n        data: CompleteCallbackDataPayload,\n        methodId: string,\n        callback?: () => void\n    ): Promise<void> {\n        await this._submitPayment(methodId, data.orderID);\n\n        if (callback) {\n            callback();\n        }\n    }\n\n    private _onError(error: Error, buttonContainerDataId: string, nativeCheckoutButtonDataId: string): void {\n        this._removePayPalContainer(buttonContainerDataId);\n        this._showNativeCheckoutButton(nativeCheckoutButtonDataId);\n\n        throw new Error(error.message);\n    }\n\n    private async _updateOrder(): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        await this._paypalCommerceRequestSender.updateOrder({\n            availableShippingOptions: consignment?.availableShippingOptions,\n            cartId: cart.id,\n            selectedShippingOption: consignment?.selectedShippingOption,\n        });\n    }\n\n    private async _submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData =  {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId, paymentData }));\n    }\n\n    private _getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this._store.getState();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment?.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(option => option.isRecommended);\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find(option => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(option => option.id === consignment?.selectedShippingOption?.id);\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error('Your order can\\'t be shipped to this address');\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private _getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private _getElementByDataId(dataId: string): HTMLElement | null {\n        return document.querySelector(`[${dataId}]`);\n    }\n\n    private _createPayPalButtonContainer(\n        acceleratedCheckoutContainerDataId: string,\n        buttonContainerDataId: string,\n        buttonContainerClassName = 'PaypalCommerceInlineButton',\n    ): void {\n        const paypalButtonContainer = document.createElement('div');\n        paypalButtonContainer.setAttribute('class', buttonContainerClassName);\n        paypalButtonContainer.setAttribute(buttonContainerDataId, '');\n\n        const container = this._getElementByDataId(acceleratedCheckoutContainerDataId);\n\n        if (container) {\n            container.innerHTML = \"\";\n            container.append(paypalButtonContainer);\n        }\n    }\n\n    private _showNativeCheckoutButton(nativeCheckoutButtonDataId: string): void {\n        const nativeCheckoutButton = this._getElementByDataId(nativeCheckoutButtonDataId);\n\n        if (nativeCheckoutButton) {\n            nativeCheckoutButton.removeAttribute('style');\n        }\n    }\n\n    private _hideNativeCheckoutButton(nativeCheckoutButtonDataId: string): void {\n        const nativeCheckoutButton = this._getElementByDataId(nativeCheckoutButtonDataId);\n\n        if (nativeCheckoutButton) {\n            nativeCheckoutButton.setAttribute('style', 'display: none');\n        }\n    }\n\n    private _removePayPalContainer(buttonContainerDataId: string): void {\n        const paypalButtonContainer = this._getElementByDataId(buttonContainerDataId);\n\n        if (paypalButtonContainer?.parentNode) {\n            paypalButtonContainer.parentNode.removeChild(paypalButtonContainer);\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport { ApproveCallbackPayload, ButtonsOptions, PaypalButtonStyleOptions, PaypalCommerceRequestSender, PaypalCommerceScriptLoader, PaypalCommerceSDK } from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceButtonInitializeOptions } from './paypal-commerce-button-options';\nimport { PaypalCommerceVenmoButtonInitializeOptions } from './paypal-commerce-venmo-button-options';\n\nexport default class PaypalCommerceVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCartId?: string;\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.methodId\" argument is not provided.');\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.containerId\" argument is not provided.`);\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`);\n        }\n\n        const { buyNowInitializeOptions, currencyCode, initializesOnCheckoutPage } = paypalcommercevenmo;\n\n        if (buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!currencyCode) {\n                throw new InvalidArgumentError(`Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.`);\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(paymentMethod, currencyCode, initializesOnCheckoutPage);\n        } else {\n            const state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            const cart = state.cart.getCartOrThrow();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(paymentMethod, cart.currency.code, initializesOnCheckoutPage);\n        }\n\n        this._renderButton(containerId, methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(containerId: string, methodId: string, paypalcommercevenmo: PaypalCommerceVenmoButtonInitializeOptions): void {\n        const { buyNowInitializeOptions, initializesOnCheckoutPage, style } = paypalcommercevenmo;\n\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const fundingSource = paypalCommerceSdk.FUNDING.VENMO;\n\n        const validButtonStyle = style ? this._getVenmoButtonStyle(style) : {};\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource,\n            style: validButtonStyle,\n            onClick: () => this._handleClick(buyNowInitializeOptions),\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            onApprove: ({ orderID }: ApproveCallbackPayload) => this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalButtonRender = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceButtonInitializeOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (buyNowInitializeOptions && typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(cartRequestBody);\n\n                this._buyNowCartId = cart.id;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage ? 'paypalcommercevenmocheckout': 'paypalcommercevenmo';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(cartId, providerId);\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...this._buyNowCartId && { cart_id: this._buyNowCartId },\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getVenmoButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import Factory from './factory';\nimport Registry from './registry';\n\nexport default class ResolveIdRegistry<TType, TToken extends { [key: string]: unknown }> {\n    private _registry: Registry<TType>;\n\n    constructor() {\n        this._registry = new Registry({\n            tokenResolver: this._resolveToken.bind(this),\n            useFallback: false,\n        });\n    }\n\n    get(resolveId: TToken): TType {\n        return this._registry.get(this._encodeToken(resolveId));\n    }\n\n    register(resolveId: TToken, factory: Factory<TType>): void {\n        this._registry.register(this._encodeToken(resolveId), factory);\n    }\n\n    private _encodeToken(resolveId: TToken): string {\n        return btoa(JSON.stringify(resolveId));\n    }\n\n    private _decodeToken(token: string): TToken {\n        return JSON.parse(atob(token));\n    }\n\n    private _resolveToken(token: string, registeredTokens: string[]): string | undefined {\n        const query = this._decodeToken(token);\n        const results: Array<{ token: string; matches: number }> = [];\n\n        registeredTokens.forEach(registeredToken => {\n            const resolverId = this._decodeToken(registeredToken);\n            const result = { token: registeredToken, matches: 0 };\n\n            for (const [key, value] of Object.entries(resolverId)) {\n                if (key in query && query[key] === value) {\n                    result.matches++;\n                }\n            }\n\n            results.push(result);\n        });\n\n        const matched = results.sort((a, b) => b.matches - a.matches)\n            .filter(result => result.matches > 0)[0];\n\n        if (matched?.token) {\n            return matched.token;\n        }\n\n        throw new Error('Unable to resolve to a registered token with the provided token.');\n    }\n}\n","import CustomError from \"./custom-error\";\nimport setPrototypeOf from \"./set-prototype-of\";\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError\n    extends Error\n    implements CustomError\n{\n    name = \"StandardError\";\n    type = \"standard\";\n\n    constructor(message?: string) {\n        super(message || \"An unexpected error has occurred.\");\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === \"function\") {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from \"./standard-error\";\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = \"MissingDataError\";\n        this.type = \"missing_data\";\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return \"Unable to proceed because billing address data is unavailable.\";\n\n        case MissingDataErrorType.MissingCart:\n            return \"Unable to proceed because cart data is unavailable.\";\n\n        case MissingDataErrorType.MissingConsignments:\n            return \"Unable to proceed because consignments data is unavailable.\";\n\n        case MissingDataErrorType.MissingCheckout:\n            return \"Unable to proceed because checkout data is unavailable.\";\n\n        case MissingDataErrorType.MissingCustomer:\n            return \"Unable to proceed because customer data is unavailable.\";\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return \"Unable to proceed because configuration data is unavailable.\";\n\n        case MissingDataErrorType.MissingOrder:\n            return \"Unable to proceed because order data is unavailable.\";\n\n        case MissingDataErrorType.MissingOrderId:\n            return \"Unable to proceed because order ID is unavailable or not generated yet.\";\n\n        case MissingDataErrorType.MissingPayment:\n            return \"Unable to proceed because payment data is unavailable.\";\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return \"Unable to proceed because the token required to submit a payment is missing.\";\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return \"Unable to proceed because payment method data is unavailable or not properly configured.\";\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return \"Unable to proceed because shipping address data is unavailable.\";\n\n        default:\n            return \"Unable to proceed because the required data is unavailable.\";\n    }\n}\n","import StandardError from \"./standard-error\";\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || \"Invalid arguments have been provided.\");\n\n        this.name = \"InvalidArgumentError\";\n        this.type = \"invalid_argument\";\n    }\n}\n","import StandardError from \"./standard-error\";\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || \"Payment process was cancelled.\");\n\n        this.name = \"PaymentMethodCancelledError\";\n        this.type = \"payment_cancelled\";\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return \"ApplePaySession\" in window;\n}\n\nexport function assertApplePayWindow(\n    window: Window\n): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error(\"Apple pay is not supported\");\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import {\n    AddressRequestBody,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from \"@bigcommerce/checkout-sdk/payment-integration-api\";\nimport { RequestSender } from \"@bigcommerce/request-sender\";\nimport { noop } from \"lodash\";\nimport { WithApplePayButtonInitializeOptions } from \"./apple-pay-button-initialize-options\";\nimport ApplePaySessionFactory, {\n    assertApplePayWindow,\n} from \"./apple-pay-session-factory\";\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = \"Subtotal\",\n    Shipping = \"Shipping\",\n}\n\nfunction isShippingOptions(\n    options: ShippingOption[] | undefined\n): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithApplePayButtonInitializeOptions\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(\n                MissingDataErrorType.MissingPaymentMethod\n            );\n        }\n\n        const { buttonClassName, onPaymentAuthorize } = applepay;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        await this._paymentIntegrationService.loadDefaultCheckout();\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        this._applePayButton = this._createButton(containerId, buttonClassName);\n        this._applePayButton.addEventListener(\n            \"click\",\n            this._handleWalletButtonClick.bind(this)\n        );\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(\n        containerId: string,\n        buttonClassName = \"apple-pay-checkout-button\"\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n        if (!container) {\n            throw new InvalidArgumentError(\n                \"Unable to create wallet button without valid container ID.\"\n            );\n        }\n\n        document.body.classList.add(\"apple-pay-supported\");\n        const button = document.createElement(\"div\");\n        button.classList.add(buttonClassName);\n        button.setAttribute(\"role\", \"button\");\n        button.setAttribute(\"aria-label\", \"Apple Pay button\");\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(\n                MissingDataErrorType.MissingPaymentMethod\n            );\n        }\n        const request = this._getBaseRequest(\n            cart,\n            checkout,\n            config,\n            this._paymentMethod\n        );\n        const applePaySession = this._sessionFactory.create(request);\n        this._handleApplePayEvents(\n            applePaySession,\n            this._paymentMethod,\n            config\n        );\n\n        applePaySession.begin();\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: \"pending\",\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: \"final\",\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: [\"postalAddress\"],\n            requiredShippingContactFields: [\"email\", \"phone\"],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push(\"postalAddress\");\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                })\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } =\n                    await this._onValidateMerchant(paymentMethod, event);\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error(\"Merchant validation failed\");\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n                await this._requestSender.get(url);\n\n                return this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent\n    ) {\n        const shippingAddress = this._transformContactToAddress(\n            event.shippingContact\n        );\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(\n                shippingAddress\n            );\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error(\"Shipping address update failed\");\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId =\n            checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions =\n            checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(\n            ({ id }) => id === selectionShippingOptionId\n        );\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] =\n            selectedOption\n                ? [\n                      {\n                          label: selectedOption.description,\n                          amount: `${selectedOption.cost.toFixed(\n                              decimalPlaces\n                          )}`,\n                          detail: selectedOption.additionalDescription,\n                          identifier: selectedOption.id,\n                      },\n                  ]\n                : [];\n        unselectedOptions?.forEach((option) =>\n            shippingOptions.push({\n                label: option.description,\n                amount: `${option.cost.toFixed(decimalPlaces)}`,\n                detail: option.additionalDescription,\n                identifier: option.id,\n            })\n        );\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error(\"Shipping options not available.\");\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: \"pending\",\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                []\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find(\n            (option) => option.isRecommended\n        );\n\n        const optionId = recommendedOption\n            ? recommendedOption.id\n            : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error(\"Shipping options update failed\");\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: \"final\",\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error(\"Shipping option selection update failed.\");\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: \"final\",\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            })\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return await this._paymentIntegrationService.selectShippingOption(\n            optionId\n        );\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join(\"&\");\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\n                    \"X-XSRF-TOKEN\": null,\n                },\n                body,\n            }\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress =\n            this._transformContactToAddress(billingContact);\n        const transformedShippingAddress =\n            this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || \"\";\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            throw new Error(\"Payment cannot complete\");\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || \"\",\n            lastName: contact?.familyName || \"\",\n            city: contact?.locality || \"\",\n            company: \"\",\n            address1: (contact?.addressLines && contact?.addressLines[0]) || \"\",\n            address2: (contact?.addressLines && contact?.addressLines[1]) || \"\",\n            postalCode: contact?.postalCode || \"\",\n            countryCode: contact?.countryCode || \"\",\n            phone: contact?.phoneNumber || \"\",\n            stateOrProvince: contact?.administrativeArea || \"\",\n            stateOrProvinceCode: contact?.administrativeArea || \"\",\n            customFields: [],\n        };\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from \"@bigcommerce/checkout-sdk/payment-integration-api\";\nimport { createRequestSender } from \"@bigcommerce/request-sender\";\n\nimport ApplePayButtonStrategy from \"./apple-pay-button-strategy\";\nimport ApplePaySessionFactory from \"./apple-pay-session-factory\";\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<\n    ApplePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory()\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [\n    { id: \"applepay\" },\n]);\n","import ResolvableModule from \"./resolvable-module\";\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[]\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { createPaymentClient, PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\nimport createCheckoutButtonRegistryV2 from './create-checkout-button-registry-v2';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const { host, locale = 'en' } = options ?? {};\n    const store = createCheckoutStore();\n    const paymentClient = createPaymentClient(store);\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createCheckoutButtonRegistryV2(paymentIntegrationService);\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, paymentClient, requestSender, formPoster, locale, host),\n            registryV2,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { PaymentIntegrationService } from \"@bigcommerce/checkout-sdk/payment-integration-api\";\nimport { createRequestSender } from \"@bigcommerce/request-sender\";\nimport { createScriptLoader } from \"@bigcommerce/script-loader\";\n\nimport {\n    BillingAddressActionCreator,\n    BillingAddressRequestSender,\n} from \"../billing\";\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from \"../checkout\";\nimport { ConfigActionCreator, ConfigRequestSender } from \"../config\";\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from \"../form\";\nimport { OrderActionCreator, OrderRequestSender } from \"../order\";\nimport {\n    createPaymentClient,\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from \"../payment\";\nimport {\n    ConsignmentActionCreator,\n    ConsignmentRequestSender,\n} from \"../shipping\";\nimport {\n    PaymentHumanVerificationHandler,\n    createSpamProtection,\n} from \"../spam-protection\";\nimport {\n    SubscriptionsActionCreator,\n    SubscriptionsRequestSender,\n} from \"../subscription\";\nimport createPaymentIntegrationSelectors from \"./create-payment-integration-selectors\";\nimport DefaultPaymentIntegrationService from \"./default-payment-integration-service\";\nimport PaymentIntegrationStoreProjectionFactory from \"./payment-integration-store-projection-factory\";\n\nexport default function createPaymentIntegrationService(\n    store: CheckoutStore\n): PaymentIntegrationService {\n    const {\n        config: { getHost },\n    } = store.getState();\n\n    const requestSender = createRequestSender({ host: getHost() });\n\n    const storeProjectionFactory = new PaymentIntegrationStoreProjectionFactory(\n        createPaymentIntegrationSelectors\n    );\n\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender))\n    );\n\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(new CheckoutRequestSender(requestSender))\n    );\n\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(\n            new SubscriptionsRequestSender(requestSender)\n        )\n    );\n\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        new ConsignmentRequestSender(requestSender),\n        new CheckoutRequestSender(requestSender)\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender)\n    );\n\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(createPaymentClient(store)),\n        orderActionCreator,\n        new PaymentRequestTransformer(),\n        new PaymentHumanVerificationHandler(\n            createSpamProtection(createScriptLoader())\n        )\n    );\n\n    return new DefaultPaymentIntegrationService(\n        store,\n        storeProjectionFactory,\n        checkoutActionCreator,\n        orderActionCreator,\n        billingAddressActionCreator,\n        consignmentActionCreator,\n        paymentMethodActionCreator,\n        paymentActionCreator\n    );\n}\n","import {\n    CheckoutButtonStrategy,\n    CheckoutButtonStrategyFactory,\n    CheckoutButtonStrategyResolveId,\n    isResolvableModule,\n    PaymentIntegrationService,\n} from \"@bigcommerce/checkout-sdk/payment-integration-api\";\n\nimport { ResolveIdRegistry } from \"../common/registry\";\nimport * as defaultCheckoutButtonStrategyFactories from \"../generated/checkout-button-strategies\";\n\nexport interface CheckoutButtonStrategyFactories {\n    [key: string]: CheckoutButtonStrategyFactory<CheckoutButtonStrategy>;\n}\n\nexport default function createCheckoutButtonStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    checkoutButtonStrategyFactories: CheckoutButtonStrategyFactories = defaultCheckoutButtonStrategyFactories\n): ResolveIdRegistry<CheckoutButtonStrategy, CheckoutButtonStrategyResolveId> {\n    const registry = new ResolveIdRegistry<\n        CheckoutButtonStrategy,\n        CheckoutButtonStrategyResolveId\n    >();\n\n    for (const [, createCheckoutButtonStrategy] of Object.entries(\n        checkoutButtonStrategyFactories\n    )) {\n        if (\n            !isResolvableModule<\n                CheckoutButtonStrategyFactory<CheckoutButtonStrategy>,\n                CheckoutButtonStrategyResolveId\n            >(createCheckoutButtonStrategy)\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createCheckoutButtonStrategy.resolveIds) {\n            registry.register(resolverId, () =>\n                createCheckoutButtonStrategy(paymentIntegrationService)\n            );\n        }\n    }\n\n    return registry;\n}\n","import ResolvableModule from \"./resolvable-module\";\n\nexport default function isResolvableModule<TModule, TIdentifier>(\n    module: TModule\n): module is ResolvableModule<TModule, TIdentifier> {\n    return \"resolveIds\" in module;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader, getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { PaymentActionCreator, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentRequestSender, PaymentRequestTransformer } from '../payment';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { ApplePaySessionFactory } from '../payment/strategies/apple-pay';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayAdyenV2Initializer, GooglePayAdyenV3Initializer, GooglePayAuthorizeNetInitializer, GooglePayBNZInitializer, GooglePayBraintreeInitializer, GooglePayCheckoutcomInitializer, GooglePayCybersourceV2Initializer, GooglePayOrbitalInitializer, GooglePayStripeInitializer, GooglePayStripeUPEInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\nimport { PaypalCommerceRequestSender, PaypalCommerceScriptLoader } from '../payment/strategies/paypal-commerce';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../shipping';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { AmazonPayV2ButtonStrategy } from './strategies/amazon-pay-v2';\nimport { ApplePayButtonStrategy } from './strategies/apple-pay';\nimport { BraintreePaypalButtonStrategy, BraintreePaypalCreditButtonStrategy, BraintreeVenmoButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\nimport { PaypalCommerceAlternativeMethodsButtonStrategy, PaypalCommerceButtonStrategy, PaypalCommerceCreditButtonStrategy, PaypalCommerceInlineCheckoutButtonStrategy, PaypalCommerceVenmoButtonStrategy } from './strategies/paypal-commerce';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    locale: string,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender))\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender, checkoutActionCreator);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentHumanVerificationHandler = new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader()));\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer, paymentHumanVerificationHandler);\n    const braintreeSdkCreator = new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader));\n    const paypalScriptLoader = new PaypalCommerceScriptLoader(scriptLoader);\n    const paypalCommerceRequestSender = new PaypalCommerceRequestSender(requestSender);\n    const subscriptionsRequestSender = new SubscriptionsRequestSender(requestSender);\n    const subscriptionsActionCreator = new SubscriptionsActionCreator(subscriptionsRequestSender)\n    const billingAddressRequestSender = new BillingAddressRequestSender(requestSender);\n    const billingAddressActionCreator = new BillingAddressActionCreator(billingAddressRequestSender, subscriptionsActionCreator);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n    const cartRequestSender = new CartRequestSender(requestSender);\n\n    registry.register(CheckoutButtonMethodType.APPLEPAY, () =>\n        new ApplePayButtonStrategy(\n            store,\n            checkoutActionCreator,\n            requestSender,\n            paymentMethodActionCreator,\n            consignmentActionCreator,\n            billingAddressActionCreator,\n            paymentActionCreator,\n            remoteCheckoutActionCreator,\n            orderActionCreator,\n            new ApplePaySessionFactory()\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.AMAZON_PAY_V2, () =>\n        new AmazonPayV2ButtonStrategy(\n            store,\n            checkoutActionCreator,\n            createAmazonPayV2PaymentProcessor()\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            cartRequestSender,\n            braintreeSdkCreator,\n            formPoster,\n            window\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalCreditButtonStrategy(\n            store,\n            checkoutActionCreator,\n            cartRequestSender,\n            braintreeSdkCreator,\n            formPoster,\n            window\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_VENMO, () =>\n        new BraintreeVenmoButtonStrategy(\n            store,\n            paymentMethodActionCreator,\n            cartRequestSender,\n            braintreeSdkCreator,\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_ADYENV2, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAdyenV2Initializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_ADYENV3, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAdyenV3Initializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BNZ, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBNZInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(braintreeSdkCreator)\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayCheckoutcomInitializer(requestSender)\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayCybersourceV2Initializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_ORBITAL, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayOrbitalInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeUPEInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader),\n            locale\n        ));\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALCOMMERCE, () =>\n        new PaypalCommerceButtonStrategy(\n            store,\n            checkoutActionCreator,\n            cartRequestSender,\n            formPoster,\n            paypalScriptLoader,\n            paypalCommerceRequestSender,\n            consignmentActionCreator,\n            billingAddressActionCreator,\n            paymentActionCreator,\n            orderActionCreator\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALCOMMERCE_CREDIT, () =>\n        new PaypalCommerceCreditButtonStrategy(\n            store,\n            checkoutActionCreator,\n            cartRequestSender,\n            formPoster,\n            paypalScriptLoader,\n            paypalCommerceRequestSender,\n            orderActionCreator,\n            consignmentActionCreator,\n            billingAddressActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALCOMMERCE_APMS, () =>\n        new PaypalCommerceAlternativeMethodsButtonStrategy(\n            store,\n            checkoutActionCreator,\n            cartRequestSender,\n            formPoster,\n            paypalScriptLoader,\n            paypalCommerceRequestSender\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALCOMMERCE_INLINE, () =>\n        new PaypalCommerceInlineCheckoutButtonStrategy(\n            store,\n            checkoutActionCreator,\n            paypalScriptLoader,\n            paypalCommerceRequestSender,\n            orderActionCreator,\n            consignmentActionCreator,\n            billingAddressActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALCOMMERCE_VENMO, () =>\n        new PaypalCommerceVenmoButtonStrategy(\n            store,\n            checkoutActionCreator,\n            cartRequestSender,\n            formPoster,\n            paypalScriptLoader,\n            paypalCommerceRequestSender\n        )\n    );\n\n    return registry;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(\n        new AmazonPayV2ScriptLoader(getScriptLoader())\n    );\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","message","object","name","type","setPrototypeOf","__proto__","Error","captureStackTrace","stack","DEFAULT_RESPONSE","body","headers","status","response","errors","joinErrors","reduce","result","error","join","Array","isArray","_factoryMethods","this","register","detail","title","length","map","code","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","createError","_getType","default","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","last","split","errorResponse","storefrontErrorResponse","internalErrorResponse","CheckoutActionType","ErrorActionType","OrderActionType","SubscriptionsActionType","BillingAddressActionType","omitDeep","predicate","isPlainObject","transform","omitBy","clearErrorReducer","state","action","ClearError","isClearErrorAction","payload","isEqual","objectA","objectB","options","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","replace","currentValue","newValue","undefined","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","combineReducers","data","dataReducer","composeReducers","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadCheckoutSucceeded","LoadOrderSucceeded","billingAddress","LoadCheckoutRequested","LoadCheckoutFailed","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","b","id","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","CouponActionType","GiftCertificateActionType","ConsignmentActionType","CheckoutButtonActionType","cartReducer","CreateConsignmentsSucceeded","DeleteConsignmentSucceeded","UpdateConsignmentSucceeded","UpdateShippingOptionSucceeded","LoadShippingOptionsSucceeded","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","cart","ConfigActionType","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","meta","methodId","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","CustomerActionType","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","CustomerStrategyActionType","customerReducer","customer","CreateCustomerAddressSucceeded","StripeLinkAuthenticated","CreateCustomerRequested","CreateCustomerSucceeded","CreateCustomerFailed","CreateCustomerAddressRequested","CreateCustomerAddressFailed","FormFieldsActionType","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","ExecutePaymentMethodCheckoutRequested","ExecutePaymentMethodCheckoutSucceeded","executePaymentMethodCheckoutError","executePaymentMethodCheckoutMethodId","ExecutePaymentMethodCheckoutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isExecutingPaymentMethodCheckout","isWidgetInteracting","CountryActionType","formFieldsReducer","LoadFormFieldsSucceeded","LoadFormFieldsFailed","LoadFormFieldsRequested","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","PaymentActionType","PaymentMethodActionType","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","omit","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","SubmitPaymentSucceeded","PaymentStrategyActionType","paymentMethodReducer","LoadPaymentMethodSucceeded","array","item","defaultPredicate","pick","findIndex","pickBy","push","existingItem","mergeOrPush","gateway","LoadPaymentMethodsSucceeded","methodA","methodB","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","loadMethodId","loadMethodError","LoadPaymentMethodFailed","isLoadingMethod","InstrumentActionType","paymentStrategyReducer","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","RemoteCheckoutActionType","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","PickupOptionActionType","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignments","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","objectFlatten","parent","flattened","forEach","keyString","assign","objectWithSortedKeys","sort","previous","current","ShippingCountryActionType","pickupOptionReducer","LoadPickupOptionsSucceeded","sortedflattenedMeta","consignmentId","searchArea","btoa","JSON","stringify","LoadPickupOptionsRequested","LoadPickupOptionsFailed","ShippingStrategyActionType","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","SignInEmailActionType","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","StoreCreditActionType","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","SpamProtectionActionType","subscriptionsReducer","checkoutReducer","UpdateCheckoutSucceeded","VerifyCheckoutSucceeded","orderId","UpdateCheckoutRequested","UpdateCheckoutFailed","MissingDataErrorType","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","creator","combiner","args","pop","combinerArgs","memoize","guard","errorFactory","createFreezeProxy","target","trap","proxy","create","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","charAt","deepFreeze","createProxy","provider","method","barclays","braintree","braintreepaypal","authorizenet","elavon","checkoutcom","sagepay","stripe","cybersource","cybersourcev2","bnz","converge","bluesnapv2","orbital","paymetric","bolt","digitalriver","moneris","cba_mpgs","worldpayaccess","normalize","address","firstName","lastName","company","address1","address2","city","stateOrProvince","countryCode","postalCode","phone","customFields","identity","createInternalCheckoutSelectorsFactory","getBillingAddress","getBillingAddressOrThrow","getUpdateError","getContinueAsGuestError","getLoadError","isContinuingAsGuest","isLoading","getState","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getCustomerOrThrow","getCreateAccountError","isCreatingCustomerAccount","getCreateAddressError","isCreatingCustomerAddress","getCheckout","getShippingAddress","getShippingAddressOrThrow","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentIdOrThrow","getPaymentStatus","getPaymentStatusOrThrow","getPaymentToken","getPaymentTokenOrThrow","getPaymentRedirectUrl","getPaymentRedirectUrlOrThrow","isPaymentDataRequired","isPaymentDataSubmitted","getEmail","getSendError","isSending","createBillingAddressSelector","continueAsGuestError","loadError","memoizeOne","createCartSelector","getCart","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","some","find","values","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","context","getStoreConfig","_","formState","formFields","storeConfig","getStoreConfigOrThrow","getContextConfig","getExternalSource","externalSource","getHost","host","getLocale","locale","getVariantIdentificationToken","variantIdentificationToken","createConfigSelectorFactory","createCountrySelector","getCountries","countries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","isCreating","createAddressError","isCreatingAddress","createCustomerStrategySelector","getSignInError","getSignOutError","getExecutePaymentMethodCheckoutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","instrument","bigpayToken","card","isMatch","getCardInstrumentOrThrow","MissingPaymentInstrument","getInstruments","flatMap","supportedProvider","getInstrumentsMeta","getDeleteError","createInstrumentSelectorFactory","createFormSelector","getShippingAddressFields","selectedCountry","shippingAddress","field","processField","getBillingAddressFields","getCustomerAccountFields","customerAccount","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createPickupOptionSelector","getPickupOptions","pickupOptions","sortedFlattenedParams","createPickupOptionSelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","shippingConsignment","consignment","selectedPickupOption","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","getConsignments","getConsignmentsOrThrow","getConsignmentById","getConsignmentByAddress","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","concat","lineItemIds","lineItems","physicalItems","indexOf","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","checkout","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderOrThrow","getOrderMeta","getOrderPaymentId","payments","currentPayment","paymentId","createOrderSelectorFactory","createPaymentSelector","providerId","internalPayment","MissingPaymentId","step","MissingPaymentStatus","redirectUrl","MissingPaymentRedirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","signInEmail","sendError","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","config","shouldWarnMutation","createCheckoutStore","initialState","factory","requestErrorFactory","actionTransformer","action$","from","pipe","catchError","every","createInternalCheckoutSelectors","createDataStore","stateTransformer","createPaymentClient","store","paymentClient","subscribe","setHost","paymentSettings","bigpayBaseUrl","cacheAction","fn","Observable","shareReplay","isActionOptions","param","useCache","cachableActionDecorator","descriptor","memoizedMethods","WeakMap","decorateMethod","lastArg","instanceMethods","set","isApplePayWindow","window","assertApplePayWindow","_requestSender","loadPaymentMethods","observer","next","createAction","params","cartId","then","deviceSessionId","sessionHash","methods","filteredMethods","_filterApplePay","complete","catch","createErrorAction","loadPaymentMethod","ContentType","INTERNAL_USE_ONLY","SDK_VERSION_HEADERS","timeout","Accept","url","throwErrorAction","of","throwError","_subscriptionActionCreator","continueAsGuest","credentials","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","merge","defer","_createOrUpdateBillingAddress","_updateCustomerConsent","updateAddress","email","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","empty","updateSubscriptions","checkoutId","createAddress","DEFAULT_PARAMS","include","post","put","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","loadCheckout","loadConfig","loadFormFields","loadDefaultCheckout","updateCheckout","loadCurrentCheckout","joinIncludes","includes","uniq","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","difference","mergeIncludes","cartA","cartB","_normalize","cartAmount","currency","digitalItems","slice","itemA","itemB","productId","variantId","localeCompare","extendedSalePrice","quantity","amount","recipient","giftWrapping","updated","validate","comparator","_compareCoupons","_compareGiftCertificates","_getComparableCheckout","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_configRequestSender","_formFieldsRequestSender","loadFields","_orderRequestSender","_checkoutValidator","loadOrder","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","submitOrder","SubmitOrderRequested","shouldExecuteSpamCheck","_mapToOrderRequestBody","customerMessage","checkoutVariant","switchMap","SubmitOrderFailed","finalizeOrder","FinalizeOrderRequested","FinalizeOrderFailed","paymentData","isNil","_paymentRequestSender","_orderActionCreator","_paymentRequestTransformer","_paymentHumanVerificationHandler","initializeOffsitePayment","promise","shouldSaveInstrument","shouldSetAsDefaultInstrument","formattedPayload","bigpay_token","vault_payment_instrument","set_as_default_stored_instrument","InitializeOffsitePaymentRequested","Promise","race","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","submitPayment","SubmitPaymentRequested","handle","additionalAction","SubmitPaymentFailed","_client","resolve","reject","_transformResponse","statusText","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","_decimalPlaces","toInteger","round","pow","CheckoutButtonMethodType","couponTypes","mapToInternalCoupon","coupon","discount","displayName","discountType","couponType","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalLineItems","itemMap","decimalPlaces","idKey","amountTransformer","imageUrl","amountAfterDiscount","integerAmount","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","sender","attributes","mapGiftCertificateToInternalLineItem","extendedListPrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","option","addedByPromotion","mapToInternalLineItem","mapToInternalLineItemType","mapToInternalCart","promotions","notifications","sum","discountNotifications","promotion","banners","banner","placeholders","messageHtml","text","totalDiscountedAmount","certificate","appliedGiftCertificates","keyBy","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","lineItem","isShippingRequired","subtotal","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","mapToInternalCustomer","addresses","customerId","fullName","customerGroupName","customerGroup","format","month","year","trimmedMonth","trimmedYear","toObject","test","number","maxLength","creditCardType","info","lengths","unformattedValue","unformat","gaps","gapIndex","output","mapToInternalOrder","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","socialMedia","description","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalShippingOption","isSelected","price","cost","selected","isRecommended","transitTime","_cardExpiryFormatter","_cardNumberFormatter","checkoutState","_mapShippingAddress","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","authToken","formattedInstrument","isFormattedVaultedInstrument","vaultAccessToken","_transformPaymentMethod","quoteMeta","request","geoCountryCode","source","storeProfile","transformWithHostedFormData","paymentMethodMeta","_transformHostedInputValues","initializationData","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","hostedFormNonce","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","isBopisEnabled","bopis","enabled","requiredAddress","isPickup","CheckoutIncludes","_consignmentRequestSender","unassignItemsByAddress","_consignmentHasAddress","existingConsignment","_removeLineItems","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","consignmentUpdateBody","shippingOptionId","consignmentMeta","loadShippingOptions","AvailableShippingOptions","_getUpdateAddressRequestBody","createConsignments","updateShippingOption","_isUpdateConsignmentRequest","customItems","itemId","_hydrateLineItems","sharedItem","DEFAULT_INCLUDES","delete","_googleRecaptcha","errorOrId","handleWithRecaptchaSitekey","handleWithPaymentHumanVerificationRequestError","_isPaymentHumanVerificationRequest","_initialize","additional_action_required","_performRecaptcha","execute","take","human_verification_token","toPromise","recaptchaSitekey","cardingProtectionElementId","cardingProtectionElement","document","getElementById","parentNode","removeChild","createElement","setAttribute","appendChild","load","NotInitializedErrorType","_window","callback","MutationObserver","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","container","event$","Subject","_widgetId","render","size","getResponse","reset","_event$","_recaptcha","element","querySelector","retryWhen","delay","TIMEOUT","_watchRecaptchaChallengeWindow","event","iframeContainer","parentElement","style","visibility","observe","attributeFilter","_scriptLoader","_loadPromise","_loadScript","grecaptcha","loadScript","createSpamProtection","scriptLoader","MutationObserverFactory","_subscriptionsRequestSender","cloneDeep","input","cloneDeepSafe","cache","cloneResult","createPaymentIntegrationSelectors","isPaymentMethodInitialized","_store","_storeProjectionFactory","_checkoutActionCreator","_billingAddressActionCreator","_consignmentActionCreator","_paymentMethodActionCreator","_paymentActionCreator","_storeProjection","subscriber","filters","dispatch","updateBillingAddress","updateShippingAddress","ProjectionActionType","_transformSelectors","projection","Synchronize","initial","createDataStoreProjection","bindMethodDecorator","decoratedTarget","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","bind","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","noop","getKey","_resolveMap","parentMap","cacheKey","usedCount","_generateMap","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","splice","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","isPrivate","selectorDecorator","resolver","memoizedMethod","cachedValue","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","_buttonStrategyActionCreator","_state","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","uniqueId","setUniqueElementId","all","initialize","queueId","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_registryV2","_getStrategy","strategy","createBuyNowCart","_factories","_instances","_defaultToken","defaultToken","_useFallback","useFallback","_tokenResolver","tokenResolver","cacheToken","_getInstance","_hasFactory","_hasInstance","resolvedToken","getShippableItemsCount","total","AmazonPayV2Regions","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","_amazonPayV2ScriptLoader","_amazonPayV2SDK","bindButton","buttonId","sessionId","changeAction","_getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","_amazonPayV2Button","renderButton","prepareCheckout","createCheckoutSessionConfig","publicKeyId","signedPayload","requestConfig","_isEnvironmentSpecific","_getAmazonPayV2Button","onClick","initCheckout","signout","renderAmazonPayButton","decoupleCheckoutInitiation","placement","amazonPayV2ButtonOptions","_getAmazonPayV2ButtonOptions","merchantId","testMode","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","features","shopPath","buttonBaseConfig","productType","PayOnly","PayAndShip","buttonColor","Gold","currencyCode","buttonOptions","tmpConfig","sandbox","estimatedOrderAmount","createCheckoutSession","_getOrThrow","region","amazonPayV2Region","amazon","ApplePaySession","PAYPAL_COMPONENTS","_braintreeScriptLoader","_dataCollectors","clientToken","_clientToken","getClient","loadClient","client","authorization","getPaypal","_paypal","loadPaypal","getPaypalCheckout","onSuccess","onError","loadPaypalCheckout","paypalCheckout","paypalCheckoutConfig","paypalCheckoutCallback","braintreePaypalCheckout","paypalSdkLoadConfig","components","paypal","loadPayPalSDK","_paypalCheckout","getVenmoCheckout","_venmoCheckout","loadVenmoCheckout","venmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","venmoCheckoutCallback","braintreeVenmoCheckout","isBrowserSupported","get3DS","_3ds","load3DS","version","getDataCollector","cached","loadDataCollector","kount","deviceData","teardown","getVisaCheckout","_visaCheckout","loadVisaCheckout","getGooglePaymentComponent","_googlePay","loadGooglePayment","createHostedFields","loadHostedFields","_teardown","mod","threeDSecure","dataCollector","visaCheckout","venmo","googlePayment","hostedFields","ButtonType","ButtonColor","BillingAddressFormat","getFirstAndLastName","nameParts","_googlePayScriptLoader","_googlePayInitializer","_methodId","_configureWallet","buttonType","Short","Default","_googlePayClient","displayWallet","loadPaymentData","_getPaymentDataRequest","handleSuccess","parseResponse","tokenizePayload","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","checkoutSettings","origin","location","hostname","_getMethodId","hasShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","apiVersion","apiVersionMinor","_getCardInformation","cardInformation","cardType","lastFour","google","environment","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","customerEmail","paymentMethodData","locality","companyName","address3","administrativeArea","phoneNumber","postPaymentData","details","payment_type","tokenFormat","card_information","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","requestSender","createRequestSender","getScriptLoader","_getGooglePayPaymentDataRequest","gatewayMerchantId","merchantName","merchantInfo","authJwt","billingAddressRequired","billingAddressParameters","Full","phoneNumberRequired","tokenizationSpecification","transactionInfo","totalPriceStatus","totalPrice","toFixed","emailRequired","shippingAddressRequired","shippingAddressParameters","baseRequest","_getGooglePaymentDataRequest","supportedCards","paymentGatewaySpecification","_getPaymentGatewaySpecification","cardPaymentMethod","_getCardPaymentMethod","_braintreeSDKCreator","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parse","tokenizationData","androidPayCards","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","googleMerchantName","googleMerchantId","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_publishableKey","_testMode","_errorMessage","checkoutcomkey","_mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2","err","signature","protocolVersion","signedMessage","_convertToken","finalToken","cardNetwork","cardDetails","token_format","_requestCheckoutcomTokenize","token_data","checkoutcomToken","checkoutcomKey","Authorization","last4","stripeVersion","stripePublishableKey","stripeConnectedAccount","useMasterpassSrc","language","sourceUrl","masterpass","scriptSrc","async","getPayPalSDK","initializesOnCheckoutPage","_paypalSdk","_getPayPalSdkScriptConfigOrThrow","paypalSdkScriptConfig","paypalLoadScript","clientId","intent","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isInlineCheckoutEnabled","isPayPalCreditAvailable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","shouldShowInlineCheckout","commit","shouldEnableCard","enableCardFunding","disableCardFunding","enableCreditFunding","disableCreditFunding","shouldEnableAPMs","enableVenmoFunding","disableVenmoFunding","enableAPMsFunding","disableAPMsFunding","apm","disableFunding","enableFunding","setupPayment","isCredit","isCheckout","isCreditCard","isAPM","isVenmo","createOrder","getOrderStatus","updateOrder","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","signOut","generateToken","trackAuthorizationEvent","forgetCheckout","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","ForgetCheckoutRemoteCustomerRequested","ForgetCheckoutRemoteCustomerSucceeded","ForgetCheckoutRemoteCustomerFailed","_amazonPayV2PaymentProcessor","amazonpay","_walletButton","Cart","DefaultLabels","_remoteCheckoutActionCreator","_sessionFactory","_onAuthorizeCallback","_subTotalLabel","Subtotal","_shippingLabel","Shipping","applepay","buttonClassName","onPaymentAuthorize","_paymentMethod","_applePayButton","_createButton","addEventListener","_handleWalletButtonClick","classList","add","button","preventDefault","_getBaseRequest","applePaySession","_handleApplePayEvents","begin","storeCountryCode","storeName","merchantCapabilities","supportedNetworks","requiresShipping","requiredBillingContactFields","requiredShippingContactFields","tax","onvalidatemerchant","_onValidateMerchant","merchantSession","completeMerchantValidation","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","oncancel","onpaymentauthorized","_onPaymentAuthorized","_transformContactToAddress","shippingContact","abort","selectionShippingOptionId","availableOptions","availableShippingOptions","selectedOption","unselectedOptions","shippingOptions","additionalDescription","identifier","completeShippingContactSelection","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","optionId","selectedOptionId","_updateShippingOption","newShippingMethods","newTotal","newLineItems","_getUpdatedLineItems","completeShippingMethodSelection","validationURL","bigPayEndpoint","paymentsUrl","billingContact","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","transformedBillingAddress","transformedShippingAddress","emailAddress","completePayment","STATUS_SUCCESS","STATUS_FAILURE","contact","givenName","familyName","addressLines","mapToBraintreeShippingAddressOverride","recipientName","line1","line2","getValidButtonStyle","color","fundingicons","height","layout","shape","tagline","validStyles","getValidHeight","mapToLegacyBillingAddress","first_name","last_name","phone_number","address_line_1","address_line_2","country_code","postal_code","mapToLegacyShippingAddress","_cartRequestSender","_formPoster","messagingContainerId","buyNowInitializeOptions","paypalCheckoutOptions","paypalCheckoutSuccessCallback","_renderPayPalComponents","paypalCheckoutErrorCallback","_handleError","_renderPayPalMessages","_renderPayPalButton","shouldProcessPayment","onAuthorizeError","fundingSource","FUNDING","PAYPAL","validButtonStyle","paypalButtonRender","Buttons","env","_setupPayment","onApprove","authorizeData","_tokenizePayment","isEligible","_removeElement","isMessageContainerAvailable","Messages","onPaymentError","_createBuyNowCart","_buyNowCart","shippingAddressOverride","createPayment","flow","enableShippingAddress","shippingAddressEditable","offerCredit","getBuyNowCartRequestBody","cartRequestBody","tokenizePayment","buyNowCartId","postForm","device_data","billing_address","shipping_address","cart_id","buttonContainerId","onErrorCallback","elementId","remove","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","braintreepaypalcredit","hasRenderedSmartButton","fundingSources","PAYLATER","CREDIT","buttonStyle","venmoButtonStyle","backgroundColor","backgroundPosition","backgroundSize","backgroundImage","backgroundRepeat","borderRadius","cursor","transition","minHeight","minWidth","width","_onError","braintreevenmo","_handleInitializationVenmoSuccess","_handleInitializationVenmoError","parentContainerId","_renderVenmoButton","_removeVenmoContainer","buttonContainer","venmoButton","buyBowCart","tokenize","removeAttribute","_handlePostForm","_googlePayPaymentProcessor","googlePayOptions","_getGooglePayOptions","_createSignInButton","googlePayButton","googlepayadyenv2","googlepayadyenv3","googlepayauthorizenet","googlepaybnz","googlepaybraintree","googlepaycheckoutcom","googlepaycybersourcev2","googlepayorbital","googlepaystripe","googlepaystripeupe","hasPhysicalItems","_onPaymentSelectComplete","supportedLocales","es","en","pt","zu","ar","zh","ms","uk","sv","hr","pl","nl","it","de","fr","formatLocale","localeLanguage","toLowerCase","formattedLocale","countryLocales","_masterpassScriptLoader","_locale","masterpassScriptLoaderParams","isMasterpassSrcEnabled","_masterpassClient","_signInButton","removeEventListener","subdomain","src","_createMasterpassPayload","allowedCardTypes","CheckoutButtonNotInitialized","_paypalScriptLoader","_host","paypalOptions","fundingCreditOption","allowedSources","allowCredit","disallowedSources","Button","funding","allowed","disallowed","RECT","RESPONSIVE","actions","onAuthorize","res","paymentID","payerID","payerId","payerInfo","payer","payer_info","StyleButtonLabel","StyleButtonLayout","StyleButtonColor","StyleButtonShape","getValidColor","getValidLabel","getValidLayout","getValidShape","getValidTagline","horizontal","_paypalCommerceRequestSender","paypalcommerce","_paypalCommerceSdk","_renderButton","onComplete","paypalCommerceSdk","_getPayPalCommerceSdkOrThrow","paypalCallbacks","onShippingAddressChange","_onShippingAddressChange","onShippingOptionsChange","_onShippingOptionsChange","_onHostedCheckoutApprove","onCancel","_onCancel","orderID","buttonRenderOptions","_getButtonStyle","_handleClick","_createOrder","paypalButton","_buyNowCartId","resetAddress","_resetAddress","_updateOrder","getActionsOrThrow","orderDetails","_getValidAddress","email_address","purchase_units","_submitPayment","payerName","_transformAddress","given_name","surname","admin_area_2","admin_area_1","_getShippingOptionOrThrow","device_info","method_id","paypal_account","order_id","selectedShippingOptionId","recommendedShippingOption","shippingOptionToSelect","paypalcommercecredit","_renderMessages","paypalMessagesOptions","paypalcommercealternativemethods","paypalcommerceinline","acceleratedCheckoutContainerDataId","buttonContainerDataId","buttonContainerClassName","nativeCheckoutButtonDataId","experience","CARD","_onApprove","_onComplete","_hideNativeCheckoutButton","_createPayPalButtonContainer","_getAddress","_removePayPalContainer","_showNativeCheckoutButton","_getElementByDataId","dataId","paypalButtonContainer","innerHTML","append","nativeCheckoutButton","paypalcommercevenmo","VENMO","_getVenmoButtonStyle","_resolveToken","resolveId","_encodeToken","_decodeToken","atob","registeredTokens","query","results","registeredToken","resolverId","matches","entries","matched","_paymentIntegrationService","paymentIntegrationService","resolveIds","createCheckoutButtonInitializer","formPoster","createFormPoster","storeProjectionFactory","checkoutActionCreator","orderActionCreator","billingAddressActionCreator","consignmentActionCreator","paymentMethodActionCreator","paymentActionCreator","createScriptLoader","createPaymentIntegrationService","registryV2","checkoutButtonStrategyFactories","registry","createCheckoutButtonStrategy","isResolvableModule","checkoutRequestSender","remoteCheckoutRequestSender","remoteCheckoutActionCreator","checkoutValidator","paymentRequestSender","paymentRequestTransformer","paymentHumanVerificationHandler","braintreeSdkCreator","paypalScriptLoader","paypalCommerceRequestSender","subscriptionsRequestSender","subscriptionsActionCreator","billingAddressRequestSender","consignmentRequestSender","cartRequestSender","createCheckoutButtonRegistry"],"sourceRoot":""}