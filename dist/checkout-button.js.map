{"version":3,"file":"checkout-button.js","mappings":"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","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/webpack/runtime/compat get default export","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/webpack/runtime/make namespace object","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/request-sender\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/form-poster\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/data-store\"","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unrecoverable-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"lodash\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-internal-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-payment-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-storefront-error-response.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs/operators\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-hydrate-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/error-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/omit-deep.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/clear-error-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-set.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-plain-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/array-replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-merge.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/merge-or-push.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-flatten.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-with-sorted-keys.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/memoize\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"reselect\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/create-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/with-memoized-combiner.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/create-freeze-proxy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/supported-payment-instruments.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/is-address-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-internal-checkout-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/create-request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-action-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cachable-action-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/is-action-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cache-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-request-sender.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/script-loader\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/throw-error-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/empty-cart-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-or-merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-default-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/errors/checkout-not-available-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-comparator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-changed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-validator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-params.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/cart/cart-source.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/is-spam-protection-succeeded-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/cancellable-promise/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/errors/unexpected-detachment-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/detachment-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/mutation-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/parse-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/is-iframe-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-poster.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/bind-decorator/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-listener.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/append-www.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/payment-human-verification-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/create-spam-protection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-order-data-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-consistency-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/order-tax-provider-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/missing-shipping-method-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/invalid-shipping-address-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/bigpay-client\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/map-to-internal-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/is-billing-address-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-coupon.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-gift-certificate.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/generated/checkout-button-method-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-items.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-cart.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/promotion/map-to-discount-notifications.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/map-to-internal-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"card-validator\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-number-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/map-to-internal-order.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/map-to-internal-shipping-option.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-provider-customer/payment-provider-customer-actions-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-widget-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/errors/update-subscriptions-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/clone-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/default-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/create-data-store-projection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/payment-integration-store-projection-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/set-unique-element-id.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"shallowequal\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-maps.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-resolver.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/selector-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-private.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-error-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-status-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/is-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-supported-locales.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/format-locale.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/get-callback-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/get-environment.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/console-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/noop-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/get-default-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/create-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/resolve-id-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getShippableItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getLineItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/util-types/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/isInternalCheckoutSelectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/errors/amazon-pay-v2-config-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/isWithBuyNowFeatures.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/create-amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/create-amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-verison.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-version-manager.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-scripts-integrity.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/isManageableBraintreeSDKVersion.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/create-bigcommerce-payments-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/bigcommerce-payments-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/create-bigcommerce-payments-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/paypal-sdk-helper.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/get-paypal-messages-styles-from-bnpl-config.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/bigcommerce-payments-paylater-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/create-bigcommerce-payments-paylater-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/create-bigcommerce-payments-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/bigcommerce-payments-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/create-bigcommerce-payments-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/bigcommerce-payments-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/create-bigcommerce-payments-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"query-string\"","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/create-bolt-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@braintree/browser-detection\"","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-invalid-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/paypal.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-credit-card-instrument-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/map-to-braintree-shipping-address-override.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-messages.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/create-braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/braintree-visa-checkout-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/create-braintree-visa-checkout-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/map-to-legacy-billing-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-utils/src/map-to-legacy-shipping-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/is-braintree-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/isUnsupportedBrowserError.ts","webpack://@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/create-braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-initialize-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/types.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-card-network-key.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/create-currency-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/items-require-shipping.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-braintree-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-braintree-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-key.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-error-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-additional-action-processable.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/create-google-pay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-braintree-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-paypal-commerce-payment-method.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/google-pay-bigcommerce-payments-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/create-google-pay-bigcommerce-payments-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-adyenv2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-adyenv3-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-authorizenet-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-authorizenet-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-authorizenet-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-checkoutcom-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-checkoutcom-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-threedsecure-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-checkoutcom-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-cybersource-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-cybersource-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-orbital-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-orbital-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-initialization-data.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/google-pay-stripe-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-token-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/stripe-upe-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripe-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-worldpayaccess-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-worldpayaccess-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-tdonlinemart-gateway.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-td-online-mart-additional-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-tdonlinemart-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/create-paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/get-paypal-messages-styles-from-bnpl-config.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/create-paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/create-paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/create-paypal-express-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/is-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/create-payment-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/request-sender\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/form-poster\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/data-store\");","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message:\n                message ||\n                'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length\n            ? errors.map((message) => ({ code: body.type, message }))\n            : [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors\n        .reduce((result: string[], error) => {\n            if (error) {\n                return [...result, error];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors\n        .reduce((result: string[], error) => {\n            if (error && error.message) {\n                return [...result, error.message];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport {\n    ErrorResponseBody,\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    mapFromInternalErrorResponse,\n    mapFromPaymentErrorResponse,\n    mapFromStorefrontErrorResponse,\n    RequestError,\n    TimeoutError,\n} from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) =>\n            mapFromInternalErrorResponse(response, message),\n        );\n        this.register('storefront', (response, message) =>\n            mapFromStorefrontErrorResponse(response, message),\n        );\n        this.register('payment', (response, message) =>\n            mapFromPaymentErrorResponse(response, message),\n        );\n        this.register('timeout', (response) => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod =\n            this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ? internalType : 'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return (\n            !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string'\n        );\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return (\n            typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number'\n        );\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string,\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [\n            {\n                code: body.code || body.type,\n                message: body.detail || body.title,\n            },\n        ],\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\nimport { LoadFormFieldsAction } from '../form';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    | LoadCheckoutRequestedAction\n    | LoadCheckoutSucceededAction\n    | LoadCheckoutFailedAction\n    | LoadFormFieldsAction\n    | LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    | UpdateCheckoutRequestedAction\n    | UpdateCheckoutSucceededAction\n    | UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport CheckoutInitialState from './checkout-initial-state';\n\nexport enum CheckoutHydrateActionType {\n    HydrateInitialState = 'HYDRATE_INITIAL_STATE',\n}\n\nexport interface CheckoutHydrateAction extends Action<CheckoutInitialState> {\n    type: CheckoutHydrateActionType.HydrateInitialState;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(\n    object: any,\n    predicate: (value: any, key: string) => boolean,\n): any {\n    if (Array.isArray(object)) {\n        return object.map((value) => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(\n            omitBy(object, predicate),\n            (result, value, key) => {\n                result[key] = omitDeep(value, predicate);\n            },\n            {} as { [key: string]: any },\n        );\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<\n    TState extends { [key: string]: any },\n    TAction extends Action,\n>(state: TState, action: TAction): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, (value) => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if (objectA instanceof Date && objectB instanceof Date) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof Date || objectB instanceof Date) {\n            return false;\n        }\n\n        if (objectA instanceof RegExp && objectB instanceof RegExp) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof RegExp || objectB instanceof RegExp) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions,\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!Object.prototype.hasOwnProperty.call(objectB, key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    | UpdateSubscriptionsRequestedAction\n    | UpdateSubscriptionsSucceededAction\n    | UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction = ContinueAsGuestAction | UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    | UpdateBillingAddressRequested\n    | UpdateBillingAddressSucceeded\n    | UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    | ContinueAsGuestRequested\n    | ContinueAsGuestSucceeded\n    | ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K],\n): T {\n    if (\n        object &&\n        Object.prototype.hasOwnProperty.call(object, key) &&\n        isEqual(object[key], value)\n    ) {\n        return object;\n    }\n\n    return {\n        ...(object as any),\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport {\n    CheckoutAction,\n    CheckoutActionType,\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, {\n    BillingAddressErrorsState,\n    BillingAddressStatusesState,\n    DEFAULT_STATE,\n} from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action,\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction | CheckoutHydrateAction,\n): BillingAddress | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return replace(data, action.payload?.checkout.billingAddress);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(errors, 'continueAsGuestError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n            return objectSet(errors, 'continueAsGuestError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isContinuingAsGuest', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(statuses, 'isContinuingAsGuest', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(\n    currentArray: T[] | undefined,\n    newArray: T[],\n    options?: ArrayReplaceOptions,\n): T[];\nfunction arrayReplace<T>(\n    currentArray: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): undefined;\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined;\n\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(objectMerge(currentItem, newItem), currentItem, newItem);\n            }\n\n            return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(arrayReplace(currentItem, newItem), currentItem, newItem);\n        }\n\n        return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (\n        sameAsCurrentCount === newArray.length &&\n        currentArray &&\n        currentArray.length === newArray.length\n    ) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(\n    currentObject: T | undefined,\n    newObject: Partial<T>,\n): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\n\nfunction objectMerge<T extends object>(\n    currentObject?: T,\n    newObject?: Partial<T>,\n): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>).reduce((result, key) => {\n        const currentValue = result[key];\n        const newValue = newObject[key];\n\n        if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n            return objectSet(result, key, objectMerge(currentValue, newValue));\n        }\n\n        if (isArray(currentValue) && isArray(newValue)) {\n            return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n        }\n\n        return objectSet(result, key, newValue as any);\n    }, currentObject);\n}\n\nexport default objectMerge;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction = ApplyCouponAction | RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    | ApplyCouponRequestedAction\n    | ApplyCouponSucceededAction\n    | ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    | RemoveCouponRequestedAction\n    | RemoveCouponSucceededAction\n    | RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction = ApplyGiftCertificateAction | RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    | ApplyGiftCertificateRequestedAction\n    | ApplyGiftCertificateSucceededAction\n    | ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    | RemoveGiftCertificateRequestedAction\n    | RemoveGiftCertificateSucceededAction\n    | RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    | CreateConsignmentsAction\n    | UpdateConsignmentAction\n    | DeleteConsignmentAction\n    | UpdateShippingOptionAction\n    | LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    | CreateConsignmentsRequestedAction\n    | CreateConsignmentsSucceededAction\n    | CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    | UpdateConsignmentRequestedAction\n    | UpdateConsignmentSucceededAction\n    | UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    | DeleteConsignmentRequestedAction\n    | DeleteConsignmentSucceededAction\n    | DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    | UpdateShippingOptionRequestedAction\n    | UpdateShippingOptionSucceededAction\n    | UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    | LoadShippingOptionsRequestedAction\n    | LoadShippingOptionsSucceededAction\n    | LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    | InitializeButtonRequestedAction\n    | InitializeButtonSucceededAction\n    | InitializeButtonFailedAction\n    | LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    | DeinitializeButtonRequestedAction\n    | DeinitializeButtonSucceededAction\n    | DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport {\n    CheckoutAction,\n    CheckoutActionType,\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(state: CartState = DEFAULT_STATE, action: Action): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action:\n        | BillingAddressAction\n        | CheckoutAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction\n        | CheckoutHydrateAction,\n): Cart | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectMerge(data, action.payload && action.payload.cart);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return objectMerge(data, action.payload?.checkout.cart);\n\n        default:\n            return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction,\n): CartStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction,\n): CartErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined;\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined;\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined;\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    | LoadConfigRequestedAction\n    | LoadConfigSucceededAction\n    | LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, {\n    CheckoutButtonDataState,\n    CheckoutButtonErrorsState,\n    CheckoutButtonStatusesState,\n    DEFAULT_STATE,\n} from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonDataState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            if (!action.meta || !action.meta.containerId) {\n                return data;\n            }\n\n            return objectMerge(data, {\n                initializedContainers: {\n                    [action.meta.containerId]: true,\n                },\n            });\n\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(errors, 'initializeError', undefined);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n            return objectSet(errors, 'initializeError', action.payload);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(errors, 'deinitializeError', undefined);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n            return objectSet(errors, 'deinitializeError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n            return objectSet(statuses, 'isInitializing', true);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(statuses, 'isInitializing', false);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n            return objectSet(statuses, 'isDeinitializing', true);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(statuses, 'isDeinitializing', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n    host?: string;\n    locale?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction =\n    | LoadOrderAction\n    | LoadOrderPaymentsAction\n    | SubmitOrderAction\n    | FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction =\n    | LoadOrderPaymentsRequestedAction\n    | LoadOrderPaymentsSucceededAction\n    | LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    | LoadOrderRequestedAction\n    | LoadOrderSucceededAction\n    | LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    | SubmitOrderRequestedAction\n    | SubmitOrderSucceededAction\n    | SubmitOrderFailedAction\n    | LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    | FinalizeOrderRequestedAction\n    | FinalizeOrderSucceededAction\n    | FinalizeOrderFailedAction\n    | LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutHydrateAction, CheckoutHydrateActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action,\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction | CheckoutHydrateAction,\n): Config | undefined {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectMerge(data, action.payload);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return objectMerge(data, action.payload?.config);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction,\n): ConfigErrorsState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction,\n): ConfigStatusesState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConfigActionType.LoadConfigSucceeded:\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport {\n    CheckoutAction,\n    CheckoutActionType,\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action,\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction | CheckoutHydrateAction,\n): Coupon[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return arrayReplace(data, action.payload && action.payload.coupons);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return arrayReplace(data, action.payload?.checkout.coupons);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: CouponErrorsState = {}, action: CouponAction): CouponErrorsState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n        case CouponActionType.ApplyCouponSucceeded:\n            return objectSet(errors, 'applyCouponError', undefined);\n\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(errors, 'applyCouponError', action.payload);\n\n        case CouponActionType.RemoveCouponRequested:\n        case CouponActionType.RemoveCouponSucceeded:\n            return objectSet(errors, 'removeCouponError', undefined);\n\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(errors, 'removeCouponError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction,\n): CouponStatusesState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n            return objectSet(statuses, 'isApplyingCoupon', true);\n\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(statuses, 'isApplyingCoupon', false);\n\n        case CouponActionType.RemoveCouponRequested:\n            return objectSet(statuses, 'isRemovingCoupon', true);\n\n        case CouponActionType.RemoveCouponSucceeded:\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(statuses, 'isRemovingCoupon', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\nimport { SpamProtectionAction } from '../spam-protection';\n\nimport Customer from './customer';\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n\n    CreateCustomerRequested = 'CREATE_CUSTOMER_REQUESTED',\n    CreateCustomerSucceeded = 'CREATE_CUSTOMER_SUCCEEDED',\n    CreateCustomerFailed = 'CREATE_CUSTOMER_FAILED',\n\n    CreateCustomerAddressRequested = 'CREATE_CUSTOMER_ADDRESS_REQUESTED',\n    CreateCustomerAddressSucceeded = 'CREATE_CUSTOMER_ADDRESS_SUCCEEDED',\n    CreateCustomerAddressFailed = 'CREATE_CUSTOMER_ADDRESS_FAILED',\n\n    StripeLinkAuthenticated = 'STRIPE_LINK_AUTHENTICATED',\n}\n\nexport type CustomerAction =\n    | SignInCustomerAction\n    | SignOutCustomerAction\n    | CreateCustomerAddressAction\n    | CreateCustomerAction;\n\nexport type CreateCustomerAction =\n    | CreateCustomerRequestedAction\n    | CreateCustomerSucceededAction\n    | CreateCustomerFailedAction\n    | SpamProtectionAction\n    | LoadCheckoutAction;\n\nexport type CreateCustomerAddressAction =\n    | CreateCustomerAddressRequestedAction\n    | CreateCustomerAddressSucceededAction\n    | CreateCustomerAddressFailedAction\n    | LoadCheckoutAction;\n\nexport type SignInCustomerAction =\n    | SignInCustomerRequestedAction\n    | SignInCustomerSucceededAction\n    | SignInCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    | SignOutCustomerRequestedAction\n    | SignOutCustomerSucceededAction\n    | SignOutCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface StripeLinkAuthenticatedAction extends Action {\n    type: CustomerActionType.StripeLinkAuthenticated;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n\nexport interface CreateCustomerRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerRequested;\n}\n\nexport interface CreateCustomerSucceededAction extends Action {\n    type: CustomerActionType.CreateCustomerSucceeded;\n}\n\nexport interface CreateCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerFailed;\n}\n\nexport interface CreateCustomerAddressRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerAddressRequested;\n}\n\nexport interface CreateCustomerAddressSucceededAction extends Action<Customer> {\n    type: CustomerActionType.CreateCustomerAddressSucceeded;\n}\n\nexport interface CreateCustomerAddressFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerAddressFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport {\n    CheckoutAction,\n    CheckoutActionType,\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, {\n    DEFAULT_STATE,\n    GiftCertificateErrorsState,\n    GiftCertificateStatusesState,\n} from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action,\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action:\n        | CheckoutAction\n        | GiftCertificateAction\n        | ConsignmentAction\n        | CouponAction\n        | CheckoutHydrateAction,\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return arrayReplace(data, action.payload?.checkout.giftCertificates);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction,\n): GiftCertificateErrorsState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n            return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction,\n): GiftCertificateStatusesState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n            return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n            return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n    statuses: CustomerStatusesState;\n    errors: CustomerErrorsState;\n}\n\nexport interface CustomerErrorsState {\n    createError?: Error;\n    createAddressError?: Error;\n}\n\nexport interface CustomerStatusesState {\n    isCreating?: boolean;\n    isCreatingAddress?: boolean;\n}\n\nexport const DEFAULT_STATE: CustomerState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    ExecutePaymentMethodCheckoutFailed = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_FAILED',\n    ExecutePaymentMethodCheckoutRequested = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_REQUESTED',\n    ExecutePaymentMethodCheckoutSucceeded = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    | CustomerStrategySignInAction\n    | CustomerStrategySignOutAction\n    | CustomerStrategyExecutePaymentMethodCheckoutAction\n    | CustomerStrategyInitializeAction\n    | CustomerStrategyDeinitializeAction\n    | CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    | SignInRequestedAction\n    | SignInSucceededAction\n    | SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    | SignOutRequestedAction\n    | SignOutSucceededAction\n    | SignOutFailedAction;\n\nexport type CustomerStrategyExecutePaymentMethodCheckoutAction =\n    | ExecutePaymentMethodCheckoutRequestedAction\n    | ExecutePaymentMethodCheckoutSucceededAction\n    | ExecutePaymentMethodCheckoutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface ExecutePaymentMethodCheckoutRequestedAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested;\n}\n\nexport interface ExecutePaymentMethodCheckoutSucceededAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded;\n}\n\nexport interface ExecutePaymentMethodCheckoutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport {\n    CheckoutAction,\n    CheckoutActionType,\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Customer from './customer';\nimport {\n    CustomerAction,\n    CustomerActionType,\n    StripeLinkAuthenticatedAction,\n} from './customer-actions';\nimport CustomerState, {\n    CustomerErrorsState,\n    CustomerStatusesState,\n    DEFAULT_STATE,\n} from './customer-state';\n\ntype ReducerActionType =\n    | CheckoutAction\n    | ContinueAsGuestAction\n    | CustomerAction\n    | StripeLinkAuthenticatedAction\n    | CheckoutHydrateAction;\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: ReducerActionType,\n): CustomerState {\n    const reducer = combineReducers<CustomerState, ReducerActionType>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Customer | undefined, action: ReducerActionType): Customer | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectMerge(data, action.payload && action.payload.customer);\n\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectMerge(data, action.payload);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return objectMerge(data, action.payload?.checkout.customer);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CustomerErrorsState = DEFAULT_STATE.errors,\n    action: ReducerActionType,\n): CustomerErrorsState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case CustomerActionType.CreateCustomerFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(errors, 'createAddressError', undefined);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n            return objectSet(errors, 'createAddressError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStatusesState = DEFAULT_STATE.statuses,\n    action: ReducerActionType,\n): CustomerStatusesState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case CustomerActionType.CreateCustomerFailed:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(statuses, 'isCreating', false);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n            return objectSet(statuses, 'isCreatingAddress', true);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(statuses, 'isCreatingAddress', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeErrors?: { [key: string]: Error };\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    executePaymentMethodCheckoutError?: Error;\n    executePaymentMethodCheckoutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isExecutingPaymentMethodCheckout?: boolean;\n    executePaymentMethodCheckoutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Extension } from './extension';\n\nexport enum ExtensionActionType {\n    LoadExtensionsRequested = 'LOAD_EXTENSIONS_REQUESTED',\n    LoadExtensionsSucceeded = 'LOAD_EXTENSIONS_SUCCEEDED',\n    LoadExtensionsFailed = 'LOAD_EXTENSIONS_FAILED',\n    RenderExtensionRequested = 'RENDER_EXTENSION_REQUESTED',\n    RenderExtensionSucceeded = 'RENDER_EXTENSION_SUCCEEDED',\n    RenderExtensionFailed = 'RENDER_EXTENSION_FAILED',\n}\n\nexport type ExtensionAction =\n    | LoadExtensionsRequestedAction\n    | LoadExtensionsSucceededAction\n    | LoadExtensionsFailedAction\n    | RenderExtensionRequestedAction\n    | RenderExtensionSucceededAction\n    | RenderExtensionFailedAction;\n\nexport interface LoadExtensionsRequestedAction extends Action {\n    type: ExtensionActionType.LoadExtensionsRequested;\n}\n\nexport interface LoadExtensionsSucceededAction extends Action<Extension[]> {\n    type: ExtensionActionType.LoadExtensionsSucceeded;\n}\n\nexport interface LoadExtensionsFailedAction extends Action<Error> {\n    type: ExtensionActionType.LoadExtensionsFailed;\n}\n\nexport interface RenderExtensionRequestedAction extends Action {\n    type: ExtensionActionType.RenderExtensionRequested;\n}\n\nexport interface RenderExtensionSucceededAction extends Action {\n    type: ExtensionActionType.RenderExtensionSucceeded;\n}\n\nexport interface RenderExtensionFailedAction extends Action<Error> {\n    type: ExtensionActionType.RenderExtensionFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, {\n    CustomerStrategyDataState,\n    CustomerStrategyErrorsState,\n    CustomerStrategyStatusesState,\n    DEFAULT_STATE,\n} from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action,\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction,\n): CustomerStrategyDataState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction,\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeErrors: { ...errors.initializeErrors },\n                initializeMethodId: errors.initializeMethodId\n                    ? errors.initializeMethodId\n                    : undefined,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeErrors: {\n                    ...errors.initializeErrors,\n                    [action.meta && action.meta.methodId]: action.payload,\n                },\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(errors, {\n                signInError: undefined,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n            return objectMerge(errors, {\n                signInError: action.payload,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(errors, {\n                signOutError: undefined,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n            return objectMerge(errors, {\n                signOutError: action.payload,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: undefined,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: action.payload,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction,\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n            return objectMerge(statuses, {\n                isSigningIn: true,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(statuses, {\n                isSigningIn: false,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n            return objectMerge(statuses, {\n                isSigningOut: true,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(statuses, {\n                isSigningOut: false,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: true,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: false,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { Extension } from './extension';\n\nexport interface ExtensionState {\n    data?: Extension[];\n    errors: ExtensionErrorsState;\n    statuses: ExtensionStatusesState;\n}\n\nexport interface ExtensionErrorsState {\n    loadError?: Error;\n    renderError?: Error;\n}\n\nexport interface ExtensionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ExtensionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { FormFields } from './form-field';\n\nexport enum FormFieldsActionType {\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\n}\n\nexport type LoadFormFieldsAction =\n    | LoadFormFieldsRequestedAction\n    | LoadFormFieldsSucceededAction\n    | LoadFormFieldsFailedAction;\n\nexport interface LoadFormFieldsRequestedAction extends Action {\n    type: FormFieldsActionType.LoadFormFieldsRequested;\n}\n\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\n}\n\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\n    type: FormFieldsActionType.LoadFormFieldsFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport {\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout/checkout-hydrate-actions';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport { Extension } from './extension';\nimport { ExtensionAction, ExtensionActionType } from './extension-actions';\nimport {\n    DEFAULT_STATE,\n    ExtensionErrorsState,\n    ExtensionState,\n    ExtensionStatusesState,\n} from './extension-state';\n\nexport function extensionReducer(\n    state: ExtensionState = DEFAULT_STATE,\n    action: Action,\n): ExtensionState {\n    const reducer = combineReducers<ExtensionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Extension[] | undefined,\n    action: ExtensionAction | CheckoutHydrateAction,\n): Extension[] | undefined {\n    if (action.type === ExtensionActionType.LoadExtensionsSucceeded) {\n        return arrayReplace(data, action.payload);\n    }\n\n    if (action.type === CheckoutHydrateActionType.HydrateInitialState) {\n        return arrayReplace(data, action.payload?.extensions);\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ExtensionErrorsState = DEFAULT_STATE.errors,\n    action: ExtensionAction,\n): ExtensionErrorsState {\n    switch (action.type) {\n        case ExtensionActionType.LoadExtensionsRequested:\n        case ExtensionActionType.LoadExtensionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ExtensionActionType.RenderExtensionRequested:\n        case ExtensionActionType.RenderExtensionSucceeded:\n            return objectSet(errors, 'renderError', undefined);\n\n        case ExtensionActionType.LoadExtensionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case ExtensionActionType.RenderExtensionFailed:\n            return objectSet(errors, 'renderError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ExtensionStatusesState = DEFAULT_STATE.statuses,\n    action: ExtensionAction,\n): ExtensionStatusesState {\n    switch (action.type) {\n        case ExtensionActionType.LoadExtensionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ExtensionActionType.LoadExtensionsSucceeded:\n        case ExtensionActionType.LoadExtensionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { FormFields } from './form-field';\n\nexport default interface FormFieldsState {\n    data?: FormFields;\n    errors: FormFieldsErrorState;\n    statuses: FormFieldsStatusesState;\n}\n\nexport interface FormFieldsErrorState {\n    loadError?: Error;\n}\n\nexport interface FormFieldsStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: FormFieldsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    | LoadCountriesRequestedAction\n    | LoadCountriesSucceededAction\n    | LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport {\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout/checkout-hydrate-actions';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { FormFields } from './form-field';\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsState, {\n    DEFAULT_STATE,\n    FormFieldsErrorState,\n    FormFieldsStatusesState,\n} from './form-fields-state';\n\nexport default function formFieldsReducer(\n    state: FormFieldsState = DEFAULT_STATE,\n    action: Action,\n): FormFieldsState {\n    const reducer = combineReducers<FormFieldsState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: FormFields | undefined,\n    action: LoadFormFieldsAction | CheckoutHydrateAction,\n): FormFields | undefined {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectMerge(data, action.payload);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return objectMerge(data, action.payload?.formFields);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\n    action: LoadFormFieldsAction,\n): FormFieldsErrorState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\n    action: LoadFormFieldsAction,\n): FormFieldsStatusesState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, {\n    CountryErrorsState,\n    CountryStatusesState,\n    DEFAULT_STATE,\n} from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action,\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction,\n): CountryErrorsState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n        case CountryActionType.LoadCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction,\n): CountryStatusesState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CountryActionType.LoadCountriesSucceeded:\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, {\n    DEFAULT_STATE,\n    OrderDataState,\n    OrderErrorsState,\n    OrderMetaState,\n    OrderStatusesState,\n} from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action,\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction,\n): OrderDataState | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, ['billingAddress', 'coupons']),\n            ) as OrderDataState;\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction,\n): OrderMetaState | undefined {\n    switch (action.type) {\n        case OrderActionType.FinalizeOrderSucceeded:\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectMerge(meta, {\n                ...action.meta,\n                callbackUrl: action.payload && action.payload.order.callbackUrl,\n                orderToken: action.payload && action.payload.order.token,\n                payment: action.payload && action.payload.order && action.payload.order.payment,\n            });\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction,\n): OrderErrorsState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction,\n): OrderStatusesState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Address } from '../address';\n\nexport interface OrderBillingAddress extends Address {\n    email?: string;\n}\n\nexport default interface OrderBillingAddressState {\n    data?: OrderBillingAddress;\n}\n\nexport const DEFAULT_STATE: OrderBillingAddressState = {};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction | InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    | SubmitPaymentRequestedAction\n    | SubmitPaymentSucceededAction\n    | SubmitPaymentFailedAction\n    | LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    | InitializeOffsitePaymentRequestedAction\n    | InitializeOffsitePaymentSucceededAction\n    | InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { Action, combineReducers } from '@bigcommerce/data-store';\n\nimport { replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default function orderBillingAddressReducer(\n    state: OrderBillingAddressState = DEFAULT_STATE,\n    action: Action,\n): OrderBillingAddressState {\n    const reducer = combineReducers<OrderBillingAddressState>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderBillingAddress | undefined,\n    action: OrderAction,\n): OrderBillingAddress | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(\n    state: PaymentState = {},\n    action: PaymentAction,\n): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentResponseBody | undefined,\n    action: PaymentAction,\n): PaymentResponseBody | undefined {\n    switch (action.type) {\n        case PaymentActionType.SubmitPaymentSucceeded:\n            return action.payload;\n\n        default:\n            return data;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    | LoadPaymentMethodRequestedAction\n    | LoadPaymentMethodSucceededAction\n    | LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    | LoadPaymentMethodsRequestedAction\n    | LoadPaymentMethodsSucceededAction\n    | LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction\n    extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    | PaymentStrategyExecuteAction\n    | PaymentStrategyFinalizeAction\n    | PaymentStrategyInitializeAction\n    | PaymentStrategyDeinitializeAction\n    | PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    | FinalizeRequestedAction\n    | FinalizeSucceededAction\n    | FinalizeFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, {\n    DEFAULT_STATE,\n    PaymentMethodErrorsState,\n    PaymentMethodStatusesState,\n} from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action,\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction,\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return mergeOrPush(\n                data || [],\n                action.payload,\n                action.payload && {\n                    id: action.payload.id,\n                    gateway: action.payload.gateway,\n                },\n            );\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return arrayReplace(data, action.payload, {\n                matchObject: (methodA, methodB) =>\n                    methodA.id === methodB.id && methodA.gateway === methodB.gateway,\n            });\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction,\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction,\n): PaymentMethodErrorsState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return objectMerge(errors, {\n                loadMethodId: undefined,\n                loadMethodError: undefined,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(errors, {\n                loadMethodId: action.meta.methodId,\n                loadMethodError: action.payload,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction,\n): PaymentMethodStatusesState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n            return objectMerge(statuses, {\n                isLoadingMethod: true,\n                loadMethodId: action.meta.methodId,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(statuses, {\n                isLoadingMethod: false,\n                loadMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(array: T[], item?: T, predicate?: ValueKeyIteratee<T>): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick<T>(item, 'id');\n    const derivedPredicate: any =\n        typeof predicate === 'object' ? pickBy<T>(predicate) : predicate || defaultPredicate;\n    const index = findIndex(array, derivedPredicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] =\n            isPlainObject(existingItem) && isPlainObject(item)\n                ? objectMerge(existingItem, item)\n                : item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum PaymentProviderCustomerType {\n    UpdatePaymentProviderCustomer = 'UPDATE_PAYMENT_PROVIDER_CUSTOMER',\n}\n\nexport type PaymentProviderCustomerAction = UpdatePaymentProviderCustomerAction;\n\nexport interface UpdatePaymentProviderCustomerAction extends Action {\n    type: PaymentProviderCustomerType.UpdatePaymentProviderCustomer;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, {\n    DEFAULT_STATE,\n    PaymentStrategyDataState,\n    PaymentStrategyErrorsState,\n    PaymentStrategyStatusesState,\n} from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action,\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction,\n): PaymentStrategyDataState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeSucceeded: {\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n                const initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n\n                return objectMerge(data, {\n                    [initializeMethodId]: {\n                        isInitialized: true,\n                    },\n                });\n            }\n\n            break;\n        }\n\n        case PaymentStrategyActionType.DeinitializeSucceeded: {\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n                const initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n\n                return objectMerge(data, {\n                    [initializeMethodId]: {\n                        isInitialized: false,\n                    },\n                });\n            }\n        }\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction,\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.InitializeFailed: {\n            let initializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.DeinitializeRequested:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeFailed: {\n            let deinitializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                deinitializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.ExecuteRequested:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(errors, {\n                executeError: undefined,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n            return objectMerge(errors, {\n                executeError: action.payload,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(errors, {\n                finalizeError: undefined,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n            return objectMerge(errors, {\n                finalizeError: action.payload,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction,\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested: {\n            let initializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.InitializeFailed:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeRequested: {\n            let deinitializeMethodId = action.meta && action.meta.methodId;\n\n            if (action.meta) {\n                const { methodId, gatewayId } = action.meta;\n\n                deinitializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\n            }\n\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId,\n            });\n        }\n\n        case PaymentStrategyActionType.DeinitializeFailed:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteRequested:\n            return objectMerge(statuses, {\n                isExecuting: true,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(statuses, {\n                isExecuting: false,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n            return objectMerge(statuses, {\n                isFinalizing: true,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(statuses, {\n                isFinalizing: false,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { PaymentProviderCustomer } from './payment-provider-customer';\n\nexport default interface PaymentProviderCustomerState {\n    data: PaymentProviderCustomer;\n}\n\nexport const DEFAULT_STATE = {\n    data: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction = LoadInstrumentsAction | DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    | LoadInstrumentsRequestedAction\n    | LoadInstrumentsSucceededAction\n    | LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    | DeleteInstrumentRequestedAction\n    | DeleteInstrumentSucceededAction\n    | DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentProviderCustomer } from './payment-provider-customer';\nimport {\n    PaymentProviderCustomerType,\n    UpdatePaymentProviderCustomerAction,\n} from './payment-provider-customer-actions';\nimport PaymentProviderCustomerState, { DEFAULT_STATE } from './payment-provider-customer-state';\n\ntype ReducerActionType = UpdatePaymentProviderCustomerAction;\n\nexport default function paymentProviderCustomerReducer(\n    state: PaymentProviderCustomerState = DEFAULT_STATE,\n    action: ReducerActionType,\n): PaymentProviderCustomerState {\n    const reducer = combineReducers<PaymentProviderCustomerState, ReducerActionType>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentProviderCustomer = DEFAULT_STATE.data,\n    action: ReducerActionType,\n): PaymentProviderCustomer {\n    switch (action.type) {\n        case PaymentProviderCustomerType.UpdatePaymentProviderCustomer:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    ForgetCheckoutRemoteCustomerRequested = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_REQUESTED',\n    ForgetCheckoutRemoteCustomerSucceeded = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_SUCCEEDED',\n    ForgetCheckoutRemoteCustomerFailed = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_FAILED',\n\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction =\n    | ForgetCheckoutRemoteCustomerAction\n    | InitializeRemoteBillingAction\n    | InitializeRemoteShippingAction\n    | InitializeRemotePaymentAction\n    | SignOutRemoteCustomerAction\n    | LoadRemoteSettingsAction\n    | UpdateRemoteCheckoutAction;\n\nexport type ForgetCheckoutRemoteCustomerAction =\n    | ForgetCheckoutRemoteCustomerRequestedAction\n    | ForgetCheckoutRemoteCustomerSucceededAction\n    | ForgetCheckoutRemoteCustomerFailedAction;\n\nexport interface ForgetCheckoutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested;\n}\n\nexport interface ForgetCheckoutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded;\n}\n\nexport interface ForgetCheckoutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed;\n}\n\nexport type InitializeRemoteBillingAction =\n    | InitializeRemoteBillingSucceededAction\n    | InitializeRemoteBillingFailedAction\n    | InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction =\n    | InitializeRemoteShippingSucceededAction\n    | InitializeRemoteShippingFailedAction\n    | InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction =\n    | InitializeRemotePaymentSucceededAction\n    | InitializeRemotePaymentFailedAction\n    | InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction =\n    | SignOutRemoteCustomerSucceededAction\n    | SignOutRemoteCustomerFailedAction\n    | SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction =\n    | LoadRemoteSettingsSucceededAction\n    | LoadRemoteSettingsRequestedAction\n    | LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, {\n    DEFAULT_STATE,\n    InstrumentErrorState,\n    InstrumentMeta,\n    InstrumentStatusState,\n} from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action,\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction,\n): PaymentInstrument[] {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return arrayReplace(data, (action.payload && action.payload.vaultedInstruments) || []);\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction,\n): InstrumentMeta | undefined {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction,\n): InstrumentErrorState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(errors, {\n                deleteError: undefined,\n                failedInstrument: undefined,\n            });\n\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(errors, {\n                deleteError: action.payload,\n                failedInstrument: action.meta.instrumentId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction,\n): InstrumentStatusState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n            return objectMerge(statuses, {\n                isDeleting: true,\n                deletingInstrument: action.meta.instrumentId,\n            });\n\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(statuses, {\n                isDeleting: false,\n                deletingInstrument: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction,\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: RemoteCheckout, action: RemoteCheckoutAction): RemoteCheckout {\n    switch (action.type) {\n        case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n            return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n        case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n            return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n        case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n            return objectSet(data, 'settings', action.payload);\n\n        case RemoteCheckoutActionType.UpdateRemoteCheckout:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport {\n    CheckoutAction,\n    CheckoutActionType,\n    CheckoutHydrateAction,\n    CheckoutHydrateActionType,\n} from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, {\n    ConsignmentErrorsState,\n    ConsignmentStatusesState,\n    DEFAULT_STATE,\n} from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action,\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action:\n        | ConsignmentAction\n        | CheckoutAction\n        | CouponAction\n        | CustomerAction\n        | CheckoutHydrateAction,\n): Consignment[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n            return arrayReplace(data, action.payload && action.payload.consignments);\n\n        case CustomerActionType.SignOutCustomerSucceeded:\n            return arrayReplace(data, []);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return arrayReplace(data, action.payload?.checkout.consignments);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(statuses, 'isCreating', false);\n\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        default:\n            return statuses;\n    }\n}\n","/**\n * Takes a nested object and flattens it.\n */\nexport default function objectFlatten(\n    object: { [key: string]: any },\n    parent?: string,\n): { [key: string]: any } {\n    const flattened: { [key: string]: any } = {};\n\n    Object.keys(object).forEach((key: string) => {\n        const value = object[key];\n        const keyString = parent ? `${parent}.${key}` : key;\n\n        if (typeof value === 'object') {\n            Object.assign(flattened, objectFlatten(value, keyString));\n        } else {\n            flattened[keyString] = value;\n        }\n    });\n\n    return flattened;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { PickupOptionMeta, PickupOptionResult } from './pickup-option';\n\nexport enum PickupOptionActionType {\n    LoadPickupOptionsRequested = 'LOAD_PICKUP_OPTIONS_REQUESTED',\n    LoadPickupOptionsSucceeded = 'LOAD_PICKUP_OPTIONS_SUCCEEDED',\n    LoadPickupOptionsFailed = 'LOAD_PICKUP_OPTIONS_FAILED',\n}\n\nexport type LoadPickupOptionsAction =\n    | PickupOptionRequestedAction\n    | LoadPickupOptionsSucceededAction\n    | LoadPickupOptionsFailedAction;\n\nexport interface PickupOptionRequestedAction extends Action {\n    type: PickupOptionActionType.LoadPickupOptionsRequested;\n}\n\nexport interface LoadPickupOptionsSucceededAction\n    extends Action<PickupOptionResult[], PickupOptionMeta> {\n    type: PickupOptionActionType.LoadPickupOptionsSucceeded;\n}\n\nexport interface LoadPickupOptionsFailedAction extends Action<Error> {\n    type: PickupOptionActionType.LoadPickupOptionsFailed;\n}\n","export default function objectWithSortedKeys(object: { [key: string]: any }) {\n    const keys = Object.keys(object);\n    const sortedKeys = keys.sort();\n\n    const sortedArray = sortedKeys.reduce(\n        (previous, current) => ({\n            ...previous,\n            [current]: object[current],\n        }),\n        {},\n    );\n\n    return sortedArray;\n}\n","import { PickupOptionQueryMap } from './pickup-option';\n\nexport default interface PickupOptionState {\n    data?: PickupOptionQueryMap;\n    errors: PickupOptionErrorsState;\n    statuses: PickupOptionStatusesState;\n}\n\nexport interface PickupOptionErrorsState {\n    loadError?: Error;\n}\n\nexport interface PickupOptionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: PickupOptionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction =\n    | LoadShippingCountriesRequestedAction\n    | LoadShippingCountriesSucceededAction\n    | LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectFlatten, objectSet, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionQueryMap } from './pickup-option';\nimport { LoadPickupOptionsAction, PickupOptionActionType } from './pickup-option-actions';\nimport PickupOptionState, {\n    DEFAULT_STATE,\n    PickupOptionErrorsState,\n    PickupOptionStatusesState,\n} from './pickup-option-state';\n\nexport default function pickupOptionReducer(\n    state: PickupOptionState = DEFAULT_STATE,\n    action: Action,\n): PickupOptionState {\n    const reducer = combineReducers<PickupOptionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PickupOptionQueryMap | undefined,\n    action: LoadPickupOptionsAction,\n): PickupOptionQueryMap | undefined {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            if (action.meta) {\n                const optionQuery = {\n                    consignmentId: action.meta.consignmentId,\n                    searchArea: action.meta.searchArea,\n                };\n                const flattenedMeta = objectFlatten(optionQuery);\n                const sortedflattenedMeta = objectWithSortedKeys(flattenedMeta);\n                const keyString = btoa(`${JSON.stringify(sortedflattenedMeta)}`);\n\n                return objectSet(data, keyString, action.payload);\n            }\n\n            break;\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: PickupOptionErrorsState = DEFAULT_STATE.errors, action: Action) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PickupOptionStatusesState = DEFAULT_STATE.statuses,\n    action: Action,\n) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    | ShippingStrategyUpdateAddressAction\n    | ShippingStrategySelectOptionAction\n    | ShippingStrategyInitializeAction\n    | ShippingStrategyDeinitializeAction\n    | ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    | UpdateAddressRequestedAction\n    | UpdateAddressSucceededAction\n    | UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    | SelectOptionRequestedAction\n    | SelectOptionSucceededAction\n    | SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, {\n    DEFAULT_STATE,\n    ShippingCountryErrorsState,\n    ShippingCountryStatusesState,\n} from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action,\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction,\n): ShippingCountryErrorsState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction,\n): ShippingCountryStatusesState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    | SendSignInEmailRequestedAction\n    | SendSignInEmailSucceededAction\n    | SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, {\n    DEFAULT_STATE,\n    ShippingStrategyDataState,\n    ShippingStrategyErrorsState,\n    ShippingStrategyStatusesState,\n} from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action,\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction,\n): ShippingStrategyDataState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction,\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(errors, {\n                updateAddressError: undefined,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n            return objectMerge(errors, {\n                updateAddressError: action.payload,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(errors, {\n                selectOptionError: undefined,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n            return objectMerge(errors, {\n                selectOptionError: action.payload,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction,\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n            return objectMerge(statuses, {\n                isUpdatingAddress: true,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(statuses, {\n                isUpdatingAddress: false,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n            return objectMerge(statuses, {\n                isSelectingOption: true,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(statuses, {\n                isSelectingOption: false,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction = ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    | ApplyStoreCreditRequestedAction\n    | ApplyStoreCreditSucceededAction\n    | ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, {\n    DEFAULT_STATE,\n    SignInEmailErrorsState,\n    SignInEmailStatusesState,\n} from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action,\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction,\n): SignInEmail | undefined {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction,\n): SignInEmailErrorsState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(errors, 'sendError', undefined);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n            return objectSet(errors, 'sendError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction,\n): SignInEmailStatusesState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n            return objectSet(statuses, 'isSending', true);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(statuses, 'isSending', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, {\n    StoreCreditErrorsState,\n    StoreCreditStatusesState,\n} from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action,\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction,\n): StoreCreditErrorsState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n            return objectSet(errors, 'applyError', undefined);\n\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(errors, 'applyError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction,\n): StoreCreditStatusesState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n            return objectSet(statuses, 'isApplying', true);\n\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(statuses, 'isApplying', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    VerifyCheckoutRequested = 'SPAM_PROTECTION_CHECKOUT_VERIFY_REQUESTED',\n    VerifyCheckoutSucceeded = 'SPAM_PROTECTION_CHECKOUT_VERIFY_SUCCEEDED',\n    VerifyCheckoutFailed = 'SPAM_PROTECTION_CHECKOUT_VERIFY_FAILED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | CheckoutVerifyRequestedAction\n    | CheckoutVerifyFailedAction\n    | CheckoutVerifySucceededAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<{ token: string }> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n\nexport interface CheckoutVerifyRequestedAction extends Action {\n    type: SpamProtectionActionType.VerifyCheckoutRequested;\n}\n\nexport interface CheckoutVerifyFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.VerifyCheckoutFailed;\n}\n\nexport interface CheckoutVerifySucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.VerifyCheckoutSucceeded;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, {\n    DEFAULT_STATE,\n    SubscriptionsErrorsState,\n    SubscriptionsStatusesState,\n} from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action,\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsErrorsState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsStatusesState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<\n    Checkout,\n    'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'\n>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, {\n    CheckoutDataState,\n    CheckoutErrorsState,\n    CheckoutStatusesState,\n    DEFAULT_STATE,\n} from './checkout-state';\nimport { CheckoutHydrateAction, CheckoutHydrateActionType } from './checkout-hydrate-actions';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action,\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action:\n        | CheckoutAction\n        | BillingAddressAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction\n        | OrderAction\n        | SpamProtectionAction\n        | StoreCreditAction\n        | CheckoutHydrateAction,\n): CheckoutDataState | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case SpamProtectionActionType.VerifyCheckoutSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, [\n                    'billingAddress',\n                    'cart',\n                    'consignments',\n                    'customer',\n                    'coupons',\n                    'giftCertificates',\n                ]),\n            ) as CheckoutDataState;\n\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectSet(data, 'orderId', action.payload && action.payload.order.orderId);\n\n        case CheckoutHydrateActionType.HydrateInitialState:\n            return objectMerge(\n                data,\n                omit(action.payload?.checkout, [\n                    'billingAddress',\n                    'cart',\n                    'consignments',\n                    'customer',\n                    'coupons',\n                    'giftCertificates',\n                ]),\n            ) as CheckoutDataState;\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction,\n): CheckoutErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction,\n): CheckoutStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case SpamProtectionActionType.ExecuteRequested:\n            return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n        case SpamProtectionActionType.ExecuteFailed:\n        case SpamProtectionActionType.ExecuteSucceeded:\n            return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n        default:\n            return statuses;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/memoize\");","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentProviderCustomer,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingPaymentProviderCustomer:\n            return 'Unable to proceed because payment provider customer is unavailable.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"reselect\");","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T,\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(\n        target,\n        (target, name) =>\n            (...args: any[]) =>\n                deepFreeze(target[name].call(target, ...args)),\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(\n    map: TMap,\n): TMap {\n    return Object.keys(map).reduce((result, key) => {\n        result[key] = createFreezeProxy(map[key]);\n\n        return result;\n    }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(\n    target: T,\n    trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any,\n): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, (prototype) => {\n        Object.getOwnPropertyNames(prototype).forEach((name) => {\n            if (\n                name === 'constructor' ||\n                typeof proxy[name] !== 'function' ||\n                name.charAt(0) === '_'\n            ) {\n                return;\n            }\n\n            proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n        });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'mollie.credit_card': {\n        provider: 'mollie',\n        method: 'credit_card',\n    },\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv3.scheme': {\n        provider: 'adyenv3',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    barclays: {\n        provider: 'barclays',\n        method: 'credit_card',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    braintreeach: {\n        provider: 'braintree',\n        method: 'ach',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.credit_card': {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.card': {\n        provider: 'checkoutcom',\n        method: 'card',\n    },\n    sagepay: {\n        provider: 'sagepay',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    'stripeupe.card': {\n        provider: 'stripeupe',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    cybersourcev2: {\n        provider: 'cybersourcev2',\n        method: 'credit_card',\n    },\n    bnz: {\n        provider: 'bnz',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    'bluesnapdirect.credit_card': {\n        provider: 'bluesnapdirect',\n        method: 'credit_card',\n    },\n    'bluesnapdirect.ecp': {\n        provider: 'bluesnapdirect',\n        method: 'ecp',\n    },\n    'bluesnapdirect.sepa_direct_debit': {\n        provider: 'bluesnapdirect',\n        method: 'sepa_direct_debit',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n    moneris: {\n        provider: 'moneris',\n        method: 'credit_card',\n    },\n    cba_mpgs: {\n        provider: 'cba_mpgs',\n        method: 'credit_card',\n    },\n    worldpayaccess: {\n        provider: 'worldpayaccess',\n        method: 'credit_card',\n    },\n    squarev2: {\n        provider: 'squarev2',\n        method: 'credit_card',\n    },\n    paypalcommercecreditcards: {\n        provider: 'paypalcommerce',\n        method: 'credit_card',\n    },\n    paypalcommerce: {\n        provider: 'paypalcommerce',\n        method: 'paypal',\n    },\n    bigcommerce_payments_creditcards: {\n        provider: 'bigcommerce_payments',\n        method: 'credit_card',\n    },\n    bigcommerce_payments: {\n        provider: 'bigcommerce_payments',\n        method: 'paypal',\n    },\n    tdonlinemart: {\n        provider: 'tdonlinemart',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(\n    addressA: Partial<Address>,\n    addressB: Partial<Address>,\n): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy(\n        {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            company: address.company,\n            address1: address.address1,\n            address2: address.address2,\n            city: address.city,\n            stateOrProvince: address.stateOrProvince,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n            phone: address.phone,\n            customFields: address.customFields,\n        },\n        identity,\n    );\n}\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createExtensionSelectorFactory } from '../extension';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createOrderBillingAddressSelectorFactory } from '../order-billing-address';\nimport {\n    createPaymentMethodSelectorFactory,\n    createPaymentSelectorFactory,\n    createPaymentStrategySelectorFactory,\n} from '../payment';\nimport { createPaymentProviderCustomerSelectorFactory } from '../payment-provider-customer';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport {\n    createConsignmentSelectorFactory,\n    createPickupOptionSelectorFactory,\n    createShippingAddressSelectorFactory,\n    createShippingCountrySelectorFactory,\n    createShippingStrategySelectorFactory,\n} from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createPickupOptionSelector = createPickupOptionSelectorFactory();\n    const createPaymentProviderCustomerSelector = createPaymentProviderCustomerSelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createOrderBillingAddressSelector = createOrderBillingAddressSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n    const createExtensionSelector = createExtensionSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const extensions = createExtensionSelector(state.extensions);\n        const form = createFormSelector(state.formFields);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const orderBillingAddress = createOrderBillingAddressSelector(state.orderBillingAddress);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentProviderCustomer = createPaymentProviderCustomerSelector(\n            state.paymentProviderCustomer,\n        );\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const pickupOptions = createPickupOptionSelector(state.pickupOptions);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(\n            state.checkout,\n            billingAddress,\n            cart,\n            consignments,\n            coupons,\n            customer,\n            giftCertificates,\n        );\n        const order = createOrderSelector(state.order, orderBillingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n        const config = createConfigSelector(state.config, state.formFields);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            extensions,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            orderBillingAddress,\n            payment,\n            paymentMethods,\n            paymentProviderCustomer,\n            paymentStrategies,\n            pickupOptions,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        (getBillingAddress) => () => {\n            return guard(\n                getBillingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingBillingAddress),\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        (error) => () => error,\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        (status) => () => status,\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: BillingAddressState = DEFAULT_STATE): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        (state) => () => state,\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isInitializing) === true;\n                }\n\n                return some(statuses, { isInitializing: true });\n            }),\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        (data) =>\n            memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n                const method = data[methodId];\n\n                if (!method) {\n                    return false;\n                }\n\n                if (!containerId) {\n                    return some(\n                        method.initializedContainers,\n                        (isInitialized) => isInitialized === true,\n                    );\n                }\n\n                return method.initializedContainers[containerId] === true;\n            }),\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isDeinitializing) === true;\n                }\n\n                return some(statuses, { isDeinitializing: true });\n            }),\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.initializeError));\n\n                return method && method.initializeError;\n            }),\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.deinitializeError));\n\n                return method && method.deinitializeError;\n            }),\n    );\n\n    return memoizeOne((state: CheckoutButtonState = DEFAULT_STATE): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CouponState = DEFAULT_STATE): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n    getCustomerOrThrow(): Customer;\n    getCreateAccountError(): Error | undefined;\n    isCreatingCustomerAccount(): boolean;\n    getCreateAddressError(): Error | undefined;\n    isCreatingCustomerAddress(): boolean;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        (customer) => () => customer,\n    );\n\n    const getCustomerOrThrow = createSelector(getCustomer, (getCustomer) => () => {\n        return guard(\n            getCustomer(),\n            () => new MissingDataError(MissingDataErrorType.MissingCustomer),\n        );\n    });\n\n    const getCreateAccountError = createSelector(\n        (state: CustomerState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAccount = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreating,\n        (status) => () => status,\n    );\n\n    const getCreateAddressError = createSelector(\n        (state: CustomerState) => state.errors.createAddressError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAddress = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreatingAddress,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CustomerState = DEFAULT_STATE): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n            getCustomerOrThrow: getCustomerOrThrow(state),\n            getCreateAccountError: getCreateAccountError(state),\n            isCreatingCustomerAccount: isCreatingCustomerAccount(state),\n            getCreateAddressError: getCreateAddressError(state),\n            isCreatingCustomerAddress: isCreatingCustomerAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport { PaymentProviderCustomer } from './payment-provider-customer';\nimport PaymentProviderCustomerState, { DEFAULT_STATE } from './payment-provider-customer-state';\n\nexport default interface PaymentProviderCustomerSelector {\n    getPaymentProviderCustomer(): PaymentProviderCustomer | undefined;\n    getPaymentProviderCustomerOrThrow(): PaymentProviderCustomer;\n}\n\nexport type PaymentProviderCustomerSelectorFactory = (\n    state: PaymentProviderCustomerState,\n) => PaymentProviderCustomerSelector;\n\nexport function createPaymentProviderCustomerSelectorFactory(): PaymentProviderCustomerSelectorFactory {\n    const getPaymentProviderCustomer = createSelector(\n        (state: PaymentProviderCustomerState) => state.data,\n        (data) => () => data,\n    );\n\n    const getPaymentProviderCustomerOrThrow = createSelector(\n        getPaymentProviderCustomer,\n        (getPaymentProviderCustomer) => () => {\n            return guard(\n                getPaymentProviderCustomer(),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentProviderCustomer),\n            );\n        },\n    );\n\n    return memoizeOne(\n        (state: PaymentProviderCustomerState = DEFAULT_STATE): PaymentProviderCustomerSelector => {\n            return {\n                getPaymentProviderCustomer: getPaymentProviderCustomer(state),\n                getPaymentProviderCustomerOrThrow: getPaymentProviderCustomerOrThrow(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId,\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        (data) =>\n            <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n                return data[methodId];\n            },\n    );\n\n    return memoizeOne((state: RemoteCheckoutState = DEFAULT_STATE): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n    getShippingAddressOrThrow(): Address;\n    getShippingAddresses(): Address[];\n    getShippingAddressesOrThrow(): Address[];\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignment = consignments?.find(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignment?.shippingAddress;\n        },\n    );\n\n    const getShippingAddressOrThrow = createSelector(\n        getShippingAddress,\n        (getShippingAddress) => () => {\n            return guard(\n                getShippingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    const getShippingAddresses = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignments = consignments?.filter(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignments\n                ? shippingConsignments.map((consignment) => consignment.shippingAddress)\n                : [];\n        },\n    );\n\n    const getShippingAddressesOrThrow = createSelector(\n        getShippingAddresses,\n        (getShippingAddresses) => () => {\n            return guard(\n                getShippingAddresses(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    return memoizeOne((state: ConsignmentState = DEFAULT_STATE): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n            getShippingAddressOrThrow: getShippingAddressOrThrow(state),\n            getShippingAddresses: getShippingAddresses(state),\n            getShippingAddressesOrThrow: getShippingAddressesOrThrow(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport OrderBillingAddressState, {\n    DEFAULT_STATE,\n    OrderBillingAddress,\n} from './order-billing-address-state';\n\nexport default interface OrderBillingAddressSelector {\n    getOrderBillingAddress(): OrderBillingAddress | undefined;\n}\n\nexport type OrderBillingAddressSelectorFactory = (\n    state: OrderBillingAddressState,\n) => OrderBillingAddressSelector;\n\nexport function createOrderBillingAddressSelectorFactory(): OrderBillingAddressSelectorFactory {\n    const getOrderBillingAddress = createSelector(\n        (state: OrderBillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    return memoizeOne(\n        (state: OrderBillingAddressState = DEFAULT_STATE): OrderBillingAddressSelector => {\n            return {\n                getOrderBillingAddress: getOrderBillingAddress(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentIdOrThrow(): { providerId: string; gatewayId?: string };\n    getPaymentStatus(): string | undefined;\n    getPaymentStatusOrThrow(): string;\n    getPaymentToken(): string | undefined;\n    getPaymentTokenOrThrow(): string;\n    getPaymentRedirectUrl(): string | undefined;\n    getPaymentRedirectUrlOrThrow(): string;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector,\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        },\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        (getOrder) => () => {\n            const order = getOrder();\n\n            return find(\n                order && order.payments,\n                ({ providerId }) =>\n                    providerId !== 'giftcertificate' && providerId !== 'storecredit',\n            ) as GatewayOrderPayment;\n        },\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        (getCheckout) => () => {\n            const checkout = getCheckout();\n\n            return find(\n                checkout && checkout.payments,\n                ({ providerType }) => providerType === HOSTED,\n            );\n        },\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        },\n    );\n\n    const getPaymentIdOrThrow = createSelector(getPaymentId, (getPaymentId) => () => {\n        return guard(\n            getPaymentId(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentId),\n        );\n    });\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        },\n    );\n\n    const getPaymentStatusOrThrow = createSelector(getPaymentStatus, (getPaymentStatus) => () => {\n        return guard(\n            getPaymentStatus(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentStatus),\n        );\n    });\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        },\n    );\n\n    const getPaymentTokenOrThrow = createSelector(getPaymentToken, (getPaymentToken) => () => {\n        return guard(\n            getPaymentToken(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentToken),\n        );\n    });\n\n    const getPaymentRedirectUrl = createSelector(getInternalPayment, (getInternalPayment) => () => {\n        const payment = getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    });\n\n    const getPaymentRedirectUrlOrThrow = createSelector(\n        getPaymentRedirectUrl,\n        (getPaymentRedirectUrl) => () => {\n            return guard(\n                getPaymentRedirectUrl(),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentRedirectUrl),\n            );\n        },\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        (getOutstandingBalance) =>\n            (useStoreCredit = false) => {\n                const grandTotal = getOutstandingBalance(useStoreCredit);\n\n                return grandTotal ? grandTotal > 0 : false;\n            },\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        (getPaymentStatus) => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        },\n    );\n\n    return memoizeOne((checkout: CheckoutSelector, order: OrderSelector): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentIdOrThrow: getPaymentIdOrThrow({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentStatusOrThrow: getPaymentStatusOrThrow({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentTokenOrThrow: getPaymentTokenOrThrow({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            getPaymentRedirectUrlOrThrow: getPaymentRedirectUrlOrThrow({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        (signInEmail) => () => signInEmail,\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        (error) => () => error,\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SignInEmailState = DEFAULT_STATE): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        (cart) => () => cart,\n    );\n\n    const getCartOrThrow = createSelector(getCart, (getCart) => () => {\n        return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n    });\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CartState = DEFAULT_STATE): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { FormFieldsState } from '../form';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getHost(): string | undefined;\n    getLocale(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (\n    state: ConfigState,\n    formState: FormFieldsState,\n) => ConfigSelector;\n\ninterface ConfigSelectorDependencies {\n    formState: FormFieldsState;\n}\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => () => data,\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined\n                ? flashMessages.filter(({ type }) => filterType === type)\n                : flashMessages;\n        },\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\n        (data, formFields = { customerAccount: [], shippingAddress: [], billingAddress: [] }) =>\n            () =>\n                data\n                    ? {\n                          ...data.storeConfig,\n                          formFields,\n                      }\n                    : undefined,\n    );\n\n    const getStoreConfigOrThrow = createSelector(getStoreConfig, (getStoreConfig) => () => {\n        return guard(\n            getStoreConfig(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig),\n        );\n    });\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        (data) => () => data,\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        (data) => () => data,\n    );\n\n    const getHost = createSelector(\n        (state: ConfigState) => state.meta?.host,\n        (data) => () => data,\n    );\n\n    const getLocale = createSelector(\n        (state: ConfigState) => state.meta?.locale,\n        (data) => () => data,\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (state: ConfigState = DEFAULT_STATE, formState: FormFieldsState): ConfigSelector => {\n            return {\n                getConfig: getConfig(state),\n                getFlashMessages: getFlashMessages(state),\n                getStoreConfig: getStoreConfig(state, { formState }),\n                getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\n                getContextConfig: getContextConfig(state),\n                getExternalSource: getExternalSource(state),\n                getHost: getHost(state),\n                getLocale: getLocale(state),\n                getVariantIdentificationToken: getVariantIdentificationToken(state),\n                getLoadError: getLoadError(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        (countries) => () => countries,\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CountryState = DEFAULT_STATE): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getExecutePaymentMethodCheckoutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (\n    state: CustomerStrategyState,\n) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        },\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        },\n    );\n\n    const getExecutePaymentMethodCheckoutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutError,\n        (executePaymentMethodCheckoutMethodId, executePaymentMethodCheckoutError) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return;\n                }\n\n                return executePaymentMethodCheckoutError;\n            },\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeErrors,\n        (initializeMethodId, initializeErrors) => (methodId?: string) => {\n            if (!initializeMethodId || !initializeErrors) {\n                return;\n            }\n\n            if (methodId) {\n                return initializeErrors[methodId];\n            }\n\n            return initializeErrors[initializeMethodId];\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        },\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        },\n    );\n\n    const isExecutingPaymentMethodCheckout = createSelector(\n        (state: CustomerStrategyState) => state.statuses.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isExecutingPaymentMethodCheckout,\n        (executePaymentMethodCheckoutMethodId, isExecutingPaymentMethodCheckout) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return false;\n                }\n\n                return !!isExecutingPaymentMethodCheckout;\n            },\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: CustomerStrategyState = DEFAULT_STATE): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getExecutePaymentMethodCheckoutError: getExecutePaymentMethodCheckoutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (\n    state: GiftCertificateState,\n) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: GiftCertificateState = DEFAULT_STATE): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\nimport { createSelector } from '../../common/selector';\nimport { guard } from '../../common/utility';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getCardInstrumentOrThrow(instrumentId: string): CardInstrument;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway\n                ? `${paymentMethod.gateway}.${paymentMethod.id}`\n                : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        },\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) =>\n            (instrumentId: string) => {\n                const cards = values(supportedInstruments);\n\n                return instruments.find(\n                    (instrument): instrument is CardInstrument =>\n                        instrument.bigpayToken === instrumentId &&\n                        instrument.type === 'card' &&\n                        cards.some((card) => isMatch(instrument, card)),\n                );\n            },\n    );\n\n    const getCardInstrumentOrThrow = createSelector(\n        getCardInstrument,\n        (getCardInstrument) => (instrumentId: string) => {\n            return guard(\n                getCardInstrument(instrumentId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentInstrument),\n            );\n        },\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, (supportedProvider) =>\n                filter(\n                    instruments,\n                    (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                        return isMatch(instrument, supportedProvider);\n                    },\n                ),\n            );\n\n            return allSupportedInstruments;\n        },\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        },\n    );\n\n    return memoizeOne((state: InstrumentState = DEFAULT_STATE): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getCardInstrumentOrThrow: getCardInstrumentOrThrow(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getCustomerAccountFields(): FormField[];\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.shippingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.billingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getCustomerAccountFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) => () => formFields ? formFields.customerAccount : [],\n    );\n\n    const getLoadError = createSelector(\n        (state: FormFieldsState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: FormFieldsState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    function processField(\n        field: FormField,\n        countries: Country[],\n        selectedCountry?: Country,\n    ): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(\n        field: FormField,\n        countries: Country[] = [],\n        country?: Country,\n    ): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((state: FormFieldsState = DEFAULT_STATE): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => () => paymentMethods,\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => (methodId: string, gatewayId?: string) => {\n            return gatewayId\n                ? find(paymentMethods, { id: methodId, gateway: gatewayId })\n                : find(paymentMethods, { id: methodId });\n        },\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        (getPaymentMethod) => (methodId: string, gatewayId?: string) => {\n            return guard(\n                getPaymentMethod(methodId, gatewayId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod),\n            );\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        },\n    );\n\n    return memoizeOne((state: PaymentMethodState = DEFAULT_STATE): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\ninterface InitiaizedQuery {\n    methodId: string;\n    gatewayId?: string;\n}\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(query: InitiaizedQuery): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (\n    state: PaymentStrategyState,\n) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        },\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        },\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (key?: string) => {\n            if (key && initializeMethodId !== key) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        (data) => (query: InitiaizedQuery) => {\n            const key = query.gatewayId ? `${query.methodId}.${query.gatewayId}` : query.methodId;\n\n            return !!(data[key] && data[key].isInitialized);\n        },\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        },\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: PaymentStrategyState = DEFAULT_STATE): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { objectFlatten, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionResult, SearchArea } from './pickup-option';\nimport PickupOptionState, { DEFAULT_STATE } from './pickup-option-state';\n\nexport default interface PickupOptionSelector {\n    getPickupOptions(\n        consignmentId: string,\n        searchArea: SearchArea,\n    ): PickupOptionResult[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type PickupOptionSelectorFactory = (state: PickupOptionState) => PickupOptionSelector;\n\nexport function createPickupOptionSelectorFactory(): PickupOptionSelectorFactory {\n    const getPickupOptions = createSelector(\n        (state: PickupOptionState) => state.data,\n        (pickupOptions) => (consignmentId: string, searchArea: SearchArea) => {\n            if (!pickupOptions) {\n                return;\n            }\n\n            const flattenedParams = objectFlatten({ consignmentId, searchArea });\n            const sortedFlattenedParams = objectWithSortedKeys(flattenedParams);\n            const keyString = btoa(`${JSON.stringify(sortedFlattenedParams)}`);\n\n            return pickupOptions[keyString];\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PickupOptionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: PickupOptionState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: PickupOptionState = DEFAULT_STATE): PickupOptionSelector => {\n        return {\n            getPickupOptions: getPickupOptions(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (\n    state: ShippingCountryState,\n) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        (status) => () => !!status,\n    );\n\n    return memoizeOne((state: ShippingCountryState = DEFAULT_STATE): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (\n    state: ShippingStrategyState,\n) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        },\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        },\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        },\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: ShippingStrategyState = DEFAULT_STATE): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { AddressRequestBody, isAddressEqual } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentsOrThrow(): Consignment[];\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector,\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => consignments,\n    );\n\n    const getConsignmentsOrThrow = createSelector(getConsignments, (getConsignments) => () => {\n        return guard(\n            getConsignments(),\n            () => new MissingDataError(MissingDataErrorType.MissingConsignments),\n        );\n    });\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        },\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, (consignment) =>\n                isAddressEqual(consignment.shippingAddress, address),\n            );\n        },\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        (error) => () => error,\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[],\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                (item) => assignedLineItemIds.indexOf(item.id as string) < 0,\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        (updateError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        },\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        (deleteError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        },\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) =>\n            (address: AddressRequestBody) => {\n                const consignment = getConsignmentByAddress(address);\n\n                return consignment ? getUpdateError(consignment.id) : getCreateError();\n            },\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        (updateShippingOptionError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        (isLoadingShippingOptions) => () => isLoadingShippingOptions === true,\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        (isCreating) => () => isCreating === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        (isUpdating) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        },\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        (isDeleting) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        },\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        },\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        (isUpdatingShippingOption) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        },\n    );\n\n    return memoizeOne(\n        (state: ConsignmentState = DEFAULT_STATE, cart: CartSelector): ConsignmentSelector => {\n            return {\n                getConsignments: getConsignments(state),\n                getConsignmentsOrThrow: getConsignmentsOrThrow(state),\n                getConsignmentById: getConsignmentById(state),\n                getConsignmentByAddress: getConsignmentByAddress(state),\n                getShippingOption: getShippingOption(state),\n                getLoadError: getLoadError(state),\n                getCreateError: getCreateError(state),\n                getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n                getUnassignedItems: getUnassignedItems(state, { cart }),\n                getUpdateError: getUpdateError(state),\n                getDeleteError: getDeleteError(state),\n                getItemAssignmentError: getItemAssignmentError(state),\n                getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n                isLoading: isLoading(state),\n                isLoadingShippingOptions: isLoadingShippingOptions(state),\n                isCreating: isCreating(state),\n                isUpdating: isUpdating(state),\n                isDeleting: isDeleting(state),\n                isAssigningItems: isAssigningItems(state),\n                isUpdatingShippingOption: isUpdatingShippingOption(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector,\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) =>\n            billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) =>\n            consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) =>\n            giftCertificates.getGiftCertificates,\n        (\n                data,\n                getBillingAddress,\n                getCart,\n                getCustomer,\n                getConsignments,\n                getCoupons,\n                getGiftCertificates,\n            ) =>\n            () => {\n                const billingAddress = getBillingAddress();\n                const cart = getCart();\n                const customer = getCustomer();\n                const consignments = getConsignments() || [];\n                const coupons = getCoupons() || [];\n                const giftCertificates = getGiftCertificates() || [];\n\n                if (!data || !cart || !customer) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    cart,\n                    customer,\n                    consignments,\n                    coupons,\n                    giftCertificates,\n                };\n            },\n    );\n\n    const getCheckoutOrThrow = createSelector(getCheckout, (getCheckout) => () => {\n        return guard(\n            getCheckout(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckout),\n        );\n    });\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        (getCheckout) => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit\n                ? Math.max(grandTotal - storeCredit, 0)\n                : checkout.outstandingBalance;\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        (isExecutingSpamCheck) => () => isExecutingSpamCheck === true,\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        (isUpdating) => () => isUpdating === true,\n    );\n\n    return memoizeOne(\n        (\n            state: CheckoutState = DEFAULT_STATE,\n            billingAddress: BillingAddressSelector,\n            cart: CartSelector,\n            consignments: ConsignmentSelector,\n            coupons: CouponSelector,\n            customer: CustomerSelector,\n            giftCertificates: GiftCertificateSelector,\n        ): CheckoutSelector => {\n            return {\n                getCheckout: getCheckout(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getOutstandingBalance: getOutstandingBalance(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getLoadError: getLoadError(state),\n                getUpdateError: getUpdateError(state),\n                isExecutingSpamCheck: isExecutingSpamCheck(state),\n                isLoading: isLoading(state),\n                isUpdating: isUpdating(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\nimport OrderBillingAddressSelector from '../order-billing-address/order-billing-address-selector';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    getPaymentId(methodId: string): string | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: OrderBillingAddressSelector,\n    coupons: CouponSelector,\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: OrderBillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) =>\n            billingAddress.getOrderBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) =>\n            () => {\n                if (!data || !billingAddress) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    coupons,\n                };\n            },\n    );\n\n    const getOrderOrThrow = createSelector(getOrder, (getOrder) => () => {\n        return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n    });\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getPaymentId = createSelector(\n        (state: OrderState) => state.data?.payments,\n        (payments = []) =>\n            (methodId: string) => {\n                const currentPayment = payments.find(({ providerId }) => providerId === methodId);\n\n                return currentPayment?.paymentId;\n            },\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (\n            state: OrderState = DEFAULT_STATE,\n            billingAddress: OrderBillingAddressSelector,\n            coupons: CouponSelector,\n        ): OrderSelector => {\n            return {\n                getOrder: getOrder(state, { billingAddress, coupons }),\n                getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n                getOrderMeta: getOrderMeta(state),\n                getLoadError: getLoadError(state),\n                getPaymentId: getPaymentId(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: StoreCreditState = DEFAULT_STATE): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SubscriptionsState = DEFAULT_STATE): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { Extension, ExtensionRegion } from './extension';\nimport { DEFAULT_STATE, ExtensionState } from './extension-state';\n\nexport interface ExtensionSelector {\n    getExtensions(): Extension[] | undefined;\n    getExtensionByRegion(region: ExtensionRegion): Extension | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ExtensionSelectorFactory = (state: ExtensionState) => ExtensionSelector;\n\nexport function createExtensionSelectorFactory(): ExtensionSelectorFactory {\n    const getExtensions = createSelector(\n        (state: ExtensionState) => state.data,\n        (data) => () => data,\n    );\n\n    const getExtensionByRegion = createSelector(\n        (state: ExtensionState) => state.data,\n        (data) => (region: ExtensionRegion) => data?.find((e) => e.region === region),\n    );\n\n    const getLoadError = createSelector(\n        (state: ExtensionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ExtensionState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    return memoizeOne((state: ExtensionState = DEFAULT_STATE): ExtensionSelector => {\n        return {\n            getExtensions: getExtensions(state),\n            getExtensionByRegion: getExtensionByRegion(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialStoreState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions,\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n    const reducer = createCheckoutStoreReducer();\n\n    return createDataStore(reducer, initialStoreState, {\n        actionTransformer,\n        stateTransformer,\n        ...options,\n    });\n}\n","import { PaymentMethodInvalidError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach((type) => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register(\n        'invalid_payment_provider',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n    factory.register(\n        'payment_config_not_found',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n\n    return factory;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory,\n): (action: Subscribable<Action>) => Observable<Action> {\n    return (action$) =>\n        from(action$).pipe(\n            catchError<Action, never>((action) => {\n                if (action instanceof Error || action.payload instanceof Error) {\n                    throw action;\n                }\n\n                if (isResponse(action.payload)) {\n                    const message = action.payload.body && action.payload.body.detail;\n\n                    throw {\n                        ...action,\n                        payload: requestErrorFactory.createError(action.payload, message),\n                    };\n                }\n\n                throw action;\n            }),\n        );\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every((key) =>\n        Object.prototype.hasOwnProperty.call(object, key),\n    );\n}\n","import { Action, combineReducers, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { extensionReducer } from '../extension';\nimport { formFieldsReducer } from '../form';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { orderBillingAddressReducer } from '../order-billing-address';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { paymentProviderCustomerReducer } from '../payment-provider-customer';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport {\n    consignmentReducer,\n    pickupOptionReducer,\n    shippingCountryReducer,\n    shippingStrategyReducer,\n} from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        extensions: extensionReducer,\n        formFields: formFieldsReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        orderBillingAddress: orderBillingAddressReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        pickupOptions: pickupOptionReducer,\n        paymentProviderCustomer: paymentProviderCustomerReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>,\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { isEqual } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(fn: TFunction): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize((store) => from(action(store)).pipe(shareReplay()), { isEqual });\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction, { isEqual });\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    LoadPaymentMethodAction,\n    LoadPaymentMethodsAction,\n    PaymentMethodActionType,\n} from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nimport { PaymentMethod } from '.';\n\nconst isPaymentMethod = (value: PaymentMethod | undefined): value is PaymentMethod => {\n    return !!value;\n};\n\nexport default class PaymentMethodActionCreator {\n    constructor(private _requestSender: PaymentMethodRequestSender) {}\n\n    loadPaymentMethodsById(\n        methodIds: string[],\n        options?: RequestOptions,\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer: Observer<LoadPaymentMethodsAction>) => {\n                const state = store.getState();\n                const cartId = state.cart.getCart()?.id;\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n                Promise.all(\n                    methodIds.map(async (id) => {\n                        try {\n                            const response = await this._requestSender.loadPaymentMethod(id, {\n                                ...options,\n                                params,\n                            });\n\n                            return response.body;\n                        } catch (_e) {\n                            return undefined;\n                        }\n                    }),\n                )\n                    .then((response) => {\n                        const paymentMethods = response.filter(isPaymentMethod);\n\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\n                                paymentMethods,\n                            ),\n                        );\n\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\n                                response,\n                            ),\n                        );\n                        observer.complete();\n                    });\n            });\n    }\n\n    loadPaymentMethods(\n        options?: RequestOptions,\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n                const state = store.getState();\n                const cart = state.cart.getCartOrThrow();\n\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n                this._requestSender\n                    .loadPaymentMethods({\n                        ...options,\n                        params: { ...options?.params, cartId: cart.id },\n                    })\n                    .then((response) => {\n                        const meta = {\n                            deviceSessionId: response.headers['x-device-session-id'],\n                            sessionHash: response.headers['x-session-hash'],\n                        };\n                        const methods = response.body;\n\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\n                                methods,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    @cachableAction\n    loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions & ActionOptions,\n    ): ThunkAction<LoadPaymentMethodAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n                const state = store.getState();\n                const cartId = state.cart.getCart()?.id;\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n                observer.next(\n                    createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._requestSender\n                    .loadPaymentMethod(methodId, { ...options, params })\n                    .then((response) => {\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodSucceeded,\n                                response.body,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodFailed,\n                                response,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadPaymentMethods({ timeout, params }: RequestOptions = {}): Promise<\n        Response<PaymentMethod[]>\n    > {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    loadPaymentMethod(\n        methodId: string,\n        { timeout, params }: RequestOptions = {},\n    ): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/script-loader\");","import { Action, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, Observable, of, throwError } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta,\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message || 'Unable to continue as a guest because the customer is already signed in.',\n        );\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { isEmpty } from 'lodash';\nimport { concat, defer, empty, merge, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport {\n    BillingAddressActionType,\n    ContinueAsGuestAction,\n    UpdateBillingAddressAction,\n} from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nimport { BillingAddressRequestSender } from '.';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator,\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            const hasBillingAddress = !isEmpty(billingAddress);\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            hasBillingAddress,\n                            options,\n                        );\n\n                        return createAction(\n                            BillingAddressActionType.ContinueAsGuestSucceeded,\n                            body,\n                        );\n                    }),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error),\n                    ),\n                ),\n                this._updateCustomerConsent(credentials, options),\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n                const billingAddress = state.billingAddress.getBillingAddress();\n\n                const hasBillingAddress = !isEmpty(billingAddress);\n\n                // If email is not present in the address provided by the client, then\n                // fall back to the stored email as it could have been set separately\n                // using a convenience method. We can't rely on billingAddress having\n                // an ID to consider that there's a preexisting email, as billingAddress\n                // object from Order doesn't have an ID.\n                const billingAddressRequestBody = {\n                    ...address,\n                    email:\n                        typeof address.email === 'undefined' && billingAddress\n                            ? billingAddress.email\n                            : address.email,\n                };\n\n                if (billingAddress && billingAddress.id) {\n                    billingAddressRequestBody.id = billingAddress.id;\n                }\n\n                this._createOrUpdateBillingAddress(\n                    checkout.id,\n                    billingAddressRequestBody,\n                    hasBillingAddress,\n                    options,\n                )\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                BillingAddressActionType.UpdateBillingAddressSucceeded,\n                                body,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                BillingAddressActionType.UpdateBillingAddressFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _updateCustomerConsent(\n        { email, acceptsAbandonedCartEmails, acceptsMarketingNewsletter }: GuestCredentials,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        if (\n            (acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)\n        ) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions(\n            {\n                email,\n                acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n                acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n            },\n            options,\n        );\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        hasBillingAddress: boolean,\n        options?: RequestOptions,\n    ): Promise<Response<Checkout>> {\n        if (!hasBillingAddress) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error is thrown when cart is removed or empty.\n */\nexport default class EmptyCartError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Your checkout could not be processed because your cart is empty. Please add items to your cart and try again.',\n        );\n\n        this.name = 'EmptyCartError';\n        this.type = 'empty_cart';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { EmptyCartError } from '../cart/errors';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAddress(\n        checkoutId: string,\n        address: Partial<AddressRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .post<Checkout>(url, {\n                body: address,\n                params: DEFAULT_PARAMS,\n                headers,\n                timeout,\n            })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n\n    updateAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .put<Checkout>(url, { params: DEFAULT_PARAMS, body, headers, timeout })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { BuyNowCartRequestBody, Cart } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class CartRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createBuyNowCart(\n        body: BuyNowCartRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Cart>> {\n        const url = '/api/storefront/carts';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body, headers, timeout });\n    }\n}\n","import { Action, createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { FormFieldsActionCreator } from '../form';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport { CheckoutHydrateActionType } from './checkout-hydrate-actions';\nimport CheckoutInitialState from './checkout-initial-state';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator,\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return () => {\n            return concat(\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n                merge(\n                    this._configActionCreator.loadConfig({\n                        useCache: true,\n                        timeout: options?.timeout,\n                        params: { checkoutId: id },\n                    }),\n                    this._formFieldsActionCreator.loadFormFields({\n                        useCache: true,\n                        timeout: options?.timeout,\n                    }),\n                ),\n                defer(() => {\n                    return this._checkoutRequestSender\n                        .loadCheckout(id, options)\n                        .then(({ body }) => {\n                            return createAction(\n                                CheckoutActionType.LoadCheckoutSucceeded,\n                                this._transformCustomerAddresses(body),\n                            );\n                        });\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\n                ),\n            );\n        };\n    }\n\n    loadDefaultCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n                merge(\n                    this._configActionCreator.loadConfig({\n                        useCache: true,\n                        timeout: options?.timeout,\n                    }),\n                    this._formFieldsActionCreator.loadFormFields({\n                        useCache: true,\n                        timeout: options?.timeout,\n                    }),\n                ),\n                defer(async () => {\n                    const state = store.getState();\n                    const context = state.config.getContextConfig();\n\n                    if (!context || !context.checkoutId) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                    }\n\n                    const { body } = await this._checkoutRequestSender.loadCheckout(\n                        context.checkoutId,\n                        options,\n                    );\n\n                    return createAction(\n                        CheckoutActionType.LoadCheckoutSucceeded,\n                        this._transformCustomerAddresses(body),\n                    );\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\n                ),\n            );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n                this._checkoutRequestSender\n                    .updateCheckout(checkout.id, body, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(CheckoutActionType.UpdateCheckoutSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response),\n                        );\n                    });\n            });\n    }\n\n    loadCurrentCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n\n    hydrateInitialState(state: CheckoutInitialState): Action<CheckoutInitialState> {\n        return {\n            type: CheckoutHydrateActionType.HydrateInitialState,\n            payload: state,\n        };\n    }\n\n    private _transformCustomerAddresses(body: Checkout): Checkout {\n        return {\n            ...body,\n            customer: {\n                ...body.customer,\n                addresses: body.customer.addresses.map((address) => ({\n                    ...address,\n                    shouldSaveAddress: false,\n                })),\n            },\n        };\n    }\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = [],\n): string {\n    return Array.isArray(includeDictionaryOrList)\n        ? joinIncludes([...baseIncludes, ...includeDictionaryOrList])\n        : mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean },\n): string {\n    const deletions = keys(pickBy(includesDictionary, (on) => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([...difference(baseIncludes, deletions), ...additions]);\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadCheckout(\n        id: string,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .get<Checkout>(url, {\n                params: {\n                    include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n                },\n                headers,\n                timeout,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    updateCheckout(\n        id: string,\n        body: CheckoutRequestBody,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(this._normalize(cartA), this._normalize(cartB));\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map((item) => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { ComparableCheckout } from '../../checkout';\nimport { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    data: { previous: ComparableCheckout; updated: ComparableCheckout };\n\n    constructor(previous: ComparableCheckout, updated: ComparableCheckout) {\n        super(\n            'An update to your shopping cart has been detected and your available shipping costs have been updated.',\n        );\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n        this.data = {\n            previous,\n            updated,\n        };\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { Cart, CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport type ComparableCheckout = Pick<\n    Checkout,\n    'outstandingBalance' | 'coupons' | 'giftCertificates'\n> & {\n    cart: Partial<Cart>;\n};\n\nexport default class CheckoutValidator {\n    constructor(private _checkoutRequestSender: CheckoutRequestSender) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options).then((response) => {\n            const comparator = new CartComparator();\n\n            if (\n                checkout.outstandingBalance === response.body.outstandingBalance &&\n                this._compareCoupons(checkout.coupons, response.body.coupons) &&\n                this._compareGiftCertificates(\n                    checkout.giftCertificates,\n                    response.body.giftCertificates,\n                ) &&\n                comparator.isEqual(checkout.cart, response.body.cart)\n            ) {\n                return;\n            }\n\n            throw new CartChangedError(\n                this._getComparableCheckout(checkout),\n                this._getComparableCheckout(response.body),\n            );\n        });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(\n        giftCertificatesA: GiftCertificate[],\n        giftCertificatesB: GiftCertificate[],\n    ): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n\n    private _getComparableCheckout(checkout: Checkout): ComparableCheckout {\n        const { cart, coupons, giftCertificates, outstandingBalance } = checkout;\n\n        return {\n            cart: {\n                cartAmount: cart.cartAmount,\n                currency: cart.currency,\n                lineItems: cart.lineItems,\n            },\n            coupons,\n            giftCertificates,\n            outstandingBalance,\n        };\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nimport { ConfigRequestSender } from '.';\n\nexport default class ConfigActionCreator {\n    constructor(private _configRequestSender: ConfigRequestSender) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender\n                .loadConfig(options)\n                .then((response) => {\n                    observer.next(\n                        createAction(ConfigActionType.LoadConfigSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutNotAvailableError } from '../checkout/errors';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadConfig({ timeout, params }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender\n            .get<Config>(url, {\n                timeout,\n                headers: {\n                    Accept: ContentType.JsonV1,\n                    'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    ...SDK_VERSION_HEADERS,\n                },\n                params,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    ApplyCouponAction,\n    CouponAction,\n    CouponActionType,\n    RemoveCouponAction,\n} from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(private _couponRequestSender: CouponRequestSender) {}\n\n    applyCoupon(\n        code: string,\n        options?: RequestOptions,\n    ): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<ApplyCouponAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n                this._couponRequestSender\n                    .applyCoupon(checkout.id, code, options)\n                    .then(({ body }) => {\n                        observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CouponActionType.ApplyCouponFailed, response),\n                        );\n                    });\n            });\n    }\n\n    removeCoupon(\n        code: string,\n        options?: RequestOptions,\n    ): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<RemoveCouponAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n                this._couponRequestSender\n                    .removeCoupon(checkout.id, code, options)\n                    .then(({ body }) => {\n                        observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CouponActionType.RemoveCouponFailed, response),\n                        );\n                    });\n            });\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { EmptyCartError } from '../cart/errors';\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES, CheckoutIncludes } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    applyCoupon(\n        checkoutId: string,\n        couponCode: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .post<Checkout>(url, {\n                headers,\n                timeout,\n                params: {\n                    include: joinIncludes([\n                        ...CHECKOUT_DEFAULT_INCLUDES,\n                        CheckoutIncludes.AvailableShippingOptions,\n                    ]),\n                },\n                body: { couponCode },\n            })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n\n    removeCoupon(\n        checkoutId: string,\n        couponCode: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .delete<Checkout>(url, {\n                headers,\n                timeout,\n                params: {\n                    include: joinIncludes([\n                        ...CHECKOUT_DEFAULT_INCLUDES,\n                        CheckoutIncludes.AvailableShippingOptions,\n                    ]),\n                },\n            })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n}\n","export enum CartSource {\n    BuyNow = 'BUY_NOW',\n}\n","import { ExecuteSucceededAction, SpamProtectionAction } from './spam-protection-actions';\n\nexport default function isSpamProtectionExecuteSucceededAction(\n    action: SpamProtectionAction,\n): action is ExecuteSucceededAction {\n    const succeededAction = action as ExecuteSucceededAction;\n\n    return (\n        typeof succeededAction === 'object' &&\n        typeof succeededAction.payload === 'object' &&\n        typeof succeededAction.payload.token === 'string'\n    );\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CartSource } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    isSpamProtectionExecuteSucceededAction,\n    SpamProtectionActionCreator,\n} from '../spam-protection';\n\nimport CustomerAccountRequestBody, { CustomerAddressRequestBody } from './customer-account';\nimport {\n    CreateCustomerAction,\n    CreateCustomerAddressAction,\n    CustomerActionType,\n    SignInCustomerAction,\n    SignOutCustomerAction,\n} from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n    ) {}\n\n    createCustomer(\n        customerAccount: CustomerAccountRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<CreateCustomerAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const config = state.config.getStoreConfigOrThrow();\n            const { isStorefrontSpamProtectionEnabled } = config.checkoutSettings;\n\n            const createCustomer = (token?: string) =>\n                from(\n                    this._customerRequestSender.createAccount(\n                        { ...customerAccount, token },\n                        options,\n                    ),\n                ).pipe(\n                    switchMap(() =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.CreateCustomerSucceeded)),\n                        ),\n                    ),\n                );\n\n            return concat(\n                of(createAction(CustomerActionType.CreateCustomerRequested)),\n                isStorefrontSpamProtectionEnabled\n                    ? from(this._spamProtectionActionCreator.execute()(store)).pipe(\n                          switchMap((action) =>\n                              isSpamProtectionExecuteSucceededAction(action)\n                                  ? concat(of(action), createCustomer(action.payload?.token))\n                                  : of(action),\n                          ),\n                      )\n                    : createCustomer(),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.CreateCustomerFailed, error),\n                ),\n            );\n        };\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        options?: RequestOptions,\n    ): Observable<CreateCustomerAddressAction> {\n        return concat(\n            of(createAction(CustomerActionType.CreateCustomerAddressRequested)),\n            defer(async () => {\n                const { body } = await this._customerRequestSender.createAddress(\n                    customerAddress,\n                    options,\n                );\n\n                return createAction(CustomerActionType.CreateCustomerAddressSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(CustomerActionType.CreateCustomerAddressFailed, error),\n            ),\n        );\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckoutOrThrow();\n            const cartId = checkout.cart.source === CartSource.BuyNow ? checkout.id : undefined;\n\n            return concat(\n                of(createAction(CustomerActionType.SignInCustomerRequested)),\n                from(\n                    this._customerRequestSender.signInCustomer({ ...credentials, cartId }, options),\n                ).pipe(\n                    switchMap(({ body }) => {\n                        if (body.data.persistentCartRetrievalInformation) {\n                            return concat(\n                                this._checkoutActionCreator.loadCheckout(\n                                    body.data.persistentCartRetrievalInformation.id,\n                                    options,\n                                )(store),\n                                of(\n                                    createAction(\n                                        CustomerActionType.SignInCustomerSucceeded,\n                                        body.data,\n                                    ),\n                                ),\n                            );\n                        }\n\n                        return concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data)),\n                        );\n                    }),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignInCustomerFailed, error),\n                ),\n            );\n        };\n    }\n\n    signOutCustomer(\n        options?: RequestOptions,\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckoutOrThrow();\n            const cartId = checkout.cart.source === CartSource.BuyNow ? checkout.id : undefined;\n\n            return concat(\n                of(createAction(CustomerActionType.SignOutCustomerRequested)),\n                from(this._customerRequestSender.signOutCustomer(options, cartId)).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                            of(\n                                createAction(\n                                    CustomerActionType.SignOutCustomerSucceeded,\n                                    body.data,\n                                ),\n                            ),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CustomerActionType.SignOutCustomerFailed, error),\n                ),\n            );\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport Customer from './customer';\nimport { CustomerAccountInternalRequestBody, CustomerAddressRequestBody } from './customer-account';\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAccount(\n        customerAccount: CustomerAccountInternalRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<{}>> {\n        const url = '/api/storefront/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAccount,\n        });\n    }\n\n    createAddress(\n        customerAddress: CustomerAddressRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Customer>> {\n        const url = `/api/storefront/customer-address`;\n\n        return this._requestSender.post<Customer>(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: customerAddress,\n        });\n    }\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            body: credentials,\n        });\n    }\n\n    signOutCustomer(\n        { timeout }: RequestOptions = {},\n        cartId?: string,\n    ): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, {\n            timeout,\n            headers: SDK_VERSION_HEADERS,\n            ...(cartId && { body: { cartId } }),\n        });\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsRequestSender from './form-fields-request-sender';\n\nexport default class FormFieldsActionCreator {\n    constructor(private _formFieldsRequestSender: FormFieldsRequestSender) {}\n\n    @cachableAction\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\n        return concat(\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\n            defer(async () => {\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\n\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((response) =>\n                throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { FormFields } from './form-field';\n\nexport default class FormFieldsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\n        const url = '/api/storefront/form-fields';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { StandardError } from '../../error/errors';\n\nexport default class UnexpectedDetachmentError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the required element is unexpectedly detached from the page.',\n        );\n\n        this.name = 'UnexpectedDetachmentError';\n        this.type = 'unexpected_detachment';\n    }\n}\n","import { CancellablePromise } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { UnexpectedDetachmentError } from './errors';\nimport { MutationObserverFactory } from './mutation-observer';\n\nexport default class DetachmentObserver {\n    constructor(private _mutationObserver: MutationObserverFactory) {}\n\n    async ensurePresence<T>(targets: Node[], promise: Promise<T>): Promise<T> {\n        const cancellable = new CancellablePromise(promise);\n\n        const observer = this._mutationObserver.create((mutationsList) => {\n            mutationsList.forEach((mutation) => {\n                const removedTargets = Array.from(mutation.removedNodes).filter((node) =>\n                    targets.some((target) => node === target || node.contains(target)),\n                );\n\n                if (removedTargets.length === 0) {\n                    return;\n                }\n\n                cancellable.cancel(new UnexpectedDetachmentError());\n            });\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n\n        try {\n            const output = await cancellable.promise;\n\n            observer.disconnect();\n\n            return output;\n        } catch (error) {\n            observer.disconnect();\n\n            throw error;\n        }\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new (callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(private _window: MutationObserverWindow = window as MutationObserverWindow) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port =\n        anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ? anchor.port : '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? `:${port}` : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType,\n): object is TEvent {\n    return object.type === type;\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<\n    TSuccessEvent extends IframeEvent,\n    TErrorEvent extends IframeEvent,\n> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent, TContext = undefined> {\n    private _targetOrigin: string;\n\n    constructor(targetOrigin: string, private _targetWindow?: Window, private _context?: TContext) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent>;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent> | void {\n        const targetWindow = this._targetWindow;\n\n        if (window === targetWindow) {\n            return;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result =\n            options &&\n            fromEvent<MessageEvent>(window, 'message')\n                .pipe(\n                    filter(\n                        (event) =>\n                            event.origin === this._targetOrigin &&\n                            isIframeEvent(event.data, event.data.type) &&\n                            [options.successType, options.errorType].indexOf(event.data.type) !==\n                                -1,\n                    ),\n                    map((event) => {\n                        if (options.errorType === event.data.type) {\n                            throw event.data;\n                        }\n\n                        return event.data;\n                    }),\n                    take(1),\n                )\n                .toPromise();\n\n        targetWindow.postMessage({ ...event, context: this._context }, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n\n    setContext(context: TContext) {\n        this._context = context;\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { appendWww, parseUrl } from '../url';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<\n    TEventMap extends IframeEventMap<keyof TEventMap>,\n    TContext = undefined,\n> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap, TContext>;\n    private _sourceOrigins: string[];\n\n    constructor(sourceOrigin: string) {\n        this._sourceOrigins = [\n            parseUrl(sourceOrigin).origin,\n            appendWww(parseUrl(sourceOrigin)).origin,\n        ];\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType], context?: TContext) => void,\n    ): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType], context?: TContext): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach((listener) => (context ? listener(event, context) : listener(event)));\n    }\n\n    @bind\n    private _handleMessage(messageEvent: MessageEvent): void {\n        if (\n            this._sourceOrigins.indexOf(messageEvent.origin) === -1 ||\n            !isIframeEvent(messageEvent.data as TEventMap[keyof TEventMap], messageEvent.data.type)\n        ) {\n            return;\n        }\n\n        const { context, ...event } = messageEvent.data;\n\n        this.trigger(event, context);\n    }\n}\n\nexport type EventListeners<TEventMap, TContext = undefined> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key], context?: TContext) => void>;\n};\n","import parseUrl from './parse-url';\nimport Url from './url';\n\nexport default function appendWww(url: Url): Url {\n    return parseUrl(\n        url.hostname.indexOf('www') === 0\n            ? url.href\n            : url.href.replace(url.hostname, `www.${url.hostname}`),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam protection challenge. Please try again.\");\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class CardingProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('Please complete our human verification challenge and try again.');\n\n        this.name = 'CardingProtectionChallengeNotCompletedError';\n        this.type = 'carding_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class CardingProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to verify that you are not a robot. Please try again.');\n\n        this.name = 'CardingProtectionFailedError';\n        this.type = 'carding_protection_failed';\n    }\n}\n","import { switchMap, take } from 'rxjs/operators';\n\nimport { RequestError } from '../common/error/errors';\nimport { PaymentAdditionalAction } from '../payment';\n\nimport {\n    CardingProtectionChallengeNotCompletedError,\n    CardingProtectionFailedError,\n    SpamProtectionChallengeNotCompletedError,\n} from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\n\nexport default class PaymentHumanVerificationHandler {\n    constructor(private _googleRecaptcha: GoogleRecaptcha) {}\n\n    handle(error: any): Promise<PaymentAdditionalAction>;\n    handle(id: string, key: string): Promise<PaymentAdditionalAction>;\n    async handle(errorOrId: Error | string, key?: string): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this.handleWithRecaptchaSitekey(errorOrId, key);\n        }\n\n        return this.handleWithPaymentHumanVerificationRequestError(errorOrId);\n    }\n\n    private async handleWithPaymentHumanVerificationRequestError(\n        error: Error,\n    ): Promise<PaymentAdditionalAction> {\n        if (!this._isPaymentHumanVerificationRequest(error)) {\n            throw error;\n        }\n\n        await this._initialize(error.body.additional_action_required.data.key);\n\n        return this._performRecaptcha();\n    }\n\n    private async handleWithRecaptchaSitekey(\n        id: string,\n        key?: string,\n    ): Promise<PaymentAdditionalAction> {\n        if (id !== 'recaptcha_v2') {\n            throw Error('Human verification method is not supported.');\n        }\n\n        if (!key) {\n            throw Error('Recaptcha site key is missing.');\n        }\n\n        await this._initialize(key);\n\n        return this._performRecaptcha();\n    }\n\n    private _performRecaptcha(): Promise<PaymentAdditionalAction> {\n        return this._googleRecaptcha\n            .execute()\n            .pipe(take(1))\n            .pipe(\n                switchMap(async ({ error, token }) => {\n                    if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                        throw new CardingProtectionChallengeNotCompletedError();\n                    }\n\n                    if (error || !token) {\n                        throw new CardingProtectionFailedError();\n                    }\n\n                    return {\n                        type: 'recaptcha_v2_verification',\n                        data: {\n                            human_verification_token: token,\n                        },\n                    };\n                }),\n            )\n            .toPromise();\n    }\n\n    private _initialize(recaptchaSitekey: string): Promise<void> {\n        const cardingProtectionElementId = 'cardingProtectionContainer';\n\n        let cardingProtectionElement = document.getElementById(cardingProtectionElementId);\n\n        if (cardingProtectionElement && cardingProtectionElement.parentNode) {\n            cardingProtectionElement.parentNode.removeChild(cardingProtectionElement);\n        }\n\n        cardingProtectionElement = document.createElement('div');\n        cardingProtectionElement.setAttribute('id', cardingProtectionElementId);\n        document.body.appendChild(cardingProtectionElement);\n\n        return this._googleRecaptcha.load(cardingProtectionElementId, recaptchaSitekey);\n    }\n\n    private _isPaymentHumanVerificationRequest(error: Error): error is RequestError {\n        const { additional_action_required, status } = (error as RequestError).body || {};\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'recaptcha_v2_verification'\n        );\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport {\n    SpamProtectionChallengeNotCompletedError,\n    SpamProtectionFailedError,\n    SpamProtectionNotLoadedError,\n} from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nconst TIMEOUT = 7000;\nconst RETRY_INTERVAL = 250;\nconst MAX_RETRIES = TIMEOUT / RETRY_INTERVAL;\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (\n        recaptcha: ReCaptchaV2.ReCaptcha,\n        sitekey: string,\n        container: HTMLElement | null,\n    ) => Subject<RecaptchaResult>;\n    private _widgetId?: number;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory,\n    ) {\n        this._memoized = memoize(\n            (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n                const event$ = new Subject<RecaptchaResult>();\n\n                if (!container) {\n                    throw new Error();\n                }\n\n                this._widgetId = recaptcha.render(container.id, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(this._widgetId),\n                        });\n                        recaptcha.reset(this._widgetId);\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                return event$;\n            },\n            { isEqual: (a, b) => a === b },\n        );\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader\n            .load()\n            .then((recaptcha) => {\n                if (recaptcha) {\n                    this._event$ = this._memoized(\n                        recaptcha,\n                        sitekey,\n                        document.getElementById(containerId),\n                    );\n                    this._recaptcha = recaptcha;\n                }\n            })\n            .catch((err) => {\n                throw err;\n            });\n    }\n\n    reset(containerId: string): void {\n        const element = document.getElementById(containerId);\n\n        element?.remove();\n        this._recaptcha?.reset(this._widgetId);\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        return defer(() => {\n            const event$ = this._event$;\n            const recaptcha = this._recaptcha;\n\n            if (!event$ || !recaptcha) {\n                throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n            }\n\n            return defer(() => {\n                const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n                return element ? of(element) : throwError(new SpamProtectionNotLoadedError());\n            }).pipe(\n                retryWhen((errors) =>\n                    errors.pipe(\n                        delay(RETRY_INTERVAL),\n                        switchMap((error, index) =>\n                            index < MAX_RETRIES ? of(error) : throwError(error),\n                        ),\n                    ),\n                ),\n                switchMap((element) => {\n                    this._watchRecaptchaChallengeWindow(event$, element);\n                    recaptcha.execute(this._widgetId);\n\n                    return event$;\n                }),\n                catchError((error) => of({ error })),\n            );\n        });\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory\n            .create(() => {\n                // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n                if (container.style.visibility === 'hidden') {\n                    event.next({\n                        error: new SpamProtectionChallengeNotCompletedError(),\n                    });\n                }\n            })\n            .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha | undefined>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window,\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        const callbackName = 'initRecaptcha';\n        const params = [`onload=${callbackName}`, 'render=explicit'].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader\n                .loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch((error) => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader): GoogleRecaptcha {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory(),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed due to invalid configuration provided for the hosted payment form.',\n        );\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\n\n        this.name = 'InvalidHostedFormError';\n        this.type = 'invalid_hosted_form';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(public errors: HostedInputValidateErrorDataMap) {\n        super(\n            [\n                'Unable to proceed due to invalid user input values',\n                ...flatMap(values(errors), (fieldErrors) =>\n                    map(fieldErrors, ({ message }) => message),\n                ),\n            ].join('. '),\n        );\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n    StoredCardRequested = 'HOSTED_FIELD:STORED_CARD_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n    [HostedFieldEventType.StoredCardRequested]: HostedFieldStoredCardRequestEvent;\n}\n\nexport type HostedFieldEvent =\n    | HostedFieldAttachEvent\n    | HostedFieldSubmitRequestEvent\n    | HostedFieldValidateRequestEvent\n    | HostedFieldStoredCardRequestEvent;\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        origin?: string;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n\nexport interface HostedFieldStoredCardRequestEvent {\n    type: HostedFieldEventType.StoredCardRequested;\n    payload: {\n        data: StoredCardHostedFormData;\n        fields: StoredCardHostedFormInstrumentFields;\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentErrorData,\n    PaymentErrorResponseBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport HostedFieldType from '../hosted-field-type';\nimport { HostedFormErrorsData } from '../hosted-form-options';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n    StoredCardSucceeded = 'HOSTED_INPUT:STORED_CARD_SUCCEEDED',\n    StoredCardFailed = 'HOSTED_INPUT:STORED_CARD_FAILED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n    [HostedInputEventType.StoredCardFailed]: HostedInputStoredCardErrorEvent;\n    [HostedInputEventType.StoredCardSucceeded]: HostedInputStoredCardSucceededEvent;\n}\n\n// Events\nexport type HostedInputEvent =\n    | HostedInputAttachSuccessEvent\n    | HostedInputAttachErrorEvent\n    | HostedInputBinChangeEvent\n    | HostedInputBlurEvent\n    | HostedInputChangeEvent\n    | HostedInputCardTypeChangeEvent\n    | HostedInputEnterEvent\n    | HostedInputFocusEvent\n    | HostedInputSubmitSuccessEvent\n    | HostedInputSubmitErrorEvent\n    | HostedInputValidateEvent\n    | HostedInputStoredCardSucceededEvent\n    | HostedInputStoredCardErrorEvent;\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputStoredCardSucceededEvent {\n    type: HostedInputEventType.StoredCardSucceeded;\n}\n\nexport interface HostedInputStoredCardErrorEvent {\n    type: HostedInputEventType.StoredCardFailed;\n    payload?: {\n        errors?: string[];\n        error?: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n        errors?: HostedFormErrorsData;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n    payload: {\n        response: Response<unknown>;\n    };\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import { values } from 'lodash';\nimport { fromEvent } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { DetachmentObserver } from '../common/dom';\nimport { mapFromPaymentErrorResponse } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { parseUrl } from '../common/url';\nimport { CardInstrument } from '../payment/instrument';\n\nimport {\n    InvalidHostedFormConfigError,\n    InvalidHostedFormError,\n    InvalidHostedFormValueError,\n} from './errors';\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputStoredCardSucceededEvent,\n    HostedInputSubmitErrorEvent,\n    HostedInputSubmitSuccessEvent,\n    HostedInputValidateEvent,\n} from './iframe-content';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\nexport const RETRY_INTERVAL = 60 * 1000;\nexport const LAST_RETRY_KEY = 'lastRetry';\n\nexport default class HostedField {\n    private _iframe: HTMLIFrameElement;\n\n    constructor(\n        private _type: HostedFieldType,\n        private _containerId: string,\n        private _placeholder: string,\n        private _accessibilityLabel: string,\n        private _styles: HostedFieldStylesMap,\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _detachmentObserver: DetachmentObserver,\n        private _checkoutId?: string,\n        private _cardInstrument?: CardInstrument,\n    ) {\n        this._iframe = document.createElement('iframe');\n\n        const src = this._checkoutId\n            ? `/checkout/payment/hosted-field?version=${LIBRARY_VERSION}&checkoutId=${this._checkoutId}`\n            : `/checkout/payment/hosted-field?version=${LIBRARY_VERSION}`;\n\n        this._iframe.src = src;\n        this._iframe.style.border = 'none';\n        this._iframe.style.height = '100%';\n        this._iframe.style.overflow = 'hidden';\n        this._iframe.style.width = '100%';\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    async attach(): Promise<void> {\n        const container = document.getElementById(this._containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the provided container ID is not valid.',\n            );\n        }\n\n        container.appendChild(this._iframe);\n        this._eventListener.listen();\n\n        const promise = fromEvent(this._iframe, 'load')\n            .pipe(\n                switchMap(async ({ target }) => {\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\n\n                    if (!contentWindow) {\n                        throw new Error('The content window of the iframe cannot be accessed.');\n                    }\n\n                    this._eventPoster.setTarget(contentWindow);\n\n                    await this._eventPoster.post(\n                        {\n                            type: HostedFieldEventType.AttachRequested,\n                            payload: {\n                                accessibilityLabel: this._accessibilityLabel,\n                                cardInstrument: this._cardInstrument,\n                                fontUrls: this._getFontUrls(),\n                                placeholder: this._placeholder,\n                                styles: this._styles,\n                                origin: document.location.origin,\n                                type: this._type,\n                            },\n                        },\n                        {\n                            successType: HostedInputEventType.AttachSucceeded,\n                            errorType: HostedInputEventType.AttachFailed,\n                        },\n                    );\n                }),\n                take(1),\n            )\n            .toPromise();\n\n        await this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    detach(): void {\n        if (!this._iframe.parentElement) {\n            return;\n        }\n\n        this._iframe.parentElement.removeChild(this._iframe);\n        this._eventListener.stopListen();\n    }\n\n    async submitForm(\n        fields: HostedFieldType[],\n        data: HostedFormOrderData,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            const promise = this._eventPoster.post<HostedInputSubmitSuccessEvent>(\n                {\n                    type: HostedFieldEventType.SubmitRequested,\n                    payload: { fields, data },\n                },\n                {\n                    successType: HostedInputEventType.SubmitSucceeded,\n                    errorType: HostedInputEventType.SubmitFailed,\n                },\n            );\n\n            return await this._detachmentObserver.ensurePresence([this._iframe], promise);\n        } catch (event) {\n            if (this._isSubmitErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.response) {\n                    throw mapFromPaymentErrorResponse(event.payload.response);\n                }\n\n                throw new Error(event.payload.error.message);\n            }\n\n            throw event;\n        }\n    }\n\n    async submitStoredCardForm(\n        fields: StoredCardHostedFormInstrumentFields,\n        data: StoredCardHostedFormData,\n    ): Promise<HostedInputStoredCardSucceededEvent> {\n        const promise = this._eventPoster.post<HostedInputStoredCardSucceededEvent>(\n            {\n                type: HostedFieldEventType.StoredCardRequested,\n                payload: { fields, data },\n            },\n            {\n                successType: HostedInputEventType.StoredCardSucceeded,\n                errorType: HostedInputEventType.StoredCardFailed,\n            },\n        );\n\n        return this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    async validateForm(): Promise<void> {\n        const promise = this._eventPoster.post<HostedInputValidateEvent>(\n            {\n                type: HostedFieldEventType.ValidateRequested,\n            },\n            {\n                successType: HostedInputEventType.Validated,\n            },\n        );\n\n        const { payload } = await this._detachmentObserver.ensurePresence([this._iframe], promise);\n\n        if (!payload.isValid) {\n            throw new InvalidHostedFormValueError(payload.errors);\n        }\n    }\n\n    private _getFontUrls(): string[] {\n        const hostname = 'fonts.googleapis.com';\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\n\n        return Array.prototype.slice\n            .call(links)\n            .filter((link) => parseUrl(link.href).hostname === hostname)\n            .filter((link) =>\n                values(this._styles)\n                    .map((style) => style && style.fontFamily)\n                    .filter((family): family is string => typeof family === 'string')\n                    .some((family) =>\n                        family\n                            .split(/,\\s/)\n                            .some((name) => link.href.indexOf(name.replace(' ', '+')) !== -1),\n                    ),\n            )\n            .map((link) => link.href);\n    }\n\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\n        return event.type === HostedInputEventType.SubmitFailed;\n    }\n}\n","import { noop, without } from 'lodash';\n\nimport { HostedForm as HostedFormInterface } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { IframeEventListener } from '../common/iframe';\nimport { OrderPaymentRequestBody } from '../order';\nimport { PaymentAdditionalAction } from '../payment';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport { InvalidHostedFormConfigError } from './errors';\nimport HostedField from './hosted-field';\nimport LegacyHostedFormOptions from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\nimport {\n    HostedInputEnterEvent,\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputStoredCardSucceededEvent,\n    HostedInputSubmitSuccessEvent,\n} from './iframe-content';\nimport {\n    StoredCardHostedFormData,\n    StoredCardHostedFormInstrumentFields,\n} from './stored-card-hosted-form-type';\n\ntype HostedFormEventCallbacks = Pick<\n    LegacyHostedFormOptions,\n    'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onEnter' | 'onValidate'\n>;\n\nexport default class HostedForm implements HostedFormInterface {\n    private _bin?: string;\n    private _cardType?: string;\n\n    constructor(\n        private _fields: HostedField[],\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _payloadTransformer: HostedFormOrderDataTransformer,\n        private _eventCallbacks: HostedFormEventCallbacks,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {\n        const {\n            onBlur = noop,\n            onCardTypeChange = noop,\n            onFocus = noop,\n            onValidate = noop,\n        } = this._eventCallbacks;\n\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) =>\n            onBlur(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) =>\n            onCardTypeChange(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) =>\n            onFocus(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) =>\n            onValidate(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Entered, this._handleEnter);\n\n        this._eventListener.addListener(\n            HostedInputEventType.CardTypeChanged,\n            ({ payload }) => (this._cardType = payload.cardType),\n        );\n        this._eventListener.addListener(\n            HostedInputEventType.BinChanged,\n            ({ payload }) => (this._bin = payload.bin),\n        );\n    }\n\n    getBin(): string | undefined {\n        return this._bin;\n    }\n\n    getCardType(): string | undefined {\n        return this._cardType;\n    }\n\n    async attach(): Promise<void> {\n        this._eventListener.listen();\n\n        const field = this._getFirstField();\n        const otherFields = without(this._fields, field);\n\n        await field.attach();\n        await Promise.all(otherFields.map((otherField) => otherField.attach()));\n    }\n\n    detach(): void {\n        this._eventListener.stopListen();\n\n        this._fields.forEach((field) => {\n            field.detach();\n        });\n    }\n\n    async submit(\n        payload: OrderPaymentRequestBody,\n        additionalActionData?: PaymentAdditionalAction,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalActionData),\n            );\n        } catch (error) {\n            const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalAction),\n            );\n        }\n    }\n\n    async submitStoredCard(payload: {\n        fields: StoredCardHostedFormInstrumentFields;\n        data: StoredCardHostedFormData;\n    }): Promise<HostedInputStoredCardSucceededEvent | void> {\n        return this._getFirstField().submitStoredCardForm(payload.fields, payload.data);\n    }\n\n    async validate(): Promise<void> {\n        return this._getFirstField().validateForm();\n    }\n\n    private _getFirstField(): HostedField {\n        const field = this._fields[0];\n\n        if (!field) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the payment form has no field defined.',\n            );\n        }\n\n        return field;\n    }\n\n    private _handleEnter: (event: HostedInputEnterEvent) => Promise<void> = async ({ payload }) => {\n        try {\n            await this.validate();\n        } catch (error) {\n            // Catch form validation error because we want to trigger `onEnter`\n            // irrespective of the validation result.\n            if (error instanceof Error && error.name !== 'InvalidHostedFormValueError') {\n                throw error;\n            }\n        }\n\n        const { onEnter = noop } = this._eventCallbacks;\n\n        onEnter(payload);\n    };\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import { omit } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { OrderPaymentRequestBody } from '../order';\nimport {\n    HostedCreditCardInstrument,\n    isVaultedInstrument,\n    PaymentAdditionalAction,\n} from '../payment';\n\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport default class HostedFormOrderDataTransformer {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    transform(\n        payload: OrderPaymentRequestBody,\n        additionalAction?: PaymentAdditionalAction,\n    ): HostedFormOrderData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const order = state.order.getOrder();\n        const orderMeta = state.order.getOrderMeta();\n        const payment = omit(\n            payload.paymentData,\n            'ccExpiry',\n            'ccName',\n            'ccNumber',\n            'ccCvv',\n        ) as HostedCreditCardInstrument;\n        const paymentMethod = state.paymentMethods.getPaymentMethod(\n            payload.methodId,\n            payload.gatewayId,\n        );\n        const paymentMethodMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const authToken =\n            instrumentMeta && payment && isVaultedInstrument(payment)\n                ? `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment,\n            paymentMethod,\n            paymentMethodMeta,\n        };\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\nimport { pick } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { DetachmentObserver, MutationObserverFactory } from '../common/dom';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { CardInstrument } from '../payment/instrument';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport HostedField from './hosted-field';\nimport HostedFieldType from './hosted-field-type';\nimport HostedForm from './hosted-form';\nimport LegacyHostedFormOptions, {\n    HostedCardFieldOptionsMap,\n    HostedStoredCardFieldOptionsMap,\n} from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\n\nexport default class HostedFormFactory {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    create(host: string, options: LegacyHostedFormOptions, checkoutId?: string): HostedForm {\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\n            const fields = options.fields as HostedStoredCardFieldOptionsMap &\n                HostedCardFieldOptionsMap;\n            const fieldOptions = fields[type];\n\n            if (!fieldOptions) {\n                return result;\n            }\n\n            return [\n                ...result,\n                new HostedField(\n                    type,\n                    fieldOptions.containerId,\n                    fieldOptions.placeholder || '',\n                    fieldOptions.accessibilityLabel || '',\n                    options.styles || {},\n                    new IframeEventPoster(host),\n                    new IframeEventListener(host),\n                    new DetachmentObserver(new MutationObserverFactory()),\n                    checkoutId,\n                    'instrumentId' in fieldOptions\n                        ? this._getCardInstrument(fieldOptions.instrumentId)\n                        : undefined,\n                ),\n            ];\n        }, []);\n\n        return new HostedForm(\n            fields,\n            new IframeEventListener(host),\n            new HostedFormOrderDataTransformer(this._store),\n            pick(options, 'onBlur', 'onEnter', 'onFocus', 'onCardTypeChange', 'onValidate'),\n            new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n        );\n    }\n\n    private _getCardInstrument(instrumentId: string): CardInstrument {\n        const {\n            instruments: { getCardInstrument },\n        } = this._store.getState();\n        const instrument = getCardInstrument(instrumentId);\n\n        if (!instrument) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentInstrument);\n        }\n\n        return instrument;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam check. Please try again.\");\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, Observer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport {\n    FinalizeOrderAction,\n    LoadOrderAction,\n    LoadOrderPaymentsAction,\n    OrderActionType,\n    SubmitOrderAction,\n} from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(\n                        createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response),\n                    );\n                });\n        });\n    }\n\n    loadCurrentOrder(\n        options?: RequestOptions,\n    ): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            defer(() => {\n                const orderId = this._getCurrentOrderId(store.getState());\n\n                if (!orderId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n                }\n\n                return this.loadOrder(orderId, options);\n            });\n    }\n\n    submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(OrderActionType.SubmitOrderRequested)),\n                defer(() => {\n                    const state = store.getState();\n                    const externalSource = state.config.getExternalSource();\n                    const variantIdentificationToken = state.config.getVariantIdentificationToken();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    if (checkout.shouldExecuteSpamCheck) {\n                        throw new SpamProtectionNotCompletedError();\n                    }\n\n                    return from(\n                        this._checkoutValidator.validate(checkout, options).then(() =>\n                            this._orderRequestSender.submitOrder(\n                                this._mapToOrderRequestBody(\n                                    payload ?? {},\n                                    checkout.id,\n                                    checkout.customerMessage,\n                                    externalSource,\n                                ),\n                                {\n                                    ...options,\n                                    headers: {\n                                        checkoutVariant: variantIdentificationToken,\n                                    },\n                                },\n                            ),\n                        ),\n                    ).pipe(\n                        switchMap((response) =>\n                            concat(\n                                // TODO: Remove once we can submit orders using storefront API\n                                this.loadOrder(response.body.data.order.orderId, options),\n                                of(\n                                    createAction(\n                                        OrderActionType.SubmitOrderSucceeded,\n                                        response.body.data,\n                                        { ...response.body.meta, token: response.headers.token },\n                                    ),\n                                ),\n                            ),\n                        ),\n                    );\n                }).pipe(\n                    catchError((error) =>\n                        throwErrorAction(OrderActionType.SubmitOrderFailed, error),\n                    ),\n                ),\n            );\n    }\n\n    finalizeOrder(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options)).pipe(\n                switchMap((response) =>\n                    concat(\n                        this.loadOrder(orderId, options),\n                        of(\n                            createAction(\n                                OrderActionType.FinalizeOrderSucceeded,\n                                response.body.data,\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ).pipe(catchError((error) => throwErrorAction(OrderActionType.FinalizeOrderFailed, error)));\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        cartId: string,\n        customerMessage: string,\n        externalSource?: string,\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                cartId,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            cartId,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error is thrown when the server detects inconsistency in cart data since it is last requested,\n * for example, product prices or eligible discounts have changed.\n */\nexport default class CartConsistencyError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Your checkout could not be processed because some details have changed. Please review your order and try again.',\n        );\n\n        this.name = 'CartConsistencyError';\n        this.type = 'cart_consistency';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Checkout prevents consumers from placing their orders when a merchant wishes\n * to be able to block transactions if the automated tax provider cannot be reached.\n */\nexport default class OrderTaxProviderUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The tax provider is unavailable.');\n\n        this.name = 'OrderTaxProviderUnavailableError';\n        this.type = 'tax_provider_unavailable';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class MissingShippingMethodError extends StandardError {\n    constructor(message: string) {\n        super(message);\n\n        this.name = 'MissingShippingMethodError';\n        this.type = 'missing_shipping_method';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidShippingAddressError extends StandardError {\n    constructor(message: string) {\n        super(message);\n\n        this.name = 'InvalidShippingAddressError';\n        this.type = 'invalid_shipping_address';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { isNil, omitBy } from 'lodash';\n\nimport { CartConsistencyError, EmptyCartError } from '../cart/errors';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { MissingShippingMethodError, OrderTaxProviderUnavailableError } from './errors';\nimport InvalidShippingAddressError from './errors/invalid-shipping-address-error';\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport interface SubmitOrderRequestOptions extends RequestOptions {\n    headers?: {\n        checkoutVariant?: string;\n    };\n}\n\nexport default class OrderRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.physicalItems.categories',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n            'lineItems.digitalItems.categories',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes(include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(\n        body?: InternalOrderRequestBody,\n        { headers, timeout }: SubmitOrderRequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender\n            .post<InternalOrderResponseBody>(url, {\n                body,\n                headers: omitBy(\n                    {\n                        'X-Checkout-Variant': headers && headers.checkoutVariant,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                    isNil,\n                ),\n                timeout,\n            })\n            .catch((error) => {\n                if (error.body.type === 'tax_provider_unavailable') {\n                    throw new OrderTaxProviderUnavailableError();\n                }\n\n                if (error.body.type === 'cart_has_changed') {\n                    throw new CartConsistencyError();\n                }\n\n                if (error.body.type === 'missing_shipping_method') {\n                    throw new MissingShippingMethodError(error.body.detail);\n                }\n\n                if (error.body.type === 'invalid_shipping_address') {\n                    throw new InvalidShippingAddressError(error.body.detail);\n                }\n\n                if (error.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw error;\n            });\n    }\n\n    finalizeOrder(\n        orderId: number,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport Payment, {\n    FormattedHostedInstrument,\n    FormattedPayload,\n    FormattedVaultedInstrument,\n} from './payment';\nimport {\n    InitializeOffsitePaymentAction,\n    PaymentActionType,\n    SubmitPaymentAction,\n} from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\ninterface InitializeOffsitePaymentSettings {\n    methodId: string;\n    gatewayId?: string;\n    instrumentId?: string;\n    target?: string;\n    promise?: Promise<undefined>;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n\ntype InitializeOffsitePayment = (\n    settings: InitializeOffsitePaymentSettings,\n) => ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors>;\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(PaymentActionType.SubmitPaymentRequested)),\n                defer(async () => {\n                    try {\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(payment, store.getState()),\n                        );\n                    } catch (error) {\n                        const additionalAction = await this._paymentHumanVerificationHandler.handle(\n                            error,\n                        );\n\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(\n                                { ...payment, additionalAction },\n                                store.getState(),\n                            ),\n                        );\n                    }\n                }).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._orderActionCreator.loadCurrentOrder()(store),\n                            of(createAction(PaymentActionType.SubmitPaymentSucceeded, body)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.SubmitPaymentFailed, error),\n                ),\n            );\n    }\n\n    initializeOffsitePayment: InitializeOffsitePayment = ({\n        methodId,\n        gatewayId,\n        instrumentId,\n        target,\n        promise,\n        shouldSaveInstrument,\n        shouldSetAsDefaultInstrument,\n    }) => {\n        return (store) => {\n            let paymentData:\n                | FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument>\n                | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = {\n                    formattedPayload: {\n                        vault_payment_instrument: shouldSaveInstrument,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                };\n            }\n\n            const payload = this._paymentRequestTransformer.transform(\n                { gatewayId, methodId, paymentData },\n                store.getState(),\n            );\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                Promise.race(\n                    [\n                        this._paymentRequestSender.initializeOffsitePayment(payload, target),\n                        promise,\n                    ].filter(Boolean),\n                ).then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded)),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error),\n                ),\n            );\n        };\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @class\n     * @param {BigpayClient} client\n     */\n    constructor(private _client: any) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response<any> {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/bigpay-client\");","import { BillingAddress, isBillingAddressLike } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[],\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * 10 ** this._decimalPlaces);\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(\n    giftCertificate: GiftCertificate,\n): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","enum CheckoutButtonMethodType {\n    APPLEPAY = \"applepay\",\n    AMAZON_PAY_V2 = \"amazonpay\",\n    BRAINTREE_PAYPAL = \"braintreepaypal\",\n    BRAINTREE_VENMO = \"braintreevenmo\",\n    BRAINTREE_PAYPAL_CREDIT = \"braintreepaypalcredit\",\n    GOOGLEPAY_ADYENV2 = \"googlepayadyenv2\",\n    GOOGLEPAY_ADYENV3 = \"googlepayadyenv3\",\n    GOOGLEPAY_AUTHORIZENET = \"googlepayauthorizenet\",\n    GOOGLEPAY_BNZ = \"googlepaybnz\",\n    GOOGLEPAY_BRAINTREE = \"googlepaybraintree\",\n    GOOGLEPAY_CHECKOUTCOM = \"googlepaycheckoutcom\",\n    GOOGLEPAY_CYBERSOURCEV2 = \"googlepaycybersourcev2\",\n    GOOGLEPAY_ORBITAL = \"googlepayorbital\",\n    GOOGLEPAY_STRIPE = \"googlepaystripe\",\n    GOOGLEPAY_STRIPEUPE = \"googlepaystripeupe\",\n    GOOGLEPAY_WORLDPAYACCESS = \"googlepayworldpayaccess\",\n    MASTERPASS = \"masterpass\",\n    PAYPALEXPRESS = \"paypalexpress\"\n}\nexport default CheckoutButtonMethodType;\n\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>).reduce(\n        (result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey,\n                );\n            }),\n        ],\n        [] as InternalLineItem[],\n    );\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number,\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item[idKey] as string | number,\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map((option) => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(\n                checkout.cart.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(\n                checkout.giftCertificates,\n                (sum, certificate) => {\n                    return sum + certificate.used;\n                },\n                0,\n            ),\n            appliedGiftCertificates: keyBy(\n                checkout.giftCertificates.map(mapToInternalGiftCertificate),\n                'code',\n            ),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                checkout.shippingCostBeforeDiscount,\n            ),\n            required: some(\n                checkout.cart.lineItems.physicalItems,\n                (lineItem) => lineItem.isShippingRequired,\n            ),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(\n    promotions?: Promotion[],\n): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach((promotion) => {\n        (promotion.banners || []).forEach((banner) => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { mapToInternalAddress } from '../address';\nimport { OrderBillingAddress } from '../order-billing-address/order-billing-address-state';\n\nimport InternalCustomer from './internal-customer';\n\nimport { Customer } from '.';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(\n    customer: Customer,\n    billingAddress: OrderBillingAddress,\n): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map((address) => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear =\n            year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"card-validator\");","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter((gapIndex) => unformattedValue.length > gapIndex)\n            .reduce(\n                (output, gapIndex, index) =>\n                    [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(\n                        NUMBER_SEPARATOR,\n                    ),\n                unformattedValue,\n            );\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { LineItem, mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, {\n    InternalGiftCertificateList,\n    InternalIncompleteOrder,\n    InternalOrderPayment,\n    InternalSocialDataList,\n} from './internal-order';\nimport Order, {\n    GatewayOrderPayment,\n    GiftCertificateOrderPayment,\n    OrderPayment,\n    OrderPayments,\n} from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(\n    order: Order,\n    orderMeta: OrderMetaState = {},\n): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(\n                order.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                order.shippingCostBeforeDiscount,\n            ),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment\n            ? {}\n            : {\n                  id: payment.providerId,\n                  gateway: payment.gatewayId,\n                  status: mapToInternalPaymentStatus(payment.detail.step),\n              },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, {\n        providerId: 'giftcertificate',\n    }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(\n            items.map((item) => ({\n                code: item.detail.code,\n                discountedAmount: item.amount,\n                remainingBalance: item.detail.remaining,\n                giftCertificate: {\n                    balance: item.amount + item.detail.remaining,\n                    code: item.detail.code,\n                    purchaseDate: '',\n                },\n            })),\n            'code',\n        ),\n    };\n}\n\nfunction mapToInternalOrderPayment(\n    payments?: OrderPayments,\n    payment: InternalOrderPayment = {},\n): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(\n    order: Order,\n): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [...order.lineItems.physicalItems, ...order.lineItems.digitalItems];\n\n    items.forEach((item) => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item =\n            lineItem.socialMedia && find(lineItem.socialMedia, (item) => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(\n    option: ShippingOption,\n    isSelected: boolean,\n): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { pick } from 'lodash';\n\nimport { Address, mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { CheckoutButtonMethodType } from '../checkout-buttons/strategies';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport {\n    CardExpiryFormatter,\n    CardNumberFormatter,\n    HostedInputValues,\n} from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, {\n    HostedCreditCardInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n} from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(\n            payment.methodId,\n            payment.gatewayId,\n        );\n        const shippingAddress = this._mapShippingAddress(checkoutState, paymentMethod);\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer =\n            customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken =\n            instrumentMeta &&\n            payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) ||\n                isFormattedVaultedInstrument(payment.paymentData))\n                ? `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(\n        values: HostedInputValues,\n        data: HostedFormOrderData,\n        nonce: string,\n    ): PaymentRequestBody {\n        const {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment = {},\n            paymentMethod,\n            paymentMethodMeta,\n        } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            additionalAction,\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer:\n                order &&\n                order.billingAddress &&\n                checkout &&\n                mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress:\n                order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress:\n                shippingAddress &&\n                checkout &&\n                mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment, nonce),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store:\n                config &&\n                pick(config.storeConfig.storeProfile, [\n                    'storeHash',\n                    'storeId',\n                    'storeLanguage',\n                    'storeName',\n                ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        if (paymentMethod.id === CheckoutButtonMethodType.BRAINTREE_VENMO) {\n            return { ...paymentMethod, id: CheckoutButtonMethodType.BRAINTREE_PAYPAL };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(\n        values: HostedInputValues,\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\n        nonce: string,\n    ): PaymentInstrument {\n        return 'instrumentId' in payment\n            ? {\n                  ...payment,\n                  ccCvv: values.cardCodeVerification,\n                  ccNumber:\n                      values.cardNumberVerification &&\n                      this._cardNumberFormatter.unformat(values.cardNumberVerification),\n                  hostedFormNonce: nonce,\n              }\n            : {\n                  ...payment,\n                  ccCvv: values.cardCode,\n                  ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                  ccName: values.cardName || '',\n                  ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n                  hostedFormNonce: nonce,\n              };\n    }\n\n    private _mapShippingAddress(\n        checkoutState: InternalCheckoutSelectors,\n        paymentMethod?: PaymentMethod,\n    ): Address | undefined {\n        if (paymentMethod) {\n            const isBopisEnabled = paymentMethod.initializationData?.bopis?.enabled;\n            const requiredAddress = paymentMethod.initializationData?.bopis?.requiredAddress;\n            const consignments = checkoutState.consignments.getConsignments();\n            const isPickup = consignments?.every((consignment) => consignment.selectedPickupOption);\n\n            if (isBopisEnabled && isPickup && requiredAddress === 'none') {\n                return undefined;\n            }\n        }\n\n        return checkoutState.shippingAddress.getShippingAddress();\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { Observable, of } from 'rxjs';\n\nimport { PaymentProviderCustomer } from './payment-provider-customer';\nimport {\n    PaymentProviderCustomerAction,\n    PaymentProviderCustomerType,\n} from './payment-provider-customer-actions';\n\nexport default class PaymentProviderCustomerActionCreator {\n    updatePaymentProviderCustomer(\n        providerCustomerData: PaymentProviderCustomer,\n    ): Observable<PaymentProviderCustomerAction> {\n        return of(\n            createAction(\n                PaymentProviderCustomerType.UpdatePaymentProviderCustomer,\n                providerCustomerData,\n            ),\n        );\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\n\nimport { PaymentRequestOptions } from './payment-request-options';\nimport { PaymentStrategyActionType, PaymentStrategyWidgetAction } from './payment-strategy-actions';\n\nexport default class PaymentStrategyWidgetActionCreator {\n    widgetInteraction(\n        method: () => Promise<unknown>,\n        options?: PaymentRequestOptions,\n    ): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() =>\n                    createAction(\n                        PaymentStrategyActionType.WidgetInteractionFinished,\n                        undefined,\n                        meta,\n                    ),\n                ),\n            ),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta),\n            ),\n        );\n    }\n}\n","import { Action, createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutActionCreator } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, {\n    InitializePaymentOptions,\n} from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n    ) {}\n\n    initializeBilling(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializeShipping(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(\n                    RemoteCheckoutActionType.InitializeRemoteShippingRequested,\n                    undefined,\n                    { methodId },\n                ),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializePayment(\n        methodId: string,\n        params?: InitializePaymentOptions,\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(\n                        createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, {\n                            methodId,\n                        }),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.LoadRemoteSettingsFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .signOut(methodId, options)\n                .then(() => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded,\n                            undefined,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    forgetCheckout(methodId: string, options?: RequestOptions): Observable<Action> {\n        return concat(\n            of(\n                createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested,\n                    undefined,\n                    { methodId },\n                ),\n            ),\n            defer(async () => {\n                await this._remoteCheckoutRequestSender.forgetCheckout(options);\n                await this._checkoutActionCreator.loadCurrentCheckout();\n\n                return createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded,\n                    undefined,\n                    { methodId },\n                );\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed,\n                    error,\n                    { methodId },\n                ),\n            ),\n        );\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(\n        methodId: K,\n        data: Partial<RemoteCheckoutStateData[K]>,\n    ): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    initializeBilling(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializeShipping(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializePayment(\n        methodName: string,\n        params?: InitializePaymentOptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url =\n            '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    forgetCheckout({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/forget-checkout`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport {\n    CheckoutIncludes,\n    CheckoutParams,\n    CheckoutRequestSender,\n    InternalCheckoutSelectors,\n    ReadableCheckoutStore,\n} from '../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentAssignmentBaseRequestBodyWithAddress,\n    ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentsRequestBody,\n    ConsignmentUpdateRequestBody,\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender,\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart(),\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment(\n                {\n                    id: existingConsignment.id,\n                    address,\n                    lineItems,\n                },\n                options,\n            )(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            return this._createOrUpdateConsignment(\n                {\n                    id: existingConsignment && existingConsignment.id,\n                    address,\n                    lineItems: this._addLineItems(\n                        consignment.lineItems,\n                        existingConsignment,\n                        state.cart.getCart(),\n                    ),\n                },\n                options,\n            )(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n                const consignments = state.consignments.getConsignments();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!consignments || !consignments.length) {\n                    throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n                }\n\n                const consignmentUpdateBody = {\n                    id: consignments[0].id,\n                    shippingOptionId: id,\n                };\n\n                const consignmentMeta = {\n                    id: consignments[0].id,\n                };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignmentUpdateBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    loadShippingOptions(\n        options?: RequestOptions,\n    ): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n                this._checkoutRequestSender\n                    .loadCheckout(checkout.id, {\n                        ...options,\n                        params: {\n                            include: [CheckoutIncludes.AvailableShippingOptions],\n                        },\n                    })\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.LoadShippingOptionsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n                this._consignmentRequestSender\n                    .createConsignments(checkout.id, consignments, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.CreateConsignmentsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n                const consignmentMeta = { id: consignmentId };\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.DeleteConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .deleteConsignment(checkout.id, consignmentId, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.DeleteConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.DeleteConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                const consignmentInMemory = store\n                    .getState()\n                    .consignments.getConsignmentById(consignment.id);\n\n                const alreadySelectedOptionId = consignmentInMemory?.selectedShippingOption?.id;\n\n                if (alreadySelectedOptionId === consignment.shippingOptionId) {\n                    observer.complete();\n\n                    return;\n                }\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        address: AddressRequestBody,\n        store: ReadableCheckoutStore,\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            address,\n            lineItems: [...physicalItems, ...customItems].map((item) => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart)\n            .map((existingItem) => {\n                const sharedItem = find(\n                    lineItems,\n                    (lineItem) => lineItem.itemId === existingItem.itemId,\n                );\n\n                return {\n                    ...existingItem,\n                    quantity: sharedItem\n                        ? existingItem.quantity - sharedItem.quantity\n                        : existingItem.quantity,\n                };\n            })\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map((itemId) => {\n            const item = find(cart.lineItems.physicalItems, (lineItem) => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody,\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n\n    private _consignmentHasAddress(\n        consignment:\n            | ConsignmentAssignmentBaseRequestBodyWithAddress\n            | ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ): consignment is ConsignmentAssignmentBaseRequestBodyWithAddress {\n        return typeof consignment === 'object' && 'address' in consignment;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { EmptyCartError } from '../cart/errors';\nimport { Checkout, CheckoutParams } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n    'consignments.availableShippingOptions',\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'promotions.banners',\n];\n\nexport default class ConsignmentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .post<Checkout>(url, {\n                body: consignments,\n                params: {\n                    include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n                },\n                headers,\n                timeout,\n            })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .put<Checkout>(url, {\n                body,\n                params: {\n                    include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n                },\n                headers,\n                timeout,\n            })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender\n            .delete<Checkout>(url, { params: { include }, headers, timeout })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport CheckoutStore from '../checkout/checkout-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender,\n        private _store: CheckoutStore,\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        const { checkout } = this._store.getState();\n        const checkoutData = checkout.getCheckout();\n\n        const channelId = checkoutData ? checkoutData.channelId : null;\n\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender\n                .loadCountries(channelId, options)\n                .then((response) => {\n                    observer.next(\n                        createAction(\n                            ShippingCountryActionType.LoadShippingCountriesSucceeded,\n                            response.body.data,\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            ShippingCountryActionType.LoadShippingCountriesFailed,\n                            response,\n                        ),\n                    );\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(private _requestSender: RequestSender, private _config: { locale?: string }) {}\n\n    loadCountries(\n        channelId: number | null,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<CountryResponseBody>> {\n        const channelIdParam = channelId ? `?channel_id=${channelId}` : '';\n        const url = `/internalapi/v1/shipping/countries${channelIdParam}`;\n\n        const headers = {\n            'Accept-Language': this._config.locale,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\nimport isSpamProtectionExecuteSucceededAction from './is-spam-protection-succeeded-action';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\nimport SpamProtectionRequestSender from './spam-protection-request-sender';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha,\n        private _requestSender: SpamProtectionRequestSender,\n    ) {}\n\n    initialize(\n        options?: SpamProtectionOptions,\n    ): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) => {\n            return concat(\n                of(createAction(SpamProtectionActionType.InitializeRequested, undefined)),\n                defer(async () => {\n                    const spamProtectionElementId = options\n                        ? options.containerId\n                        : 'spamProtectionContainer';\n\n                    const element = document.getElementById(spamProtectionElementId);\n\n                    if (element) {\n                        this._googleRecaptcha.reset(spamProtectionElementId);\n                    }\n\n                    if (!options && !document.getElementById(spamProtectionElementId)) {\n                        const spamProtectionElement = document.createElement('div');\n\n                        spamProtectionElement.setAttribute('id', spamProtectionElementId);\n                        document.body.appendChild(spamProtectionElement);\n                    }\n\n                    const state = store.getState();\n                    const storeConfig = state.config.getStoreConfigOrThrow();\n                    const recaptchaSitekey = storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n                    await this._googleRecaptcha.load(spamProtectionElementId, recaptchaSitekey);\n\n                    return createAction(SpamProtectionActionType.InitializeSucceeded);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.InitializeFailed, error),\n                ),\n            );\n        };\n    }\n\n    verifyCheckoutSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return (store) =>\n            defer(() => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return concat(\n                    of(createAction(SpamProtectionActionType.VerifyCheckoutRequested)),\n                    from(this.execute()(store)).pipe(\n                        switchMap((action) => {\n                            if (\n                                !isSpamProtectionExecuteSucceededAction(action) ||\n                                !action.payload\n                            ) {\n                                return of(action);\n                            }\n\n                            return from(\n                                this._requestSender.validate(checkout.id, action.payload.token),\n                            ).pipe(\n                                switchMap(({ body }) =>\n                                    concat(\n                                        of(action),\n                                        of(\n                                            createAction(\n                                                SpamProtectionActionType.VerifyCheckoutSucceeded,\n                                                body,\n                                            ),\n                                        ),\n                                    ),\n                                ),\n                            );\n                        }),\n                    ),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(SpamProtectionActionType.VerifyCheckoutFailed, error),\n                    ),\n                );\n            });\n    }\n\n    execute(): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(SpamProtectionActionType.ExecuteRequested)),\n                this.initialize()(store),\n                this._googleRecaptcha\n                    .execute()\n                    .pipe(take(1))\n                    .pipe(\n                        switchMap(async ({ error, token }) => {\n                            if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                                throw error;\n                            }\n\n                            if (error || !token) {\n                                throw new SpamProtectionFailedError();\n                            }\n\n                            return createAction(SpamProtectionActionType.ExecuteSucceeded, {\n                                token,\n                            });\n                        }),\n                    ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(SpamProtectionActionType.ExecuteFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { EmptyCartError } from '../cart/errors';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class SpamProtectionRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    validate(\n        checkoutId: string,\n        token: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/spam-protection`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .post<Checkout>(url, { body: { token }, headers, timeout })\n            .catch((err) => {\n                if (err.body.type === 'empty_cart') {\n                    throw new EmptyCartError();\n                }\n\n                throw err;\n            });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(private _storeCreditRequestSender: StoreCreditRequestSender) {}\n\n    applyStoreCredit(\n        useStoreCredit: boolean,\n        options?: RequestOptions,\n    ): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n                defer(async () => {\n                    const state = store.getState();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    const { body } = await (useStoreCredit\n                        ? this._storeCreditRequestSender.applyStoreCredit(checkout.id, options)\n                        : this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                    return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error),\n                ),\n            );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    applyStoreCredit(\n        checkoutId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(\n        checkoutId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    Subscriptions,\n    SubscriptionsActionType,\n    SubscriptionsRequestSender,\n    UpdateSubscriptionsAction,\n} from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(private _subscriptionsRequestSender: SubscriptionsRequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(\n                    subscriptions,\n                    options,\n                );\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    SubscriptionsActionType.UpdateSubscriptionsFailed,\n                    new UpdateSubscriptionsError(error),\n                ),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        // Fixed in later versions of typescript https://github.com/microsoft/TypeScript/issues/36390\n        return (input as any[]).map((value: T[keyof T]) => cloneDeepSafe(value)) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>).reduce(\n            (result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }),\n            {},\n        ) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ? cloneDeep(input) : input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { cloneResult as clone } from '../common/utility';\n\nexport default function createPaymentIntegrationSelectors({\n    billingAddress: { getBillingAddress, getBillingAddressOrThrow },\n    cart: { getCart, getCartOrThrow },\n    checkout: { getCheckout, getCheckoutOrThrow, getOutstandingBalance },\n    config: {\n        getContextConfig,\n        getHost,\n        getLocale,\n        getStoreConfig,\n        getStoreConfigOrThrow,\n        getConfig,\n    },\n    consignments: { getConsignments, getConsignmentsOrThrow },\n    countries: { getCountries },\n    customer: { getCustomer, getCustomerOrThrow },\n    instruments: {\n        getCardInstrument,\n        getCardInstrumentOrThrow,\n        getInstruments,\n        getInstrumentsMeta,\n    },\n    order: { getOrder, getOrderOrThrow, getOrderMeta },\n    payment: {\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        isPaymentDataRequired,\n    },\n    paymentMethods: { getPaymentMethod, getPaymentMethodOrThrow, getPaymentMethodsMeta },\n    paymentProviderCustomer: { getPaymentProviderCustomer, getPaymentProviderCustomerOrThrow },\n    paymentStrategies: { isInitialized: isPaymentMethodInitialized },\n    shippingAddress: {\n        getShippingAddress,\n        getShippingAddressOrThrow,\n        getShippingAddresses,\n        getShippingAddressesOrThrow,\n    },\n    shippingCountries: { getShippingCountries },\n}: InternalCheckoutSelectors): PaymentIntegrationSelectors {\n    return {\n        getHost: clone(getHost),\n        getLocale: clone(getLocale),\n        getBillingAddress: clone(getBillingAddress),\n        getBillingAddressOrThrow: clone(getBillingAddressOrThrow),\n        getCart: clone(getCart),\n        getCartOrThrow: clone(getCartOrThrow),\n        getCheckout: clone(getCheckout),\n        getCheckoutOrThrow: clone(getCheckoutOrThrow),\n        getCountries: clone(getCountries),\n        getStoreConfig: clone(getStoreConfig),\n        getStoreConfigOrThrow: clone(getStoreConfigOrThrow),\n        getConfig: clone(getConfig),\n        getConsignments: clone(getConsignments),\n        getConsignmentsOrThrow: clone(getConsignmentsOrThrow),\n        getContextConfig: clone(getContextConfig),\n        getCustomer: clone(getCustomer),\n        getCustomerOrThrow: clone(getCustomerOrThrow),\n        getCardInstrument: clone(getCardInstrument),\n        getInstruments: clone(getInstruments),\n        getCardInstrumentOrThrow: clone(getCardInstrumentOrThrow),\n        getOrder: clone(getOrder),\n        getOrderOrThrow: clone(getOrderOrThrow),\n        getOrderMeta: clone(getOrderMeta),\n        getInstrumentsMeta: clone(getInstrumentsMeta),\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        getPaymentMethod: clone(getPaymentMethod),\n        getPaymentMethodOrThrow: clone(getPaymentMethodOrThrow),\n        getPaymentMethodsMeta: clone(getPaymentMethodsMeta),\n        getPaymentProviderCustomer: clone(getPaymentProviderCustomer),\n        getPaymentProviderCustomerOrThrow: clone(getPaymentProviderCustomerOrThrow),\n        getShippingAddress: clone(getShippingAddress),\n        getShippingAddressOrThrow: clone(getShippingAddressOrThrow),\n        getShippingAddresses: clone(getShippingAddresses),\n        getShippingAddressesOrThrow: clone(getShippingAddressesOrThrow),\n        getShippingCountries: clone(getShippingCountries),\n        getOutstandingBalance: clone(getOutstandingBalance),\n        isPaymentDataRequired,\n        isPaymentMethodInitialized,\n    };\n}\n","import {\n    BillingAddressRequestBody,\n    BuyNowCartRequestBody,\n    Cart,\n    HostedForm,\n    HostedFormOptions,\n    InitializeOffsitePaymentConfig,\n    OrderRequestBody,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    RequestOptions,\n    ShippingAddressRequestBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport { Checkout, CheckoutActionCreator, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { DataStoreProjection } from '../common/data-store';\nimport CouponActionCreator from '../coupon/coupon-action-creator';\nimport { CustomerActionCreator, CustomerCredentials } from '../customer';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator } from '../order';\nimport { PaymentAdditionalAction } from '../payment';\nimport {\n    PaymentProviderCustomer,\n    PaymentProviderCustomerActionCreator,\n} from '../payment-provider-customer';\nimport PaymentActionCreator from '../payment/payment-action-creator';\nimport PaymentMethodActionCreator from '../payment/payment-method-action-creator';\nimport PaymentStrategyWidgetActionCreator from '../payment/payment-strategy-widget-action-creator';\nimport { RemoteCheckoutActionCreator } from '../remote-checkout';\nimport { InitializePaymentOptions } from '../remote-checkout/remote-checkout-request-sender';\nimport { ConsignmentActionCreator, ShippingCountryActionCreator } from '../shipping';\nimport { PaymentHumanVerificationHandler, SpamProtectionActionCreator } from '../spam-protection';\nimport { StoreCreditActionCreator } from '../store-credit';\n\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default class DefaultPaymentIntegrationService implements PaymentIntegrationService {\n    private _storeProjection: DataStoreProjection<PaymentIntegrationSelectors>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _storeProjectionFactory: PaymentIntegrationStoreProjectionFactory,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _checkoutValidator: CheckoutValidator,\n        private _hostedFormFactory: HostedFormFactory,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n        private _customerActionCreator: CustomerActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _paymentProviderCustomerActionCreator: PaymentProviderCustomerActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _paymentStrategyWidgetActionCreator: PaymentStrategyWidgetActionCreator,\n    ) {\n        this._storeProjection = this._storeProjectionFactory.create(this._store);\n    }\n\n    createHostedForm(host: string, options: HostedFormOptions): HostedForm {\n        const checkoutId = this._storeProjection.getState().getCheckoutOrThrow().id;\n\n        return this._hostedFormFactory.create(host, options, checkoutId);\n    }\n\n    subscribe(\n        subscriber: (state: PaymentIntegrationSelectors) => void,\n        ...filters: Array<(state: PaymentIntegrationSelectors) => unknown>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    getState(): PaymentIntegrationSelectors {\n        return this._storeProjection.getState();\n    }\n\n    async initializeOffsitePayment(\n        initializeOffsitePaymentConfig: InitializeOffsitePaymentConfig,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentActionCreator.initializeOffsitePayment(initializeOffsitePaymentConfig),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadCheckout(id?: string): Promise<PaymentIntegrationSelectors> {\n        if (id) {\n            await this._store.dispatch(this._checkoutActionCreator.loadCheckout(id));\n        } else {\n            await this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout());\n        }\n\n        return this._storeProjection.getState();\n    }\n\n    async loadDefaultCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethods(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethods(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitPayment(payment: Payment): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n\n        return this._storeProjection.getState();\n    }\n\n    async finalizeOrder(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        const {\n            order: { getOrderOrThrow },\n        } = this._store.getState();\n\n        await this._store.dispatch(\n            this._orderActionCreator.finalizeOrder(getOrderOrThrow().orderId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async updateBillingAddress(\n        payload: BillingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async updateShippingAddress(\n        payload: ShippingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(id, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async signOutCustomer(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async createBuyNowCart(\n        buyNowCartRequestBody: BuyNowCartRequestBody,\n        options?: RequestOptions,\n    ): Promise<Cart> {\n        const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n            buyNowCartRequestBody,\n            options,\n        );\n\n        return buyNowCart;\n    }\n\n    async applyStoreCredit(\n        useStoreCredit: boolean,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async applyCoupon(\n        coupon: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._couponActionCreator.applyCoupon(coupon, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async removeCoupon(\n        coupon: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._couponActionCreator.removeCoupon(coupon, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async verifyCheckoutSpamProtection(): Promise<PaymentIntegrationSelectors> {\n        const { checkout } = this._store.getState();\n        const { shouldExecuteSpamCheck } = checkout.getCheckoutOrThrow();\n\n        if (shouldExecuteSpamCheck) {\n            await this._store.dispatch(\n                this._spamProtectionActionCreator.verifyCheckoutSpamProtection(),\n            );\n        }\n\n        return this._storeProjection.getState();\n    }\n\n    async loadCurrentOrder(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._orderActionCreator.loadCurrentOrder(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async updatePaymentProviderCustomer(\n        paymentProviderCustomer: PaymentProviderCustomer,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentProviderCustomerActionCreator.updatePaymentProviderCustomer(\n                paymentProviderCustomer,\n            ),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async loadShippingCountries(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._shippingCountryActionCreator.loadCountries(options));\n\n        return this._storeProjection.getState();\n    }\n\n    async deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.deleteConsignment(consignmentId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async initializePayment(\n        methodId: string,\n        params?: InitializePaymentOptions,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(methodId, params, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async forgetCheckout(\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._remoteCheckoutActionCreator.forgetCheckout(methodId, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async remoteCheckoutSignOut(\n        methodId: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._remoteCheckoutActionCreator.signOut(methodId, options));\n\n        return this._storeProjection.getState();\n    }\n\n    async validateCheckout(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        await this._checkoutValidator.validate(checkout, options);\n    }\n\n    async handlePaymentHumanVerification(\n        errorOrId: Error | string,\n        key?: string,\n    ): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this._paymentHumanVerificationHandler.handle(errorOrId, key ?? '');\n        }\n\n        return this._paymentHumanVerificationHandler.handle(errorOrId);\n    }\n\n    async widgetInteraction(\n        callback: () => Promise<unknown>,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._paymentStrategyWidgetActionCreator.widgetInteraction(callback),\n            { queueId: 'widgetInteraction' },\n        );\n\n        return this._storeProjection.getState();\n    }\n}\n","import { Action, createAction, createDataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState>\n    extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: ReadableDataStore<TState>,\n    stateTransformer: (state: TState) => TTransformedState,\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<\n        TState | undefined,\n        SynchronizeAction<TState>,\n        TTransformedState\n    >(\n        (state, action) =>\n            action.type === ProjectionActionType.Synchronize ? action.payload : state,\n        store.getState(),\n        { stateTransformer },\n    );\n\n    store.subscribe(\n        (state) => {\n            projection.dispatch(\n                createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>,\n            );\n        },\n        { initial: false },\n    );\n\n    return projection;\n}\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\n\nexport default class PaymentIntegrationStoreProjectionFactory {\n    constructor(\n        private _transformSelectors: (\n            selectors: InternalCheckoutSelectors,\n        ) => PaymentIntegrationSelectors,\n    ) {}\n\n    create(store: ReadableCheckoutStore): DataStoreProjection<PaymentIntegrationSelectors> {\n        return createDataStoreProjection(store, this._transformSelectors);\n    }\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nconst getUniqId = (idPrefix?: string): string => {\n    const id = uniqueId(idPrefix);\n\n    return document.getElementById(id) ? getUniqId(idPrefix) : id;\n};\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(\n            `Unable to find any element with the specified selector: ${selector}`,\n        );\n    }\n\n    return Array.prototype.slice.call(containers).map((container: HTMLElement) => {\n        if (!container.id) {\n            container.id = getUniqId(idPrefix);\n        }\n\n        return container.id;\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"shallowequal\");","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport {\n    ChildCacheKeyMap,\n    IntermediateCacheKeyMap,\n    isRootCacheKeyMap,\n    isTerminalCacheKeyMap,\n    RootCacheKeyMap,\n    TerminalCacheKeyMap,\n} from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if (\n                    (args.length === 0 || index === args.length - 1) &&\n                    isTerminalCacheKeyMap(map)\n                ) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(\n        parent: RootCacheKeyMap | IntermediateCacheKeyMap,\n        args: any[],\n    ): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(index === -1 ? 0 : index, index === -1 ? 0 : 1, recentlyUsedMap);\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator } from '@bigcommerce/checkout-sdk/utility';\n\nimport { CacheKeyResolver, isEqual, isPrivate } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            selectorMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: (key) => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(\n    selectors: InternalCheckoutSelectors,\n): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator,\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe((state) => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            (state) => state.checkoutButton.getState(),\n            ...filters.map(\n                (filter) => (state: InternalCheckoutSelectors) =>\n                    filter(createCheckoutButtonSelectors(state)),\n            ),\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId)\n            ? [options.containerId]\n            : setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map((containerId) => {\n                const action = this._buttonStrategyActionCreator.initialize({\n                    ...options,\n                    containerId,\n                });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            }),\n        ).then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId }).then(() => this.getState());\n    }\n}\n","/* eslint-disable no-useless-escape */\nexport default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutButtonStrategy as CheckoutButtonStrategyV2 } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport {\n    CheckoutButtonActionType,\n    DeinitializeButtonAction,\n    InitializeButtonAction,\n} from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonRegistryV2 from './checkout-button-strategy-registry-v2';\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _registryV2: CheckoutButtonRegistryV2,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n    ) {}\n\n    initialize(\n        options: CheckoutButtonInitializeOptions,\n    ): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = {\n                methodId: options.methodId,\n                containerId: options.containerId,\n            };\n\n            if (\n                store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)\n            ) {\n                return empty();\n            }\n\n            const paymentMethodRequestParams = options.currencyCode\n                ? { params: { currencyCode: options.currencyCode } }\n                : {};\n\n            const paymentMethodRequestOptions = {\n                ...paymentMethodRequestParams,\n                timeout: options.timeout,\n                useCache: true,\n            };\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.InitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                this._paymentMethodActionCreator.loadPaymentMethod(\n                    options.methodId,\n                    paymentMethodRequestOptions,\n                )(store),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .initialize(options)\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.InitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta),\n                ),\n            );\n        };\n    }\n\n    deinitialize(\n        options: CheckoutButtonOptions,\n    ): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.DeinitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .deinitialize()\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.DeinitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(\n                        CheckoutButtonActionType.DeinitializeButtonFailed,\n                        error,\n                        meta,\n                    ),\n                ),\n            );\n        };\n    }\n\n    private _getStrategy(\n        methodId: CheckoutButtonMethodType,\n    ): CheckoutButtonStrategy | CheckoutButtonStrategyV2 {\n        let strategy: CheckoutButtonStrategy | CheckoutButtonStrategyV2;\n\n        try {\n            strategy = this._registryV2.get({ id: methodId });\n        } catch {\n            strategy = this._registry.get(methodId);\n        }\n\n        return strategy;\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Factory from './factory';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _defaultToken: string;\n    private _useFallback: string | boolean;\n    private _tokenResolver: (token: string, registeredTokens: string[]) => string | undefined;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._defaultToken = options?.defaultToken ?? 'default';\n        this._useFallback = options?.useFallback ?? true;\n        this._tokenResolver = options?.tokenResolver ?? ((token) => token);\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._defaultToken,\n                cacheToken || token || this._defaultToken,\n            );\n        } catch (error) {\n            if (!this._useFallback) {\n                throw error;\n            }\n\n            return this._getInstance(this._defaultToken, cacheToken || this._defaultToken);\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const resolvedToken = this._tokenResolver(token, Object.keys(this._factories));\n            const factory = resolvedToken && this._factories[resolvedToken];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport interface RegistryOptions {\n    defaultToken?: string;\n    useFallback?: boolean;\n    tokenResolver?(token: string, registeredTokens: string[]): string | undefined;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\ninterface MasterpassScriptLoaderParams {\n    useMasterpassSrc: boolean;\n    language: string;\n    testMode?: boolean;\n    checkoutId?: string;\n}\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window,\n    ) {}\n\n    async load({\n        useMasterpassSrc,\n        language,\n        testMode,\n        checkoutId,\n    }: MasterpassScriptLoaderParams): Promise<Masterpass> {\n        if (useMasterpassSrc) {\n            const subdomain = testMode ? 'sandbox.' : '';\n            const params = [`locale=${language}`, `checkoutid=${checkoutId}`];\n\n            const sourceUrl = [\n                `https://${subdomain}src.mastercard.com/srci/integration/merchant.js`,\n                params.join('&'),\n            ].join('?');\n\n            await this._scriptLoader.loadScript(sourceUrl);\n\n            if (!this._window.masterpass) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.masterpass;\n        }\n\n        await this._scriptLoader.loadScript(\n            `//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`,\n        );\n\n        if (!this._window.masterpass) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.masterpass;\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(private _scriptLoader: ScriptLoader) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n        };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","export const supportedLocales: { [language: string]: string[] } = {\n    es: ['es_es', 'es_mx', 'es_pe', 'es_co', 'es_ar', 'es_cl'],\n    en: [\n        'en_us',\n        'en_gb',\n        'en_ca',\n        'en_es',\n        'en_fr',\n        'en_ie',\n        'en_sg',\n        'en_au',\n        'en_nz',\n        'en_my',\n        'en_hk',\n        'en_th',\n        'en_ae',\n        'en_sa',\n        'en_qa',\n        'en_kw',\n        'en_za',\n    ],\n    pt: ['pt_br'],\n    zu: ['zu_za'],\n    ar: ['ar_sa', 'ar_ae', 'ar_qa', 'ar_kw'],\n    zh: ['zh_sg', 'zh_hk'],\n    ms: ['ms_my'],\n    uk: ['uk_ua'],\n    sv: ['sv_se'],\n    hr: ['hr_hr'],\n    pl: ['pl_pl'],\n    nl: ['nl_be'],\n    it: ['it_it'],\n    de: ['de_de'],\n    fr: ['fr_fr', 'fr_ca'],\n};\n","import { supportedLocales } from './masterpass-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace('-', '_').toLowerCase().split('_');\n    const formattedLocale = `${language}_${country}`;\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'en_us';\n    }\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport {\n    formatLocale,\n    getCallbackUrl,\n    Masterpass,\n    MasterpassCheckoutOptions,\n    MasterpassScriptLoader,\n} from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string,\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        this._methodId = methodId;\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: paymentMethod.config.testMode,\n                    checkoutId: paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader.load(masterpassScriptLoaderParams);\n            })\n            .then((masterpass) => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n        const state = this._store.getState();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new InvalidArgumentError('Unable to retrieve store configuration');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src =\n                'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","export interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: 'text' | 'flex';\n    logo?: {\n        type: 'none' | 'inline' | 'primary';\n    };\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onClick?(): void;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n    WHITE = 'white',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalScriptLoader,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = '',\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = (this._paymentMethod = state.paymentMethods.getPaymentMethod(\n            options.methodId,\n        ));\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader\n            .loadPaypal(paymentMethod.config.merchantId)\n            .then((paypal) => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const fundingCreditOption = paypal.FUNDING.CREDIT || 'credit';\n                const allowedSources = paypalOptions.allowCredit ? [fundingCreditOption] : [];\n                const disallowedSources = !paypalOptions.allowCredit ? [fundingCreditOption] : [];\n\n                return paypal.Button.render(\n                    {\n                        env,\n                        client: clientToken,\n                        commit: paypalOptions.shouldProcessPayment,\n                        funding: {\n                            allowed: allowedSources,\n                            disallowed: disallowedSources,\n                        },\n                        style: {\n                            shape: PaypalButtonStyleShapeOption.RECT,\n                            ...pick(\n                                paypalOptions.style,\n                                'layout',\n                                'color',\n                                'label',\n                                'shape',\n                                'tagline',\n                                'fundingicons',\n                            ),\n                            size:\n                                paymentMethod.id === 'paypalexpress' &&\n                                paypalOptions.style?.size === 'small'\n                                    ? PaypalButtonStyleSizeOption.RESPONSIVE\n                                    : paypalOptions.style?.size,\n                        },\n                        payment: (_, actions) =>\n                            this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                        onAuthorize: (data, actions) =>\n                            this._tokenizePayment(\n                                data,\n                                actions,\n                                paypalOptions.shouldProcessPayment,\n                                paypalOptions.onAuthorizeError,\n                            ),\n                    },\n                    options.containerId,\n                );\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(\n                    `${this._host}/api/storefront/payment/paypalexpress`,\n                    { merchantId, cartId },\n                    {\n                        headers: {\n                            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                            ...SDK_VERSION_HEADERS,\n                        },\n                    },\n                );\n            })\n            .then((res) => res.id)\n            .catch((error) => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void, // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then((payload) => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\ntype keys = 'log' | 'info' | 'warn' | 'error' | 'debug';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(private _console?: Console) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keys, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { getDefaultLogger } from '../log';\nimport { getEnvironment } from '../utility';\n\nimport Factory from './factory';\nimport Registry from './registry';\n\nexport default class ResolveIdRegistry<TType, TToken extends { [key: string]: unknown }> {\n    private _registry: Registry<TType>;\n\n    constructor(private _useFallback = false) {\n        this._registry = new Registry({\n            tokenResolver: this._resolveToken.bind(this),\n            useFallback: this._useFallback,\n        });\n    }\n\n    get(resolveId: TToken): TType {\n        return this._registry.get(this._encodeToken(resolveId));\n    }\n\n    register(resolveId: TToken, factory: Factory<TType>): void {\n        this._registry.register(this._encodeToken(resolveId), factory);\n    }\n\n    private _encodeToken(resolveId: TToken): string {\n        return btoa(JSON.stringify(resolveId));\n    }\n\n    private _decodeToken(token: string): TToken {\n        return JSON.parse(atob(token));\n    }\n\n    private _resolveToken(token: string, registeredTokens: string[]): string | undefined {\n        const query = this._decodeToken(token);\n\n        const results: Array<{ token: string; matches: number; default: boolean }> = [];\n\n        registeredTokens.forEach((registeredToken) => {\n            const resolverId = this._decodeToken(registeredToken);\n\n            const result = { token: registeredToken, matches: 0, default: false };\n\n            for (const [key, value] of Object.entries(resolverId)) {\n                if (key in query && query[key] !== value) {\n                    result.matches = 0;\n                    break;\n                }\n\n                if (key in query && query[key] === value) {\n                    result.matches++;\n                }\n\n                if (key === 'default' && value === true) {\n                    result.default = true;\n                }\n            }\n\n            results.push(result);\n        });\n\n        const matchedResults = results\n            .sort((a, b) => b.matches - a.matches)\n            .filter((result) => result.matches > 0);\n\n        if (matchedResults.length > 1 && matchedResults[0].matches === matchedResults[1].matches) {\n            if (getEnvironment() === 'development') {\n                getDefaultLogger().warn(\n                    'The provided query matches at least two strategies with the same specificity. This warning can be resolved by making their resolve ID more specific.',\n                );\n            }\n        }\n\n        const matched = matchedResults[0];\n\n        if (matched && matched.token) {\n            return matched.token;\n        }\n\n        if (this._useFallback) {\n            const defaultToken = results.find((result) => result.default)?.token;\n\n            if (defaultToken) {\n                return defaultToken;\n            }\n        }\n\n        throw new Error('Unable to resolve to a registered token with the provided token.');\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item: LineItem) => total + item.quantity, 0);\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import {\n    Cart,\n    Checkout,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Pay: AmazonPayV2Client;\n}\n\nexport interface RequestConfig {\n    createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\n    estimatedOrderAmount?: AmazonPayV2Price;\n    productType?: AmazonPayV2PayOptions;\n}\n\nexport interface AmazonPayV2Button {\n    /**\n     * Allows you to define custom actions.\n     */\n    onClick: (callback: () => void | Promise<void>) => void;\n\n    /**\n     * Initiates the Amazon Pay checkout.\n     */\n    initCheckout(requestConfig: RequestConfig): void;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n\n    /**\n     * Sets Amazon Pay button design.\n     */\n    design?: AmazonPayV2ButtonDesign;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * It does not have to match the final order amount if the buyer updates\n     * their order after starting checkout. Amazon Pay will use this value to\n     * assess transaction risk and prevent buyers from selecting payment methods\n     * that can't be used to process the order.\n     */\n    estimatedOrderAmount?: AmazonPayV2Price;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport interface AmazonPayV2Price {\n    /**\n     * Transaction amount.\n     */\n    amount: string;\n\n    /**\n     * Transaction currency code in ISO 4217 format. Example: USD.\n     */\n    currencyCode: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport const amazonPayV2Regions: { [key: string]: string } = {\n    de: 'eu',\n    jp: 'fe',\n    uk: 'eu',\n    us: 'na',\n};\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/* eslint-disable @typescript-eslint/no-shadow */\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n/* eslint-enable @typescript-eslint/no-shadow */\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n\nexport enum AmazonPayV2ButtonDesign {\n    C0001 = 'C0001',\n}\n\n// TODO: after migration AmazonPay strategies to integration package\n// <InternalCheckoutSelectors> should be removed\n// and replaced usage with <PaymentIntegrationService>\nexport interface InternalCheckoutSelectors {\n    cart: {\n        getCart: () => Cart | undefined;\n    };\n    checkout: {\n        getCheckout: () => Checkout | undefined;\n    };\n    config: {\n        getStoreConfigOrThrow: () => StoreConfig;\n    };\n    paymentMethods: {\n        getPaymentMethodOrThrow: <T>(methodId: string) => PaymentMethod<T>;\n    };\n}\n\nexport interface AmazonPayV2InitializeOptions {\n    buttonColor?: AmazonPayV2ButtonColor;\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n    checkoutSessionMethod?: 'GET' | 'POST';\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n    extractAmazonCheckoutSessionId?: string;\n    ledgerCurrency?: AmazonPayV2LedgerCurrency;\n    publicKeyId?: string;\n    region?: string;\n    isButtonMicroTextDisabled?: boolean;\n    paymentToken?: string;\n}\n\nexport interface AmazonPayV2ButtonRenderingOptions {\n    checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors;\n    containerId: string;\n    decoupleCheckoutInitiation?: boolean;\n    methodId: string;\n    buttonColor?: AmazonPayV2ButtonColor;\n    options?: AmazonPayV2ButtonParameters;\n    placement: AmazonPayV2Placement;\n    isButtonMicroTextDisabled?: boolean;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface AmazonPayAdditionalActionErrorBody {\n    status: string;\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n    };\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n","import {\n    CheckoutSettings,\n    getShippableItemsCount,\n    guard,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreProfile,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2Button,\n    AmazonPayV2ButtonColor,\n    AmazonPayV2ButtonConfig,\n    AmazonPayV2ButtonDesign,\n    AmazonPayV2ButtonParameters,\n    AmazonPayV2ButtonRenderingOptions,\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2NewButtonParams,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n    AmazonPayV2Price,\n    AmazonPayV2SDK,\n    InternalCheckoutSelectors,\n    RequestConfig,\n} from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\nimport { isInternalCheckoutSelectors } from './isInternalCheckoutSelectors';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private amazonPayV2SDK?: AmazonPayV2SDK;\n    private buttonParentContainer?: HTMLDivElement;\n    private amazonPayV2Button?: AmazonPayV2Button;\n    private isBuyNowFlow?: boolean;\n\n    constructor(private amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader) {}\n\n    async initialize(paymentMethod: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<void> {\n        this.amazonPayV2SDK = await this.amazonPayV2ScriptLoader.load(paymentMethod);\n        this.buttonParentContainer =\n            this.buttonParentContainer || this.createAmazonPayButtonParentContainer();\n    }\n\n    deinitialize(): Promise<void> {\n        this.amazonPayV2Button = undefined;\n        this.buttonParentContainer?.remove();\n        this.buttonParentContainer = undefined;\n        this.amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n    ): void {\n        this.getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\n        this.amazonPayV2Button = this.getAmazonPayV2SDK().Pay.renderButton(\n            `#${containerId}`,\n            options,\n        );\n    }\n\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>) {\n        const requestConfig = this.prepareRequestConfig(createCheckoutSessionConfig);\n\n        this.getAmazonPayV2Button().onClick(() => {\n            this.getAmazonPayV2Button().initCheckout(requestConfig);\n        });\n    }\n\n    prepareCheckoutWithCreationRequestConfig(\n        createCheckoutConfig: () => Promise<\n            | {\n                  createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>;\n                  estimatedOrderAmount: AmazonPayV2Price;\n                  productType: AmazonPayV2PayOptions;\n              }\n            | undefined\n        >,\n    ) {\n        this.getAmazonPayV2Button().onClick(async () => {\n            const config = await createCheckoutConfig();\n\n            if (config) {\n                const requestConfig = this.prepareRequestConfig(\n                    config.createCheckoutSessionConfig,\n                    config.estimatedOrderAmount,\n                    config.productType,\n                );\n\n                this.getAmazonPayV2Button().initCheckout(requestConfig);\n            }\n        });\n    }\n\n    async signout(): Promise<void> {\n        if (this.amazonPayV2SDK) {\n            this.amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton({\n        buttonColor,\n        checkoutState,\n        containerId,\n        decoupleCheckoutInitiation = false,\n        methodId,\n        options,\n        placement,\n        isButtonMicroTextDisabled = false,\n    }: AmazonPayV2ButtonRenderingOptions): HTMLDivElement | undefined {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            return;\n        }\n\n        const { id: parentContainerId } = container.appendChild(this.getButtonParentContainer());\n\n        if (options && isButtonMicroTextDisabled) {\n            options.design = AmazonPayV2ButtonDesign.C0001;\n        }\n\n        const amazonPayV2ButtonOptions =\n            options ??\n            this.getAmazonPayV2ButtonOptions(\n                checkoutState,\n                methodId,\n                placement,\n                decoupleCheckoutInitiation,\n                buttonColor,\n            );\n\n        this.createButton(parentContainerId, amazonPayV2ButtonOptions);\n\n        return this.getButtonParentContainer();\n    }\n\n    updateBuyNowFlowFlag(isBuyNowFlow?: boolean) {\n        this.isBuyNowFlow = Boolean(isBuyNowFlow);\n    }\n\n    /**\n     * @internal\n     */\n    isPh4Enabled(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        const isPh4Enabled = !!features['PROJECT-3483.amazon_pay_ph4'];\n        const isPh4UsOnly = !!features['INT-6885.amazon_pay_ph4_us_only'];\n\n        if (isPh4Enabled && isPh4UsOnly) {\n            return storeCountryCode === 'US';\n        }\n\n        return isPh4Enabled;\n    }\n\n    private prepareRequestConfig(\n        createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>,\n        estimatedOrderAmount?: AmazonPayV2Price,\n        productType?: AmazonPayV2PayOptions,\n    ): RequestConfig {\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\n\n        return {\n            createCheckoutSessionConfig: this.isEnvironmentSpecific(publicKeyId)\n                ? signedPayload\n                : createCheckoutSessionConfig,\n            ...(estimatedOrderAmount && { estimatedOrderAmount }),\n            ...(productType && { productType }),\n        };\n    }\n\n    private createAmazonPayButtonParentContainer(): HTMLDivElement {\n        const uid = Math.random().toString(16).substr(-4);\n        const parentContainer = document.createElement('div');\n\n        parentContainer.id = `amazonpay_button_parent_container_${uid}`;\n\n        return parentContainer;\n    }\n\n    private getAmazonPayV2ButtonOptions(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        decoupleCheckoutInitiation = false,\n        buttonColor = AmazonPayV2ButtonColor.Gold,\n    ): AmazonPayV2ButtonParameters {\n        const { getCart, getCheckout, getStoreConfigOrThrow, getPaymentMethodOrThrow } =\n            this.getCheckoutState(checkoutState);\n        const {\n            config: { merchantId, testMode },\n            initializationData,\n        } = getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n\n        if (!initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            checkoutLanguage,\n            checkoutSessionMethod,\n            createCheckoutSessionConfig,\n            extractAmazonCheckoutSessionId,\n            ledgerCurrency,\n            publicKeyId = '',\n            isButtonMicroTextDisabled,\n        } = initializationData;\n\n        if (!merchantId || !ledgerCurrency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig: AmazonPayV2ButtonConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            placement,\n            buttonColor,\n            ...(isButtonMicroTextDisabled ? { design: AmazonPayV2ButtonDesign.C0001 } : {}),\n        };\n\n        if (this.isBuyNowFlow) {\n            return {\n                ...buttonBaseConfig,\n                sandbox: !!testMode,\n            };\n        }\n\n        const cart = getCart();\n\n        buttonBaseConfig.productType =\n            cart && getShippableItemsCount(cart) === 0\n                ? AmazonPayV2PayOptions.PayOnly\n                : AmazonPayV2PayOptions.PayAndShip;\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath, storeCountryCode },\n        } = getStoreConfigOrThrow();\n\n        if (this.isPh4Enabled(features, storeCountryCode)) {\n            if (!createCheckoutSessionConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            const amount = getCheckout()?.outstandingBalance.toString();\n            const currencyCode = cart?.currency.code;\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\n\n            if (this.isEnvironmentSpecific(publicKeyId)) {\n                buttonOptions.publicKeyId = publicKeyId;\n                tmpConfig = createCheckoutSessionConfig;\n            } else {\n                buttonOptions.sandbox = !!testMode;\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\n            }\n\n            if (!decoupleCheckoutInitiation) {\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\n            }\n\n            if (amount && currencyCode) {\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\n            }\n\n            return buttonOptions;\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private isEnvironmentSpecific(publicKeyId: string): boolean {\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\n    }\n\n    private getAmazonPayV2SDK(): AmazonPayV2SDK {\n        return this.getOrThrow(this.amazonPayV2SDK);\n    }\n\n    private getButtonParentContainer(): HTMLDivElement {\n        return this.getOrThrow(this.buttonParentContainer);\n    }\n\n    private getAmazonPayV2Button(): AmazonPayV2Button {\n        return this.getOrThrow(this.amazonPayV2Button);\n    }\n\n    private getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    // INFO: need this mapping while we have strategies in core and in integration package at the same time\n    private getCheckoutState(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n    ): Pick<\n        PaymentIntegrationSelectors,\n        'getCart' | 'getCheckout' | 'getStoreConfigOrThrow' | 'getPaymentMethodOrThrow'\n    > {\n        if (isInternalCheckoutSelectors(checkoutState)) {\n            return {\n                getCart: checkoutState.cart.getCart,\n                getCheckout: checkoutState.checkout.getCheckout,\n                getStoreConfigOrThrow: checkoutState.config.getStoreConfigOrThrow,\n                getPaymentMethodOrThrow: <T>(methodId: string) =>\n                    checkoutState.paymentMethods.getPaymentMethodOrThrow<T>(methodId),\n            };\n        }\n\n        return checkoutState;\n    }\n}\n","import { InternalCheckoutSelectors } from './amazon-pay-v2';\n\nexport function isInternalCheckoutSelectors(\n    checkoutSelectors: unknown,\n): checkoutSelectors is InternalCheckoutSelectors {\n    return (\n        typeof checkoutSelectors === 'object' &&\n        checkoutSelectors !== null &&\n        'cart' in checkoutSelectors &&\n        'checkout' in checkoutSelectors &&\n        'config' in checkoutSelectors &&\n        'paymentMethods' in checkoutSelectors\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2HostWindow,\n    AmazonPayV2InitializeOptions,\n    amazonPayV2Regions,\n    AmazonPayV2SDK,\n} from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private windowWithAmazonPay: AmazonPayV2HostWindow = window,\n    ) {}\n\n    async load(method: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<AmazonPayV2SDK> {\n        const { initializationData } = method;\n        const region = initializationData?.region || 'us';\n\n        const amazonPayV2Region = amazonPayV2Regions[region];\n\n        await this.scriptLoader.loadScript(\n            `https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`,\n        );\n\n        if (!this.windowWithAmazonPay.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.windowWithAmazonPay.amazon;\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { StandardError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class AmazonPayV2ConfigCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during config creation process. Please try again later.',\n        );\n\n        this.name = 'AmazonPayV2ConfigCreationError';\n        this.type = 'amazon_pay_v2_config_creation_error';\n    }\n}\n","import { WithBuyNowFeature } from './amazon-pay-v2-button-options';\n\nexport function isWithBuyNowFeatures(options: unknown): options is WithBuyNowFeature {\n    if (!(options instanceof Object)) {\n        return false;\n    }\n\n    return 'buyNowInitializeOptions' in options;\n}\n","import {\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    BuyNowCartCreationError,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    getShippableItemsCount,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    WithAmazonPayV2ButtonInitializeOptions,\n    WithBuyNowFeature,\n} from './amazon-pay-v2-button-options';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\nimport AmazonPayV2ConfigCreationError from './errors/amazon-pay-v2-config-creation-error';\nimport { isWithBuyNowFeatures } from './isWithBuyNowFeatures';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowInitializeOptions: WithBuyNowFeature['buyNowInitializeOptions'];\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n        private amazonPayV2ConfigRequestSender: AmazonPayV2RequestSender,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithAmazonPayV2ButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, amazonpay } = options;\n        const { buttonColor } = amazonpay || {};\n\n        if (!methodId || !containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        const { getPaymentMethodOrThrow } = this.paymentIntegrationService.getState();\n\n        const paymentMethod = getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n        const { initializationData } = paymentMethod;\n\n        await this.amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        if (!amazonpay) {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const initializeAmazonButtonOptions = isWithBuyNowFeatures(amazonpay)\n            ? undefined\n            : amazonpay;\n\n        if (\n            isWithBuyNowFeatures(amazonpay) &&\n            typeof amazonpay.buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n        ) {\n            this._buyNowInitializeOptions = amazonpay.buyNowInitializeOptions;\n            this.amazonPayV2PaymentProcessor.updateBuyNowFlowFlag(true);\n        }\n\n        this.amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this.paymentIntegrationService.getState(),\n            containerId,\n            methodId,\n            options: initializeAmazonButtonOptions,\n            placement: AmazonPayV2Placement.Cart,\n            buttonColor,\n            isButtonMicroTextDisabled: initializationData?.isButtonMicroTextDisabled,\n        });\n\n        if (this._buyNowInitializeOptions) {\n            this.amazonPayV2PaymentProcessor.prepareCheckoutWithCreationRequestConfig(\n                this._getCheckoutCreationRequestConfig.bind(this),\n            );\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return this.amazonPayV2PaymentProcessor.deinitialize();\n    }\n\n    private async _createBuyNowCartOrThrow() {\n        const buyNowCartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n        if (!buyNowCartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            const buyNowCart = await this.paymentIntegrationService.createBuyNowCart(\n                buyNowCartRequestBody,\n            );\n\n            return buyNowCart;\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private async _createCheckoutConfig(\n        id: string,\n    ): Promise<Required<AmazonPayV2CheckoutSessionConfig>> {\n        try {\n            const {\n                body: { payload, public_key, ...rest },\n            } = await this.amazonPayV2ConfigRequestSender.createCheckoutConfig(id);\n\n            return {\n                payloadJSON: payload,\n                publicKeyId: public_key,\n                ...rest,\n            };\n        } catch (error) {\n            throw new AmazonPayV2ConfigCreationError();\n        }\n    }\n\n    private async _getCheckoutCreationRequestConfig() {\n        const buyNowCart = await this._createBuyNowCartOrThrow();\n        const estimatedOrderAmount = {\n            amount: String(buyNowCart.baseAmount),\n            currencyCode: buyNowCart.currency.code,\n        };\n        const createCheckoutSessionConfig = await this._createCheckoutConfig(buyNowCart.id);\n\n        return {\n            createCheckoutSessionConfig,\n            estimatedOrderAmount,\n            productType:\n                getShippableItemsCount(buyNowCart) === 0\n                    ? AmazonPayV2PayOptions.PayOnly\n                    : AmazonPayV2PayOptions.PayAndShip,\n        };\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface CheckoutConfig {\n    payload: string;\n    signature: string;\n    public_key: string;\n}\n\nexport default class AmazonPayV2RequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createCheckoutConfig(cartId: string): Promise<Response<CheckoutConfig>> {\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post('/api/storefront/payment/amazonpay', { headers, body });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AmazonPayV2ButtonStrategy from './amazon-pay-v2-button-strategy';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\n\nconst createAmazonPayV2ButtonStrategy: CheckoutButtonStrategyFactory<AmazonPayV2ButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n    const amazonPayV2RequestSender = new AmazonPayV2RequestSender(requestSender);\n    const amazonPayV2PaymentProcessor = createAmazonPayV2PaymentProcessor();\n\n    return new AmazonPayV2ButtonStrategy(\n        paymentIntegrationService,\n        amazonPayV2PaymentProcessor,\n        amazonPayV2RequestSender,\n    );\n};\n\nexport default toResolvableModule(createAmazonPayV2ButtonStrategy, [{ id: 'amazonpay' }]);\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(new AmazonPayV2ScriptLoader(getScriptLoader()));\n}\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(features: Features, experimentName: string): boolean {\n    return features[experimentName] ?? true;\n}\n","export const BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION = '3.128.0';\nexport const BRAINTREE_SDK_DEFAULT_VERSION = '3.123.2';\nexport const BRAINTREE_SDK_STABLE_VERSION = '3.106.0';\n","import { find } from 'lodash';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { BraintreeHostWindow } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport default class BraintreeSDKVersionManager {\n    private braintreeWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    getSDKVersion() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n        const features = storeConfig?.checkoutSettings.features || {};\n\n        const preloadedVersion = this.getPreloadedSDKVersion();\n\n        if (preloadedVersion) {\n            return preloadedVersion;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5809.braintree_hosted_fields_fix_version')) {\n            return BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5636.update_braintree_sdk_version')) {\n            return BRAINTREE_SDK_DEFAULT_VERSION;\n        }\n\n        return BRAINTREE_SDK_STABLE_VERSION;\n    }\n\n    private getPreloadedSDKVersion(): void | string {\n        const braintree = this.braintreeWindow.braintree;\n\n        if (braintree) {\n            const preloadedVersion = find<{ VERSION?: string }>(\n                Object.values(braintree),\n                (module) => !!module.VERSION,\n            );\n\n            return preloadedVersion?.VERSION;\n        }\n    }\n}\n","import { StandardError } from './index';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport * from './braintree';\nexport * from './paypal';\nexport * from './visacheckout';\n\n/**\n *\n * Braintree Module\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string; // Info: authorization uses clientToken as a value\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\n/**\n *\n * Braintree Window\n *\n */\nexport interface BraintreeWindow extends Window {\n    client?: BraintreeClientCreator;\n    braintreeFastlane?: BraintreeFastlane;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeClientRequestPayload): Promise<BraintreeClientRequestResponse>;\n}\n\nexport interface BraintreeClientRequestPayload {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeClientRequestResponse {\n    creditCards: BraintreeHostedFieldsTokenizePayload[];\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean; // Info: this param is needed for fraud detection (should always be 'true')\n    paypal?: boolean; // TODO: based on braintree documentation, this param is deprecated, so we dont need it anymore\n    riskCorrelationId?: string; // Info: the option is needed for PayPal Analytics\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n// TODO: remove this interface when BraintreeIntegrationService will be removed\nexport interface BraintreeDataCollectors {\n    default?: BraintreeDataCollector;\n    paypal?: BraintreeDataCollector;\n}\n\n/**\n *\n * Braintree Google Payment\n *\n */\ntype BraintreeGooglePaymentAddressFormat = 'FULL' | 'MIN';\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport interface BraintreeGooglePaymentDataRequestOptions {\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: TotalPriceStatusType;\n        totalPrice: string;\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean;\n        billingAddressFormat: BraintreeGooglePaymentAddressFormat;\n    };\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    shippingAddressRequired?: boolean;\n}\n\nexport interface BraintreeGooglePaymentDataRequest {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    environment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n        merchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport type BraintreeGooglePaymentCreator = BraintreeModuleCreator<BraintreeGooglePayment>;\n\nexport interface BraintreeGooglePayment extends BraintreeModule {\n    createPaymentDataRequest(\n        options?: BraintreeGooglePaymentDataRequestOptions,\n    ): BraintreeGooglePaymentDataRequest;\n}\n\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    bin: string;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(\n        options: BraintreeThreeDSecureOptions,\n        callback?: Braintree3DSVerifyCardCallback,\n    ): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n    on<K extends keyof BraintreeThreeDSecureEventMap>(\n        event: K,\n        handler: BraintreeThreeDSecureEventMap[K],\n    ): void;\n}\n\nexport type Braintree3DSVerifyCardCallback = (\n    verifyError: Braintree3DSVerifyCardError,\n    payload: Braintree3DSVerifyCardPayload,\n) => void;\n\nexport interface BraintreeThreeDSecureEventMap {\n    'customer-canceled': () => void;\n}\n\nexport interface Braintree3DSVerifyCardError {\n    code: string;\n}\n\nexport interface Braintree3DSVerifyCardPayload {\n    nonce: string;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number | string;\n    challengeRequested?: boolean;\n    showLoader?: boolean;\n    bin?: string;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n    collectDeviceData?: boolean;\n    addFrame?(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n    removeFrame?(): void;\n    onLookupComplete?(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\nexport enum BraintreeOrderStatus {\n    Completed = 'COMPLETED',\n    Pending = 'PENDING',\n    Failed = 'FAILED',\n}\n\nexport interface BraintreeOrderStatusData {\n    status: BraintreeOrderStatus;\n}\n\n/**\n *\n * Braintree US Bank Account (ACH)\n *\n */\nexport type BraintreeUsBankAccountCreator = BraintreeModuleCreator<BraintreeUsBankAccount>;\n\nexport interface BraintreeUsBankAccount {\n    tokenize(\n        options: BraintreeUsBankAccountTokenizationOptions,\n    ): Promise<BraintreeUsBankAccountTokenizationResponse>;\n}\n\nexport interface BraintreeUsBankAccountTokenizationOptions {\n    bankDetails: BraintreeUsBankAccountDetails;\n    mandateText: string;\n}\n\nexport interface BraintreeUsBankAccountTokenizationResponse {\n    nonce: string;\n    details: BraintreeTokenizationDetails;\n}\n\nexport interface BraintreeUsBankAccountDetails {\n    accountNumber: string;\n    routingNumber: string;\n    ownershipType: string;\n    accountType: string;\n    firstName?: string;\n    lastName?: string;\n    businessName?: string;\n    billingAddress: {\n        streetAddress: string;\n        extendedAddress: string;\n        locality: string;\n        region: string;\n        postalCode: string;\n    };\n}\n\n// TODO: move this interface in separate types group if it will be used in another (not ACH) strategies\n// This seems to be an interface which will be used in different places\nexport interface BraintreeTokenizationDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\n/**\n *\n * Braintree non-instant payment methods\n *\n */\nexport enum NonInstantLocalPaymentMethods {\n    TRUSTLY = 'trustly',\n}\n\nexport interface BraintreeLocalPaymentMethodRedirectAction {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport interface BraintreeOrderSavedResponse {\n    body: {\n        additional_action_required: {\n            data: {\n                order_id_saved_successfully: string;\n            };\n        };\n    };\n}\n\n/**\n *\n * Braintree Fastlane\n *\n */\nexport type BraintreeFastlaneCreator = BraintreeModuleCreator<\n    BraintreeFastlane,\n    BraintreeFastlaneConfig\n>;\n\nexport interface BraintreeFastlaneConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlane {\n    identity: BraintreeFastlaneIdentity;\n    profile: BraintreeFastlaneProfile;\n    FastlaneCardComponent: (\n        options: BraintreeFastlaneCardComponentOptions,\n    ) => Promise<BraintreeFastlaneCardComponent>;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeFastlaneProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<BraintreeFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface BraintreeFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: BraintreeFastlaneShippingAddress;\n}\n\nexport interface BraintreeFastlaneShippingAddress {\n    name: BraintreeFastlaneProfileName;\n    phoneNumber: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n}\n\nexport interface BraintreeFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface BraintreeFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: BraintreeFastlaneVaultedInstrument;\n}\n\nexport interface BraintreeFastlaneWindow extends Window {\n    braintreeFastlane: BraintreeFastlane;\n}\n\nexport interface BraintreeFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeFastlaneAuthenticationOptions,\n    ): Promise<BraintreeFastlaneAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeFastlaneAuthenticationOptions {\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport enum BraintreeFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface BraintreeFastlaneAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeFastlaneProfileData;\n}\n\nexport interface BraintreeFastlaneProfileData {\n    fastlaneCustomerAuthAssertionToken: string;\n    fastlaneCustomerId: string;\n    shippingAddress: BraintreeFastlaneAddress;\n    card: BraintreeFastlaneVaultedInstrument;\n    name: BraintreeFastlaneName;\n}\n\nexport interface BraintreeFastlaneName {\n    firstName: string;\n    lastName: string;\n}\n\nexport interface BraintreeFastlaneAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeFastlaneCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeFastlaneAddress;\n    binDetails?: {\n        bin: string;\n    };\n}\n\nexport interface BraintreeFastlanePaymentSource {\n    card: BraintreeFastlaneCardPaymentSource;\n}\n\nexport interface BraintreeFastlaneVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeFastlanePaymentSource;\n}\n\nexport interface BraintreeFastlaneCardComponentOptions {\n    styles: BraintreeFastlaneStylesOption;\n    fields: BraintreeFastlaneCardComponentFields;\n}\n\nexport interface BraintreeFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n\nexport interface BraintreeFastlaneTokenizeOptions {\n    name?: {\n        fullName: string;\n    };\n    billingAddress?: BraintreeFastlaneAddress;\n    shippingAddress?: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlaneEvents {\n    apmSelected: (options: BraintreeFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: BraintreeFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: BraintreeFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface BraintreeFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface BraintreeFastlaneApmSelectedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface BraintreeFastlaneEmailEnteredEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface BraintreeFastlaneOrderPlacedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface BraintreeFastlaneCardComponent {\n    (options: BraintreeFastlaneCardComponentOptions): BraintreeFastlaneCardComponent;\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>;\n    render(element: string): void;\n}\n\n/**\n *\n * Braintree Payload Verification\n *\n */\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\n/**\n *\n * Braintree Errors\n *\n */\nexport enum BraintreeErrorType {\n    Customer = 'CUSTOMER',\n    Merchant = 'MERCHANT',\n    Network = 'NETWORK',\n    Internal = 'INTERNAL',\n    Unknown = 'UNKNOWN',\n}\n\nexport enum BraintreeErrorCode {\n    KountNotEnabled = 'DATA_COLLECTOR_KOUNT_NOT_ENABLED',\n}\n\nexport interface BraintreeError extends Error {\n    type: BraintreeErrorType;\n    code: string | BraintreeErrorCode.KountNotEnabled;\n    details?: unknown;\n}\n\nexport interface BraintreeRedirectError {\n    body: {\n        additional_action_required: {\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport default interface BillingAddress extends Address {\n    id: string;\n    email?: string;\n}\n\nexport enum BraintreeSupportedCardBrands {\n    Visa = 'visa',\n    Mastercard = 'mastercard',\n    AmericanExpress = 'american-express',\n    DinersClub = 'diners-club',\n    Discover = 'discover',\n    Jcb = 'jcb',\n    UnionPay = 'union-pay',\n    Maestro = 'maestro',\n    Elo = 'elo',\n    Mir = 'mir',\n    Hiper = 'hiper',\n    Hipercard = 'hipercard',\n}\n\nexport interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n","import { BraintreeError } from '../types';\n\nexport default function isBraintreeError(error: unknown): error is BraintreeError {\n    return Boolean(\n        typeof error === 'object' &&\n            error !== null &&\n            ('type' in error || 'message' in error || 'code' in error),\n    );\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeError,\n    BraintreeErrorCode,\n    BraintreeGooglePayment,\n    BraintreeLocalPayment,\n    BraintreeModule,\n    BraintreeThreeDSecure,\n    BraintreeUsBankAccount,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeSdk {\n    private braintreeVenmo?: BraintreeVenmoCheckout;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private client?: BraintreeClient;\n    private clientToken?: string;\n    private dataCollector?: BraintreeDataCollector;\n    private googlePayment?: BraintreeGooglePayment;\n    private threeDS?: BraintreeThreeDSecure;\n    private visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private visaCheckoutSDK?: VisaCheckoutSDK;\n    private usBankAccount?: BraintreeUsBankAccount;\n\n    constructor(private braintreeScriptLoader: BraintreeScriptLoader) {}\n\n    initialize(clientToken: string): void {\n        this.setClientToken(clientToken);\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.teardownModule(this.dataCollector);\n\n        this.dataCollector = undefined;\n    }\n\n    /**\n     *\n     * Braintree Client\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_client.html\n     *\n     */\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = await clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    /**\n     *\n     * Braintree Data collector\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_data-collector.html\n     *\n     */\n    async getDataCollectorOrThrow(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const emptyDataCollector = {\n            deviceData: undefined,\n            teardown: () => Promise.resolve(),\n        };\n\n        if (!this.dataCollector) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                this.dataCollector = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === BraintreeErrorCode.KountNotEnabled) {\n                    return emptyDataCollector;\n                }\n\n                throw error;\n            }\n        }\n\n        return this.dataCollector;\n    }\n\n    /**\n     *\n     * Braintree Google Payment\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_google-payment.html\n     *\n     */\n    async getBraintreeGooglePayment(): Promise<BraintreeGooglePayment> {\n        if (!this.googlePayment) {\n            const [client, braintreeGooglePayment] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadGooglePayment(),\n            ]);\n\n            this.googlePayment = await braintreeGooglePayment.create({ client });\n        }\n\n        return this.googlePayment;\n    }\n\n    /**\n     *\n     * Braintree 3DS\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_three-d-secure.html\n     *\n     */\n    async getBraintreeThreeDS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            const [client, threeDSecure] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]);\n\n            this.threeDS = await threeDSecure.create({ client, version: 2 });\n        }\n\n        return this.threeDS;\n    }\n\n    /**\n     *\n     * Braintree Local Payment Methods\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_local-payment.html\n     *\n     */\n    async getBraintreeLocalPayment(\n        merchantAccountId: string,\n    ): Promise<BraintreeLocalPayment | undefined> {\n        if (!this.braintreeLocalPayment) {\n            const [client, localPaymentCreator] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadLocalPayment(),\n            ]);\n\n            this.braintreeLocalPayment = await new Promise(\n                (\n                    resolve: (braintreeLocalPayment: BraintreeLocalPayment) => void,\n                    reject: (error: BraintreeError) => void,\n                ) => {\n                    void localPaymentCreator.create(\n                        { client, merchantAccountId },\n                        (\n                            error: BraintreeError | undefined,\n                            braintreeLocalPayment: BraintreeLocalPayment,\n                        ) => {\n                            if (error) {\n                                reject(error);\n                            }\n\n                            resolve(braintreeLocalPayment);\n                        },\n                    );\n                },\n            );\n        }\n\n        return this.braintreeLocalPayment;\n    }\n\n    /**\n     *\n     * Braintree UsBankAccount\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_us-bank-account.html\n     *\n     */\n    async getUsBankAccount() {\n        if (!this.usBankAccount) {\n            const client = await this.getClient();\n            const usBankAccount = await this.braintreeScriptLoader.loadUsBankAccount();\n\n            this.usBankAccount = await usBankAccount.create({ client });\n        }\n\n        return this.usBankAccount;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_visa-checkout.html\n     *\n     */\n    getBraintreeVisaCheckout() {\n        if (!this.visaCheckout) {\n            this.visaCheckout = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.visaCheckout;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout SDK\n     * visa checkout doc: https://developer.visa.com/capabilities/visa_checkout/docs-how-to\n     *\n     */\n    async getVisaCheckoutSdk(testMode?: boolean) {\n        if (!this.visaCheckoutSDK) {\n            this.visaCheckoutSDK = await this.braintreeScriptLoader.loadVisaCheckoutSdk(testMode);\n        }\n\n        return this.visaCheckoutSDK;\n    }\n\n    /**\n     *\n     * Braintree Venmo Checkout\n     * braintree venmo checkout doc: https://braintree.github.io/braintree-web/current/module-braintree-web_venmo.html\n     *\n     */\n    async getVenmoCheckoutOrThrow() {\n        if (!this.braintreeVenmo) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const braintreeVenmoCheckout = await venmoCheckout.create(venmoCheckoutConfig);\n\n            if (braintreeVenmoCheckout.isBrowserSupported()) {\n                this.braintreeVenmo = braintreeVenmoCheckout;\n            } else {\n                throw new UnsupportedBrowserError();\n            }\n        }\n\n        return this.braintreeVenmo;\n    }\n\n    /**\n     *\n     * Private methods\n     *\n     */\n    private setClientToken(clientToken: string): void {\n        this.clientToken = clientToken;\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private teardownModule(module?: BraintreeModule): Promise<void> {\n        return module ? module.teardown() : Promise.resolve();\n    }\n}\n","import { Omit } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonOptions,\n    PaypalButtonRender,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeError,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsTokenizePayload,\n    BraintreeModule,\n    BraintreeModuleCreator,\n    BraintreeModuleCreatorConfig,\n    BraintreeThreeDSecureCreator,\n    BraintreeTokenizationDetails,\n    BraintreeUsBankAccountCreator,\n    BraintreeWindow,\n    FastlaneStylesSettings,\n    VisaCheckoutSDK,\n} from './types';\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport enum BraintreeEnv {\n    Sandbox = 'sandbox',\n    Production = 'production',\n}\n\n/**\n *\n * Common\n *\n */\nexport enum BraintreeModuleName {\n    Client = 'client',\n    DataCollector = 'dataCollector',\n    Fastlane = 'fastlane',\n    GooglePayment = 'googlePayment',\n    HostedFields = 'hostedFields',\n    LocalPayment = 'localPayment',\n    Paypal = 'paypal',\n    PaypalCheckout = 'paypalCheckout',\n    ThreeDSecure = 'threeDSecure',\n    UsBankAccount = 'usBankAccount',\n    Venmo = 'venmo',\n    VisaCheckout = 'visaCheckout',\n}\n\nexport type BraintreeModuleCreators =\n    | BraintreeClientCreator\n    | BraintreeFastlaneCreator\n    | BraintreeDataCollectorCreator\n    | BraintreeGooglePaymentCreator\n    | BraintreeHostedFieldsCreator\n    | BraintreePaypalCreator\n    | BraintreePaypalCheckoutCreator\n    | BraintreeThreeDSecureCreator\n    | BraintreeVenmoCheckoutCreator\n    | BraintreeVisaCheckoutCreator\n    | BraintreeUsBankAccountCreator\n    | BraintreeLocalPaymentCreator;\n\n// TODO: rename to BraintreeSdkModules\nexport interface BraintreeSDK {\n    [BraintreeModuleName.Client]?: BraintreeClientCreator;\n    [BraintreeModuleName.Fastlane]?: BraintreeFastlaneCreator;\n    [BraintreeModuleName.DataCollector]?: BraintreeDataCollectorCreator;\n    [BraintreeModuleName.GooglePayment]?: BraintreeGooglePaymentCreator;\n    [BraintreeModuleName.HostedFields]?: BraintreeHostedFieldsCreator;\n    [BraintreeModuleName.Paypal]?: BraintreePaypalCreator;\n    [BraintreeModuleName.PaypalCheckout]?: BraintreePaypalCheckoutCreator;\n    [BraintreeModuleName.ThreeDSecure]?: BraintreeThreeDSecureCreator;\n    [BraintreeModuleName.Venmo]?: BraintreeVenmoCheckoutCreator;\n    [BraintreeModuleName.VisaCheckout]?: BraintreeVisaCheckoutCreator;\n    [BraintreeModuleName.UsBankAccount]?: BraintreeUsBankAccountCreator;\n    [BraintreeModuleName.LocalPayment]?: BraintreeLocalPaymentCreator;\n}\n\nexport type BraintreeLocalPaymentCreator = BraintreeModuleCreator<\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentCreateConfig,\n    BraintreeError | undefined\n>;\n\nexport interface BraintreeLocalPaymentCreateConfig extends BraintreeModuleCreatorConfig {\n    merchantAccountId: string;\n}\n\nexport interface BraintreeInitializationData {\n    clientToken: string;\n    enableCheckoutPaywallBanner?: boolean;\n    intent?: 'authorize' | 'order' | 'sale';\n    isCreditEnabled?: boolean;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isFastlaneStylingEnabled?: boolean;\n    isFastlaneEnabled?: boolean;\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean;\n    fastlaneStyles?: FastlaneStylesSettings;\n    isBraintreeAnalyticsV2Enabled?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: only for BT AXO A/B testing purposes, hence should be removed after testing\n    paymentButtonStyles?: Record<string, PaypalStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[] | null;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeTokenizationDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    getState(): BraintreeHostedFieldsState;\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n        cardholderName?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    preventCursorJumps?: boolean;\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface TokenizationPayload {\n    nonce: string;\n    bin: string;\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\n// export interface BraintreeThreeDSecureOptions {\n//     /**\n//      * A callback that gets called when the iframe is ready to be added to the\n//      * current page. It is responsible for determining where the iframe should\n//      * be inserted in the DOM.\n//      *\n//      * @param error - Any error raised during the verification process;\n//      * undefined if there is none.\n//      * @param iframe - The iframe element containing the verification web page\n//      * provided by the card issuer.\n//      * @param cancel - A function, when called, will cancel the verification\n//      * process and remove the iframe.\n//      */\n//     addFrame(\n//         error: Error | undefined,\n//         iframe: HTMLIFrameElement,\n//         cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n//     ): void;\n//\n//     /**\n//      * A callback that gets called when the iframe is about to be removed from\n//      * the current page.\n//      */\n//     removeFrame(): void;\n// }\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n    commit?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => unknown): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop?: boolean;\n    paymentMethodUsage?: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Braintree BNPL Configurator related types\n *\n */\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * Braintree Local Methods\n *\n */\nexport interface BraintreeLocalPaymentConfig {\n    paymentType: string;\n    amount: number;\n    fallback: {\n        url: string;\n        buttonText: string;\n    };\n    currencyCode: string;\n    shippingAddressRequired: boolean;\n    email: string;\n    givenName: string;\n    surname: string;\n    address: {\n        countryCode: string;\n    };\n    onPaymentStart(data: BraintreeLPMPaymentStartData, start: () => Promise<void>): Promise<void>;\n}\n\nexport interface BraintreeLPMStartPaymentError {\n    code: string;\n}\n\nexport interface BraintreeLPMPaymentStartData {\n    paymentId: string;\n}\n\nexport interface BraintreeLocalPaymentsPayload {\n    nonce: string;\n}\n\nexport interface BraintreeLocalPayment extends BraintreeModule {\n    startPayment(\n        config: BraintreeLocalPaymentConfig,\n        callback: (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payload: BraintreeLocalPaymentsPayload,\n        ) => Promise<void>,\n    ): void;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends BraintreeWindow {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n    V?: VisaCheckoutSDK;\n}\n","import { BraintreeModuleName } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport const BRAINTREE_SDK_SCRIPTS_INTEGRITY = {\n    [BRAINTREE_SDK_STABLE_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O',\n        [BraintreeModuleName.Paypal]:\n            'sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT',\n        [BraintreeModuleName.Venmo]:\n            'sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa',\n    },\n    [BRAINTREE_SDK_DEFAULT_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/',\n        [BraintreeModuleName.Paypal]:\n            'sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS',\n        [BraintreeModuleName.Venmo]:\n            'sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y',\n    },\n    [BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-0WNxksIpRP+fYZiIdr12g6DBUQfLDzYCQJZtR/C8KkcwSGhPHfcFp3tTaGcMyFTq',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-lWM1jk4BOxoDNV6Kop7tVNvQgINlmEVz0c/OwM+HNHK3QC8xqwd54Ovrt2QRDTjh',\n        [BraintreeModuleName.Paypal]:\n            'sha384-fXUmVxC2EMZBDXZ7eTHSTL/LFBrHej/MSXT/vTBXvra4lzgLNGvREAp+x0GYObuH',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-pha1xGuGSkmZH5x9aqHvRaO4xLea7rmQ/79PFj9zxNzxuFcOWZg7gOP7FibygOEC',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-Q6PI2F9eekWbAxhroybl+aEcvqhdowN/EQlGwBUyJOzPFn9982u9xl6SU6XfGKzc',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-W3RLQSKJL1tQ3+Y7mP6tmkamtZ8bV4Yw/XxL9Jj5JtXHraD8loMF8hAIG5m2zK7F',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-TITQMsFWA3elDNGP2mWz2oKBo4qjt+TlqzovcaPoeBiAh/wPBi6nae50ADdgU1/i',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-YiycYN89ZlL/Evcaq4y1ajW1mhd7JYfZBDuOwHtIn4/Jnm20GL+/XCM+zYAwWD8D',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-/OdaTv9qrkKzjObtUe6yzfDhHozFW/+uXlrSl736sOZRJpjGQETvpYXqMFFg69xv',\n        [BraintreeModuleName.Venmo]:\n            'sha384-dA+ojdW9vbJS4JavcXyOs9d5uZHJg5dNtYupoPSH2zsXIiYDVS5amLb/u8qmQ6oz',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-31ZkS58+iaWsW06ftW52zzVZFp43WPd7pNYRiddYynSNg6Oh7WGbSFGorAUH6T1z',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-jlbrwNvL3HvLAUCtLSmrnQ2GH1udCUrRS/bVmReAS5fuIVvcW8Pko/Gkg82tlgtr',\n    },\n};\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\nimport isManageableBraintreeSDKVersion from './isManageableBraintreeSDKVersion';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreeLocalPaymentCreator,\n    BraintreeModuleCreators,\n    BraintreeModuleName,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeUsBankAccountCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './types';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async loadClient(): Promise<BraintreeClientCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeClientCreator>(\n            BraintreeModuleName.Client,\n            'client.min.js',\n        );\n    }\n\n    async loadFastlane(): Promise<BraintreeFastlaneCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeFastlaneCreator>(\n            BraintreeModuleName.Fastlane,\n            'fastlane.min.js',\n        );\n    }\n\n    async loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCheckoutCreator>(\n            BraintreeModuleName.PaypalCheckout,\n            'paypal-checkout.min.js',\n        );\n    }\n\n    async loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCreator>(\n            BraintreeModuleName.Paypal,\n            'paypal.min.js',\n        );\n    }\n\n    async loadLocalPayment(): Promise<BraintreeLocalPaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeLocalPaymentCreator>(\n            BraintreeModuleName.LocalPayment,\n            'local-payment.min.js',\n        );\n    }\n\n    async loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeDataCollectorCreator>(\n            BraintreeModuleName.DataCollector,\n            'data-collector.min.js',\n        );\n    }\n\n    async loadUsBankAccount(): Promise<BraintreeUsBankAccountCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeUsBankAccountCreator>(\n            BraintreeModuleName.UsBankAccount,\n            'us-bank-account.min.js',\n        );\n    }\n\n    async loadGooglePayment(): Promise<BraintreeGooglePaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeGooglePaymentCreator>(\n            BraintreeModuleName.GooglePayment,\n            'google-payment.min.js',\n        );\n    }\n\n    async load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeThreeDSecureCreator>(\n            BraintreeModuleName.ThreeDSecure,\n            'three-d-secure.min.js',\n        );\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVisaCheckoutCreator>(\n            BraintreeModuleName.VisaCheckout,\n            'visa-checkout.min.js',\n        );\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVenmoCheckoutCreator>(\n            BraintreeModuleName.Venmo,\n            'venmo.min.js',\n        );\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeHostedFieldsCreator>(\n            BraintreeModuleName.HostedFields,\n            'hosted-fields.min.js',\n        );\n    }\n\n    async loadVisaCheckoutSdk(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        if (this.braintreeHostWindow.V) {\n            return this.braintreeHostWindow.V;\n        }\n\n        const hash = testMode\n            ? 'sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm'\n            : 'sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6';\n\n        return this.scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity: hash,\n                        crossorigin: 'anonymous',\n                    },\n                },\n            )\n            .then(() => {\n                if (!this.braintreeHostWindow.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this.braintreeHostWindow.V;\n            });\n    }\n\n    private async loadBraintreeModuleOrThrow<T extends BraintreeModuleCreators>(\n        braintreeModuleName: BraintreeModuleName,\n        fileName: string,\n    ): Promise<T> {\n        let module = this.getBraintreeModule(braintreeModuleName);\n\n        if (module) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return module as T;\n        }\n\n        const braintreeSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n\n        const scriptPath = `//js.braintreegateway.com/web/${braintreeSdkVersion}/js/${fileName}`;\n\n        const integrity = isManageableBraintreeSDKVersion(braintreeSdkVersion)\n            ? this.getIntegrityValuesByModuleName(braintreeModuleName, braintreeSdkVersion)\n            : undefined;\n\n        await this.scriptLoader.loadScript(\n            scriptPath,\n            integrity\n                ? {\n                      async: true,\n                      attributes: {\n                          integrity,\n                          crossorigin: 'anonymous',\n                      },\n                  }\n                : undefined,\n        );\n\n        module = this.getBraintreeModule(braintreeModuleName);\n\n        if (!module) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return module as T;\n    }\n\n    private getBraintreeModule(\n        braintreeModuleName: BraintreeModuleName,\n    ): BraintreeModuleCreators | undefined {\n        return this.braintreeHostWindow.braintree?.[braintreeModuleName];\n    }\n\n    private getIntegrityValuesByModuleName(\n        moduleName: BraintreeModuleName,\n        version: keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY,\n    ): string {\n        const integrity = BRAINTREE_SDK_SCRIPTS_INTEGRITY[version][moduleName];\n\n        if (!integrity) {\n            throw new Error('Unexpected fileName value');\n        }\n\n        return integrity;\n    }\n}\n","import { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\n\nfunction isManageableBraintreeSDKVersion(\n    version: string,\n): version is keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY {\n    return version in BRAINTREE_SDK_SCRIPTS_INTEGRITY;\n}\n\nexport default isManageableBraintreeSDKVersion;\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","export enum ApplePayGatewayType {\n    BRAINTREE = 'braintree',\n    BRAINTREE_FASTLANE = 'braintreeacceleratedcheckout',\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    AddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport ApplePayButtonInitializeOptions, {\n    WithApplePayButtonInitializeOptions,\n} from './apple-pay-button-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nexport enum ButtonStyleOption {\n    Black = 'black',\n    White = 'white',\n    WhiteBorder = 'white-border',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nconst getButtonStyle = (buttonStyle?: ButtonStyleOption): string => {\n    switch (buttonStyle) {\n        case ButtonStyleOption.White:\n            return 'white';\n\n        case ButtonStyleOption.WhiteBorder:\n            return 'white-outline';\n\n        case ButtonStyleOption.Black:\n        default:\n            return 'black';\n    }\n};\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _requiresShipping?: boolean;\n    private _buyNowInitializeOptions?: ApplePayButtonInitializeOptions['buyNowInitializeOptions'];\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithApplePayButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await this._applePayScriptLoader.loadSdk();\n\n        const { onPaymentAuthorize, buyNowInitializeOptions, requiresShipping } = applepay;\n\n        this._requiresShipping = requiresShipping;\n\n        this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        if (!buyNowInitializeOptions) {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const cart = state.getCart();\n\n        if (cart) {\n            await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n        }\n\n        if (this._paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n\n        this._applePayButton = this._createButton(\n            containerId,\n            this._paymentMethod.initializationData?.styleOption,\n        );\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string, styleOption?: ButtonStyleOption): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        const applePayButton = this._createApplePayButtonElement(styleOption);\n\n        container.appendChild(applePayButton);\n\n        return applePayButton;\n    }\n\n    private _createApplePayButtonElement(styleOption?: ButtonStyleOption): HTMLElement {\n        const applePayButton = document.createElement('apple-pay-button');\n\n        applePayButton.setAttribute('buttonstyle', getButtonStyle(styleOption));\n        applePayButton.setAttribute('type', 'plain');\n        applePayButton.setAttribute(\n            'style',\n            '--apple-pay-button-width: 100%; --apple-pay-button-height: 40px; --apple-pay-button-border-radius: 4px;',\n        );\n\n        return applePayButton;\n    }\n\n    private async _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (\n            this._buyNowInitializeOptions &&\n            typeof this._buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const {\n                countryCode,\n                currencyCode,\n                merchantCapabilities,\n                supportedNetworks,\n                storeName,\n            } = this._paymentMethod.initializationData;\n\n            const request = this._getRequestWithEmptyTotal(\n                countryCode,\n                currencyCode,\n                supportedNetworks,\n                merchantCapabilities,\n            );\n\n            if (this._requiresShipping) {\n                request.requiredShippingContactFields?.push('postalAddress');\n            }\n\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(applePaySession, this._paymentMethod, storeName);\n\n            applePaySession.begin();\n        } else {\n            const state = this._paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const config = state.getStoreConfigOrThrow();\n            const checkout = state.getCheckoutOrThrow();\n            const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(\n                applePaySession,\n                this._paymentMethod,\n                config.storeProfile.storeName,\n            );\n\n            applePaySession.begin();\n        }\n    }\n\n    private _getRequestWithEmptyTotal(\n        countryCode: string,\n        currencyCode: string,\n        supportedNetworks: string[],\n        merchantCapabilities: ApplePayJS.ApplePayMerchantCapability[],\n    ): ApplePayJS.ApplePayPaymentRequest {\n        return {\n            countryCode,\n            currencyCode,\n            supportedNetworks,\n            merchantCapabilities,\n            total: { label: '', amount: '0', type: 'pending' },\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n        };\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        storeName: string,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        if (this._buyNowInitializeOptions && !this._requiresShipping) {\n            applePaySession.onpaymentmethodselected = async () => {\n                await this._createBuyNowCart();\n                this._handlePaymentMethodSelected(applePaySession);\n            };\n        }\n\n        applePaySession.onshippingcontactselected = async (event) => {\n            if (this._buyNowInitializeOptions && this._requiresShipping) {\n                await this._createBuyNowCart();\n            }\n\n            await this._handleShippingContactSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.onshippingmethodselected = async (event) => {\n            await this._handleShippingMethodSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _createBuyNowCart() {\n        try {\n            const cartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            const buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                cartRequestBody,\n            );\n\n            await this._paymentIntegrationService.loadCheckout(buyNowCart.id);\n\n            const state = this._paymentIntegrationService.getState();\n            const { shouldExecuteSpamCheck } = state.getCheckoutOrThrow();\n\n            if (shouldExecuteSpamCheck) {\n                await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n            }\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private _handlePaymentMethodSelected(applePaySession: ApplePaySession) {\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n\n        delete request.total.type;\n\n        applePaySession.completePaymentMethodSelection({\n            newTotal: request.total,\n            newLineItems: request.lineItems,\n        });\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        const state = this._paymentIntegrationService.getState();\n        const braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { assertApplePayWindow } from './apple-pay-session-factory';\n\nexport default class ApplePayScriptLoader {\n    private sdkVersion = '1.latest';\n\n    constructor(private scriptLoader: ScriptLoader) {}\n\n    async loadSdk() {\n        await this.scriptLoader.loadScript(\n            `https://applepay.cdn-apple.com/jsapi/${this.sdkVersion}/apple-pay-sdk.js`,\n        );\n\n        assertApplePayWindow(window);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayButtonStrategy from './apple-pay-button-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<ApplePayButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [{ id: 'applepay' }]);\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * BigCommerce Payments Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n// TODO: rename BigCommercePaymentsSDKFunding to PayPalSDKFunding\nexport interface BigCommercePaymentsSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * BigCommerce Payments SDK\n *\n */\n\nexport interface BigCommercePaymentsCardFieldsConfig {\n    inputEvents: {\n        onChange(data: BigCommercePaymentsCardFieldsState): void;\n        onFocus(data: BigCommercePaymentsCardFieldsState): void;\n        onBlur(data: BigCommercePaymentsCardFieldsState): void;\n        onInputSubmitRequest(data: BigCommercePaymentsCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: BigCommercePaymentsCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: BigCommercePaymentsHostedFieldsRenderOptions['styles'];\n    onApprove(data: BigCommercePaymentsCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\nexport interface BigCommercePaymentsCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n    liabilityShift?: LiabilityShiftEnum;\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\ninterface BigCommercePaymentsCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype BigCommercePaymentsCardFieldsCard = BigCommercePaymentsHostedFieldsCard;\n\nexport interface BigCommercePaymentsCardFieldsState {\n    cards: BigCommercePaymentsCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: BigCommercePaymentsCardFieldsFieldData;\n        cardNumberField: BigCommercePaymentsCardFieldsFieldData;\n        cardNameField?: BigCommercePaymentsCardFieldsFieldData;\n        cardExpiryField: BigCommercePaymentsCardFieldsFieldData;\n    };\n}\n\nexport interface BigCommercePaymentsFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\ninterface BigCommercePaymentsFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface BigCommercePaymentsCardFields {\n    isEligible(): boolean;\n    CVVField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    ExpiryField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    NameField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    NumberField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    submit(config?: BigCommercePaymentsCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<BigCommercePaymentsCardFieldsState>;\n}\n\nexport interface BigCommercePaymentsCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalSDK {\n    CardFields: (\n        data: BigCommercePaymentsCardFieldsConfig,\n    ) => Promise<BigCommercePaymentsCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: BigCommercePaymentsSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(\n            data: BigCommercePaymentsHostedFieldsRenderOptions,\n        ): Promise<BigCommercePaymentsHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: BigCommercePaymentsButtonsOptions): BigCommercePaymentsButtons;\n    PaymentFields(\n        options: BigCommercePaymentsPaymentFieldsOptions,\n    ): BigCommercePaymentsPaymentFields;\n    Messages(options: BigCommercePaymentsMessagesOptions): BigCommercePaymentsMessages;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\nexport interface BirthDate {\n    getFullYear(): number;\n    getDate(): number;\n    getMonth(): number;\n}\n\nexport interface BigCommercePaymentsScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: BigCommercePaymentsIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n    };\n}\n\nexport enum BigCommercePaymentsIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport interface BigCommercePaymentsHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\n/**\n *\n * BigCommerce Payments Initialization Data\n *\n */\nexport interface BigCommercePaymentsInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\n/**\n *\n * BigCommerce Payments BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * BigCommerce Payments Hosted Fields\n *\n */\nexport interface BigCommercePaymentsHostedFieldsRenderOptions {\n    fields?: {\n        number?: BigCommercePaymentsHostedFieldOption;\n        cvv?: BigCommercePaymentsHostedFieldOption;\n        expirationDate?: BigCommercePaymentsHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface BigCommercePaymentsHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface BigCommercePaymentsHostedFields {\n    submit(\n        options?: BigCommercePaymentsHostedFieldsSubmitOptions,\n    ): Promise<BigCommercePaymentsHostedFieldsApprove>;\n    getState(): BigCommercePaymentsHostedFieldsState;\n    on(eventName: string, callback: (event: BigCommercePaymentsHostedFieldsState) => void): void;\n}\n\nexport interface BigCommercePaymentsHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface BigCommercePaymentsHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface BigCommercePaymentsHostedFieldsState {\n    cards: BigCommercePaymentsHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationDate?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationMonth?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationYear?: BigCommercePaymentsHostedFieldsFieldData;\n        cvv?: BigCommercePaymentsHostedFieldsFieldData;\n        postalCode?: BigCommercePaymentsHostedFieldsFieldData;\n    };\n}\n\nexport interface BigCommercePaymentsHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface BigCommercePaymentsHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * BigCommerce Payments Buttons\n *\n */\nexport interface BigCommercePaymentsButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface BigCommercePaymentsButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    countryCode: string;\n    postalCode: string;\n    state: string;\n}\n\nexport interface PaypalAddressCallbackData {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n        phone?: {\n            phone_number: {\n                national_number: string;\n            };\n        };\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n            name: {\n                full_name: string;\n            };\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    address_line_2: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * BigCommerce Payments Payment fields\n *\n */\nexport interface BigCommercePaymentsPaymentFields {\n    render(id: string): void;\n}\n\nexport interface BigCommercePaymentsPaymentFieldsOptions {\n    style?: BigCommercePaymentsFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface BigCommercePaymentsFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * BigCommercePayments Messages\n */\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessages {\n    render(id: string): void;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: BigCommercePaymentsMessagesStyleOptions;\n    fundingSource?: string;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n    fastlaneToken?: string;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsRequestSender from './bigcommerce-payments-request-sender';\nimport BigCommercePaymentsScriptLoader from './bigcommerce-payments-script-loader';\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCreateOrderCardFieldsResponse,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsRequestSender: BigCommercePaymentsRequestSender,\n        private bigCommercePaymentsScriptLoader: BigCommercePaymentsScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        this.paypalSdk = await this.bigCommercePaymentsScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n            forceLoad,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.bigCommercePaymentsRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async createOrderCardFields(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalCreateOrderCardFieldsResponse> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId, setupToken } = await this.bigCommercePaymentsRequestSender.createOrder(\n            providerId,\n            {\n                cartId,\n                ...requestBody,\n            },\n        );\n\n        return { orderId, ...(setupToken ? { setupToken } : {}) };\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.bigCommercePaymentsRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(methodId?: string, options?: RequestOptions): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.bigCommercePaymentsRequestSender.getOrderStatus(\n                methodId,\n                options,\n            );\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string, gatewayId?: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({\n            methodId,\n            paymentData,\n            ...(gatewayId ? { gatewayId } : {}),\n        });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: address?.phone || '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: address?.address2 || '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            address2: payer.address.address_line_2,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n            phone: payer.phone?.phone_number?.national_number,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const {\n            address,\n            name: { full_name },\n        } = purchase_units[0].shipping;\n\n        const [firstName, ...lastName] = full_name.split(' ');\n\n        return this.getAddress({\n            firstName,\n            lastName: lastName.join(' '),\n            email: payer.email_address,\n            address1: address.address_line_1,\n            address2: address.address_line_2,\n            city: address.admin_area_2,\n            countryCode: address.country_code,\n            postalCode: address.postal_code,\n            stateOrProvinceCode: address.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            // For now this is a temporary solution, further removeElement method will be removed\n            element.style.display = 'none';\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/bigcommerce_payments`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(\n        methodId = 'bigcommerce_payments',\n        options?: RequestOptions,\n    ): Promise<PayPalOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsHostWindow,\n    BigCommercePaymentsInitializationData,\n    BigCommercePaymentsScriptParams,\n    ComponentsScriptType,\n    FundingType,\n    PayPalSDK,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsScriptLoader {\n    private window: BigCommercePaymentsHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: BigCommercePaymentsScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<BigCommercePaymentsScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<BigCommercePaymentsScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): BigCommercePaymentsScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'bigcommerce_payments_creditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsIntegrationService,\n    BigCommercePaymentsRequestSender,\n    BigCommercePaymentsScriptLoader,\n} from './index';\n\nconst createBigCommercePaymentsIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new BigCommercePaymentsIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new BigCommercePaymentsRequestSender(createRequestSender({ host: getHost() })),\n        new BigCommercePaymentsScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createBigCommercePaymentsIntegrationService;\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    PayPalBuyNowInitializeOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsButtonInitializeOptions, {\n    WithBigCommercePaymentsButtonInitializeOptions,\n} from './bigcommerce-payments-button-initialize-options';\n\nexport default class BigCommercePaymentsButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBigCommercePaymentsButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments, containerId, methodId } = options;\n\n        const isBuyNowFlow = Boolean(bigcommerce_payments?.buyNowInitializeOptions);\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !bigcommerce_payments.currencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof bigcommerce_payments.buyNowInitializeOptions?.getBuyNowCartRequestBody !==\n                'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? bigcommerce_payments.currencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments: BigCommercePaymentsButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            bigcommerce_payments;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsButtonStrategy from './bigcommerce-payments-button-strategy';\n\nconst createBigCommercePaymentsButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsButtonStrategy, [\n    { id: 'bigcommerce_payments' },\n]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalHostWindow,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './bigcommerce-payments-types';\n\nexport default class PayPalSdkHelper {\n    private window: PayPalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: ['fastlane', 'three-domain-secure'],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { MessagesStyleOptions, PayPalBNPLConfigurationItem } from '../bigcommerce-payments-types';\n\nfunction getPaypalMessagesStylesFromBNPLConfig({\n    styles,\n}: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n    const messagesStyles: MessagesStyleOptions = {};\n\n    if (styles.color) {\n        messagesStyles.color = styles.color;\n    }\n\n    if (styles.layout) {\n        messagesStyles.layout = styles.layout;\n    }\n\n    if (styles['logo-type'] || styles['logo-position']) {\n        messagesStyles.logo = {};\n\n        if (styles['logo-type']) {\n            messagesStyles.logo.type = styles['logo-type'];\n        }\n\n        if (styles['logo-position']) {\n            messagesStyles.logo.position = styles['logo-position'];\n        }\n    }\n\n    if (styles.ratio) {\n        messagesStyles.ratio = styles.ratio;\n    }\n\n    if (styles['text-color'] || styles['text-size']) {\n        messagesStyles.text = {};\n\n        if (styles['text-color']) {\n            messagesStyles.text.color = styles['text-color'];\n        }\n\n        if (styles['text-size']) {\n            messagesStyles.text.size = +styles['text-size'];\n        }\n    }\n\n    return messagesStyles;\n}\n\nexport default getPaypalMessagesStylesFromBNPLConfig;\n","import {\n    BigCommercePaymentsInitializationData,\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalMessagesSdk,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalBuyNowInitializeOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPayLaterButtonInitializeOptions, {\n    WithBigCommercePaymentsPayLaterButtonInitializeOptions,\n} from './bigcommerce-payments-paylater-button-initialize-options';\n\nexport default class BigCommercePaymentsPayLaterButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private payPalSdkHelper: PayPalSdkHelper,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsPayLaterButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_paylater, containerId, methodId } = options;\n        const {\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n            messagingContainerId,\n        } = bigcommerce_payments_paylater || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_paylater) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const state = this.paymentIntegrationService.getState();\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : state.getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_paylater);\n\n        const messagingContainer =\n            messagingContainerId && document.getElementById(messagingContainerId);\n\n        if (currencyCode && messagingContainer) {\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData || {};\n            const bannerConfiguration =\n                paypalBNPLConfiguration && paypalBNPLConfiguration.find(({ id }) => id === 'cart');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            // TODO: remove this when data attributes will be removed from related cart banner container in content service\n            messagingContainer.removeAttribute('data-pp-style-logo-type');\n            messagingContainer.removeAttribute('data-pp-style-logo-position');\n            messagingContainer.removeAttribute('data-pp-style-text-color');\n            messagingContainer.removeAttribute('data-pp-style-text-size');\n\n            const payPalSdkHelper = await this.payPalSdkHelper.getPayPalMessages(\n                paymentMethod,\n                currencyCode,\n            );\n\n            this.renderMessages(payPalSdkHelper, messagingContainerId, bannerConfiguration);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_paylater: BigCommercePaymentsPayLaterButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            bigcommerce_payments_paylater;\n\n        const bigCommercePaymentsSdk =\n            this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_paylater',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [\n            bigCommercePaymentsSdk.FUNDING.PAYLATER,\n            bigCommercePaymentsSdk.FUNDING.CREDIT,\n        ];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n                    fundingSource,\n                    style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n                    ...defaultCallbacks,\n                    ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = bigCommercePaymentsSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                    onEligibilityFailure();\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private renderMessages(\n        paypalMessagesSdk: PayPalMessagesSdk,\n        messagingContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'cart',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        const paypalMessages = paypalMessagesSdk.Messages(paypalMessagesOptions);\n\n        paypalMessages.render(`#${messagingContainerId}`);\n    }\n}\n","import { createBigCommercePaymentsSdk } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPayLaterButtonStrategy from './bigcommerce-payments-paylater-button-strategy';\n\nconst createBigCommercePaymentsPayLaterButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsPayLaterButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPayLaterButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        createBigCommercePaymentsSdk(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPayLaterButtonStrategy, [\n    { id: 'bigcommerce_payments_paylater' },\n]);\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalSdkHelper from './paypal-sdk-helper';\n\nexport default function createBigCommercePaymentsSdk(): PayPalSdkHelper {\n    return new PayPalSdkHelper(createScriptLoader());\n}\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalBuyNowInitializeOptions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsAlternativeMethodsButtonInitializeOptions, {\n    WithBigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n} from './bigcommerce-payments-alternative-methods-button-initialize-options';\n\nexport default class BigCommercePaymentsAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_apms, containerId, methodId } = options;\n        const {\n            apm,\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n        } = bigcommerce_payments_apms || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_apms) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms\" argument is not provided.`,\n            );\n        }\n\n        if (!apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.apm\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_apms);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, style, onEligibilityFailure } =\n            bigcommerce_payments_apms;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.bigcommerce_payments_apms.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments_apms'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: apm,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsAlternativeMethodsButtonStrategy from './bigcommerce-payments-alternative-methods-button-strategy';\n\nconst createBigCommercePaymentsAlternativeMethodsButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsAlternativeMethodsButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsAlternativeMethodsButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsAlternativeMethodsButtonStrategy, [\n    { id: 'bigcommerce_payments_apms' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    StyleButtonColor,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsVenmoButtonInitializeOptions, {\n    WithBigCommercePaymentsVenmoButtonInitializeOptions,\n} from './bigcommerce-payments-venmo-button-initialize-options';\n\nexport default class BigCommercePaymentsVenmoButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsVenmoButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_venmo, containerId, methodId } = options;\n        const { buyNowInitializeOptions, currencyCode: providedCurrencyCode } =\n            bigcommerce_payments_venmo || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_venmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_venmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_venmo: BigCommercePaymentsVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onEligibilityFailure } = bigcommerce_payments_venmo;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const fundingSource = paypalSdk.FUNDING.VENMO;\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_venmo',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource,\n            style: this.getValidVenmoButtonStyles(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private getValidVenmoButtonStyles(style: PayPalButtonStyleOptions | undefined) {\n        const validButtonStyle =\n            this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style);\n\n        if (validButtonStyle.color === StyleButtonColor.gold) {\n            return {\n                ...validButtonStyle,\n                color: undefined,\n            };\n        }\n\n        return validButtonStyle;\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsVenmoButtonStrategy from './bigcommerce-payments-venmo-button-strategy';\n\nconst createBigCommercePaymentsVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsVenmoButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsVenmoButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsVenmoButtonStrategy, [\n    { id: 'bigcommerce_payments_venmo' },\n]);\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"query-string\");","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import {\n    BuyNowCartRequestBody,\n    NonceInstrument,\n    PaymentMethod,\n    WithAccountCreation,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface BoltHostWindow extends Window {\n    BoltCheckout?: BoltCheckout;\n    BoltConnect?: BoltConnect;\n    Bolt?(publicKey: string): BoltEmbedded;\n}\n\nexport interface BoltCheckout {\n    configure(cart: BoltCart, hints: Record<string, never>, callbacks?: BoltCallbacks): BoltClient;\n    hasBoltAccount(email: string): Promise<boolean>;\n    getTransactionReference(): Promise<string | undefined>;\n    openCheckout(email: string, callbacks?: BoltOpenCheckoutCallbacks): Promise<void>;\n    setClientCustomCallbacks(callbacks: BoltCallbacks): void;\n    setOrderId(orderId: number): Promise<void>;\n}\n\nexport interface BoltConnect {\n    setupProductPageCheckout?(): void;\n}\n\nexport interface BoltOpenCheckoutCallbacks {\n    close?(): void;\n}\n\nexport interface BoltEmbeddedOptions {\n    styles: { backgroundColor: string };\n    renderSeparateFields?: boolean;\n}\n\nexport interface BoltEmbedded {\n    create(name: string, options?: BoltEmbeddedOptions): BoltEmbededField;\n}\n\nexport interface BoltEmbededField {\n    mount(element: string): void;\n    unmount(): void;\n    tokenize(): Promise<BoltEmbeddedTokenize | Error>;\n}\n\nexport interface BoltDeveloperModeParams {\n    developerMode: BoltDeveloperMode;\n    developerDomain: string;\n}\n\nexport enum BoltDeveloperMode {\n    SandboxMode = 'bolt_sandbox',\n    StagingMode = 'bolt_staging',\n    DevelopmentMode = 'bolt_development',\n}\n\nexport interface BoltClient {\n    open(): void;\n}\n\nexport interface BoltCart {\n    orderToken: string;\n}\n\nexport interface BoltCallbacks {\n    check?(): boolean;\n    onCheckoutStart?(): void;\n    onPaymentSubmit?(): void;\n    success(transaction: BoltTransaction, callback: () => void): void;\n    close?(): void;\n}\n\nexport interface BoltTransaction {\n    id: string;\n    type: string;\n    processor: string;\n    date: number;\n    reference: string;\n    status: string;\n    authorization: BoltAuthorization;\n}\n\nexport interface BoltAuthorization {\n    status: string;\n    reason: string;\n}\n\nexport interface BoltEmbeddedTokenize {\n    bin: string;\n    expiration: string;\n    last4: string;\n    postal_code?: string;\n    token: string;\n    token_type: string;\n}\n\nexport interface BoltPaymentMethod extends PaymentMethod {\n    initializationData?: BoltInitializationData;\n}\n\nexport interface BoltInitializationData {\n    publishableKey: string;\n    developerConfig: BoltDeveloperModeParams;\n    embeddedOneClickEnabled: boolean;\n}\n\nexport type BoltPaymentData = WithAccountCreation & NonceInstrument;\n\nexport interface BoltBuyNowInitializeOptions {\n    storefrontApiToken?: string;\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\nexport enum StyleButtonSize {\n    Small = 'small',\n    Medium = 'medium',\n    Large = 'large',\n}\n\nexport enum StyleButtonShape {\n    Pill = 'pill',\n    Rect = 'rect',\n}\n\nexport interface BoltButtonStyleOptions {\n    shape?: StyleButtonShape;\n    size?: StyleButtonSize;\n}\n","import { stringifyUrl } from 'query-string';\n\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    NotImplementedError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BoltButtonStyleOptions,\n    BoltHostWindow,\n    BoltPaymentMethod,\n    StyleButtonShape,\n    StyleButtonSize,\n} from './bolt';\nimport { WithBoltButtonInitializeOptions } from './bolt-button-initialize-options';\nimport BoltScriptLoader from './bolt-script-loader';\n\nexport default class BoltButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private boltScriptLoader: BoltScriptLoader,\n        public boltHostWindow: BoltHostWindow = window,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBoltButtonInitializeOptions,\n    ): Promise<void> {\n        const { bolt, containerId, methodId } = options;\n        const { buyNowInitializeOptions, style } = bolt || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bolt) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bolt\" argument is not provided.`,\n            );\n        }\n\n        const isBuyNowFlow = Boolean(buyNowInitializeOptions);\n\n        if (!isBuyNowFlow) {\n            throw new NotImplementedError('Only buy now flow is implemented for Bolt button');\n        }\n\n        if (\n            !buyNowInitializeOptions?.storefrontApiToken ||\n            typeof buyNowInitializeOptions.storefrontApiToken !== 'string'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.storefrontApiToken\" argument is not provided.`,\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod: BoltPaymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { initializationData, config } = paymentMethod;\n        const { publishableKey, developerConfig } = initializationData || {};\n\n        await this.boltScriptLoader.loadBoltClient(\n            publishableKey,\n            config.testMode,\n            developerConfig,\n            'BigCommerce',\n            buyNowInitializeOptions.storefrontApiToken,\n        );\n\n        this.renderButton(containerId, paymentMethod, style);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): void {\n        if (typeof this.boltHostWindow.BoltConnect?.setupProductPageCheckout !== 'function') {\n            return;\n        }\n\n        this.addButtonContainer(containerId, paymentMethod, style);\n        this.boltHostWindow.BoltConnect.setupProductPageCheckout();\n    }\n\n    private addButtonContainer(\n        containerId: string,\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): void {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            return;\n        }\n\n        const boltButtonContainer = document.createElement('div');\n        const boltButtonObject = document.createElement('object');\n\n        boltButtonContainer.setAttribute('id', 'product-page-checkout-wrapper');\n        boltButtonContainer.setAttribute('class', 'bolt-button-wrapper');\n        boltButtonContainer.setAttribute('style', 'display:none');\n        boltButtonContainer.setAttribute('data-tid', 'product-page-checkout-wrapper');\n\n        boltButtonObject.setAttribute('data', this.getBoltObjectData(paymentMethod, style));\n        boltButtonObject.setAttribute('class', 'bolt-product-checkout-button');\n\n        boltButtonContainer.append(boltButtonObject);\n        container.innerHTML = '';\n        container.append(boltButtonContainer);\n    }\n\n    private getBoltObjectData(\n        paymentMethod: BoltPaymentMethod,\n        style?: BoltButtonStyleOptions,\n    ): string {\n        const { initializationData, config } = paymentMethod;\n        const { publishableKey, developerConfig } = initializationData || {};\n\n        const domainUrl = this.boltScriptLoader.getDomainURL(!!config.testMode, developerConfig);\n        const buttonHeight = this.getButtonHeight(style?.size);\n        const buttonBorderRadius = this.getButtonBorderRadius(style?.shape, buttonHeight);\n\n        return stringifyUrl({\n            url: `https://${domainUrl}/v1/checkout_button`,\n            query: {\n                publishable_key: publishableKey,\n                variant: 'ppc',\n                height: buttonHeight,\n                border_radius: buttonBorderRadius,\n            },\n        });\n    }\n\n    private getButtonHeight(buttonSize?: StyleButtonSize): number | undefined {\n        if (!buttonSize) {\n            return;\n        }\n\n        switch (buttonSize) {\n            case StyleButtonSize.Small:\n                return 25;\n\n            case StyleButtonSize.Large:\n                return 45;\n\n            case StyleButtonSize.Medium:\n            default:\n                return 40;\n        }\n    }\n\n    private getButtonBorderRadius(\n        buttonShape?: StyleButtonShape,\n        buttonHeight?: number,\n    ): number | undefined {\n        if (!buttonShape) {\n            return;\n        }\n\n        switch (buttonShape) {\n            case StyleButtonShape.Pill:\n                return buttonHeight ? Math.round(buttonHeight / 2) : undefined;\n\n            case StyleButtonShape.Rect:\n            default:\n                return 4;\n        }\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    InvalidArgumentError,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BoltCheckout,\n    BoltDeveloperMode,\n    BoltDeveloperModeParams,\n    BoltEmbedded,\n    BoltHostWindow,\n} from './bolt';\n\nexport default class BoltScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        public boltHostWindow: BoltHostWindow = window,\n    ) {}\n\n    async loadBoltClient(\n        publishableKey?: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n        cartId?: string,\n        storefrontApiToken?: string,\n    ): Promise<BoltCheckout> {\n        if (this.boltHostWindow.BoltCheckout) {\n            return this.boltHostWindow.BoltCheckout;\n        }\n\n        if (!publishableKey) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"publishableKey\" argument is not provided.',\n            );\n        }\n\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/connect-bigcommerce.js`,\n            this.getScriptOptions('bolt-connect', publishableKey, cartId, storefrontApiToken),\n        );\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/track.js`,\n            this.getScriptOptions('bolt-track', publishableKey),\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!this.boltHostWindow.BoltCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.boltHostWindow.BoltCheckout;\n    }\n\n    async loadBoltEmbedded(\n        publishableKey: string,\n        testMode?: boolean,\n        developerModeParams?: BoltDeveloperModeParams,\n    ): Promise<BoltEmbedded> {\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: {\n                id: 'bolt-embedded',\n            },\n        };\n\n        await this.scriptLoader.loadScript(\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/embed.js`,\n            options,\n        );\n\n        if (!this.boltHostWindow.Bolt) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.boltHostWindow.Bolt(publishableKey);\n    }\n\n    getDomainURL(testMode: boolean, developerModeParams?: BoltDeveloperModeParams): string {\n        if (!testMode) {\n            return 'connect.bolt.com';\n        }\n\n        if (developerModeParams) {\n            switch (developerModeParams.developerMode) {\n                case BoltDeveloperMode.StagingMode:\n                    return 'connect-staging.bolt.com';\n\n                case BoltDeveloperMode.DevelopmentMode:\n                    return `connect.${developerModeParams.developerDomain}`;\n            }\n        }\n\n        return 'connect-sandbox.bolt.com';\n    }\n\n    private getScriptOptions(\n        id: string,\n        publishableKey: string,\n        cartId?: string,\n        storefrontApiToken?: string,\n    ): LoadScriptOptions {\n        return {\n            async: true,\n            attributes: {\n                id,\n                'data-publishable-key': publishableKey,\n                ...(cartId && { 'data-shopping-cart-id': cartId }),\n                ...(storefrontApiToken && { 'data-storefront-api-token': storefrontApiToken }),\n            },\n        };\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BoltButtonStrategy from './bolt-button-strategy';\nimport BoltScriptLoader from './bolt-script-loader';\n\nconst createBoltButtonStrategy: CheckoutButtonStrategyFactory<BoltButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BoltButtonStrategy(\n        paymentIntegrationService,\n        new BoltScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createBoltButtonStrategy, [{ id: 'bolt' }]);\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@braintree/browser-detection\");","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","// the PayPal side of things uses uppercase keys instead of camel case\n\n/**\n *\n * PayPal constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n    WHITE = 'white',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\n/**\n *\n * PayPal interfaces\n *\n */\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    buyerCountry?: string;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface MessagesStyleOptions {\n    color?: string; // 'blue' | 'black' | 'white' | 'white-no-border' | 'gray' | 'monochrome' | 'grayscale'\n    layout?: string; // 'text' | 'flex'\n    logo?: {\n        type?: string; // 'primary' | 'alternative' | 'inline' | 'none'\n        position?: string; // 'left' | 'right' | 'top'\n    };\n    ratio?: string; // '1x1' | '1x4' | '8x1' | '20x1'\n    text?: {\n        align?: string; // 'left' | 'right' | 'center'\n        color?: string; // 'black' | 'white' | 'monochrome' | 'grayscale'\n        size?: number; // from 10 to 16\n    };\n}\n\nexport enum MessagingPlacements {\n    CART = 'cart',\n    HOME = 'homepage',\n    PAYMENT = 'payment',\n    PRODUCT = 'product',\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onClick?(): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number | string;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n    close(): void;\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<unknown>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n","import { supportsPopups } from '@braintree/browser-detection';\n\nimport {\n    Address,\n    CancellablePromise,\n    CreditCardInstrument,\n    LegacyAddress,\n    NonceInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodCancelledError,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { Overlay } from '@bigcommerce/checkout-sdk/ui';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeDataCollectors,\n    BraintreeEnv,\n    BraintreeError,\n    BraintreeFastlane,\n    BraintreeFastlaneStylesOption,\n    BraintreeHostWindow,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeRequestData,\n    BraintreeShippingAddressOverride,\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureOptions,\n    BraintreeTokenizationDetails,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig,\n    BraintreeVerifyPayload,\n    PAYPAL_COMPONENTS,\n    TokenizationPayload,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { isEmpty } from 'lodash';\nimport isCreditCardInstrumentLike from './utils/is-credit-card-instrument-like';\n\nexport interface PaypalConfig {\n    amount: number;\n    currency: string;\n    locale: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    shouldSaveInstrument?: boolean;\n}\n\n// Info: this class is deprecated and will be removed in a nearest future. Please, do not add anything here.\nexport default class BraintreeIntegrationService {\n    private client?: Promise<BraintreeClient>;\n    private clientToken?: string;\n    private dataCollectors: BraintreeDataCollectors = {};\n    private paypalCheckout?: BraintreePaypalCheckout;\n    private braintreePaypal?: Promise<BraintreePaypal>;\n    private threeDSecureOptions?: BraintreeThreeDSecureOptions;\n    private threeDS?: Promise<BraintreeThreeDSecure>;\n    private venmoCheckout?: BraintreeVenmoCheckout;\n\n    constructor(\n        private braintreeScriptLoader: BraintreeScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private overlay?: Overlay,\n    ) {}\n\n    initialize(clientToken: string, threeDSecureOptions?: BraintreeThreeDSecureOptions) {\n        this.clientToken = clientToken;\n        this.threeDSecureOptions = threeDSecureOptions;\n    }\n\n    async getBraintreeFastlane(\n        cardId?: string,\n        isTestModeEnabled?: boolean,\n        styles?: BraintreeFastlaneStylesOption,\n    ): Promise<BraintreeFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('axoEnv', 'sandbox');\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n        }\n\n        if (!this.braintreeHostWindow.braintreeFastlane) {\n            const clientToken = this.getClientTokenOrThrow();\n            const client = await this.getClient();\n            const deviceData = await this.getSessionId(cardId);\n\n            const braintreeFastlaneCreator = await this.braintreeScriptLoader.loadFastlane();\n\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.braintreeHostWindow.braintreeFastlane = await braintreeFastlaneCreator.create({\n                authorization: clientToken,\n                client,\n                deviceData,\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.braintreeHostWindow.braintreeFastlane;\n    }\n\n    // Info: This method is deprecated. Use getClient method from BraintreeSdk class instead\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this.braintreePaypal) {\n            this.braintreePaypal = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadPaypal(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.braintreePaypal;\n    }\n\n    paypal({ shouldSaveInstrument, ...config }: PaypalConfig): Promise<BraintreeTokenizePayload> {\n        const newWindowFlow = supportsPopups();\n\n        return this.getPaypal()\n            .then((paypal) => {\n                if (newWindowFlow) {\n                    this.overlay?.show({\n                        onClick: () => paypal.focusWindow(),\n                    });\n                }\n\n                return paypal.tokenize({\n                    enableShippingAddress: true,\n                    flow: shouldSaveInstrument ? 'vault' : 'checkout',\n                    useraction: 'commit',\n                    ...config,\n                });\n            })\n            .then((response) => {\n                this.overlay?.remove();\n\n                return response;\n            })\n            .catch((error) => {\n                this.overlay?.remove();\n\n                throw error;\n            });\n    }\n\n    async getPaypalCheckout(\n        config: Partial<BraintreePaypalSdkCreatorConfig>,\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this.braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (\n            error: BraintreeError | undefined,\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n            const paypalSdkLoadConfig = {\n                currency: config.currency,\n                ...(config.isCreditEnabled && { 'enable-funding': 'paylater' }),\n                components: PAYPAL_COMPONENTS.toString(),\n                intent: config.intent,\n                commit: config.commit ?? true,\n            };\n\n            if (!this.braintreeHostWindow.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this.paypalCheckout = await paypalCheckout.create(\n            paypalCheckoutConfig,\n            paypalCheckoutCallback,\n        );\n\n        return this.paypalCheckout;\n    }\n\n    async getDataCollector(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const cacheKey: keyof BraintreeDataCollectors = options?.paypal ? 'paypal' : 'default';\n\n        let cached = this.dataCollectors[cacheKey];\n\n        if (!cached) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                cached = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    cached = {\n                        deviceData: undefined,\n                        teardown: () => Promise.resolve(),\n                    };\n                } else {\n                    throw error;\n                }\n            }\n\n            this.dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getBraintreeEnv(isTestMode = false): BraintreeEnv {\n        return isTestMode ? BraintreeEnv.Sandbox : BraintreeEnv.Production;\n    }\n\n    mapToBraintreeShippingAddressOverride(address: Address): BraintreeShippingAddressOverride {\n        return {\n            recipientName: `${address.firstName} ${address.lastName}`,\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n        };\n    }\n\n    mapToLegacyShippingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { email, phone, shippingAddress } = details;\n        const recipientName = shippingAddress?.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email,\n            first_name: firstName || '',\n            last_name: lastName || '',\n            phone_number: phone,\n            address_line_1: shippingAddress?.line1,\n            address_line_2: shippingAddress?.line2,\n            city: shippingAddress?.city,\n            state: shippingAddress?.state,\n            country_code: shippingAddress?.countryCode,\n            postal_code: shippingAddress?.postalCode,\n        };\n    }\n\n    mapToLegacyBillingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n        const address = billingAddress || shippingAddress;\n\n        return {\n            email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: phone,\n            address_line_1: address?.line1,\n            address_line_2: address?.line2,\n            city: address?.city,\n            state: address?.state,\n            country_code: address?.countryCode,\n            postal_code: address?.postalCode,\n        };\n    }\n\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n\n    async getSessionId(cartId?: string): Promise<string | undefined> {\n        const { deviceData } = await this.getDataCollector({\n            riskCorrelationId: cartId,\n        });\n\n        return deviceData;\n    }\n\n    async teardown(): Promise<void> {\n        await this.teardownModule(this.dataCollectors.default);\n        await this.teardownModule(this.dataCollectors.paypal);\n        this.dataCollectors = {};\n\n        await this.teardownModule(this.paypalCheckout);\n        this.paypalCheckout = undefined;\n\n        // await this.teardownModule(this._venmoCheckout);\n        // this._venmoCheckout = undefined;\n\n        // await this.teardownModule(this._visaCheckout);\n        // this._visaCheckout = undefined;\n    }\n\n    async get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            this.threeDS = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]).then(([client, threeDSecure]) => threeDSecure.create({ client, version: 2 }));\n        }\n\n        return this.threeDS;\n    }\n\n    async getVenmoCheckout(\n        venmoConfig?: BraintreeVenmoCreatorConfig,\n    ): Promise<BraintreeVenmoCheckout> {\n        if (!this.venmoCheckout) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n                ...(venmoConfig || {}),\n            };\n\n            this.venmoCheckout = await new Promise<BraintreeVenmoCheckout>((resolve, reject) => {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                venmoCheckout.create(\n                    venmoCheckoutConfig,\n                    (error: BraintreeError, braintreeVenmoCheckout: BraintreeVenmoCheckout) => {\n                        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                        if (error) {\n                            return reject(error);\n                        }\n\n                        if (!braintreeVenmoCheckout.isBrowserSupported()) {\n                            return reject(new UnsupportedBrowserError());\n                        }\n\n                        resolve(braintreeVenmoCheckout);\n                    },\n                );\n            });\n        }\n\n        return this.venmoCheckout;\n    }\n\n    /*\n       Braintree Credit Card and Braintree Hosted Form\n   */\n    async verifyCard(\n        payment: Payment,\n        billingAddress: Address,\n        amount: number,\n    ): Promise<NonceInstrument> {\n        const tokenizationPayload = await this.tokenizeCard(payment, billingAddress);\n\n        return this.challenge3DSVerification(tokenizationPayload, amount);\n    }\n\n    async tokenizeCard(payment: Payment, billingAddress: Address): Promise<TokenizationPayload> {\n        const { paymentData } = payment;\n\n        if (!isCreditCardInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const errors = this.getErrorsRequiredFields(paymentData);\n\n        if (!isEmpty(errors)) {\n            throw new PaymentInvalidFormError(errors);\n        }\n\n        const requestData = this.mapToCreditCard(paymentData, billingAddress);\n        const client = await this.getClient();\n        const { creditCards } = await client.request(requestData);\n\n        return {\n            nonce: creditCards[0].nonce,\n            bin: creditCards[0].details.bin,\n        };\n    }\n\n    async challenge3DSVerification(\n        tokenizationPayload: TokenizationPayload,\n        amount: number,\n    ): Promise<BraintreeVerifyPayload> {\n        const threeDSecure = await this.get3DS();\n\n        return this.present3DSChallenge(threeDSecure, amount, tokenizationPayload);\n    }\n\n    private teardownModule(module?: BraintreeModule) {\n        return module ? module.teardown() : Promise.resolve();\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private getErrorsRequiredFields(\n        paymentData: CreditCardInstrument,\n    ): PaymentInvalidFormErrorDetails {\n        const { ccNumber, ccExpiry } = paymentData;\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        if (!ccNumber) {\n            errors.ccNumber = [\n                {\n                    message: 'Credit card number is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!ccExpiry) {\n            errors.ccExpiry = [\n                {\n                    message: 'Expiration date is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        return errors;\n    }\n\n    private mapToCreditCard(\n        creditCard: CreditCardInstrument,\n        billingAddress?: Address,\n    ): BraintreeRequestData {\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: billingAddress && {\n                        countryCodeAlpha2: billingAddress.countryCode,\n                        locality: billingAddress.city,\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress: billingAddress.address2\n                            ? `${billingAddress.address1} ${billingAddress.address2}`\n                            : billingAddress.address1,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n\n    private present3DSChallenge(\n        threeDSecure: BraintreeThreeDSecure,\n        amount: number,\n        tokenizationPayload: TokenizationPayload,\n    ): Promise<BraintreeVerifyPayload> {\n        const { nonce, bin } = tokenizationPayload;\n\n        if (!this.threeDSecureOptions || !nonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const {\n            addFrame,\n            removeFrame,\n            challengeRequested = true,\n            additionalInformation,\n        } = this.threeDSecureOptions;\n        const cancelVerifyCard = async () => {\n            const response = await threeDSecure.cancelVerifyCard();\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            verification.cancel(new PaymentMethodCancelledError());\n\n            return response;\n        };\n\n        const roundedAmount = amount.toFixed(2);\n\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                addFrame: (error, iframe) => {\n                    if (addFrame) {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    }\n                },\n                amount: Number(roundedAmount),\n                bin,\n                challengeRequested,\n                nonce,\n                removeFrame,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n                collectDeviceData: true,\n                additionalInformation,\n            }),\n        );\n\n        return verification.promise;\n    }\n}\n","import { CreditCardInstrument } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isCreditCardInstrumentLike(\n    instrument: unknown,\n): instrument is CreditCardInstrument {\n    if (typeof instrument !== 'object' || instrument === null) {\n        return false;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const creditCardInstrument = instrument as Partial<Record<string, unknown>>;\n\n    return (\n        typeof creditCardInstrument.ccExpiry === 'object' &&\n        creditCardInstrument.ccExpiry !== null &&\n        typeof creditCardInstrument.ccNumber === 'string' &&\n        typeof creditCardInstrument.ccName === 'string'\n    );\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { PaypalStyleOptions } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nexport default function getValidButtonStyle(style?: PaypalStyleOptions): PaypalStyleOptions {\n    const { color, fundingicons, height = 40, layout, shape, size, tagline } = style || {};\n\n    const validStyles = {\n        color,\n        fundingicons,\n        height: getValidHeight(height),\n        layout,\n        shape: shape || 'rect',\n        size,\n        tagline,\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidHeight(height: number | string): number {\n    const minHeight = 25;\n    const defaultHeight = 40;\n    const maxHeight = 55;\n\n    const currentHeight = Number(height);\n\n    if (!currentHeight || Number.isNaN(currentHeight)) {\n        return defaultHeight;\n    }\n\n    if (currentHeight > maxHeight) {\n        return maxHeight;\n    }\n\n    if (currentHeight < minHeight) {\n        return minHeight;\n    }\n\n    return currentHeight;\n}\n","import { BraintreeShippingAddressOverride } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function mapToBraintreeShippingAddressOverride(\n    address: Address,\n): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport getValidButtonStyle from '../get-valid-button-style';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport BraintreePaypalButtonInitializeOptions, {\n    WithBraintreePaypalButtonInitializeOptions,\n} from './braintree-paypal-button-initialize-options';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private buyNowCartId: string | undefined;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreePaypalButtonInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypal, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let currencyCode: string;\n\n        if (braintreepaypal.buyNowInitializeOptions) {\n            if (!braintreepaypal.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypal.currencyCode;\n        } else {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            state = this.paymentIntegrationService.getState();\n            currencyCode = state.getCartOrThrow().currency.code;\n        }\n\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, config, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                containerId,\n                methodId,\n                !!config.testMode,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, containerId, braintreepaypal.onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError, onEligibilityFailure } =\n            braintreepaypal;\n        const { paypal } = this.braintreeHostWindow;\n\n        if (paypal) {\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                fundingSource: paypal.FUNDING.PAYPAL,\n                style: getValidButtonStyle(style),\n                createOrder: () =>\n                    this.setupPayment(braintreePaypalCheckout, braintreepaypal, methodId),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this.tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        shouldProcessPayment,\n                        onAuthorizeError,\n                    ),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                onEligibilityFailure();\n            }\n        } else {\n            this.braintreeIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypal;\n\n        try {\n            const buyNowCart =\n                typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n                    ? await this.createBuyNowCart(\n                          buyNowInitializeOptions.getBuyNowCartRequestBody(),\n                      )\n                    : undefined;\n\n            this.buyNowCartId = buyNowCart?.id;\n\n            const state = this.paymentIntegrationService.getState();\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n\n            const amount = buyNowCart ? buyNowCart.cartAmount : state.getCartOrThrow().cartAmount;\n            const currencyCode = buyNowCart\n                ? braintreepaypal.currencyCode\n                : state.getCartOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error: unknown) {\n            if (onPaymentError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onPaymentError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n                ...(this.buyNowCartId && { cart_id: this.buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async createBuyNowCart(buyNowCardRequestBody?: BuyNowCartRequestBody | void) {\n        if (!buyNowCardRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(buyNowCardRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalButtonStrategy from './braintree-paypal-button-strategy';\n\nconst createBraintreePaypalButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreePaypalButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalButtonStrategy, [{ id: 'braintreepaypal' }]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    PayPalBNPLConfigurationItem,\n} from './braintree';\nimport { MessagesStyleOptions, MessagingPlacements } from './paypal';\n\nexport default class BraintreeMessages {\n    private braintreeHostWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    render(methodId: string, containerId: string, placement: MessagingPlacements): void {\n        const messagingContainer = containerId && document.getElementById(containerId);\n\n        if (this.braintreeHostWindow.paypal && messagingContainer) {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const billingAddress = state.getBillingAddressOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n\n            if (!paymentMethod.initializationData) {\n                return;\n            }\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData;\n\n            const bannedId = placement === MessagingPlacements.PAYMENT ? 'checkout' : placement;\n            const bannerConfiguration =\n                paypalBNPLConfiguration &&\n                paypalBNPLConfiguration.find(({ id }) => id === bannedId);\n\n            if (!bannerConfiguration || !bannerConfiguration.status) {\n                return;\n            }\n\n            // TODO: remove this code when this data attributes will be removed from banner div container in content service\n            if (placement === MessagingPlacements.CART) {\n                messagingContainer.removeAttribute('data-pp-style-logo-type');\n                messagingContainer.removeAttribute('data-pp-style-logo-position');\n                messagingContainer.removeAttribute('data-pp-style-text-color');\n                messagingContainer.removeAttribute('data-pp-style-text-size');\n            }\n\n            this.braintreeHostWindow.paypal\n                .Messages({\n                    amount: cart.cartAmount,\n                    buyerCountry: billingAddress.countryCode,\n                    placement,\n                    style: this.getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n                })\n                .render(`#${containerId}`);\n        }\n    }\n\n    private getPaypalMessagesStylesFromBNPLConfig({\n        styles,\n    }: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n        const messagesStyles: MessagesStyleOptions = {};\n\n        if (styles.color) {\n            messagesStyles.color = styles.color;\n        }\n\n        if (styles.layout) {\n            messagesStyles.layout = styles.layout;\n        }\n\n        if (styles['logo-type'] || styles['logo-position']) {\n            messagesStyles.logo = {};\n\n            if (styles['logo-type']) {\n                messagesStyles.logo.type = styles['logo-type'];\n            }\n\n            if (styles['logo-position']) {\n                messagesStyles.logo.position = styles['logo-position'];\n            }\n        }\n\n        if (styles.ratio) {\n            messagesStyles.ratio = styles.ratio;\n        }\n\n        if (styles['text-color'] || styles['text-size']) {\n            messagesStyles.text = {};\n\n            if (styles['text-color']) {\n                messagesStyles.text.color = styles['text-color'];\n            }\n\n            if (styles['text-size']) {\n                messagesStyles.text.size = +styles['text-size'];\n            }\n        }\n\n        return messagesStyles;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    MessagingPlacements,\n    PaypalAuthorizeData,\n    PaypalButtonStyleLabelOption,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport getValidButtonStyle from '../get-valid-button-style';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport BraintreePaypalCreditButtonInitializeOptions, {\n    WithBraintreePaypalCreditButtonInitializeOptions,\n} from './braintree-paypal-credit-button-initialize-options';\n\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\n    private buyNowCartId: string | undefined;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeMessages: BraintreeMessages,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreePaypalCreditButtonInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypalcredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let currencyCode: string;\n\n        if (braintreepaypalcredit.buyNowInitializeOptions) {\n            if (!braintreepaypalcredit.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypalcredit.currencyCode;\n        } else {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            state = this.paymentIntegrationService.getState();\n            currencyCode = state.getCartOrThrow().currency.code;\n        }\n\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, config, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        // TODO: remove banner rendering implementation in this file when PAYPAL-5663.hide_braintree_card_banner_implementation_in_checkout_sdk will be rolled out to 100%\n        const features = state.getStoreConfig()?.checkoutSettings.features ?? {};\n        const isBannerImplementationDisabled = isExperimentEnabled(\n            features,\n            'PAYPAL-5663.hide_braintree_card_banner_implementation_in_checkout_sdk',\n        );\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (!isBannerImplementationDisabled && braintreepaypalcredit.messagingContainerId) {\n                this.renderPayPalMessages(methodId, braintreepaypalcredit.messagingContainerId);\n            }\n\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                containerId,\n                methodId,\n                !!config.testMode,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, containerId, braintreepaypalcredit.onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    private renderPayPalMessages(methodId: string, messagingContainerId: string): void {\n        this.braintreeMessages.render(methodId, messagingContainerId, MessagingPlacements.CART);\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError, onEligibilityFailure } =\n            braintreepaypalcredit;\n        const { paypal } = this.braintreeHostWindow;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n\n            fundingSources.forEach((fundingSource) => {\n                const buttonStyle =\n                    fundingSource === paypal.FUNDING.CREDIT\n                        ? {\n                              label: PaypalButtonStyleLabelOption.CREDIT,\n                              ...getValidButtonStyle(style),\n                          }\n                        : getValidButtonStyle(style);\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () =>\n                            this.setupPayment(\n                                braintreePaypalCheckout,\n                                braintreepaypalcredit,\n                                methodId,\n                            ),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this.tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                shouldProcessPayment,\n                                onAuthorizeError,\n                            ),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${containerId}`);\n                        hasRenderedSmartButton = true;\n                    } else if (\n                        paypal.FUNDING.CREDIT &&\n                        onEligibilityFailure &&\n                        typeof onEligibilityFailure === 'function'\n                    ) {\n                        // the condition is related to paypal.FUNDING.CREDIT because when paypal.FUNDING.PAYLATER is not eligible then\n                        // CREDIT button should be configured and triggered to render with eligibility check\n                        // and if it is not eligible, then onEligibilityFailure callback should be called\n                        onEligibilityFailure();\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this.braintreeIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypalcredit;\n\n        try {\n            const buyNowCart =\n                typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n                    ? await this.createBuyNowCart(\n                          buyNowInitializeOptions.getBuyNowCartRequestBody(),\n                      )\n                    : undefined;\n\n            this.buyNowCartId = buyNowCart?.id;\n\n            const state = this.paymentIntegrationService.getState();\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n\n            const amount = buyNowCart ? buyNowCart.cartAmount : state.getCartOrThrow().cartAmount; // state.getCheckoutOrThrow().outstandingBalance\n            const currencyCode = buyNowCart\n                ? braintreepaypalcredit.currencyCode\n                : state.getCartOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: true,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error: unknown) {\n            if (onPaymentError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onPaymentError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n                ...(this.buyNowCartId && { cart_id: this.buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async createBuyNowCart(buyNowCardRequestBody?: BuyNowCartRequestBody | void) {\n        if (!buyNowCardRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(buyNowCardRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditButtonStrategy from './braintree-paypal-credit-button-strategy';\n\nconst createBraintreePaypalCreditButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreePaypalCreditButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n    const braintreeMessages = new BraintreeMessages(paymentIntegrationService);\n\n    return new BraintreePaypalCreditButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeMessages,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCreditButtonStrategy, [\n    { id: 'braintreepaypalcredit' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeDataCollector,\n    BraintreeSdk,\n    BraintreeVisaCheckout,\n    VisaCheckoutAddress,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    LegacyAddress,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class BraintreeVisaCheckoutButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const { clientToken, initializationData, config } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken);\n\n        const braintreeVisaCheckout = await this.braintreeSdk.getBraintreeVisaCheckout();\n\n        const {\n            currency: { code },\n            cartAmount,\n        } = state.getCartOrThrow();\n\n        const visaCheckoutInstance = await this.braintreeSdk.getVisaCheckoutSdk(config.testMode);\n\n        const initOptions = braintreeVisaCheckout.createInitOptions({\n            paymentRequest: {\n                currencyCode: code,\n                subtotal: String(cartAmount),\n            },\n            settings: {\n                shipping: {\n                    collectShipping: true,\n                },\n            },\n        });\n\n        this.createSignInButton(containerId);\n\n        await visaCheckoutInstance.init(initOptions);\n\n        visaCheckoutInstance.on('payment.success', async (payment) => {\n            await this.paymentSuccess(braintreeVisaCheckout, payment);\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private async paymentSuccess(\n        braintreeVisaCheckout: BraintreeVisaCheckout,\n        payment: VisaCheckoutPaymentSuccessPayload,\n    ) {\n        return Promise.all([\n            braintreeVisaCheckout.tokenize(payment),\n            this.braintreeSdk.getDataCollectorOrThrow(),\n        ]).then(([payload, deviceData]) => {\n            const state = this.paymentIntegrationService.getState();\n\n            const shipping = state.getShippingAddress();\n            const billing = state.getBillingAddress();\n\n            const {\n                shippingAddress = this.toVisaCheckoutAddress(shipping),\n                billingAddress = this.toVisaCheckoutAddress(billing),\n            } = payload;\n\n            return this.postForm(\n                {\n                    ...payload,\n                    shippingAddress,\n                    billingAddress,\n                },\n                deviceData,\n            );\n        });\n    }\n\n    private postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: paymentData.type,\n            nonce: paymentData.nonce,\n            provider: 'braintreevisacheckout',\n            action: 'set_external_checkout',\n            device_data: deviceData,\n            card_information: JSON.stringify({\n                type: cardInformation.cardType,\n                number: cardInformation.lastTwo,\n            }),\n            billing_address: JSON.stringify(this.getAddress(userEmail, billingAddress)),\n            shipping_address: JSON.stringify(this.getAddress(userEmail, shippingAddress)),\n        });\n    }\n\n    private toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return this.insertVisaCheckoutButton(container);\n    }\n\n    private insertVisaCheckoutButton(container: Element): HTMLElement {\n        const buttonSource =\n            'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n\n        visaCheckoutButton.style.display = 'flex';\n        visaCheckoutButton.style.flexDirection = 'column';\n        visaCheckoutButton.style.alignItems = 'flex-end';\n\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n    VisaCheckoutHostWindow,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVisaCheckoutButtonStrategy from './braintree-visa-checkout-button-strategy';\n\nconst createBraintreeVisaCheckoutButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVisaCheckoutButtonStrategy\n> = (paymentIntegrationService) => {\n    const hostWindow: VisaCheckoutHostWindow & BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(getScriptLoader(), hostWindow, braintreeSDKVersionManager),\n    );\n\n    return new BraintreeVisaCheckoutButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVisaCheckoutButtonStrategy, [\n    { id: 'braintreevisacheckout' },\n]);\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeTokenizationDetails } from './types';\n\nexport default function mapToLegacyBillingAddress(\n    details: BraintreeTokenizationDetails,\n): Partial<LegacyAddress> {\n    const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeTokenizationDetails } from './types';\n\nexport default function mapToLegacyShippingAddress(\n    details: BraintreeTokenizationDetails,\n): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeSdk,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    mapToLegacyBillingAddress,\n    mapToLegacyShippingAddress,\n    PaypalButtonStyleColorOption,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    Cart,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isBraintreeError from '../is-braintree-error';\nimport { isUnsupportedBrowserError } from '../isUnsupportedBrowserError';\n\nimport { WithBraintreeVenmoInitializeOptions } from './braintree-venmo-initialize-options';\n\nconst getVenmoButtonStyle = (styles: PaypalStyleOptions): Record<string, string> => {\n    const { color, height } = styles;\n\n    const colorParser = (c: string) => {\n        if (c === PaypalButtonStyleColorOption.WHITE) {\n            return '#FFFFFF';\n        }\n\n        return '#3D95CE';\n    };\n\n    return {\n        backgroundColor: colorParser(color || ''),\n        backgroundPosition: '50% 50%',\n        backgroundSize: '80px auto',\n        backgroundImage: `url(\"/app/assets/img/payment-providers/venmo-logo-${\n            color === PaypalButtonStyleColorOption.WHITE\n                ? PaypalButtonStyleColorOption.BLUE\n                : PaypalButtonStyleColorOption.WHITE\n        }.svg\")`,\n        backgroundRepeat: 'no-repeat',\n        borderRadius: '4px',\n        cursor: 'pointer',\n        transition: '0.2s ease',\n        minHeight: `${height || 40}px`,\n        minWidth: '150px',\n        height: '100%',\n        width: '100%',\n        border: color === PaypalButtonStyleColorOption.WHITE ? '1px solid black' : 'none',\n    };\n};\n\nconst venmoButtonStyleHover = {\n    backgroundColor: '#0a7fc2',\n};\n\ninterface BuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n}\n\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreeVenmoInitializeOptions,\n    ): Promise<void> {\n        const { braintreevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { clientToken, initializationData }: PaymentMethod = paymentMethod;\n        const { paymentButtonStyles } = initializationData;\n        const { cartButtonStyles } = paymentButtonStyles || {};\n        const styles = braintreevenmo?.style || cartButtonStyles;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadDefaultCheckout();\n\n        this.onError = braintreevenmo?.onError || this.handleError;\n        this.braintreeSdk.initialize(clientToken);\n\n        try {\n            const braintreeVenmoCheckout = await this.braintreeSdk.getVenmoCheckoutOrThrow();\n\n            this.renderVenmoButton(\n                braintreeVenmoCheckout,\n                containerId,\n                braintreevenmo?.buyNowInitializeOptions,\n                styles,\n            );\n        } catch (error) {\n            if (isBraintreeError(error) || isUnsupportedBrowserError(error)) {\n                this.handleInitializationVenmoError(error, containerId);\n            }\n        }\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: BraintreeError) {\n        throw new Error(error.message);\n    }\n\n    private async createBuyNowCart(\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): Promise<Cart | undefined> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions?.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const buyNowCart = await this.paymentIntegrationService.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n\n        return undefined;\n    }\n\n    private handleInitializationVenmoError(\n        error: BraintreeError | UnsupportedBrowserError,\n        containerId: string,\n    ): void {\n        this.removeVenmoContainer(containerId);\n\n        return this.onError(error);\n    }\n\n    private removeVenmoContainer(containerId: string): void {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (buttonContainer) {\n            buttonContainer.remove();\n        }\n    }\n\n    private renderVenmoButton(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        containerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n        buttonStyles?: PaypalStyleOptions,\n    ): void {\n        const venmoButton = document.getElementById(containerId);\n        const { color } = buttonStyles || {};\n\n        if (!venmoButton) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        venmoButton.setAttribute('aria-label', 'Venmo');\n        Object.assign(venmoButton.style, getVenmoButtonStyle(buttonStyles || {}));\n\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        venmoButton.addEventListener('click', async () => {\n            venmoButton.setAttribute('disabled', 'true');\n\n            const buyBowCart = await this.createBuyNowCart(buyNowInitializeOptions);\n\n            if (braintreeVenmoCheckout.tokenize) {\n                braintreeVenmoCheckout.tokenize(\n                    async (\n                        error: BraintreeError | undefined,\n                        payload: BraintreeTokenizePayload,\n                    ) => {\n                        venmoButton.removeAttribute('disabled');\n\n                        if (error) {\n                            this.onError(error);\n                        }\n\n                        await this.handlePostForm(payload, buyBowCart?.id);\n                    },\n                );\n            }\n        });\n\n        if (color === PaypalButtonStyleColorOption.BLUE) {\n            venmoButton.addEventListener('mouseenter', () => {\n                venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\n            });\n\n            venmoButton.addEventListener('mouseleave', () => {\n                venmoButton.style.backgroundColor = getVenmoButtonStyle(\n                    buttonStyles || {},\n                ).backgroundColor;\n            });\n        }\n    }\n\n    private async handlePostForm(\n        payload: BraintreeTokenizePayload,\n        buyNowCartId?: string,\n    ): Promise<void> {\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { nonce, details } = payload;\n\n        this.formPoster.postForm('/checkout.php', {\n            nonce,\n            provider: 'braintreevenmo',\n            payment_type: 'paypal',\n            device_data: deviceData,\n            action: 'set_external_checkout',\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            ...(buyNowCartId && { cart_id: buyNowCartId }),\n        });\n    }\n}\n","import { BraintreeError } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nexport default function isBraintreeError(\n    error: BraintreeError | Error | unknown,\n): error is BraintreeError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'name' in error &&\n        (error as BraintreeError).name === 'BraintreeError'\n    );\n}\n","import { UnsupportedBrowserError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport function isUnsupportedBrowserError(error: unknown): error is UnsupportedBrowserError {\n    return error instanceof UnsupportedBrowserError;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVenmoButtonStrategy from './braintree-venmo-button-strategy';\n\nconst createBraintreeVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVenmoButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const scriptLoader = getScriptLoader();\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        scriptLoader,\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n\n    const braintreeSdk = new BraintreeSdk(braintreeScriptLoader);\n\n    return new BraintreeVenmoButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVenmoButtonStrategy, [{ id: 'braintreevenmo' }]);\n","/**\n * A set of options that are required to initialize the GooglePay payment method\n *\n * If the customer chooses to pay with GooglePay, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n *\n * ```html\n * <!-- This is where the GooglePay button will be inserted -->\n * <div id=\"wallet-button\"></div>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     // Using GooglePay provided by Braintree as an example\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button'\n *     },\n * });\n * ```\n *\n * Additional event callbacks can be registered.\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button',\n *         onError(error) {\n *             console.log(error);\n *         },\n *         onPaymentSelect() {\n *             console.log('Selected');\n *         },\n *     },\n * });\n * ```\n */\nexport default interface GooglePayPaymentInitializeOptions {\n    /**\n     * A container for loading spinner.\n     */\n    loadingContainerId?: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the GooglePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when GooglePay fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n\n/**\n * The recognized keys to pass the initialization options for Google Pay.\n */\nexport enum GooglePayKey {\n    ADYEN_V2 = 'googlepayadyenv2',\n    ADYEN_V3 = 'googlepayadyenv3',\n    AUTHORIZE_NET = 'googlepayauthorizenet',\n    BNZ = 'googlepaybnz',\n    BRAINTREE = 'googlepaybraintree',\n    PAYPAL_COMMERCE = 'googlepaypaypalcommerce',\n    BIGCOMMERCE_PAYMENTS = 'googlepay_bigcommerce_payments',\n    CHECKOUT_COM = 'googlepaycheckoutcom',\n    CYBERSOURCE_V2 = 'googlepaycybersourcev2',\n    ORBITAL = 'googlepayorbital',\n    STRIPE = 'googlepaystripe',\n    STRIPE_UPE = 'googlepaystripeupe',\n    STRIPE_OCS = 'googlepaystripeocs',\n    WORLDPAY_ACCESS = 'googlepayworldpayaccess',\n    TD_ONLINE_MART = 'googlepaytdonlinemart',\n}\n\n/**\n * The options that are required to initialize the GooglePay payment method.\n * They can be omitted unless you need to support GooglePay.\n */\nexport type WithGooglePayPaymentInitializeOptions = {\n    [k in GooglePayKey]?: GooglePayPaymentInitializeOptions;\n};\n","import { InvalidArgumentError } from '../errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(currencySettings: CurrencyConfig) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const { decimalPlaces, symbolLocation, symbol, thousandsSeparator, decimalSeparator } =\n            currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ? `-${formattedCurrency}` : formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [integerAmount, decimalAmount = ''] = this._toFixed(\n            positiveAmount,\n            this._decimalPlaces,\n        ).split('.');\n        const parsedIntegerAmount = integerAmount.replace(\n            /\\B(?=(\\d{3})+(?!\\d))/g,\n            this._thousandsSeparator,\n        );\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [parsedIntegerAmount, decimalAmount].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return this._symbolLocation.toLowerCase() === 'left'\n            ? `${this._symbol}${formattedNumber}`\n            : `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+`${Math.round(+`${value}e${precision}`)}e${-precision}`).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(private _storeConfig: StoreConfig) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { BigCommercePaymentsIntent } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    BrowserInfo,\n    BuyNowCartRequestBody,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { FundingType } from './google-pay-paypal-commerce/types';\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\nexport interface GooglePayGatewayBaseRequest {\n    apiVersion: 2;\n    apiVersionMinor: 0;\n}\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\ntype GooglePayGatewayBaseResponse = GooglePayGatewayBaseRequest;\n\ninterface GooglePayPaymentMethod<T> {\n    type: string;\n    parameters: T;\n}\n\ntype GooglePayAuthMethod = 'PAN_ONLY' | 'CRYPTOGRAM_3DS';\n\nexport enum GooglePayCardNetwork {\n    AMEX = 'AMEX',\n    DISCOVER = 'DISCOVER',\n    INTERAC = 'INTERAC',\n    JCB = 'JCB',\n    MC = 'MASTERCARD',\n    VISA = 'VISA',\n}\n\nexport interface GooglePayCardParameters {\n    allowedAuthMethods: GooglePayAuthMethod[];\n    allowedCardNetworks: GooglePayCardNetwork[];\n    billingAddressRequired?: boolean;\n    billingAddressParameters?: {\n        format?: 'MIN' | 'FULL';\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport interface GooglePayBaseCardPaymentMethod\n    extends GooglePayPaymentMethod<GooglePayCardParameters> {\n    type: 'CARD';\n    parameters: GooglePayCardParameters;\n}\n\nexport interface GooglePayIsReadyToPayRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n}\n\ninterface GooglePayGatewayBaseParameters {\n    gateway: string;\n}\n\nexport interface GooglePayRegularGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId: string;\n}\n\nexport interface GooglePayStripeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'stripe:version'?: string;\n    'stripe:publishableKey'?: string;\n}\n\nexport interface GooglePayBraintreeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'braintree:apiVersion'?: string;\n    'braintree:authorizationFingerprint'?: string;\n    'braintree:merchantId'?: string;\n    'braintree:sdkVersion'?: string;\n}\n\nexport interface GooglePayPayPalCommerceGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId?: string;\n}\n\nexport type GooglePayGatewayParameters =\n    | GooglePayRegularGatewayParameters\n    | GooglePayStripeGatewayParameters\n    | GooglePayBraintreeGatewayParameters;\n\nexport interface GooglePayCardPaymentMethod extends GooglePayBaseCardPaymentMethod {\n    tokenizationSpecification: {\n        type: 'PAYMENT_GATEWAY';\n        parameters: GooglePayGatewayParameters;\n    };\n}\n\nexport interface GooglePayTransactionInfo {\n    /** [!] Required for EEA countries */\n    countryCode?: string;\n    currencyCode: string;\n    totalPriceStatus: TotalPriceStatusType;\n    totalPrice: string;\n}\n\nexport interface GooglePayMerchantInfo {\n    merchantName: string;\n    merchantId: string;\n    authJwt: string;\n}\n\nexport enum CallbackIntentsType {\n    OFFER = 'OFFER',\n    PAYMENT_AUTHORIZATION = 'PAYMENT_AUTHORIZATION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n}\n\nexport interface GooglePayPaymentDataRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayCardPaymentMethod];\n    transactionInfo: GooglePayTransactionInfo;\n    merchantInfo: GooglePayMerchantInfo;\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n    offerInfo: Offers;\n    shippingOptionRequired?: boolean;\n    callbackIntents?: CallbackIntentsType[];\n}\n\nexport interface NewTransactionInfo {\n    newTransactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport interface ShippingOptionParameters {\n    defaultSelectedOptionId?: string;\n    shippingOptions?: GoogleShippingOption[];\n}\n\nexport interface NewShippingOptionParameters {\n    newShippingOptionParameters?: ShippingOptionParameters;\n}\n\nexport interface NewOfferInfo {\n    newOfferInfo?: Offers;\n}\n\nexport interface Offers {\n    offers: OfferInfoItem[];\n}\n\nexport interface GooglePayError {\n    message: string;\n    reason: ErrorReasonType;\n    intent: CallbackTriggerType;\n}\n\nexport enum ErrorReasonType {\n    OFFER_INVALID = 'OFFER_INVALID',\n    PAYMENT_DATA_INVALID = 'PAYMENT_DATA_INVALID',\n    SHIPPING_ADDRESS_INVALID = 'SHIPPING_ADDRESS_INVALID',\n    SHIPPING_ADDRESS_UNSERVICEABLE = 'SHIPPING_ADDRESS_UNSERVICEABLE',\n    SHIPPING_OPTION_INVALID = 'SHIPPING_OPTION_INVALID',\n    OTHER_ERROR = 'OTHER_ERROR',\n}\n\nexport interface OfferInfoItem {\n    redemptionCode: string;\n    description: string;\n}\n\nexport interface HandleCouponsOut {\n    newOfferInfo: GooglePayPaymentDataRequest['offerInfo'];\n    error?: GooglePayError;\n}\n\nexport interface GoogleShippingOption {\n    id: string;\n    label?: string;\n}\n\nexport enum CallbackTriggerType {\n    INITIALIZE = 'INITIALIZE',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    OFFER = 'OFFER',\n}\n\nexport interface IntermediatePaymentData {\n    callbackTrigger: CallbackTriggerType;\n    shippingAddress: GooglePayFullBillingAddress;\n    shippingOptionData: GoogleShippingOption;\n    offerData: {\n        redemptionCodes: string[];\n    };\n}\n\nexport interface GooglePayPaymentOptions {\n    paymentDataCallbacks?: {\n        onPaymentDataChanged(\n            intermediatePaymentData: IntermediatePaymentData,\n        ): onPaymentDataChangedOut;\n    };\n}\n\nexport type onPaymentDataChangedOut = Promise<\n    | (NewTransactionInfo & NewShippingOptionParameters & NewOfferInfo & { error?: GooglePayError })\n    | void\n>;\n\nexport type GooglePayRequiredPaymentData = Pick<\n    GooglePayPaymentDataRequest,\n    | 'emailRequired'\n    | 'shippingAddressRequired'\n    | 'shippingAddressParameters'\n    | 'shippingOptionRequired'\n>;\n\ninterface GooglePayMinBillingAddress {\n    name: string;\n    postalCode: string;\n    countryCode: string;\n    phoneNumber?: string;\n}\n\nexport interface GooglePayFullBillingAddress extends GooglePayMinBillingAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    locality: string;\n    administrativeArea: string;\n    sortingCode: string;\n}\n\ninterface GooglePayCardInfo {\n    cardNetwork: GooglePayCardNetwork;\n    cardDetails: string;\n    billingAddress?: GooglePayFullBillingAddress;\n}\n\ninterface GooglePayPaymentMethodData<T> {\n    description: string;\n    tokenizationData: {\n        type: 'PAYMENT_GATEWAY';\n        token: string;\n    };\n    type: string;\n    info: T;\n}\n\ninterface GooglePayCardData extends GooglePayPaymentMethodData<GooglePayCardInfo> {\n    type: 'CARD';\n}\n\ninterface GooglePayPaymentDataResponse<T> extends GooglePayGatewayBaseResponse {\n    paymentMethodData: GooglePayPaymentMethodData<T>;\n    shippingAddress?: GooglePayFullBillingAddress;\n    email?: string;\n}\n\nexport interface GooglePayCardDataResponse extends GooglePayPaymentDataResponse<GooglePayCardInfo> {\n    paymentMethodData: GooglePayCardData;\n}\n\ninterface GooglePayIsReadyToPayResponse {\n    result: boolean;\n}\n\nexport interface GooglePayButtonOptions {\n    onClick: (event: MouseEvent) => Promise<void>;\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n    buttonColor?: GooglePayButtonColor;\n    buttonType?: GooglePayButtonType;\n}\n\nexport interface GooglePaymentsClient {\n    isReadyToPay(request: GooglePayIsReadyToPayRequest): Promise<GooglePayIsReadyToPayResponse>;\n    createButton(options: GooglePayButtonOptions): HTMLElement;\n    loadPaymentData(request: GooglePayPaymentDataRequest): Promise<GooglePayCardDataResponse>;\n    prefetchPaymentData(request: GooglePayPaymentDataRequest): void;\n}\n\ntype GooglePayEnvironment = 'TEST' | 'PRODUCTION';\n\nexport type GooglePaymentsClientConstructor = new (paymentOptions: {\n    environment: GooglePayEnvironment;\n}) => GooglePaymentsClient;\n\nexport interface GooglePayHostWindow extends Window {\n    google?: {\n        payments: {\n            api: {\n                PaymentsClient: GooglePaymentsClientConstructor;\n            };\n        };\n    };\n}\n\ninterface GooglePayBaseInitializationData {\n    card_information?: { type: string; number: string; bin?: string; isNetworkTokenized?: boolean };\n    gateway: string;\n    gatewayMerchantId?: string;\n    googleMerchantId: string;\n    googleMerchantName: string;\n    isThreeDSecureEnabled: boolean;\n    nonce?: string;\n    platformToken: string;\n    storeCountry?: string;\n}\n\nexport interface GooglePayPayPalCommerceInitializationData extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayBigCommercePaymentsInitializationData\n    extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayAuthorizeNetInitializationData extends GooglePayBaseInitializationData {\n    paymentGatewayId: string;\n}\n\nexport interface GooglePayStripeInitializationData extends GooglePayBaseInitializationData {\n    stripeConnectedAccount: string;\n    stripePublishableKey: string;\n    stripeVersion: string;\n}\n\nexport interface GooglePayCheckoutComInitializationData extends GooglePayBaseInitializationData {\n    checkoutcomkey: string;\n}\n\nexport interface GooglePayAdyenV2InitializationData extends GooglePayBaseInitializationData {\n    originKey?: string;\n    clientKey?: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport interface GooglePayAdyenV3InitializationData extends GooglePayBaseInitializationData {\n    clientKey: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport type GooglePayInitializationData =\n    | GooglePayBaseInitializationData\n    | GooglePayAdyenV2InitializationData\n    | GooglePayAdyenV3InitializationData\n    | GooglePayAuthorizeNetInitializationData\n    | GooglePayStripeInitializationData\n    | GooglePayCheckoutComInitializationData\n    | GooglePayPayPalCommerceInitializationData\n    | GooglePayBigCommercePaymentsInitializationData;\n\nexport interface GooglePaySetExternalCheckoutData {\n    nonce: string;\n    card_information: { type: string; number: string; bin?: string; isNetworkTokenized?: boolean };\n    cart_id?: string;\n}\n\nexport interface GooglePayAdditionalActionProcessable {\n    processAdditionalAction(error: unknown, methodId?: string): Promise<void>;\n}\n\nexport interface GooglePayErrorObject {\n    errorCode?: number;\n    statusCode: 'CANCELED' | 'DEVELOPER_ERROR';\n    statusMessage?: string;\n}\n\nexport interface GooglePayTokenObject {\n    protocolVersion: string;\n    signature: string;\n    signedMessage: string;\n}\n\nexport interface GooglePayStripeTokenObject {\n    id: string;\n}\n\nexport interface GooglePayBraintreeTokenObject {\n    androidPayCards: [\n        {\n            nonce: string;\n            details: {\n                bin: string;\n                isNetworkTokenized?: boolean;\n            };\n        },\n    ];\n}\n\nexport interface GooglePayCheckoutComTokenObject {\n    token: string;\n}\n\nexport interface GooglePayThreeDSecureResult {\n    three_ds_result: {\n        acs_url: string;\n        code: string;\n    };\n}\n\nexport interface GooglePayBuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody;\n}\n\nexport interface ExtraPaymentData {\n    deviceSessionId?: string;\n    browser_info?: BrowserInfo;\n}\n\nexport type GooglePayButtonColor = 'default' | 'black' | 'white';\nexport type GooglePayButtonType =\n    | 'book'\n    | 'buy'\n    | 'checkout'\n    | 'donate'\n    | 'order'\n    | 'pay'\n    | 'plain'\n    | 'subscribe'\n    | 'long'\n    | 'short';\n\nexport interface TdOnlineMartThreeDSErrorBody {\n    errors?: Array<{ code: string }>;\n    three_ds_result?: {\n        acs_url: string;\n        payer_auth_request: string;\n        merchant_data: string;\n    };\n}\n\nexport type TdOnlineMartAdditionalAction = RequestError<TdOnlineMartThreeDSErrorBody>;\n","import { GooglePayCardNetwork } from '../types';\n\nexport default function isGooglePayCardNetworkKey(\n    card: string,\n): card is keyof typeof GooglePayCardNetwork {\n    return card in GooglePayCardNetwork;\n}\n","import { round } from 'lodash';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    createCurrencyService,\n    CurrencyService,\n    guard,\n    InvalidArgumentError,\n    itemsRequireShipping,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isGooglePayCardNetworkKey from '../guards/is-google-pay-card-network-key';\nimport {\n    CallbackIntentsType,\n    CallbackTriggerType,\n    ErrorReasonType,\n    ExtraPaymentData,\n    GooglePayCardDataResponse,\n    GooglePayCardNetwork,\n    GooglePayCardParameters,\n    GooglePayError,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePayMerchantInfo,\n    GooglePayPaymentDataRequest,\n    GooglePayRequiredPaymentData,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTransactionInfo,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    ShippingOptionParameters,\n    TotalPriceStatusType,\n} from '../types';\n\nexport default class GooglePayGateway {\n    private _getPaymentMethodFn?: () => PaymentMethod<GooglePayInitializationData>;\n    private _isBuyNowFlow = false;\n    private _currencyCode?: string;\n    private _currencyService?: CurrencyService;\n\n    constructor(\n        private _gatewayIdentifier: string,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    mapToShippingAddressRequestBody({\n        shippingAddress,\n    }: GooglePayCardDataResponse): AddressRequestBody | undefined {\n        if (!shippingAddress) {\n            return;\n        }\n\n        const { company = '', phone = '' } =\n            this._paymentIntegrationService.getState().getShippingAddress() || {};\n\n        return this._mapToAddressRequestBody(shippingAddress, company, phone);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        const { billingAddress } = response.paymentMethodData.info;\n\n        if (!billingAddress) {\n            return;\n        }\n\n        const {\n            company = '',\n            phone = '',\n            email,\n            customFields = [],\n        } = this._paymentIntegrationService.getState().getBillingAddress() || {};\n\n        return {\n            ...this._mapToAddressRequestBody(billingAddress, company, phone, customFields),\n            email: email || response.email,\n        };\n    }\n\n    mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const {\n            paymentMethodData: {\n                tokenizationData: { token: nonce },\n                info: { cardNetwork: type, cardDetails: number },\n            },\n        } = response;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve({\n            nonce,\n            card_information: { type, number },\n            ...(this._isBuyNowFlow && {\n                cart_id: this._paymentIntegrationService.getState().getCart()?.id,\n            }),\n        });\n    }\n\n    async getRequiredData(): Promise<GooglePayRequiredPaymentData> {\n        const data: GooglePayRequiredPaymentData = { emailRequired: true };\n\n        if (!this._isShippingAddressRequired()) {\n            return data;\n        }\n\n        const state = await this._paymentIntegrationService.loadShippingCountries();\n        const allowedCountryCodes = state.getShippingCountries()?.map((country) => country.code);\n\n        return {\n            ...data,\n            shippingAddressRequired: true,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n                ...(allowedCountryCodes && { allowedCountryCodes }),\n            },\n            shippingOptionRequired: true,\n        };\n    }\n\n    getCallbackIntents(): CallbackIntentsType[] {\n        if (this._isShippingAddressRequired()) {\n            return [\n                CallbackIntentsType.OFFER,\n                CallbackIntentsType.SHIPPING_ADDRESS,\n                CallbackIntentsType.SHIPPING_OPTION,\n            ];\n        }\n\n        return [CallbackIntentsType.OFFER];\n    }\n\n    getCallbackTriggers(): { [key: string]: CallbackTriggerType[] } {\n        const state = this._paymentIntegrationService.getState();\n        // TODO remove this experiment usage after we make sure that coupons handling works fine\n        const isGooglePayCouponsExperimentOn =\n            state.getStoreConfigOrThrow().checkoutSettings.features[\n                'PI-2875.googlepay_coupons_handling'\n            ] || false;\n\n        const availableTriggers = [\n            CallbackTriggerType.INITIALIZE,\n            CallbackTriggerType.SHIPPING_ADDRESS,\n            CallbackTriggerType.SHIPPING_OPTION,\n            ...(isGooglePayCouponsExperimentOn ? [CallbackTriggerType.OFFER] : []),\n        ];\n\n        const initializationTrigger = [CallbackTriggerType.INITIALIZE];\n        const addressChangeTriggers = [\n            CallbackTriggerType.INITIALIZE,\n            CallbackTriggerType.SHIPPING_ADDRESS,\n        ];\n        const shippingOptionsChangeTriggers = [CallbackTriggerType.SHIPPING_OPTION];\n        const offerChangeTriggers = isGooglePayCouponsExperimentOn\n            ? [CallbackTriggerType.OFFER]\n            : [];\n\n        return {\n            availableTriggers,\n            initializationTrigger,\n            addressChangeTriggers,\n            shippingOptionsChangeTriggers,\n            offerChangeTriggers,\n        };\n    }\n\n    getNonce(methodId: string) {\n        const nonce = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<GooglePayInitializationData>(methodId)\n            .initializationData?.nonce;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve(nonce);\n    }\n\n    extraPaymentData(): Promise<undefined | ExtraPaymentData> {\n        return Promise.resolve(undefined);\n    }\n\n    getMerchantInfo(): GooglePayMerchantInfo {\n        const {\n            googleMerchantName: merchantName,\n            googleMerchantId: merchantId,\n            platformToken: authJwt,\n        } = this.getGooglePayInitializationData();\n\n        return { merchantName, merchantId, authJwt };\n    }\n\n    getTransactionInfo(): GooglePayTransactionInfo {\n        let currencyCode: string;\n\n        if (this._isBuyNowFlow) {\n            currencyCode = this._getCurrencyCodeOrThrow();\n        } else {\n            const { getCartOrThrow } = this._paymentIntegrationService.getState();\n\n            currencyCode = getCartOrThrow().currency.code;\n        }\n\n        const countryCode = this.getGooglePayInitializationData().storeCountry;\n\n        return {\n            ...(countryCode && { countryCode }),\n            currencyCode,\n            totalPriceStatus: TotalPriceStatusType.ESTIMATED,\n            totalPrice: '0',\n        };\n    }\n\n    getPaymentGatewayParameters():\n        | Promise<GooglePayGatewayParameters>\n        | GooglePayGatewayParameters {\n        const gatewayMerchantId = this.getGooglePayInitializationData().gatewayMerchantId;\n\n        if (!gatewayMerchantId) {\n            throw new InvalidArgumentError('Unable to proceed, gatewayMerchantId is missing.');\n        }\n\n        return {\n            gateway: this._gatewayIdentifier,\n            gatewayMerchantId,\n        };\n    }\n\n    getCardParameters(): GooglePayCardParameters {\n        const allowedCardNetworks = this.getPaymentMethod()\n            .supportedCards.filter(isGooglePayCardNetworkKey)\n            .map((key) => GooglePayCardNetwork[key]);\n\n        return {\n            allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n            allowedCardNetworks,\n            billingAddressRequired: true,\n            billingAddressParameters: {\n                format: 'FULL',\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._getPaymentMethodFn = getPaymentMethod;\n        this._isBuyNowFlow = Boolean(isBuyNowFlow);\n        this._currencyCode = currencyCode;\n\n        if (this._isBuyNowFlow) {\n            this._getCurrencyCodeOrThrow();\n        }\n\n        return Promise.resolve();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress?: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        if (shippingAddress) {\n            shippingAddress.name = shippingAddress.name || '';\n            shippingAddress.address1 = shippingAddress.address1 || '';\n        }\n\n        const mappedShippingAddress = this.mapToShippingAddressRequestBody({\n            shippingAddress,\n        } as GooglePayCardDataResponse);\n\n        if (mappedShippingAddress) {\n            await this._paymentIntegrationService.updateShippingAddress(mappedShippingAddress);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const consignments = state.getConsignments();\n\n        if (!consignments?.[0]) {\n            // Info: we can not return an empty data because shippingOptions should contain at least one element, it caused a developer exception\n            return;\n        }\n\n        const consignment = consignments[0];\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        if (!this._currencyService) {\n            this._currencyService = createCurrencyService(storeConfig);\n        }\n\n        const availableShippingOptions = (consignment.availableShippingOptions || []).map(\n            this._getGooglePayShippingOption.bind(this),\n        );\n\n        const recommendedShippingOption = consignment.availableShippingOptions?.find(\n            (shippingOption) => shippingOption.isRecommended,\n        );\n\n        if (availableShippingOptions.length) {\n            const selectedShippingOptionId =\n                consignment.selectedShippingOption?.id ||\n                recommendedShippingOption?.id ||\n                availableShippingOptions[0]?.id;\n\n            if (!consignment.selectedShippingOption?.id && availableShippingOptions[0]) {\n                await this.handleShippingOptionChange(\n                    recommendedShippingOption?.id || availableShippingOptions[0].id,\n                );\n            }\n\n            return {\n                defaultSelectedOptionId: selectedShippingOptionId,\n                shippingOptions: availableShippingOptions,\n            };\n        }\n    }\n\n    async handleShippingOptionChange(optionId: string) {\n        if (optionId === 'shipping_option_unselected') {\n            return;\n        }\n\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    getTotalPrice(): string {\n        const { getCheckoutOrThrow, getCartOrThrow } = this._paymentIntegrationService.getState();\n        const { decimalPlaces } = getCartOrThrow().currency;\n        const totalPrice = round(getCheckoutOrThrow().outstandingBalance, decimalPlaces).toFixed(\n            decimalPlaces,\n        );\n\n        return totalPrice;\n    }\n\n    async handleCoupons(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<HandleCouponsOut> {\n        const { redemptionCodes: newCouponsState = [] } = offerData;\n        const { offers: appliedCoupons } = this.getAppliedCoupons();\n        let error;\n\n        await newCouponsState.reduce(async (promise, code) => {\n            await promise;\n\n            const exists = appliedCoupons.some(({ redemptionCode }) => redemptionCode === code);\n\n            if (exists) {\n                return;\n            }\n\n            const appliedCouponError = await this.applyCoupon(code);\n\n            if (appliedCouponError) {\n                error = appliedCouponError;\n            }\n        }, Promise.resolve());\n\n        await appliedCoupons.reduce(async (promise, coupon) => {\n            await promise;\n\n            const stillExists = newCouponsState.includes(coupon.redemptionCode);\n\n            if (!stillExists) {\n                await this._paymentIntegrationService.removeCoupon(coupon.redemptionCode);\n            }\n        }, Promise.resolve());\n\n        return {\n            newOfferInfo: this.getAppliedCoupons(),\n            error,\n        };\n    }\n\n    getAppliedCoupons(): GooglePayPaymentDataRequest['offerInfo'] {\n        const state = this._paymentIntegrationService.getState();\n        const { coupons } = state.getCheckout() || {};\n\n        const offers = (coupons || []).map((coupon) => {\n            const { displayName, code } = coupon;\n\n            return {\n                redemptionCode: code,\n                description: displayName,\n            };\n        });\n\n        return {\n            offers,\n        };\n    }\n\n    async applyCoupon(code: string): Promise<GooglePayError | void> {\n        let error: GooglePayError | undefined;\n\n        try {\n            await this._paymentIntegrationService.applyCoupon(code);\n        } catch (e) {\n            if (e instanceof Error) {\n                error = {\n                    reason: ErrorReasonType.OFFER_INVALID,\n                    message: e.message,\n                    intent: CallbackTriggerType.OFFER,\n                };\n            }\n\n            return error;\n        }\n    }\n\n    protected getGooglePayInitializationData(): GooglePayInitializationData {\n        return guard(\n            this.getPaymentMethod().initializationData,\n            () => new InvalidArgumentError('Missing initialization data.'),\n        );\n    }\n\n    protected getPaymentMethod(): PaymentMethod<GooglePayInitializationData> {\n        return guard(\n            this._getPaymentMethodFn,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        )();\n    }\n\n    protected getGatewayIdentifier(): string {\n        return this._gatewayIdentifier;\n    }\n\n    protected setGatewayIdentifier(gateway?: string) {\n        this._gatewayIdentifier = gateway || this.getGatewayIdentifier();\n    }\n\n    private _isShippingAddressRequired(): boolean {\n        const { getCartOrThrow, getStoreConfig, getShippingAddress } =\n            this._paymentIntegrationService.getState();\n\n        return (\n            getShippingAddress() === undefined &&\n            itemsRequireShipping(getCartOrThrow(), getStoreConfig())\n        );\n    }\n\n    private _mapToAddressRequestBody(\n        address: GooglePayFullBillingAddress,\n        company: string,\n        phone: string,\n        customFields?: AddressRequestBody['customFields'],\n    ): AddressRequestBody {\n        const {\n            name,\n            address1,\n            address2,\n            address3,\n            locality: city,\n            administrativeArea: stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phoneNumber,\n        } = address;\n        const [firstName, lastName] = this._getFirstAndLastName(name);\n\n        return {\n            firstName,\n            lastName,\n            company,\n            address1,\n            address2: `${address2} ${address3}`.trim(),\n            city: city || stateOrProvinceCode,\n            stateOrProvince: stateOrProvinceCode,\n            stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phone: phoneNumber || phone,\n            customFields: customFields || [],\n        };\n    }\n\n    private _getFirstAndLastName(fullName: string): [string, string] {\n        const nameParts = fullName.split(' ');\n\n        if (nameParts.length === 1) {\n            return [fullName, ''];\n        }\n\n        const firstName = nameParts.slice(0, -1).join(' ');\n        const lastName = nameParts[nameParts.length - 1];\n\n        return [firstName, lastName];\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n\n    private _getGooglePayShippingOption({\n        id,\n        cost,\n        description,\n        additionalDescription,\n    }: ShippingOption) {\n        const formattedCost = this._currencyService?.toCustomerCurrency(cost);\n        const state = this._paymentIntegrationService.getState();\n        const isNewShippingOptionsExperimentOn =\n            state.getStoreConfigOrThrow().checkoutSettings.features[\n                'PI-3540.googlepay_new_shipping_options_description'\n            ];\n\n        if (isNewShippingOptionsExperimentOn) {\n            return {\n                id,\n                label: `${formattedCost || cost} ${description}`,\n                description: additionalDescription,\n            };\n        }\n\n        return {\n            id,\n            label: description,\n            description: formattedCost || cost,\n        };\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * param config - The config object containing the currency configuration\n * returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(config: StoreConfig): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { Cart } from '../cart';\nimport { StoreConfig } from '../config';\n\nconst itemsRequireShipping = (cart?: Cart, config?: StoreConfig) => {\n    if (!cart) {\n        return false;\n    }\n\n    if (cart.lineItems.physicalItems.some((lineItem) => lineItem.isShippingRequired)) {\n        return true;\n    }\n\n    if (config && cart.lineItems.customItems) {\n        return cart.lineItems.customItems.length > 0;\n    }\n\n    return false;\n};\n\nexport default itemsRequireShipping;\n","import {\n    BraintreeGooglePayment,\n    BraintreeGooglePayThreeDSecure,\n    BraintreeSdk,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CancellablePromise,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayKey } from '../google-pay-payment-initialize-options';\nimport assertIsGooglePayBraintreeTokenObject from '../guards/is-google-pay-braintree-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayBraintreeGateway extends GooglePayGateway {\n    private _braintreeGooglePayment?: BraintreeGooglePayment;\n    private _service: PaymentIntegrationService;\n    private _methodId = GooglePayKey.BRAINTREE;\n\n    constructor(service: PaymentIntegrationService, private _braintreeSdk: BraintreeSdk) {\n        super('braintree', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        let paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.clientToken) {\n            const state = await this._service.loadPaymentMethod(this._methodId);\n\n            paymentMethod = state.getPaymentMethodOrThrow(this._methodId);\n        }\n\n        if (!paymentMethod.clientToken || !paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSdk.initialize(paymentMethod.clientToken);\n        this._braintreeGooglePayment = await this._braintreeSdk.getBraintreeGooglePayment();\n\n        return Promise.resolve();\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n\n        const { clientToken, initializationData } = super.getPaymentMethod();\n\n        if (!clientToken || !initializationData || !initializationData.card_information?.bin) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            isThreeDSecureEnabled,\n            card_information: { bin, isNetworkTokenized },\n        } = initializationData;\n\n        if (isThreeDSecureEnabled && !isNetworkTokenized) {\n            const threeDSecure = await this._braintreeSdk.getBraintreeThreeDS();\n\n            const { orderAmount } = this._service.getState().getOrderOrThrow();\n\n            const verification = await this._braintreePresent3DSChallenge(\n                threeDSecure,\n                orderAmount,\n                nonce,\n                bin,\n            );\n\n            return verification.nonce;\n        }\n\n        return nonce;\n    }\n\n    async extraPaymentData() {\n        return {\n            deviceSessionId: await this._getBraintreeDeviceData(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayBraintreeTokenObject(token);\n\n        data.nonce = token.androidPayCards[0].nonce;\n        data.card_information.bin = token.androidPayCards[0].details.bin;\n        data.card_information.isNetworkTokenized =\n            token.androidPayCards[0].details.isNetworkTokenized;\n\n        return data;\n    }\n\n    getCardParameters() {\n        return super.getCardParameters();\n    }\n\n    async getPaymentGatewayParameters(): Promise<GooglePayGatewayParameters> {\n        const braintreeGooglePayment = this.getBraintreeGooglePayment();\n\n        const request = braintreeGooglePayment.createPaymentDataRequest({\n            merchantInfo: super.getMerchantInfo(),\n            transactionInfo: super.getTransactionInfo(),\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            ...(await super.getRequiredData()),\n        });\n\n        return request.paymentMethodTokenizationParameters.parameters;\n    }\n\n    private getBraintreeGooglePayment(): BraintreeGooglePayment {\n        if (!this._braintreeGooglePayment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._braintreeGooglePayment;\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n        return deviceData;\n    }\n\n    private _braintreePresent3DSChallenge(\n        threeDSecure: BraintreeGooglePayThreeDSecure,\n        amount: number,\n        nonce: string,\n        bin: string,\n    ) {\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                amount,\n                bin,\n                nonce,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n            }),\n        );\n\n        return verification.promise;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayBraintreeTokenObject } from '../types';\n\nfunction isGooglePayBraintreeTokenObject(token: unknown): token is GooglePayBraintreeTokenObject {\n    return typeof token === 'object' && token !== null && 'androidPayCards' in token;\n}\n\nexport default function assertIsGooglePayBraintreeTokenObject(\n    token: unknown,\n): asserts token is GooglePayBraintreeTokenObject {\n    if (!isGooglePayBraintreeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import {\n    BuyNowCartCreationError,\n    Cart,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    guard,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithGooglePayButtonInitializeOptions } from './google-pay-button-initialize-option';\nimport GooglePayCustomerInitializeOptions from './google-pay-customer-initialize-options';\nimport { WithGooglePayPaymentInitializeOptions } from './google-pay-payment-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    GooglePayBuyNowInitializeOptions,\n    GooglePayError,\n    GooglePayInitializationData,\n    GooglePayPaymentDataRequest,\n    GooglePayPaymentOptions,\n    ShippingOptionParameters,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentButton?: HTMLElement;\n    private _methodId?: keyof WithGooglePayPaymentInitializeOptions;\n    private _buyNowCart?: Cart;\n    private _currencyCode?: string;\n    private _buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions;\n    private _countryCode?: string;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithGooglePayButtonInitializeOptions,\n    ): Promise<void> {\n        if (!options.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        if (!options.containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" is not a valid key.',\n            );\n        }\n\n        const googlePayOptions = options[this._getMethodOrThrow()];\n\n        if (!googlePayOptions) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        const { buyNowInitializeOptions, currencyCode, buttonColor, buttonType, onError } =\n            googlePayOptions;\n\n        let state = this._paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<GooglePayInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(\n                this._getMethodOrThrow(),\n            );\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        }\n\n        this._countryCode = paymentMethod.initializationData?.storeCountry;\n\n        if (buyNowInitializeOptions) {\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._currencyCode = currencyCode;\n            this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n                !!buyNowInitializeOptions,\n                currencyCode,\n            );\n        } else {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n            );\n        }\n\n        this._paymentButton =\n            this._paymentButton ??\n            this._googlePayPaymentProcessor.addPaymentButton(options.containerId, {\n                buttonColor: buttonColor ?? 'default',\n                buttonType: buttonType ?? 'plain',\n                onClick: this._handleClick(onError),\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentButton?.remove();\n        this._paymentButton = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _handleClick(\n        onError: GooglePayCustomerInitializeOptions['onError'],\n    ): (event: MouseEvent) => Promise<void> {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            try {\n                if (this._buyNowInitializeOptions) {\n                    await this._createBuyNowCartOrThrow(this._buyNowInitializeOptions);\n                } else {\n                    await this._paymentIntegrationService.loadDefaultCheckout();\n                }\n\n                await this._googlePayPaymentProcessor.initializeWidget();\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n        };\n    }\n\n    private async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n        const shippingAddress =\n            this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(response);\n        const siteLink =\n            window.location.pathname === '/embedded-checkout'\n                ? this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink\n                : undefined;\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && !this._buyNowCart?.lineItems.digitalItems.length) {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutForm(\n            this._getMethodOrThrow(),\n            response,\n            siteLink,\n        );\n    }\n\n    private _getGooglePayClientOptions(): GooglePayPaymentOptions | undefined {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({\n                    callbackTrigger,\n                    shippingAddress,\n                    shippingOptionData,\n                    offerData,\n                }) => {\n                    const {\n                        availableTriggers,\n                        addressChangeTriggers,\n                        shippingOptionsChangeTriggers,\n                        offerChangeTriggers,\n                    } = this._googlePayPaymentProcessor.getCallbackTriggers();\n\n                    if (!availableTriggers.includes(callbackTrigger)) {\n                        return;\n                    }\n\n                    const availableShippingOptions = addressChangeTriggers.includes(callbackTrigger)\n                        ? await this._googlePayPaymentProcessor.handleShippingAddressChange(\n                              shippingAddress,\n                          )\n                        : undefined;\n\n                    if (shippingOptionsChangeTriggers.includes(callbackTrigger)) {\n                        await this._googlePayPaymentProcessor.handleShippingOptionChange(\n                            shippingOptionData.id,\n                        );\n                    }\n\n                    const { newOfferInfo = undefined, error: couponsError = undefined } =\n                        offerChangeTriggers.includes(callbackTrigger)\n                            ? await this._googlePayPaymentProcessor.handleCoupons(offerData)\n                            : {};\n\n                    // We can add another errors if needed 'couponsError || shippingError || anotherError'\n                    const error: GooglePayError | undefined = couponsError;\n\n                    if (this._buyNowInitializeOptions) {\n                        return this._getBuyNowTransactionInfo(\n                            availableShippingOptions,\n                            newOfferInfo,\n                            error,\n                        );\n                    }\n\n                    return this._getTransactionInfo(availableShippingOptions, newOfferInfo, error);\n                },\n            },\n        };\n    }\n\n    private async _createBuyNowCartOrThrow(\n        buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            try {\n                this._buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                await this._paymentIntegrationService.loadCheckout(this._buyNowCart.id);\n            } catch (error) {\n                if (typeof error === 'string') {\n                    throw new BuyNowCartCreationError(error);\n                }\n\n                throw error;\n            }\n        }\n    }\n\n    private _getBuyNowTransactionInfo(\n        availableShippingOptions?: ShippingOptionParameters,\n        newOfferInfo?: GooglePayPaymentDataRequest['offerInfo'],\n        error?: GooglePayError,\n    ) {\n        if (!this._buyNowCart) {\n            return;\n        }\n\n        const { cartAmount } = this._buyNowCart;\n\n        const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n\n        return {\n            newTransactionInfo: {\n                ...(this._countryCode && { countryCode: this._countryCode }),\n                currencyCode: this._getCurrencyCodeOrThrow(),\n                totalPrice: totalPrice || String(cartAmount),\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n            },\n            ...(availableShippingOptions && {\n                newShippingOptionParameters: availableShippingOptions,\n            }),\n            ...(newOfferInfo && {\n                newOfferInfo,\n            }),\n            ...(error && {\n                error,\n            }),\n        };\n    }\n\n    private async _getTransactionInfo(\n        availableShippingOptions?: ShippingOptionParameters,\n        newOfferInfo?: GooglePayPaymentDataRequest['offerInfo'],\n        error?: GooglePayError,\n    ) {\n        await this._paymentIntegrationService.loadCheckout();\n\n        const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n        const { code: currencyCode } = this._paymentIntegrationService\n            .getState()\n            .getCartOrThrow().currency;\n\n        return {\n            newTransactionInfo: {\n                ...(this._countryCode && { countryCode: this._countryCode }),\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            ...(availableShippingOptions && {\n                newShippingOptionParameters: availableShippingOptions,\n            }),\n            ...(newOfferInfo && {\n                newOfferInfo,\n            }),\n            ...(error && {\n                error,\n            }),\n        };\n    }\n\n    private _getMethodOrThrow(): keyof WithGooglePayButtonInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n}\n","import { GooglePayKey } from '../google-pay-payment-initialize-options';\n\nexport default function isGooglePayKey(key: string): key is GooglePayKey {\n    return Object.values<string>(GooglePayKey).includes(key);\n}\n","import { GooglePayErrorObject } from '../types';\n\nexport default function isGooglePayErrorObject(error: unknown): error is GooglePayErrorObject {\n    return typeof error === 'object' && error !== null && 'statusCode' in error;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from './gateways/google-pay-gateway';\nimport GooglePayScriptLoader from './google-pay-script-loader';\nimport isGooglePayAdditionalActionProcessable from './guards/is-google-pay-additional-action-processable';\nimport {\n    GooglePayBaseCardPaymentMethod,\n    GooglePayButtonOptions,\n    GooglePayCardDataResponse,\n    GooglePayCardPaymentMethod,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayBaseRequest,\n    GooglePayInitializationData,\n    GooglePayIsReadyToPayRequest,\n    GooglePaymentsClient,\n    GooglePayPaymentDataRequest,\n    GooglePayPaymentOptions,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    ShippingOptionParameters,\n} from './types';\n\nexport default class GooglePayPaymentProcessor {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _baseRequest: GooglePayGatewayBaseRequest = { apiVersion: 2, apiVersionMinor: 0 };\n    private _baseCardPaymentMethod?: GooglePayBaseCardPaymentMethod;\n    private _cardPaymentMethod?: GooglePayCardPaymentMethod;\n    private _paymentDataRequest?: GooglePayPaymentDataRequest;\n    private _isReadyToPayRequest?: GooglePayIsReadyToPayRequest;\n\n    constructor(\n        private _scriptLoader: GooglePayScriptLoader,\n        private _gateway: GooglePayGateway,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        googlePayPaymentOptions?: GooglePayPaymentOptions,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._paymentsClient = await this._scriptLoader.getGooglePaymentsClient(\n            getPaymentMethod().config.testMode,\n            googlePayPaymentOptions,\n        );\n\n        await this._gateway.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        this._buildButtonPayloads();\n    }\n\n    async initializeWidget() {\n        await this._buildWidgetPayloads();\n\n        await this._determineReadinessToPay();\n\n        this._prefetchGooglePaymentData();\n    }\n\n    getNonce(methodId: string) {\n        return this._gateway.getNonce(methodId);\n    }\n\n    async extraPaymentData() {\n        return this._gateway.extraPaymentData();\n    }\n\n    addPaymentButton(\n        containerId: string,\n        options: Omit<GooglePayButtonOptions, 'allowedPaymentMethods'>,\n    ): HTMLElement | undefined {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            return;\n        }\n\n        const paymentButton = this._getPaymentsClient().createButton({\n            ...options,\n            allowedPaymentMethods: [this._getBaseCardPaymentMethod()],\n        });\n\n        return container.appendChild(paymentButton);\n    }\n\n    async showPaymentSheet(): Promise<GooglePayCardDataResponse> {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        return this._getPaymentsClient().loadPaymentData(paymentDataRequest);\n    }\n\n    async setExternalCheckoutXhr(\n        provider: string,\n        response: GooglePayCardDataResponse,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response);\n    }\n\n    async setExternalCheckoutForm(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        siteLink?: string,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response, true, siteLink);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        return this._gateway.mapToBillingAddressRequestBody(response);\n    }\n\n    mapToShippingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): AddressRequestBody | undefined {\n        return this._gateway.mapToShippingAddressRequestBody(response);\n    }\n\n    processAdditionalAction(error: unknown, methodId?: string): Promise<void> {\n        return isGooglePayAdditionalActionProcessable(this._gateway)\n            ? this._gateway.processAdditionalAction(error, methodId)\n            : Promise.reject(error);\n    }\n\n    async signOut(providerId: string): Promise<void> {\n        await this._requestSender.get(`/remote-checkout/${providerId}/signout`);\n    }\n\n    getCallbackTriggers() {\n        return this._gateway.getCallbackTriggers();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        return this._gateway.handleShippingAddressChange(shippingAddress);\n    }\n\n    async handleShippingOptionChange(optionId: string): Promise<void> {\n        await this._gateway.handleShippingOptionChange(optionId);\n    }\n\n    async handleCoupons(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<HandleCouponsOut> {\n        return this._gateway.handleCoupons(offerData);\n    }\n\n    getTotalPrice(): string {\n        return this._gateway.getTotalPrice();\n    }\n\n    async _setExternalCheckout(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        useFormPoster = false,\n        siteLink?: string,\n    ): Promise<void> {\n        const url = '/checkout.php';\n        const body = {\n            action: 'set_external_checkout',\n            provider,\n            ...(await this._gateway.mapToExternalCheckoutData(response)),\n        };\n\n        if (useFormPoster) {\n            return new Promise((resolve) => {\n                this._formPoster.postForm(\n                    siteLink ? `${siteLink}/checkout` : url,\n                    {\n                        ...body,\n                        card_information: JSON.stringify(body.card_information),\n                    },\n                    resolve,\n                );\n            });\n        }\n\n        await this._requestSender.post(url, {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body,\n        });\n    }\n\n    private _prefetchGooglePaymentData(): void {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        paymentDataRequest.transactionInfo = this._gateway.getTransactionInfo();\n\n        this._getPaymentsClient().prefetchPaymentData(paymentDataRequest);\n    }\n\n    private async _determineReadinessToPay(): Promise<void> {\n        try {\n            const { result } = await this._getPaymentsClient().isReadyToPay(\n                this._getIsReadyToPayRequest(),\n            );\n\n            if (result === false) {\n                throw new PaymentMethodFailedError(\n                    'Google Pay is not supported by the current device and browser, please try another payment method.',\n                );\n            }\n        } catch (error) {\n            if (error instanceof PaymentMethodFailedError) {\n                throw error;\n            }\n\n            throw new PaymentMethodFailedError();\n        }\n    }\n\n    private _buildButtonPayloads() {\n        this._baseCardPaymentMethod = {\n            type: 'CARD',\n            parameters: this._gateway.getCardParameters(),\n        };\n    }\n\n    private async _buildWidgetPayloads(): Promise<void> {\n        const baseCardPaymentMethod = this._getBaseCardPaymentMethod();\n\n        this._cardPaymentMethod = {\n            ...baseCardPaymentMethod,\n            tokenizationSpecification: {\n                type: 'PAYMENT_GATEWAY',\n                parameters: await this._gateway.getPaymentGatewayParameters(),\n            },\n        };\n        this._paymentDataRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [this._cardPaymentMethod],\n            transactionInfo: this._gateway.getTransactionInfo(),\n            merchantInfo: this._gateway.getMerchantInfo(),\n            ...(await this._gateway.getRequiredData()),\n            callbackIntents: this._gateway.getCallbackIntents(),\n            offerInfo: this._gateway.getAppliedCoupons(),\n        };\n        this._isReadyToPayRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [baseCardPaymentMethod],\n        };\n    }\n\n    private _getBaseCardPaymentMethod(): GooglePayBaseCardPaymentMethod {\n        return this._getOrThrow(this._baseCardPaymentMethod);\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequest {\n        return this._getOrThrow(this._paymentDataRequest);\n    }\n\n    private _getIsReadyToPayRequest(): GooglePayIsReadyToPayRequest {\n        return this._getOrThrow(this._isReadyToPayRequest);\n    }\n\n    private _getPaymentsClient(): GooglePaymentsClient {\n        return this._getOrThrow(this._paymentsClient);\n    }\n\n    private _getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import GooglePayGateway from '../gateways/google-pay-gateway';\nimport { GooglePayAdditionalActionProcessable } from '../types';\n\nexport default function isGooglePayAdditionalActionProcessable(\n    gateway: GooglePayGateway,\n): gateway is GooglePayGateway & GooglePayAdditionalActionProcessable {\n    return 'processAdditionalAction' in gateway;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayHostWindow, GooglePaymentsClient, GooglePayPaymentOptions } from './types';\n\nexport const GOOGLE_PAY_LIBRARY = 'https://pay.google.com/gp/p/js/pay.js';\n\nexport default class GooglePayScriptLoader {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _window: GooglePayHostWindow = window;\n\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    async getGooglePaymentsClient(\n        testMode = false,\n        options?: GooglePayPaymentOptions,\n    ): Promise<GooglePaymentsClient> {\n        await this._scriptLoader.loadScript(GOOGLE_PAY_LIBRARY);\n\n        if (!this._window.google) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        if (this._paymentsClient === undefined) {\n            this._paymentsClient = new this._window.google.payments.api.PaymentsClient({\n                environment: testMode ? 'TEST' : 'PRODUCTION',\n                ...(options ?? {}),\n            });\n        }\n\n        return this._paymentsClient;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport GooglePayScriptLoader from '../google-pay-script-loader';\n\nexport default function createGooglePayScriptLoader() {\n    return new GooglePayScriptLoader(getScriptLoader());\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeSdk),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreeButtonStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceSdk {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: [\n                    'fastlane',\n                    'buttons',\n                    'payment-fields',\n                    'hosted-fields',\n                    'three-domain-secure',\n                ],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayPayPalCommerceInitializationData } from '../types';\n\nfunction isGooglePayPaypalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (data.initializationData) {\n        return (\n            'attributionId' in data.initializationData &&\n            'isVenmoEnabled' in data.initializationData &&\n            'isGooglePayEnabled' in data.initializationData &&\n            'isPayPalCreditAvailable' in data.initializationData\n        );\n    }\n\n    return false;\n}\n\nexport default function assertsIsGooglePayPayPalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): asserts data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (!isGooglePayPaypalCommercePaymentMethod(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport { GooglePayConfig } from './types';\n\nexport default class GooglePayPaypalCommerceGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private payPalCommerceSdk: PayPalCommerceSdk) {\n        super('paypalsb', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        const googlePaySdk = await this.payPalCommerceSdk.getPayPalGooglePaySdk(\n            paymentMethod,\n            currency,\n        );\n\n        this.googlepayConfig = await googlePaySdk.Googlepay().config();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\n\nconst createGooglePayPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(\n                paymentIntegrationService,\n                new PayPalCommerceSdk(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommerceButtonStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import {\n    BigCommercePaymentsInitializationData,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayConfig,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nexport default class GooglePayBigCommercePaymentsGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private payPalSdkHelper: PayPalSdkHelper) {\n        super('googlepay_bigcommerce_payments', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        const googlePaySdk = await this.payPalSdkHelper.getPayPalGooglePaySdk(\n            paymentMethod as PaymentMethod<BigCommercePaymentsInitializationData>,\n            currency,\n        );\n\n        this.googlepayConfig = await googlePaySdk.Googlepay().config();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PayPalSdkHelper } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayBigCommercePaymentsGateway from './google-pay-bigcommerce-payments-gateway';\n\nconst createGooglePayBigCommercePaymentsButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBigCommercePaymentsGateway(\n                paymentIntegrationService,\n                new PayPalSdkHelper(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBigCommercePaymentsButtonStrategy, [\n    { id: 'googlepay_bigcommerce_payments' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV2ButtonStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV3ButtonStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertsIsGooglePayAuthorizeNetInitializationData from '../guards/is-google-pay-authorizenet-initialization-data';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAuthorizeNetGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('authorizenet', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayAuthorizeNetInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.paymentGatewayId,\n        };\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayAuthorizeNetInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayAuthorizeNetInitializationData {\n    return 'paymentGatewayId' in data;\n}\n\nexport default function assertsIsGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayAuthorizeNetInitializationData {\n    if (!isGooglePayAuthorizeNetInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeNetButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAuthorizeNetButtonStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCheckoutComInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayCheckoutComInitializationData {\n    return 'checkoutcomkey' in data;\n}\n\nexport default function assertIsGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayCheckoutComInitializationData {\n    if (!isGooglePayCheckoutComInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    InvalidArgumentError,\n    isRequestError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertIsGooglePayCheckoutComInitializationData from '../guards/is-google-pay-checkoutcom-initialization-data';\nimport { isGooglePayThreeDSecureResult } from '../guards/is-google-pay-threedsecure-result';\nimport assertIsGooglePayTokenObject from '../guards/is-google-pay-token-object';\nimport {\n    GooglePayAdditionalActionProcessable,\n    GooglePayCardDataResponse,\n    GooglePayCheckoutComTokenObject,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTokenObject,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCheckoutComGateway\n    extends GooglePayGateway\n    implements GooglePayAdditionalActionProcessable\n{\n    constructor(service: PaymentIntegrationService, private _requestSender: RequestSender) {\n        super('checkoutltd', service);\n    }\n\n    processAdditionalAction(error: unknown): Promise<void> {\n        return new Promise((_resolve, reject) => {\n            if (\n                isRequestError(error) &&\n                isGooglePayThreeDSecureResult(error.body) &&\n                error.body.three_ds_result.code === 'three_d_secure_required'\n            ) {\n                return window.location.assign(error.body.three_ds_result.acs_url);\n            }\n\n            reject(error);\n        });\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayTokenObject(token);\n\n        data.nonce = await this._tokenize(token);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.checkoutcomkey,\n        };\n    }\n\n    private async _tokenize(token_data: GooglePayTokenObject): Promise<string> {\n        const url = this.getPaymentMethod().config.testMode\n            ? 'https://api.sandbox.checkout.com/tokens'\n            : 'https://api.checkout.com/tokens';\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        const { body } = await this._requestSender.post<GooglePayCheckoutComTokenObject>(url, {\n            credentials: false,\n            body: {\n                type: 'googlepay',\n                token_data,\n            },\n            headers: {\n                Authorization: data.checkoutcomkey,\n                'Content-Type': ContentType.Json,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return body.token;\n    }\n}\n","import { RequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayThreeDSecureResult } from '../types';\n\nexport function isGooglePayThreeDSecureResult(\n    body: RequestError['body'],\n): body is GooglePayThreeDSecureResult {\n    if (typeof body !== 'object' || body === null) {\n        return false;\n    }\n\n    const threeDSBody = body as Partial<GooglePayThreeDSecureResult>;\n\n    return (\n        typeof threeDSBody.three_ds_result?.acs_url === 'string' &&\n        typeof threeDSBody.three_ds_result.code === 'string'\n    );\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayTokenObject } from '../types';\n\nfunction isGooglePayTokenObject(token: unknown): token is GooglePayTokenObject {\n    return (\n        typeof token === 'object' &&\n        token !== null &&\n        'protocolVersion' in token &&\n        'signature' in token &&\n        'signedMessage' in token\n    );\n}\n\nexport default function assertIsGooglePayTokenObject(\n    token: unknown,\n): asserts token is GooglePayTokenObject {\n    if (!isGooglePayTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComButtonStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCybersourceGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('cybersource', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayCybersourceButtonStrategy, [\n    { id: 'googlepaycybersourcev2' },\n    { id: 'googlepaybnz' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayOrbitalGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('chase', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayOrbitalButtonStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayStripeInitializationData } from '../types';\n\nfunction isGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayStripeInitializationData {\n    return (\n        'stripeConnectedAccount' in data &&\n        'stripePublishableKey' in data &&\n        'stripeVersion' in data\n    );\n}\n\nexport default function assertsIsGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayStripeInitializationData {\n    if (!isGooglePayStripeInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { includes, some } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    isRequestError,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayStripeInitializationData from '../guards/is-google-pay-stripe-initialization-data';\nimport isGooglePayStripeRequestError from '../guards/is-google-pay-stripe-request-error';\nimport assertIsGooglePayStripeTokenObject from '../guards/is-google-pay-stripe-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePaySetExternalCheckoutData,\n    GooglePayStripeGatewayParameters,\n} from '../types';\n\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\nimport { StripeError, StripeUPEClient } from './types';\n\nexport default class GooglePayStripeGateway extends GooglePayGateway {\n    private stripeUPEClient?: StripeUPEClient;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeUPEScriptLoader,\n    ) {\n        super('stripe', paymentIntegrationService);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayStripeTokenObject(token);\n\n        data.nonce = token.id;\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayStripeGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayStripeInitializationData(data);\n\n        const { stripeVersion, stripePublishableKey, stripeConnectedAccount } = data;\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            'stripe:version': stripeVersion,\n            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n        };\n    }\n\n    async processAdditionalAction(\n        error: unknown,\n        methodId?: string,\n    ): Promise<PaymentIntegrationSelectors | never> {\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!isRequestError(error) || !isGooglePayStripeRequestError(error.body)) {\n            throw error;\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const isStripeGooglePay3dsExperimentIsOn =\n            state.getStoreConfig()?.checkoutSettings.features[\n                'STRIPE-476.enable_stripe_googlepay_3ds'\n            ];\n        const shouldTrigger3DS =\n            some(error.body.errors, { code: 'three_d_secure_required' }) &&\n            isStripeGooglePay3dsExperimentIsOn;\n\n        if (shouldTrigger3DS) {\n            const data = this.getGooglePayInitializationData();\n\n            assertsIsGooglePayStripeInitializationData(data);\n\n            const { stripePublishableKey, stripeConnectedAccount } = data;\n\n            this.stripeUPEClient = await this.loadStripeJs(\n                stripePublishableKey,\n                stripeConnectedAccount,\n            );\n\n            const clientSecret = error.body.three_ds_result.token;\n            let result;\n            let catchedConfirmError = false;\n\n            try {\n                result = await this.stripeUPEClient.confirmCardPayment(clientSecret);\n            } catch (_) {\n                try {\n                    result = await this.stripeUPEClient.retrievePaymentIntent(clientSecret);\n                } catch (__) {\n                    catchedConfirmError = true;\n                }\n            }\n\n            if (result?.error) {\n                this._throwDisplayableStripeError(result.error);\n\n                if (this._isCancellationError(result.error)) {\n                    throw new PaymentMethodCancelledError();\n                }\n\n                throw new PaymentMethodFailedError();\n            }\n\n            if (!result?.paymentIntent && !catchedConfirmError) {\n                throw new RequestError();\n            }\n\n            return this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: { nonce: result?.paymentIntent?.id || clientSecret },\n            });\n        }\n\n        throw error;\n    }\n\n    private async loadStripeJs(\n        stripePublishableKey: string,\n        stripeConnectedAccount: string,\n    ): Promise<StripeUPEClient> {\n        if (this.stripeUPEClient) {\n            return this.stripeUPEClient;\n        }\n\n        return this.scriptLoader.getStripeClient(stripePublishableKey, stripeConnectedAccount);\n    }\n\n    private _isCancellationError(stripeError: StripeError | undefined) {\n        return (\n            stripeError &&\n            stripeError.payment_intent.last_payment_error?.message?.indexOf('canceled') !== -1\n        );\n    }\n\n    private _throwDisplayableStripeError(stripeError: StripeError) {\n        if (\n            includes(['card_error', 'invalid_request_error', 'validation_error'], stripeError.type)\n        ) {\n            throw new Error(stripeError.message);\n        }\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayStripeTokenObject } from '../types';\n\nfunction isGooglePayStripeTokenObject(token: unknown): token is GooglePayStripeTokenObject {\n    return typeof token === 'object' && token !== null && 'id' in token;\n}\n\nexport default function assertIsGooglePayStripeTokenObject(\n    token: unknown,\n): asserts token is GooglePayStripeTokenObject {\n    if (!isGooglePayStripeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","interface AdditionalActionError {\n    three_ds_result: { token: string };\n    errors: Array<{ code: string }>;\n}\n\nconst isGooglePayStripeRequestError = (body: unknown): body is AdditionalActionError => {\n    return (\n        typeof body === 'object' && body !== null && 'three_ds_result' in body && 'errors' in body\n    );\n};\n\nexport default isGooglePayStripeRequestError;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeHostWindow, StripeUPEClient } from './types';\n\nexport default class StripeUPEScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private stripeWindow: StripeHostWindow = window,\n    ) {}\n\n    async getStripeClient(\n        stripePublishableKey: string,\n        stripeAccount: string,\n        locale?: string,\n    ): Promise<StripeUPEClient> {\n        let stripeClient = this.stripeWindow.bcStripeClient;\n\n        if (!stripeClient) {\n            const stripe = await this.load();\n\n            stripeClient = stripe(stripePublishableKey, {\n                stripeAccount,\n                locale,\n                betas: [\n                    'payment_element_beta_2',\n                    'alipay_pm_beta_1',\n                    'link_default_integration_beta_1',\n                    'shipping_address_element_beta_1',\n                    'address_element_beta_1',\n                ],\n                apiVersion: '2020-03-02;alipay_beta=v1;link_beta=v1',\n            });\n\n            Object.assign(this.stripeWindow, { bcStripeClient: stripeClient });\n        }\n\n        return stripeClient;\n    }\n\n    private async load() {\n        if (!this.stripeWindow.Stripe) {\n            await this.scriptLoader.loadScript('https://js.stripe.com/v3/');\n        }\n\n        if (!this.stripeWindow.Stripe) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.stripeWindow.Stripe;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayStripeButtonStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeupe' },\n    { id: 'googlepaystripeocs' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayWorldpayAccessGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('worldpay', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayWorldpayAccessButtonStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    getBrowserInfo,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { isTdOnlineMartAdditionalAction } from '../guards/is-google-pay-td-online-mart-additional-action';\nimport { ExtraPaymentData, TdOnlineMartThreeDSErrorBody } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayTdOnlineMartGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService, private formPoster: FormPoster) {\n        super('worldlinena', service);\n    }\n\n    async extraPaymentData(): Promise<ExtraPaymentData> {\n        return Promise.resolve({ browser_info: getBrowserInfo() });\n    }\n\n    async processAdditionalAction(error: unknown): Promise<void> {\n        if (!isTdOnlineMartAdditionalAction(error)) {\n            throw error;\n        }\n\n        const { three_ds_result: threeDSResult }: TdOnlineMartThreeDSErrorBody = error.body;\n        const {\n            acs_url: formUrl,\n            payer_auth_request: threeDSSessionData,\n            merchant_data: creq,\n        } = threeDSResult || {};\n\n        if (!formUrl || !threeDSSessionData || !creq) {\n            throw new PaymentArgumentInvalidError(['formUrl', 'threeDSSessionData', 'creq']);\n        }\n\n        return new Promise((resolve) => {\n            this.formPoster.postForm(\n                formUrl,\n                {\n                    threeDSSessionData,\n                    creq,\n                },\n                resolve,\n                '_top',\n            );\n        });\n    }\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","import { isArray, isObject, some } from 'lodash';\n\nimport { isRequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TdOnlineMartAdditionalAction, TdOnlineMartThreeDSErrorBody } from '../types';\n\nfunction isTdOnlineMartThreeDSErrorBody(\n    errorBody: unknown,\n): errorBody is TdOnlineMartThreeDSErrorBody {\n    return (\n        isObject(errorBody) &&\n        typeof errorBody === 'object' &&\n        'errors' in errorBody &&\n        'three_ds_result' in errorBody &&\n        isArray((errorBody as TdOnlineMartThreeDSErrorBody).errors) &&\n        some((errorBody as TdOnlineMartThreeDSErrorBody).errors, {\n            code: 'three_d_secure_required',\n        })\n    );\n}\n\nexport function isTdOnlineMartAdditionalAction(\n    error: unknown,\n): error is TdOnlineMartAdditionalAction {\n    return isRequestError(error) && isTdOnlineMartThreeDSErrorBody(error.body);\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayTdOnlineMartGateway from '../../gateways/google-pay-tdonlinemart-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayTdOnlineMartButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayTdOnlineMartGateway(paymentIntegrationService, createFormPoster()),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayTdOnlineMartButtonStrategy, [\n    { id: 'googlepaytdonlinemart' },\n]);\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Commerce Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\nexport interface PayPalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\n\nexport interface PayPalCommerceCardFieldsConfig {\n    inputEvents: {\n        onChange(data: PayPalCommerceCardFieldsState): void;\n        onFocus(data: PayPalCommerceCardFieldsState): void;\n        onBlur(data: PayPalCommerceCardFieldsState): void;\n        onInputSubmitRequest(data: PayPalCommerceCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: PayPalCommerceCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: PayPalCommerceHostedFieldsRenderOptions['styles'];\n    onApprove(data: PayPalCommerceCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\nexport interface PayPalCommerceCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n    liabilityShift?: LiabilityShiftEnum;\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\ninterface PayPalCommerceCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype PayPalCommerceCardFieldsCard = PayPalCommerceHostedFieldsCard;\n\nexport interface PayPalCommerceCardFieldsState {\n    cards: PayPalCommerceCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: PayPalCommerceCardFieldsFieldData;\n        cardNumberField: PayPalCommerceCardFieldsFieldData;\n        cardNameField?: PayPalCommerceCardFieldsFieldData;\n        cardExpiryField: PayPalCommerceCardFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\ninterface PayPalCommerceFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceCardFields {\n    isEligible(): boolean;\n    CVVField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    ExpiryField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NameField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NumberField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    submit(config?: PayPalCommerceCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<PayPalCommerceCardFieldsState>;\n}\n\nexport interface PayPalCommerceCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalSDK {\n    CardFields: (data: PayPalCommerceCardFieldsConfig) => Promise<PayPalCommerceCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: PayPalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PayPalCommerceHostedFieldsRenderOptions): Promise<PayPalCommerceHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: PayPalCommerceButtonsOptions): PayPalCommerceButtons;\n    PaymentFields(options: PayPalCommercePaymentFieldsOptions): PayPalCommercePaymentFields;\n    Messages(options: PayPalCommerceMessagesOptions): PayPalCommerceMessages;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\nexport interface BirthDate {\n    getFullYear(): number;\n    getDate(): number;\n    getMonth(): number;\n}\n\nexport interface PayPalCommerceScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\n/**\n *\n * PayPal Commerce Initialization Data\n *\n */\nexport interface PayPalCommerceInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[];\n    isAppSwitchEnabled?: boolean;\n}\n\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * PayPal Commerce BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * PayPal Commerce Hosted Fields\n *\n */\nexport interface PayPalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PayPalCommerceHostedFieldOption;\n        cvv?: PayPalCommerceHostedFieldOption;\n        expirationDate?: PayPalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PayPalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceHostedFields {\n    submit(\n        options?: PayPalCommerceHostedFieldsSubmitOptions,\n    ): Promise<PayPalCommerceHostedFieldsApprove>;\n    getState(): PayPalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PayPalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PayPalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PayPalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PayPalCommerceHostedFieldsState {\n    cards: PayPalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PayPalCommerceHostedFieldsFieldData;\n        expirationDate?: PayPalCommerceHostedFieldsFieldData;\n        expirationMonth?: PayPalCommerceHostedFieldsFieldData;\n        expirationYear?: PayPalCommerceHostedFieldsFieldData;\n        cvv?: PayPalCommerceHostedFieldsFieldData;\n        postalCode?: PayPalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * PayPal Commerce Buttons\n *\n */\nexport interface PayPalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PayPalCommerceButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    countryCode: string;\n    postalCode: string;\n    state: string;\n}\n\nexport interface PaypalAddressCallbackData {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n        phone?: {\n            phone_number: {\n                national_number: string;\n            };\n        };\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n            name: {\n                full_name: string;\n            };\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    address_line_2: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * PayPal Commerce Payment fields\n *\n */\nexport interface PayPalCommercePaymentFields {\n    render(id: string): void;\n}\n\nexport interface PayPalCommercePaymentFieldsOptions {\n    style?: PayPalCommerceFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface PayPalCommerceFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayPalCommerce Messages\n */\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessages {\n    render(id: string): void;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: PayPalCommerceMessagesStyleOptions;\n    fundingSource?: string;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n    fastlaneToken?: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n    fastlaneToken?: string;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceRequestSender from './paypal-commerce-request-sender';\nimport PayPalCommerceScriptLoader from './paypal-commerce-script-loader';\nimport {\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceInitializationData,\n    PayPalCreateOrderCardFieldsResponse,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        this.paypalSdk = await this.paypalCommerceScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n            forceLoad,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async createOrderCardFields(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalCreateOrderCardFieldsResponse> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId, setupToken } = await this.paypalCommerceRequestSender.createOrder(\n            providerId,\n            {\n                cartId,\n                ...requestBody,\n            },\n        );\n\n        return { orderId, ...(setupToken ? { setupToken } : {}) };\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(methodId?: string, options?: RequestOptions): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.paypalCommerceRequestSender.getOrderStatus(\n                methodId,\n                options,\n            );\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string, gatewayId?: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({\n            methodId,\n            paymentData,\n            ...(gatewayId ? { gatewayId } : {}),\n        });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: address?.phone || '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: address?.address2 || '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            address2: payer.address.address_line_2,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n            phone: payer.phone?.phone_number?.national_number,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const {\n            address,\n            name: { full_name },\n        } = purchase_units[0].shipping;\n\n        const [firstName, ...lastName] = full_name.split(' ');\n\n        return this.getAddress({\n            firstName,\n            lastName: lastName.join(' '),\n            email: payer.email_address,\n            address1: address.address_line_1,\n            address2: address.address_line_2,\n            city: address.admin_area_2,\n            countryCode: address.country_code,\n            postalCode: address.postal_code,\n            stateOrProvinceCode: address.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            // For now this is a temporary solution, further removeElement method will be removed\n            element.style.display = 'none';\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(\n        methodId = 'paypalcommerce',\n        options?: RequestOptions,\n    ): Promise<PayPalOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    ComponentsScriptType,\n    FundingType,\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalCommerceScriptParams,\n    PayPalSDK,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceScriptLoader {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PayPalCommerceScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<PayPalCommerceScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<PayPalCommerceScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceIntegrationService,\n    PayPalCommerceRequestSender,\n    PayPalCommerceScriptLoader,\n} from './index';\n\nconst createPayPalCommerceIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        new PayPalCommerceScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createPayPalCommerceIntegrationService;\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceButtonInitializeOptions, {\n    WithPayPalCommerceButtonInitializeOptions,\n} from './paypal-commerce-button-initialize-options';\n\nexport default class PayPalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommerce, containerId, methodId } = options;\n\n        const isBuyNowFlow = Boolean(paypalcommerce?.buyNowInitializeOptions);\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !paypalcommerce.currencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof paypalcommerce.buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? paypalcommerce.currencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommerce);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommerce: PayPalCommerceButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } = paypalcommerce;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, isAppSwitchEnabled } =\n            paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () => this.paypalCommerceIntegrationService.createOrder('paypalcommerce'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            ...(!isAppSwitchEnabled && {\n                onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                    this.onShippingAddressChange(data),\n                onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                    this.onShippingOptionsChange(data),\n            }),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceButtonStrategy from './paypal-commerce-button-strategy';\n\nconst createPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceButtonStrategy, [{ id: 'paypalcommerce' }]);\n","import { MessagesStyleOptions, PayPalBNPLConfigurationItem } from '../paypal-commerce-types';\n\nfunction getPaypalMessagesStylesFromBNPLConfig({\n    styles,\n}: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n    const messagesStyles: MessagesStyleOptions = {};\n\n    if (styles.color) {\n        messagesStyles.color = styles.color;\n    }\n\n    if (styles.layout) {\n        messagesStyles.layout = styles.layout;\n    }\n\n    if (styles['logo-type'] || styles['logo-position']) {\n        messagesStyles.logo = {};\n\n        if (styles['logo-type']) {\n            messagesStyles.logo.type = styles['logo-type'];\n        }\n\n        if (styles['logo-position']) {\n            messagesStyles.logo.position = styles['logo-position'];\n        }\n    }\n\n    if (styles.ratio) {\n        messagesStyles.ratio = styles.ratio;\n    }\n\n    if (styles['text-color'] || styles['text-size']) {\n        messagesStyles.text = {};\n\n        if (styles['text-color']) {\n            messagesStyles.text.color = styles['text-color'];\n        }\n\n        if (styles['text-size']) {\n            messagesStyles.text.size = +styles['text-size'];\n        }\n    }\n\n    return messagesStyles;\n}\n\nexport default getPaypalMessagesStylesFromBNPLConfig;\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalMessagesSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditButtonInitializeOptions, {\n    WithPayPalCommerceCreditButtonInitializeOptions,\n} from './paypal-commerce-credit-button-initialize-options';\n\nexport default class PayPalCommerceCreditButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceCreditButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercecredit, containerId, methodId } = options;\n        const {\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n            messagingContainerId,\n        } = paypalcommercecredit || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const state = this.paymentIntegrationService.getState();\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : state.getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercecredit);\n\n        // TODO: remove banner rendering implementation in this file when PAYPAL-5557.Hide_ppc_banner_implementation will be rolled out to 100%\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isBannerImplementationDisabled =\n            features['PAYPAL-5557.Hide_ppc_banner_implementation'] ?? false;\n\n        if (isBannerImplementationDisabled) {\n            return;\n        }\n\n        const messagingContainer =\n            messagingContainerId && document.getElementById(messagingContainerId);\n\n        if (currencyCode && messagingContainer) {\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData || {};\n            const bannerConfiguration =\n                paypalBNPLConfiguration && paypalBNPLConfiguration.find(({ id }) => id === 'cart');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            // TODO: remove this code when data attributes will be removed from the banner container in content service\n            messagingContainer.removeAttribute('data-pp-style-logo-type');\n            messagingContainer.removeAttribute('data-pp-style-logo-position');\n            messagingContainer.removeAttribute('data-pp-style-text-color');\n            messagingContainer.removeAttribute('data-pp-style-text-size');\n\n            const paypalSdk = await this.paypalCommerceSdk.getPayPalMessages(\n                paymentMethod,\n                currencyCode,\n            );\n\n            this.renderMessages(paypalSdk, messagingContainerId, bannerConfiguration);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercecredit: PayPalCommerceCreditButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            paypalcommercecredit;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, isAppSwitchEnabled } =\n            paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercecredit'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            ...(!isAppSwitchEnabled && {\n                onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                    this.onShippingAddressChange(data),\n                onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                    this.onShippingOptionsChange(data),\n            }),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n                    fundingSource,\n                    style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n                    ...defaultCallbacks,\n                    ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                    onEligibilityFailure();\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private renderMessages(\n        paypalMessagesSdk: PayPalMessagesSdk,\n        messagingContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'cart',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        const paypalMessages = paypalMessagesSdk.Messages(paypalMessagesOptions);\n\n        paypalMessages.render(`#${messagingContainerId}`);\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { createPayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditButtonStrategy from './paypal-commerce-credit-button-strategy';\n\nconst createPayPalCommerceCreditButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceCreditButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        createPayPalCommerceSdk(),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditButtonStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalCommerceSdk from './paypal-commerce-sdk';\n\nexport default function createPayPalCommerceSdk(): PayPalCommerceSdk {\n    return new PayPalCommerceSdk(createScriptLoader());\n}\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    StyleButtonColor,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoButtonInitializeOptions, {\n    WithPayPalCommerceVenmoButtonInitializeOptions,\n} from './paypal-commerce-venmo-button-initialize-options';\n\nexport default class PayPalCommerceVenmoButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceVenmoButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercevenmo, containerId, methodId } = options;\n        const { buyNowInitializeOptions, currencyCode: providedCurrencyCode } =\n            paypalcommercevenmo || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onEligibilityFailure } = paypalcommercevenmo;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const fundingSource = paypalSdk.FUNDING.VENMO;\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmo'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource,\n            style: this.getValidVenmoButtonStyles(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private getValidVenmoButtonStyles(style: PayPalButtonStyleOptions | undefined) {\n        const validButtonStyle = this.paypalCommerceIntegrationService.getValidButtonStyle(style);\n\n        if (validButtonStyle.color === StyleButtonColor.gold) {\n            return {\n                ...validButtonStyle,\n                color: undefined,\n            };\n        }\n\n        return validButtonStyle;\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoButtonStrategy from './paypal-commerce-venmo-button-strategy';\n\nconst createPayPalCommerceVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceVenmoButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoButtonStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceAlternativeMethodsButtonOptions, {\n    WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n} from './paypal-commerce-alternative-methods-button-initialize-options';\n\nexport default class PayPalCommerceAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercealternativemethods, containerId, methodId } = options;\n        const {\n            apm,\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n        } = paypalcommercealternativemethods || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        if (!apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercealternativemethods);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercealternativemethods: PayPalCommerceAlternativeMethodsButtonOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, style, onEligibilityFailure } =\n            paypalcommercealternativemethods;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder(\n                    'paypalcommercealternativemethod',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: apm,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceAlternativeMethodsButtonStrategy from './paypal-commerce-alternative-methods-button-strategy';\n\nconst createPayPalCommerceAlternativeMethodsButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceAlternativeMethodsButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceAlternativeMethodsButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceAlternativeMethodsButtonStrategy, [\n    { id: 'paypalcommercealternativemethods' },\n]);\n","export interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    SDK_VERSION_HEADERS,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithPaypalExpressButtonInitializeOptions } from './paypal-express-button-initialize-options';\nimport PaypalScriptLoader from './paypal-express-script-loader';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal-express-types';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalExpressScriptLoader: PaypalScriptLoader,\n        private formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!options.paypal) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalSDK = await this.paypalExpressScriptLoader.loadPaypalSDK(\n            paymentMethod.config.merchantId,\n        );\n\n        this.renderButton(options, paypalSDK);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\n        paypalSDK: PaypalSDK,\n    ) {\n        const { containerId, methodId, paypal } = options;\n        const { allowCredit, clientId, onPaymentError, shouldProcessPayment, style } = paypal;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const merchantId = paymentMethod.config.merchantId;\n        const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n        const clientToken: PaypalClientToken = { [env]: clientId };\n        const fundingCreditOption = paypalSDK.FUNDING.CREDIT || 'credit';\n        const allowedSources = allowCredit ? [fundingCreditOption] : [];\n        const disallowedSources = !allowCredit ? [fundingCreditOption] : [];\n\n        return paypalSDK.Button.render(\n            {\n                env,\n                client: clientToken,\n                commit: shouldProcessPayment,\n                funding: {\n                    allowed: allowedSources,\n                    disallowed: disallowedSources,\n                },\n                style: this.getStyle(style),\n                payment: (_, actions) => this.setupPayment(merchantId, actions, onPaymentError),\n                onAuthorize: (data, actions) =>\n                    this.tokenizePayment(data, methodId, actions, shouldProcessPayment),\n            },\n            containerId,\n        );\n    }\n\n    private getStyle(style?: Omit<PaypalStyleOptions, 'height'>): PaypalStyleOptions {\n        const { color, fundingicons, label, layout, shape, size, tagline } = style || {};\n\n        return {\n            color,\n            fundingicons,\n            label,\n            layout,\n            shape: shape || PaypalButtonStyleShapeOption.RECT,\n            size: size === 'small' ? PaypalButtonStyleSizeOption.RESPONSIVE : size,\n            tagline,\n        };\n    }\n\n    private async setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        try {\n            const state = await this.paymentIntegrationService.loadDefaultCheckout();\n            const { id: cartId } = state.getCartOrThrow();\n            const host = state.getHost() || '';\n\n            const paymentRequest = await actions.request.post(\n                `${host}/api/storefront/payment/paypalexpress`,\n                { merchantId, cartId },\n                {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                },\n            );\n\n            return paymentRequest.id;\n        } catch (error) {\n            if (onError && error instanceof StandardError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        data: PaypalAuthorizeData,\n        methodId: string,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n    ): Promise<void> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const getPaymentData = await actions.payment.get(data.paymentID);\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            provider: paymentMethod.id,\n            action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n            paymentId: data.paymentID,\n            payerId: data.payerID,\n            payerInfo: JSON.stringify(getPaymentData.payer.payer_info),\n        });\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-express-types';\n\nexport default class PaypalScriptLoader {\n    private window: PaypalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async loadPaypalSDK(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n            ...(merchantId && {\n                attributes: { 'data-merchant-id': merchantId },\n            }),\n        };\n\n        await this.scriptLoader.loadScript(scriptSrc, options);\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { PaypalExpressButtonStrategy, PaypalExpressScriptLoader } from './index';\n\nconst createPaypalExpressButtonStrategy: CheckoutButtonStrategyFactory<\n    PaypalExpressButtonStrategy\n> = (paymentIntegrationService) => {\n    return new PaypalExpressButtonStrategy(\n        paymentIntegrationService,\n        new PaypalExpressScriptLoader(getScriptLoader()),\n        createFormPoster(),\n    );\n};\n\nexport default toResolvableModule(createPaypalExpressButtonStrategy, [{ id: 'paypalexpress' }]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { ConfigState } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\nimport createCheckoutButtonRegistryV2 from './create-checkout-button-registry-v2';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions,\n): CheckoutButtonInitializer {\n    const { host, locale = 'en' } = options ?? {};\n\n    const config: ConfigState = {\n        meta: {\n            host: options?.host,\n            locale: options?.locale,\n        },\n        errors: {},\n        statuses: {},\n    };\n\n    const store = createCheckoutStore({ config });\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createCheckoutButtonRegistryV2(paymentIntegrationService);\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, locale, host),\n            registryV2,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        ),\n    );\n}\n","import {\n    CheckoutButtonStrategy,\n    CheckoutButtonStrategyFactory,\n    CheckoutButtonStrategyResolveId,\n    isResolvableModule,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ResolveIdRegistry } from '../common/registry';\nimport * as defaultCheckoutButtonStrategyFactories from '../generated/checkout-button-strategies';\n\nexport interface CheckoutButtonStrategyFactories {\n    [key: string]: CheckoutButtonStrategyFactory<CheckoutButtonStrategy>;\n}\n\nexport default function createCheckoutButtonStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    checkoutButtonStrategyFactories: CheckoutButtonStrategyFactories = defaultCheckoutButtonStrategyFactories,\n): ResolveIdRegistry<CheckoutButtonStrategy, CheckoutButtonStrategyResolveId> {\n    const registry = new ResolveIdRegistry<\n        CheckoutButtonStrategy,\n        CheckoutButtonStrategyResolveId\n    >();\n\n    for (const [, createCheckoutButtonStrategy] of Object.entries(\n        checkoutButtonStrategyFactories,\n    )) {\n        if (\n            !isResolvableModule<\n                CheckoutButtonStrategyFactory<CheckoutButtonStrategy>,\n                CheckoutButtonStrategyResolveId\n            >(createCheckoutButtonStrategy)\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createCheckoutButtonStrategy.resolveIds) {\n            registry.register(resolverId, () =>\n                createCheckoutButtonStrategy(paymentIntegrationService),\n            );\n        }\n    }\n\n    return registry;\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function isResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n): module is ResolvableModule<TModule, TIdentifier> {\n    return module && 'resolveIds' in module;\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport CouponActionCreator from '../coupon/coupon-action-creator';\nimport CouponRequestSender from '../coupon/coupon-request-sender';\nimport { CustomerActionCreator, CustomerRequestSender } from '../customer';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    createPaymentClient,\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from '../payment';\nimport { PaymentProviderCustomerActionCreator } from '../payment-provider-customer';\nimport PaymentStrategyWidgetActionCreator from '../payment/payment-strategy-widget-action-creator';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport {\n    ConsignmentActionCreator,\n    ConsignmentRequestSender,\n    ShippingCountryActionCreator,\n    ShippingCountryRequestSender,\n} from '../shipping';\nimport {\n    createSpamProtection,\n    PaymentHumanVerificationHandler,\n    SpamProtectionActionCreator,\n    SpamProtectionRequestSender,\n} from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport createPaymentIntegrationSelectors from './create-payment-integration-selectors';\nimport DefaultPaymentIntegrationService from './default-payment-integration-service';\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default function createPaymentIntegrationService(\n    store: CheckoutStore,\n): PaymentIntegrationService {\n    const {\n        config: { getHost, getLocale },\n    } = store.getState();\n\n    const requestSender = createRequestSender({ host: getHost() });\n\n    const storeProjectionFactory = new PaymentIntegrationStoreProjectionFactory(\n        createPaymentIntegrationSelectors,\n    );\n\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n\n    const checkoutValidator = new CheckoutValidator(new CheckoutRequestSender(requestSender));\n\n    const hostedFormFactory = new HostedFormFactory(store);\n\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(new CheckoutRequestSender(requestSender)),\n    );\n\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n    );\n\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        new ConsignmentRequestSender(requestSender),\n        new CheckoutRequestSender(requestSender),\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(createPaymentClient(store)),\n        orderActionCreator,\n        new PaymentRequestTransformer(),\n        new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n    );\n\n    const paymentHumanVerificationHandler = new PaymentHumanVerificationHandler(\n        createSpamProtection(createScriptLoader()),\n    );\n\n    const customerActionCreator = new CustomerActionCreator(\n        new CustomerRequestSender(requestSender),\n        checkoutActionCreator,\n        new SpamProtectionActionCreator(\n            createSpamProtection(createScriptLoader()),\n            new SpamProtectionRequestSender(requestSender),\n        ),\n    );\n\n    const storeCreditActionCreator = new StoreCreditActionCreator(\n        new StoreCreditRequestSender(requestSender),\n    );\n\n    const applyCouponActionCreator = new CouponActionCreator(\n        new CouponRequestSender(requestSender),\n    );\n\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionRequestSender = new SpamProtectionRequestSender(requestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(\n        spamProtection,\n        spamProtectionRequestSender,\n    );\n\n    const cartRequestSender = new CartRequestSender(requestSender);\n\n    const paymentProviderCustomerActionCreator = new PaymentProviderCustomerActionCreator();\n\n    const shippingCountryActionCreator = new ShippingCountryActionCreator(\n        new ShippingCountryRequestSender(requestSender, { locale: getLocale() }),\n        store,\n    );\n\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender),\n        checkoutActionCreator,\n    );\n\n    const paymentStrategyWidgetActionCreator = new PaymentStrategyWidgetActionCreator();\n\n    return new DefaultPaymentIntegrationService(\n        store,\n        storeProjectionFactory,\n        checkoutActionCreator,\n        checkoutValidator,\n        hostedFormFactory,\n        orderActionCreator,\n        billingAddressActionCreator,\n        consignmentActionCreator,\n        paymentMethodActionCreator,\n        paymentActionCreator,\n        paymentHumanVerificationHandler,\n        customerActionCreator,\n        cartRequestSender,\n        storeCreditActionCreator,\n        applyCouponActionCreator,\n        spamProtectionActionCreator,\n        paymentProviderCustomerActionCreator,\n        shippingCountryActionCreator,\n        remoteCheckoutActionCreator,\n        paymentStrategyWidgetActionCreator,\n    );\n}\n","// / <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        (state) => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        (state) => state.config.getStoreConfig(),\n    );\n\n    return paymentClient;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    locale: string,\n    host?: string,\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.MASTERPASS,\n        () =>\n            new MasterpassButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new MasterpassScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALEXPRESS,\n        () =>\n            new PaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new PaypalScriptLoader(scriptLoader),\n                formPoster,\n                host,\n            ),\n    );\n\n    return registry;\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","message","object","name","type","setPrototypeOf","__proto__","Error","captureStackTrace","stack","DEFAULT_RESPONSE","body","headers","status","response","errors","joinErrors","reduce","result","error","join","mapFromPaymentErrorResponse","Array","isArray","_factoryMethods","this","register","detail","title","length","map","code","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","default","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","last","split","errorResponse","storefrontErrorResponse","internalErrorResponse","CheckoutActionType","CheckoutHydrateActionType","ErrorActionType","omitDeep","predicate","isPlainObject","transform","omitBy","clearErrorReducer","state","action","ClearError","isClearErrorAction","payload","isEqual","objectA","objectB","options","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","replace","currentValue","newValue","undefined","SubscriptionsActionType","BillingAddressActionType","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","combineReducers","data","dataReducer","composeReducers","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadCheckoutSucceeded","billingAddress","HydrateInitialState","checkout","LoadCheckoutRequested","LoadCheckoutFailed","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","b","id","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","CouponActionType","GiftCertificateActionType","ConsignmentActionType","CheckoutButtonActionType","cartReducer","CreateConsignmentsSucceeded","DeleteConsignmentSucceeded","UpdateConsignmentSucceeded","UpdateShippingOptionSucceeded","LoadShippingOptionsSucceeded","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","cart","ConfigActionType","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","meta","methodId","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","OrderActionType","configReducer","LoadConfigSucceeded","config","LoadConfigFailed","LoadConfigRequested","couponReducer","LoadOrderSucceeded","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","CustomerActionType","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","CustomerStrategyActionType","customerReducer","customer","CreateCustomerAddressSucceeded","CreateCustomerRequested","CreateCustomerSucceeded","CreateCustomerFailed","CreateCustomerAddressRequested","CreateCustomerAddressFailed","ExtensionActionType","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeErrors","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","ExecutePaymentMethodCheckoutRequested","ExecutePaymentMethodCheckoutSucceeded","executePaymentMethodCheckoutError","executePaymentMethodCheckoutMethodId","ExecutePaymentMethodCheckoutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isExecutingPaymentMethodCheckout","isWidgetInteracting","FormFieldsActionType","extensionReducer","LoadExtensionsSucceeded","extensions","LoadExtensionsRequested","RenderExtensionRequested","RenderExtensionSucceeded","LoadExtensionsFailed","RenderExtensionFailed","CountryActionType","formFieldsReducer","LoadFormFieldsSucceeded","formFields","LoadFormFieldsFailed","LoadFormFieldsRequested","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","omit","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","PaymentActionType","orderBillingAddressReducer","paymentReducer","SubmitPaymentSucceeded","PaymentMethodActionType","PaymentStrategyActionType","paymentMethodReducer","LoadPaymentMethodSucceeded","array","item","defaultPredicate","pick","derivedPredicate","pickBy","findIndex","push","existingItem","mergeOrPush","gateway","LoadPaymentMethodsSucceeded","methodA","methodB","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","loadMethodId","loadMethodError","LoadPaymentMethodFailed","isLoadingMethod","PaymentProviderCustomerType","paymentStrategyReducer","gatewayId","initializeError","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","InstrumentActionType","paymentProviderCustomerReducer","UpdatePaymentProviderCustomer","RemoteCheckoutActionType","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignments","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","objectFlatten","parent","flattened","forEach","keyString","assign","PickupOptionActionType","objectWithSortedKeys","sortedArray","sort","previous","current","ShippingCountryActionType","pickupOptionReducer","LoadPickupOptionsSucceeded","sortedflattenedMeta","consignmentId","searchArea","btoa","JSON","stringify","LoadPickupOptionsRequested","LoadPickupOptionsFailed","ShippingStrategyActionType","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","SignInEmailActionType","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","StoreCreditActionType","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","SpamProtectionActionType","subscriptionsReducer","checkoutReducer","UpdateCheckoutSucceeded","VerifyCheckoutSucceeded","orderId","UpdateCheckoutRequested","UpdateCheckoutFailed","MissingDataErrorType","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingPaymentProviderCustomer","MissingShippingAddress","getErrorMessage","creator","combiner","args","pop","combinerArgs","memoize","guard","errorFactory","createFreezeProxy","target","proxy","create","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","charAt","deepFreeze","trap","createProxy","ACKNOWLEDGE","FINALIZE","provider","method","barclays","braintree","braintreepaypal","braintreeach","authorizenet","elavon","checkoutcom","sagepay","stripe","cybersource","cybersourcev2","bnz","converge","bluesnapv2","orbital","paymetric","bolt","moneris","cba_mpgs","worldpayaccess","squarev2","paypalcommercecreditcards","paypalcommerce","bigcommerce_payments_creditcards","bigcommerce_payments","tdonlinemart","normalize","address","firstName","lastName","company","address1","address2","city","stateOrProvince","countryCode","postalCode","phone","customFields","identity","createInternalCheckoutSelectorsFactory","getBillingAddress","getBillingAddressOrThrow","getUpdateError","getContinueAsGuestError","getLoadError","isContinuingAsGuest","isLoading","getState","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getCustomerOrThrow","getCreateAccountError","isCreatingCustomerAccount","getCreateAddressError","isCreatingCustomerAddress","getPaymentProviderCustomer","getPaymentProviderCustomerOrThrow","getCheckout","getShippingAddress","getShippingAddressOrThrow","getShippingAddresses","getShippingAddressesOrThrow","getOrderBillingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentIdOrThrow","getPaymentStatus","getPaymentStatusOrThrow","getPaymentToken","getPaymentTokenOrThrow","getPaymentRedirectUrl","getPaymentRedirectUrlOrThrow","isPaymentDataRequired","isPaymentDataSubmitted","getEmail","getSendError","isSending","createBillingAddressSelector","continueAsGuestError","loadError","memoizeOne","createCartSelector","getCart","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","some","find","values","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","context","getStoreConfig","_","formState","customerAccount","shippingAddress","storeConfig","getStoreConfigOrThrow","getContextConfig","getExternalSource","externalSource","getHost","host","getLocale","locale","getVariantIdentificationToken","variantIdentificationToken","createConfigSelectorFactory","createCountrySelector","getCountries","countries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","isCreating","createAddressError","isCreatingAddress","createCustomerStrategySelector","getSignInError","getSignOutError","getExecutePaymentMethodCheckoutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","instrument","bigpayToken","card","isMatch","getCardInstrumentOrThrow","MissingPaymentInstrument","getInstruments","flatMap","supportedProvider","getInstrumentsMeta","getDeleteError","createInstrumentSelectorFactory","createFormSelector","getShippingAddressFields","selectedCountry","field","processField","getBillingAddressFields","getCustomerAccountFields","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","query","createPaymentStrategySelectorFactory","createPickupOptionSelector","getPickupOptions","pickupOptions","sortedFlattenedParams","createPickupOptionSelectorFactory","createPaymentProviderCustomerSelector","createRemoteCheckoutSelector","createShippingAddressSelector","shippingConsignment","consignment","selectedPickupOption","shippingConsignments","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","getConsignments","getConsignmentsOrThrow","getConsignmentById","getConsignmentByAddress","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","concat","lineItemIds","lineItems","physicalItems","indexOf","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderOrThrow","getOrderMeta","payments","currentPayment","paymentId","createOrderSelectorFactory","createOrderBillingAddressSelector","createPaymentSelector","providerId","internalPayment","MissingPaymentId","step","MissingPaymentStatus","redirectUrl","MissingPaymentRedirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","signInEmail","sendError","createExtensionSelector","getExtensions","getExtensionByRegion","region","e","createExtensionSelectorFactory","checkoutButton","customerStrategies","form","orderBillingAddress","paymentProviderCustomer","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","shouldWarnMutation","createCheckoutStore","initialStoreState","factory","requestErrorFactory","actionTransformer","action$","from","pipe","catchError","every","createInternalCheckoutSelectors","createDataStore","stateTransformer","cachableActionDecorator","descriptor","memoizedMethods","WeakMap","decorateMethod","param","lastArg","useCache","fn","instanceMethods","set","Observable","shareReplay","store","isPaymentMethod","_requestSender","loadPaymentMethodsById","methodIds","observer","cartId","params","next","createAction","Promise","all","loadPaymentMethod","then","complete","catch","loadPaymentMethods","deviceSessionId","sessionHash","methods","createErrorAction","ContentType","INTERNAL_USE_ONLY","SDK_VERSION_HEADERS","timeout","Accept","JsonV1","url","throwErrorAction","of","throwError","_subscriptionActionCreator","continueAsGuest","credentials","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","hasBillingAddress","isEmpty","merge","defer","_createOrUpdateBillingAddress","_updateCustomerConsent","updateAddress","email","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","empty","updateSubscriptions","checkoutId","createAddress","DEFAULT_PARAMS","include","post","err","put","createBuyNowCart","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","loadCheckout","loadConfig","loadFormFields","_transformCustomerAddresses","loadDefaultCheckout","updateCheckout","loadCurrentCheckout","hydrateInitialState","addresses","shouldSaveAddress","joinIncludes","includes","uniq","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","difference","mergeIncludes","cartA","cartB","_normalize","cartAmount","currency","digitalItems","slice","itemA","itemB","productId","variantId","localeCompare","extendedSalePrice","quantity","amount","recipient","giftWrapping","updated","validate","comparator","_compareCoupons","_compareGiftCertificates","_getComparableCheckout","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_configRequestSender","_couponRequestSender","applyCoupon","removeCoupon","CheckoutIncludes","couponCode","AvailableShippingOptions","delete","CartSource","isSpamProtectionExecuteSucceededAction","succeededAction","_customerRequestSender","_checkoutActionCreator","_spamProtectionActionCreator","createCustomer","isStorefrontSpamProtectionEnabled","checkoutSettings","createAccount","switchMap","execute","customerAddress","signInCustomer","source","BuyNow","SignInCustomerRequested","persistentCartRetrievalInformation","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","_formFieldsRequestSender","loadFields","promise","cancellable","reject","cancel","race","_mutationObserver","ensurePresence","targets","mutationsList","mutation","removedNodes","node","contains","observe","document","childList","subtree","output","disconnect","_window","window","callback","MutationObserver","parseUrl","test","anchor","createElement","href","port","hostname","hash","origin","protocol","pathname","search","isIframeEvent","targetOrigin","_targetWindow","_context","_targetOrigin","event","targetWindow","fromEvent","successType","errorType","take","toPromise","postMessage","setTarget","setContext","bindMethodDecorator","decoratedTarget","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","bind","sourceOrigin","_sourceOrigins","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","removeListener","splice","trigger","messageEvent","_googleRecaptcha","handle","errorOrId","handleWithRecaptchaSitekey","handleWithPaymentHumanVerificationRequestError","_isPaymentHumanVerificationRequest","_initialize","additional_action_required","_performRecaptcha","human_verification_token","recaptchaSitekey","cardingProtectionElementId","cardingProtectionElement","getElementById","parentNode","removeChild","setAttribute","appendChild","load","NotInitializedErrorType","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","container","event$","Subject","_widgetId","render","size","getResponse","reset","_event$","_recaptcha","element","remove","querySelector","retryWhen","delay","TIMEOUT","_watchRecaptchaChallengeWindow","iframeContainer","parentElement","style","visibility","attributes","attributeFilter","_scriptLoader","_loadPromise","_loadScript","callbackName","resolve","grecaptcha","loadScript","createSpamProtection","scriptLoader","MutationObserverFactory","fieldErrors","HostedFieldEventType","HostedInputEventType","_type","_containerId","_placeholder","_accessibilityLabel","_styles","_eventPoster","_eventListener","_detachmentObserver","_checkoutId","_cardInstrument","_iframe","src","border","height","overflow","width","getType","attach","contentWindow","AttachRequested","accessibilityLabel","cardInstrument","fontUrls","_getFontUrls","placeholder","styles","location","AttachSucceeded","AttachFailed","detach","submitForm","fields","SubmitRequested","SubmitSucceeded","SubmitFailed","_isSubmitErrorEvent","submitStoredCardForm","StoredCardRequested","StoredCardSucceeded","StoredCardFailed","validateForm","ValidateRequested","Validated","isValid","links","querySelectorAll","link","fontFamily","family","_fields","_payloadTransformer","_eventCallbacks","_paymentHumanVerificationHandler","_handleEnter","noop","onBlur","onCardTypeChange","onFocus","onValidate","Blurred","CardTypeChanged","Focused","Entered","_cardType","cardType","BinChanged","_bin","bin","getBin","getCardType","_getFirstField","otherFields","without","otherField","submit","additionalActionData","additionalAction","submitStoredCard","isVaultedInstrument","_store","instrumentMeta","orderMeta","paymentData","paymentMethodMeta","authToken","vaultAccessToken","fieldOptions","_getCardInstrument","createScriptLoader","_orderRequestSender","_checkoutValidator","loadOrder","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","submitOrder","SubmitOrderRequested","shouldExecuteSpamCheck","_mapToOrderRequestBody","customerMessage","checkoutVariant","SubmitOrderFailed","finalizeOrder","FinalizeOrderRequested","FinalizeOrderFailed","isNil","_paymentRequestSender","_orderActionCreator","_paymentRequestTransformer","initializeOffsitePayment","shouldSaveInstrument","shouldSetAsDefaultInstrument","formattedPayload","bigpay_token","vault_payment_instrument","set_as_default_stored_instrument","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","_client","_transformResponse","statusText","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","_decimalPlaces","toInteger","round","couponTypes","mapToInternalCoupon","coupon","discount","displayName","discountType","couponType","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","CheckoutButtonMethodType","mapToInternalLineItems","itemMap","decimalPlaces","idKey","amountTransformer","imageUrl","amountAfterDiscount","integerAmount","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","sender","mapGiftCertificateToInternalLineItem","extendedListPrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","option","addedByPromotion","mapToInternalLineItem","mapToInternalLineItemType","mapToInternalCart","promotions","notifications","sum","discountNotifications","promotion","banners","banner","placeholders","messageHtml","text","totalDiscountedAmount","certificate","appliedGiftCertificates","keyBy","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","lineItem","isShippingRequired","subtotal","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","mapToInternalCustomer","customerId","fullName","customerGroupName","customerGroup","format","month","year","trimmedMonth","trimmedYear","toObject","number","maxLength","creditCardType","info","lengths","unformattedValue","unformat","gaps","gapIndex","mapToInternalOrder","customerCanBeCreated","mapToInternalOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","socialMedia","description","image","shareText","sharingLink","channelName","channel","channelCode","mapToInternalShippingOption","isSelected","price","cost","selected","isRecommended","transitTime","_cardExpiryFormatter","_cardNumberFormatter","checkoutState","formattedInstrument","_mapShippingAddress","shippingOption","contextConfig","paymentMeta","internalCustomer","_transformPaymentMethod","quoteMeta","request","geoCountryCode","storeProfile","transformWithHostedFormData","_transformHostedInputValues","initializationData","BRAINTREE_VENMO","BRAINTREE_PAYPAL","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","hostedFormNonce","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","isBopisEnabled","bopis","enabled","requiredAddress","isPickup","updatePaymentProviderCustomer","providerCustomerData","widgetInteraction","_remoteCheckoutRequestSender","initializeBilling","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","initializeShipping","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","initializePayment","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","loadSettings","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","signOut","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","forgetCheckout","ForgetCheckoutRemoteCustomerRequested","ForgetCheckoutRemoteCustomerSucceeded","ForgetCheckoutRemoteCustomerFailed","methodName","generateToken","trackAuthorizationEvent","_consignmentRequestSender","unassignItemsByAddress","_consignmentHasAddress","existingConsignment","_removeLineItems","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","consignmentUpdateBody","shippingOptionId","consignmentMeta","loadShippingOptions","_getUpdateAddressRequestBody","createConsignments","updateShippingOption","consignmentInMemory","_isUpdateConsignmentRequest","customItems","itemId","_hydrateLineItems","sharedItem","DEFAULT_INCLUDES","_shippingCountryRequestSender","loadCountries","checkoutData","channelId","_config","channelIdParam","initialize","spamProtectionElementId","spamProtectionElement","googleRecaptchaSitekey","verifyCheckoutSpamProtection","VerifyCheckoutRequested","VerifyCheckoutFailed","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","_subscriptionsRequestSender","cloneDeep","input","cloneDeepSafe","cache","cloneResult","createPaymentIntegrationSelectors","isPaymentMethodInitialized","_storeProjectionFactory","_hostedFormFactory","_billingAddressActionCreator","_consignmentActionCreator","_paymentMethodActionCreator","_paymentActionCreator","_customerActionCreator","_cartRequestSender","_storeCreditActionCreator","_couponActionCreator","_paymentProviderCustomerActionCreator","_shippingCountryActionCreator","_remoteCheckoutActionCreator","_paymentStrategyWidgetActionCreator","_storeProjection","createHostedForm","subscribe","subscriber","filters","initializeOffsitePaymentConfig","dispatch","updateBillingAddress","updateShippingAddress","buyNowCartRequestBody","loadShippingCountries","remoteCheckoutSignOut","validateCheckout","handlePaymentHumanVerification","queueId","ProjectionActionType","_transformSelectors","projection","Synchronize","initial","createDataStoreProjection","getUniqId","idPrefix","uniqueId","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","getKey","_resolveMap","parentMap","cacheKey","usedCount","_generateMap","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","selectorDecorator","resolver","memoizedMethod","cachedValue","isPrivate","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","_buttonStrategyActionCreator","_state","initializeButton","containerIds","selector","containers","setUniqueElementId","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_registryV2","paymentMethodRequestParams","currencyCode","paymentMethodRequestOptions","_getStrategy","strategy","_factories","_instances","_defaultToken","defaultToken","_useFallback","useFallback","_tokenResolver","tokenResolver","cacheToken","_getInstance","_hasFactory","_hasInstance","resolvedToken","useMasterpassSrc","language","testMode","subdomain","sourceUrl","masterpass","loadPaypal","merchantId","scriptSrc","async","paypal","supportedLocales","es","en","pt","zu","ar","zh","ms","uk","sv","hr","pl","nl","it","de","fr","formatLocale","localeLanguage","toLowerCase","formattedLocale","countryLocales","_masterpassScriptLoader","_locale","_methodId","masterpassScriptLoaderParams","isMasterpassSrcEnabled","_masterpassClient","_signInButton","_createSignInButton","_handleWalletButtonClick","buttonContainer","button","_createMasterpassPayload","allowedCardTypes","CheckoutButtonNotInitialized","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","_paypalScriptLoader","_formPoster","_host","paypalOptions","_paymentMethod","env","clientToken","clientId","fundingCreditOption","FUNDING","CREDIT","allowedSources","allowCredit","disallowedSources","Button","client","commit","shouldProcessPayment","funding","allowed","disallowed","shape","RECT","RESPONSIVE","actions","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","res","_onError","paymentID","payerID","postForm","payment_type","payerId","payerInfo","payer","payer_info","getEnvironment","process","NODE_ENV","_console","log","_logToConsole","messages","warn","debug","isEnabled","logger","console","_resolveToken","resolveId","_encodeToken","_decodeToken","parse","atob","registeredTokens","results","registeredToken","resolverId","matches","entries","matchedResults","matched","getShippableItemsCount","total","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","AmazonPayV2ButtonDesign","amazonPayV2Regions","jp","us","amazonPayV2ScriptLoader","amazonPayV2SDK","buttonParentContainer","createAmazonPayButtonParentContainer","amazonPayV2Button","bindButton","buttonId","sessionId","changeAction","getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","renderButton","prepareCheckout","createCheckoutSessionConfig","requestConfig","prepareRequestConfig","getAmazonPayV2Button","onClick","initCheckout","prepareCheckoutWithCreationRequestConfig","createCheckoutConfig","estimatedOrderAmount","productType","signout","renderAmazonPayButton","buttonColor","decoupleCheckoutInitiation","placement","isButtonMicroTextDisabled","parentContainerId","getButtonParentContainer","design","C0001","amazonPayV2ButtonOptions","getAmazonPayV2ButtonOptions","updateBuyNowFlowFlag","isBuyNowFlow","isPh4Enabled","features","storeCountryCode","isPh4UsOnly","publicKeyId","signedPayload","isEnvironmentSpecific","uid","random","substr","parentContainer","Gold","getCheckoutState","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","buttonBaseConfig","sandbox","PayOnly","PayAndShip","shopPath","buttonOptions","tmpConfig","createCheckoutSession","getOrThrow","checkoutSelectors","windowWithAmazonPay","amazonPayV2Region","amazon","toResolvableModule","resolveIds","isWithBuyNowFeatures","paymentIntegrationService","amazonPayV2PaymentProcessor","amazonPayV2ConfigRequestSender","amazonpay","initializeAmazonButtonOptions","buyNowInitializeOptions","getBuyNowCartRequestBody","_buyNowInitializeOptions","Cart","_getCheckoutCreationRequestConfig","_createBuyNowCartOrThrow","_createCheckoutConfig","public_key","rest","payloadJSON","buyNowCart","String","Json","requestSender","createRequestSender","amazonPayV2RequestSender","getScriptLoader","isExperimentEnabled","experimentName","BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION","BRAINTREE_SDK_DEFAULT_VERSION","BRAINTREE_SDK_STABLE_VERSION","braintreeWindow","getSDKVersion","getPreloadedSDKVersion","preloadedVersion","VERSION","TotalPriceStatusType","BraintreeOrderStatus","NonInstantLocalPaymentMethods","BraintreeFastlaneAuthenticationState","BraintreeErrorType","BraintreeErrorCode","BraintreeSupportedCardBrands","isBraintreeError","braintreeScriptLoader","setClientToken","teardownModule","dataCollector","getClient","getClientTokenOrThrow","loadClient","clientCreator","authorization","getDataCollectorOrThrow","emptyDataCollector","deviceData","teardown","loadDataCollector","dataCollectorConfig","kount","KountNotEnabled","getBraintreeGooglePayment","googlePayment","loadGooglePayment","braintreeGooglePayment","getBraintreeThreeDS","threeDS","load3DS","threeDSecure","version","getBraintreeLocalPayment","merchantAccountId","braintreeLocalPayment","loadLocalPayment","getUsBankAccount","usBankAccount","loadUsBankAccount","getBraintreeVisaCheckout","visaCheckout","loadVisaCheckout","getVisaCheckoutSdk","visaCheckoutSDK","loadVisaCheckoutSdk","getVenmoCheckoutOrThrow","braintreeVenmo","loadVenmoCheckout","venmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","braintreeVenmoCheckout","isBrowserSupported","BraintreeEnv","BraintreeModuleName","BraintreeFormFieldType","BRAINTREE_SDK_SCRIPTS_INTEGRITY","Client","PaypalCheckout","Paypal","LocalPayment","DataCollector","UsBankAccount","GooglePayment","ThreeDSecure","VisaCheckout","Venmo","HostedFields","Fastlane","braintreeHostWindow","braintreeSDKVersionManager","loadBraintreeModuleOrThrow","loadFastlane","loadPaypalCheckout","loadHostedFields","V","integrity","crossorigin","braintreeModuleName","fileName","getBraintreeModule","braintreeSdkVersion","scriptPath","getIntegrityValuesByModuleName","moduleName","ApplePayGatewayType","DefaultLabels","ButtonStyleOption","_paymentIntegrationService","_sessionFactory","_braintreeSdk","_applePayScriptLoader","_onAuthorizeCallback","_subTotalLabel","Subtotal","_shippingLabel","Shipping","applepay","loadSdk","onPaymentAuthorize","requiresShipping","_requiresShipping","BRAINTREE","_initializeBraintreeSdk","_applePayButton","_createButton","styleOption","applePayButton","_createApplePayButtonElement","buttonStyle","White","WhiteBorder","Black","getButtonStyle","preventDefault","merchantCapabilities","supportedNetworks","storeName","_getRequestWithEmptyTotal","requiredShippingContactFields","applePaySession","_handleApplePayEvents","begin","_getBaseRequest","requiredBillingContactFields","toFixed","tax","onvalidatemerchant","_onValidateMerchant","merchantSession","completeMerchantValidation","onpaymentmethodselected","_createBuyNowCart","_handlePaymentMethodSelected","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","oncancel","onpaymentauthorized","_onPaymentAuthorized","cartRequestBody","completePaymentMethodSelection","newTotal","newLineItems","_transformContactToAddress","shippingContact","abort","selectionShippingOptionId","availableOptions","availableShippingOptions","selectedOption","unselectedOptions","shippingOptions","additionalDescription","identifier","completeShippingContactSelection","ApplePaySession","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","optionId","selectedOptionId","_updateShippingOption","newShippingMethods","_getUpdatedLineItems","completeShippingMethodSelection","validationURL","bigPayEndpoint","paymentsUrl","billingContact","_getBraintreeDeviceData","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","transformedBillingAddress","transformedShippingAddress","emailAddress","phoneNumber","completePayment","STATUS_SUCCESS","STATUS_FAILURE","contact","givenName","familyName","locality","addressLines","administrativeArea","braintreePaymentMethod","assertApplePayWindow","isApplePayWindow","sdkVersion","ScriptLoader","LiabilityShiftEnum","BigCommercePaymentsIntent","StyleButtonLabel","StyleButtonColor","StyleButtonShape","NonInstantAlternativePaymentMethods","PayPalOrderStatus","formPoster","bigCommercePaymentsRequestSender","bigCommercePaymentsScriptLoader","loadPayPalSdk","providedCurrencyCode","initializesOnCheckoutPage","forceLoad","getPayPalSDK","paypalSdk","getPayPalSdkOrThrow","createBuyNowCartOrThrow","createOrder","requestBody","createOrderCardFields","setupToken","updateOrder","getOrderStatus","tokenizePayment","order_id","cart_id","device_info","method_id","paypal_account","getShippingOptionOrThrow","selectedShippingOptionId","recommendedShippingOption","shippingOptionToSelect","getAddress","getBillingAddressFromOrderDetails","given_name","surname","email_address","address_line_1","address_line_2","admin_area_2","country_code","postal_code","admin_area_1","phone_number","national_number","getShippingAddressFromOrderDetails","orderDetails","getValidButtonStyle","color","validStyles","getValidHeight","removeElement","elementId","display","paypalSdkScriptConfig","getPayPalSdkScriptConfigOrThrow","loadPayPalSDK","transformConfig","scriptQuery","URLSearchParams","intent","buyerCountry","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isPayPalCreditAvailable","isDeveloperModeApplicable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","isGooglePayEnabled","shouldEnableCard","enableCardFunding","disableCardFunding","enableCreditFunding","disableCreditFunding","shouldEnableAPMs","enableVenmoFunding","disableVenmoFunding","enableAPMsFunding","disableAPMsFunding","apm","googlePayComponent","cardFieldsComponent","disableFunding","enableFunding","components","transformedConfig","createFormPoster","bigCommercePaymentsIntegrationService","onComplete","onEligibilityFailure","defaultCallbacks","onApprove","orderID","buyNowFlowCallbacks","handleClick","onCancel","hostedCheckoutCallbacks","onShippingAddressChange","onShippingOptionsChange","onHostedCheckoutApprove","buttonRenderOptions","fundingSource","PAYPAL","paypalButton","Buttons","isEligible","getPayPalFastlaneSdk","paypalFastlaneSdk","getPayPalFastlaneSdkConfiguration","getPayPalGooglePaySdk","paypalGooglePay","getPayPalGooglePaySdkScriptConfigOrThrow","getPayPalApmsSdk","paypalApms","getPayPalApmSdkConfiguration","getPayPalMessages","paypalMessages","paypalSdkMessagesConfig","getPayPalSdkMessagesConfiguration","scriptOptions","scriptAttributes","messagesStyles","layout","logo","position","ratio","payPalSdkHelper","bigcommerce_payments_paylater","messagingContainerId","messagingContainer","bannerConfiguration","paypalBNPLConfiguration","removeAttribute","renderMessages","bigCommercePaymentsSdk","fundingSources","PAYLATER","hasRenderedSmartButton","paypalMessagesSdk","paypalMessagesOptions","Messages","bigcommerce_payments_apms","paypalButtonRender","bigcommerce_payments_venmo","VENMO","getValidVenmoButtonStyles","validButtonStyle","gold","BoltDeveloperMode","StyleButtonSize","boltScriptLoader","boltHostWindow","storefrontApiToken","publishableKey","developerConfig","loadBoltClient","BoltConnect","setupProductPageCheckout","addButtonContainer","boltButtonContainer","boltButtonObject","getBoltObjectData","append","innerHTML","domainUrl","getDomainURL","buttonHeight","getButtonHeight","buttonBorderRadius","getButtonBorderRadius","stringifyUrl","publishable_key","variant","border_radius","buttonSize","Small","Large","Medium","buttonShape","Pill","Rect","developerModeParams","BoltCheckout","getScriptOptions","loadBoltEmbedded","Bolt","developerMode","StagingMode","DevelopmentMode","developerDomain","invalidFields","details","MessagingPlacements","PAYPAL_COMPONENTS","overlay","dataCollectors","threeDSecureOptions","getBraintreeFastlane","cardId","isTestModeEnabled","localStorage","setItem","braintreeFastlane","getSessionId","braintreeFastlaneCreator","defaultStyles","root","backgroundColorPrimary","getPaypal","braintreePaypal","newWindowFlow","supportsPopups","show","focusWindow","tokenize","enableShippingAddress","flow","useraction","getPaypalCheckout","onSuccess","paypalCheckout","paypalCheckoutConfig","paypalCheckoutCallback","braintreePaypalCheckout","paypalSdkLoadConfig","isCreditEnabled","getDataCollector","cached","getBraintreeEnv","isTestMode","Sandbox","Production","mapToBraintreeShippingAddressOverride","recipientName","line1","line2","mapToLegacyShippingAddress","first_name","last_name","mapToLegacyBillingAddress","riskCorrelationId","get3DS","getVenmoCheckout","venmoConfig","verifyCard","tokenizeCard","tokenizationPayload","challenge3DSVerification","creditCardInstrument","isCreditCardInstrumentLike","getErrorsRequiredFields","requestData","mapToCreditCard","creditCards","present3DSChallenge","creditCard","cardholderName","cvv","expirationDate","countryCodeAlpha2","countryName","streetAddress","endpoint","addFrame","removeFrame","challengeRequested","additionalInformation","cancelVerifyCard","verification","roundedAmount","iframe","Number","onLookupComplete","_data","collectDeviceData","fundingicons","tagline","currentHeight","isNaN","braintreeIntegrationService","paypalCheckoutOptions","paypalCheckoutSuccessCallback","renderPayPalButton","paypalCheckoutErrorCallback","handleError","setupPayment","authorizeData","buyNowCartId","shippingAddressOverride","createPayment","shippingAddressEditable","offerCredit","tokenizePayload","device_data","billing_address","shipping_address","buyNowCardRequestBody","buttonContainerId","onErrorCallback","PAYMENT","CART","getPaypalMessagesStylesFromBNPLConfig","braintreeMessages","braintreepaypalcredit","isBannerImplementationDisabled","renderPayPalMessages","braintreeSdk","braintreeVisaCheckout","visaCheckoutInstance","initOptions","createInitOptions","paymentRequest","settings","collectShipping","createSignInButton","init","paymentSuccess","toVisaCheckoutAddress","userData","cardInformation","userEmail","card_information","lastTwo","extendedAddress","insertVisaCheckoutButton","buttonTemplate","visaCheckoutButton","flexDirection","alignItems","hostWindow","getVenmoButtonStyle","c","backgroundColor","WHITE","backgroundPosition","backgroundSize","backgroundImage","BLUE","backgroundRepeat","borderRadius","cursor","transition","minHeight","minWidth","braintreevenmo","paymentButtonStyles","cartButtonStyles","renderVenmoButton","isUnsupportedBrowserError","handleInitializationVenmoError","removeVenmoContainer","buttonStyles","venmoButton","buyBowCart","handlePostForm","GooglePayKey","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","_storeConfig","_customerFormatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","CurrencyService","PayPalCommerceIntent","GooglePayCardNetwork","CallbackIntentsType","ErrorReasonType","CallbackTriggerType","isGooglePayCardNetworkKey","_gatewayIdentifier","_isBuyNowFlow","mapToShippingAddressRequestBody","_mapToAddressRequestBody","mapToBillingAddressRequestBody","paymentMethodData","mapToExternalCheckoutData","getRequiredData","emailRequired","_isShippingAddressRequired","allowedCountryCodes","shippingAddressRequired","shippingAddressParameters","phoneNumberRequired","shippingOptionRequired","getCallbackIntents","OFFER","SHIPPING_ADDRESS","SHIPPING_OPTION","getCallbackTriggers","isGooglePayCouponsExperimentOn","availableTriggers","INITIALIZE","initializationTrigger","addressChangeTriggers","shippingOptionsChangeTriggers","offerChangeTriggers","getNonce","extraPaymentData","getMerchantInfo","getGooglePayInitializationData","merchantName","authJwt","getTransactionInfo","_getCurrencyCodeOrThrow","storeCountry","totalPriceStatus","ESTIMATED","totalPrice","getPaymentGatewayParameters","gatewayMerchantId","getCardParameters","allowedAuthMethods","allowedCardNetworks","supportedCards","billingAddressRequired","billingAddressParameters","_getPaymentMethodFn","_currencyCode","handleShippingAddressChange","mappedShippingAddress","_currencyService","_getGooglePayShippingOption","handleShippingOptionChange","defaultSelectedOptionId","getTotalPrice","handleCoupons","offerData","newCouponsState","appliedCoupons","getAppliedCoupons","exists","appliedCouponError","redemptionCode","newOfferInfo","offers","reason","OFFER_INVALID","getGatewayIdentifier","setGatewayIdentifier","address3","_getFirstAndLastName","trim","nameParts","formattedCost","service","_service","_braintreeGooglePayment","isThreeDSecureEnabled","isNetworkTokenized","_braintreePresent3DSChallenge","isGooglePayBraintreeTokenObject","assertIsGooglePayBraintreeTokenObject","androidPayCards","createPaymentDataRequest","merchantInfo","transactionInfo","cardRequirements","billingAddressFormat","paymentMethodTokenizationParameters","parameters","_googlePayPaymentProcessor","googlePayOptions","_getMethodOrThrow","buttonType","_countryCode","_getGooglePayClientOptions","_paymentButton","addPaymentButton","_handleClick","initializeWidget","_interactWithPaymentSheet","statusCode","showPaymentSheet","siteLink","_buyNowCart","setExternalCheckoutForm","paymentDataCallbacks","onPaymentDataChanged","callbackTrigger","shippingOptionData","_getBuyNowTransactionInfo","_getTransactionInfo","newTransactionInfo","FINAL","newShippingOptionParameters","_gateway","_baseRequest","apiVersion","apiVersionMinor","googlePayPaymentOptions","getGooglePaymentsClient","_paymentsClient","_buildButtonPayloads","_buildWidgetPayloads","_determineReadinessToPay","_prefetchGooglePaymentData","paymentButton","_getPaymentsClient","allowedPaymentMethods","_getBaseCardPaymentMethod","paymentDataRequest","_getPaymentDataRequest","loadPaymentData","setExternalCheckoutXhr","_setExternalCheckout","processAdditionalAction","useFormPoster","prefetchPaymentData","isReadyToPay","_getIsReadyToPayRequest","_baseCardPaymentMethod","baseCardPaymentMethod","_cardPaymentMethod","tokenizationSpecification","_paymentDataRequest","callbackIntents","offerInfo","_isReadyToPayRequest","_getOrThrow","google","api","PaymentsClient","environment","createGooglePayScriptLoader","assertsIsGooglePayPayPalCommercePaymentMethod","isGooglePayPaypalCommercePaymentMethod","payPalCommerceSdk","googlePaySdk","Googlepay","googlepayConfig","isGooglePayAuthorizeNetInitializationData","assertsIsGooglePayAuthorizeNetInitializationData","paymentGatewayId","assertIsGooglePayCheckoutComInitializationData","isGooglePayCheckoutComInitializationData","_resolve","threeDSBody","three_ds_result","acs_url","isGooglePayThreeDSecureResult","isGooglePayTokenObject","assertIsGooglePayTokenObject","_tokenize","checkoutcomkey","token_data","Authorization","assertsIsGooglePayStripeInitializationData","isGooglePayStripeInitializationData","isGooglePayStripeTokenObject","assertIsGooglePayStripeTokenObject","stripeVersion","stripePublishableKey","stripeConnectedAccount","isStripeGooglePay3dsExperimentIsOn","loadStripeJs","stripeUPEClient","clientSecret","catchedConfirmError","confirmCardPayment","retrievePaymentIntent","_throwDisplayableStripeError","_isCancellationError","paymentIntent","getStripeClient","stripeError","payment_intent","last_payment_error","stripeWindow","stripeAccount","stripeClient","bcStripeClient","betas","Stripe","browser_info","navigator","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","screen_width","time_zone_offset","getTimezoneOffset","errorBody","isObject","isTdOnlineMartAdditionalAction","threeDSResult","formUrl","threeDSSessionData","creq","paypalCommerceRequestSender","paypalCommerceScriptLoader","paypalCommerceIntegrationService","isAppSwitchEnabled","paypalCommerceSdk","paypalcommercecredit","paypalcommercevenmo","paypalcommercealternativemethods","paypalExpressScriptLoader","loadPaypalSDK","paypalSDK","getStyle","getPaymentData","createCheckoutButtonInitializer","registryV2","checkoutButtonStrategyFactories","registry","createCheckoutButtonStrategy","isResolvableModule","storeProjectionFactory","checkoutActionCreator","checkoutValidator","hostedFormFactory","orderActionCreator","billingAddressActionCreator","consignmentActionCreator","paymentMethodActionCreator","paymentActionCreator","paymentClient","setHost","paymentSettings","bigpayBaseUrl","createPaymentClient","paymentHumanVerificationHandler","customerActionCreator","storeCreditActionCreator","applyCouponActionCreator","spamProtection","spamProtectionRequestSender","spamProtectionActionCreator","cartRequestSender","paymentProviderCustomerActionCreator","shippingCountryActionCreator","remoteCheckoutActionCreator","paymentStrategyWidgetActionCreator","createPaymentIntegrationService","checkoutRequestSender","MASTERPASS","PAYPALEXPRESS","createCheckoutButtonRegistry"],"sourceRoot":""}