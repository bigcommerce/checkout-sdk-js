{"version":3,"file":"checkout-button.js","mappings":"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A4B7f,GAC9D8f,EAA6B,IAAI,GAA2B9f,GAC5D+f,EAA6B,IAAI,GAA2BD,GAC5DE,EAA8B,IAAI,GAA4BhgB,GAC9D0e,EAA8B,IAAI,GACpCsB,EACAD,GAEEE,EAA2B,IAAI,GAAyBjgB,GACxD2e,EAA2B,IAAI,GACjCsB,EACAb,GAEEc,EAAoB,IAAI,GAAkBlgB,GAyRhD,OAvRAif,EAASrgE,SACL,aACA,WACI,WAAI,GACAirB,EACA00C,EACAve,EACA4e,EACAD,EACAD,EACAG,EACAS,EACAb,EACA,IAAI,GAVR,IAcRQ,EAASrgE,SACL,kBACA,WACI,WAAI,GACAirB,EACA00C,EC9IL,IAAI,GAA4B,IAAI,IAAwB,KAAAre,qBD4I3D,IAOR+e,EAASrgE,SACL,qBACA,WACI,WAAI,GACAirB,EACA00C,EACA2B,EACAP,EACAvB,EACAjzC,OANJ,IAUR8zC,EAASrgE,SACL,4BACA,WACI,WAAI,GACAirB,EACA00C,EACA2B,EACAP,EACAvB,EACAjzC,OANJ,IAUR8zC,EAASrgE,SACL,oBACA,WACI,WAAI,GACAirB,EACA+0C,EACAsB,EACAP,EACAvB,EALJ,IASRa,EAASrgE,SACL,sBACA,WACI,WAAI,GACAirB,EACAu0C,EACAG,EACAze,GAAgCj2B,EAAO,IAAI,IAJ/C,IAQRo1C,EAASrgE,SACL,sBACA,WACI,WAAI,GACAirB,EACAu0C,EACAG,EACAze,GAAgCj2B,EAAO,IAAI,IAJ/C,IAQRo1C,EAASrgE,SACL,2BACA,WACI,WAAI,GACAirB,EACAu0C,EACAG,EACAze,GAAgCj2B,EAAO,IAAI,IAJ/C,IAQRo1C,EAASrgE,SACL,kBACA,WACI,WAAI,GACAirB,EACAu0C,EACAG,EACAze,GAAgCj2B,EAAO,IAAI,IAJ/C,IAQRo1C,EAASrgE,SACL,wBACA,WACI,WAAI,GACAirB,EACAu0C,EACAG,EACAze,GACIj2B,EACA,IAAI,GAA8B81C,IAN1C,IAWRV,EAASrgE,SACL,0BACA,WACI,WAAI,GACAirB,EACAu0C,EACAG,EACAze,GACIj2B,EACA,IAAI,GAAgCm2B,IAN5C,IAWRif,EAASrgE,SACL,4BACA,WACI,WAAI,GACAirB,EACAu0C,EACAG,EACAze,GAAgCj2B,EAAO,IAAI,IAJ/C,IAQRo1C,EAASrgE,SACL,sBACA,WACI,WAAI,GACAirB,EACAu0C,EACAG,EACAze,GAAgCj2B,EAAO,IAAI,IAJ/C,IAQRo1C,EAASrgE,SACL,qBACA,WACI,WAAI,GACAirB,EACAu0C,EACAG,EACAze,GAAgCj2B,EAAO,IAAI,IAJ/C,IAQRo1C,EAASrgE,SACL,wBACA,WACI,WAAI,GACAirB,EACAu0C,EACAG,EACAze,GAAgCj2B,EAAO,IAAI,IAJ/C,IAQRo1C,EAASrgE,SACL,eACA,WACI,WAAI,GACAirB,EACA00C,EACA,IAAI,GAAuB9kC,GAC3B3b,EAJJ,IAQRmhD,EAASrgE,SACL,kBACA,WACI,WAAI,GACAirB,EACA00C,EACA,IAAI,GAAmB9kC,GACvB2kC,EACAxgD,EALJ,IASRqhD,EAASrgE,SACL,mBACA,WACI,WAAI,GACAirB,EACA00C,EACA2B,EACA9B,EACAwB,EACAC,EACAlB,EACAD,EACAG,EACAJ,EAVJ,IAcRQ,EAASrgE,SACL,0BACA,WACI,WAAI,GACAirB,EACA00C,EACA2B,EACA9B,EACAwB,EACAC,EACApB,EACAE,EACAD,EACAG,EAVJ,IAcRI,EAASrgE,SACL,wBACA,WACI,WAAI,GACAirB,EACA00C,EACA2B,EACA9B,EACAwB,EACAC,EANJ,IAURZ,EAASrgE,SACL,0BACA,WACI,WAAI,GACAirB,EACA00C,EACAqB,EACAC,EACApB,EACAE,EACAD,EACAG,EARJ,IAYRI,EAASrgE,SACL,yBACA,WACI,WAAI,GACAirB,EACA00C,EACA2B,EACA9B,EACAwB,EACAC,EANJ,IAUDZ,CACX,CJhWYkB,CACIt2C,EACAC,EACAk2B,EACAoe,EACAtgD,EACAF,GAEJmhD,EACA,IAAI,GAA2B,IAAI,GAA2B/e,KAG1E,C","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/webpack/runtime/compat get default export","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/webpack/runtime/make namespace object","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/request-sender\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/form-poster\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"tslib\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/data-store\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unrecoverable-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"lodash\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-internal-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-payment-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-storefront-error-response.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs/operators\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/error-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/omit-deep.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/clear-error-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-set.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-plain-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/array-replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-merge.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/merge-or-push.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-flatten.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-with-sorted-keys.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/memoize\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"reselect\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/create-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/with-memoized-combiner.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/create-freeze-proxy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/supported-payment-instruments.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/is-address-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-internal-checkout-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/create-request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-action-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store-reducer.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/bigpay-client\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/create-payment-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cache-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/is-action-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cachable-action-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/apple-pay/is-apple-pay-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-request-sender.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/script-loader\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/throw-error-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-or-merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-default-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/errors/checkout-not-available-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-comparator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-changed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-validator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/errors/unexpected-detachment-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/detachment-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/mutation-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/parse-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/is-iframe-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-poster.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-listener.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/append-www.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/payment-human-verification-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/create-spam-protection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-order-data-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/order-tax-provider-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/map-to-internal-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/is-billing-address-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-coupon.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/generated/checkout-button-method-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-gift-certificate.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-items.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-cart.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/promotion/map-to-discount-notifications.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/map-to-internal-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"card-validator\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-number-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/map-to-internal-order.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/map-to-internal-shipping-option.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-params.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/errors/update-subscriptions-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/clone-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/default-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/create-data-store-projection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/payment-integration-store-projection-factory.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"shallowequal\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-maps.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-resolver.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-private.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/selector-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-error-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-status-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/is-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/set-unique-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getShippableItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getLineItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/apple-pay/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-get-first-and-last-name.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv3-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-bnz-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-checkoutcom-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-cybersourcev2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-orbital-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-upe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/apple-pay/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/map-to-braintree-shipping-address-override.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-billing-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-shipping-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-supported-locales.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/format-locale.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/get-callback-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal-commerce/paypal-commerce-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-inline-checkout-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/resolve-id-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/is-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/create-amazon-pay-v2-payment-processor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/request-sender\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/form-poster\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"tslib\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/data-store\");","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message:\n                message ||\n                'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length\n            ? errors.map((message) => ({ code: body.type, message }))\n            : [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors\n        .reduce((result: string[], error) => {\n            if (error) {\n                return [...result, error];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string,\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors\n        .reduce((result: string[], error) => {\n            if (error && error.message) {\n                return [...result, error.message];\n            }\n\n            return result;\n        }, [])\n        .join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody,\n} from './error-response-body';\nimport {\n    mapFromInternalErrorResponse,\n    mapFromPaymentErrorResponse,\n    mapFromStorefrontErrorResponse,\n    RequestError,\n    TimeoutError,\n} from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) =>\n            mapFromInternalErrorResponse(response, message),\n        );\n        this.register('storefront', (response, message) =>\n            mapFromStorefrontErrorResponse(response, message),\n        );\n        this.register('payment', (response, message) =>\n            mapFromPaymentErrorResponse(response, message),\n        );\n        this.register('timeout', (response) => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod =\n            this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ? internalType : 'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return (\n            !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string'\n        );\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody,\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return (\n            typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number'\n        );\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string,\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [\n            {\n                code: body.code || body.type,\n                message: body.detail || body.title,\n            },\n        ],\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\nimport { LoadFormFieldsAction } from '../form';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    | LoadCheckoutRequestedAction\n    | LoadCheckoutSucceededAction\n    | LoadCheckoutFailedAction\n    | LoadFormFieldsAction\n    | LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    | UpdateCheckoutRequestedAction\n    | UpdateCheckoutSucceededAction\n    | UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction =\n    | LoadOrderAction\n    | LoadOrderPaymentsAction\n    | SubmitOrderAction\n    | FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction =\n    | LoadOrderPaymentsRequestedAction\n    | LoadOrderPaymentsSucceededAction\n    | LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    | LoadOrderRequestedAction\n    | LoadOrderSucceededAction\n    | LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    | SubmitOrderRequestedAction\n    | SubmitOrderSucceededAction\n    | SubmitOrderFailedAction\n    | LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    | FinalizeOrderRequestedAction\n    | FinalizeOrderSucceededAction\n    | FinalizeOrderFailedAction\n    | LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    | UpdateSubscriptionsRequestedAction\n    | UpdateSubscriptionsSucceededAction\n    | UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction = ContinueAsGuestAction | UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    | UpdateBillingAddressRequested\n    | UpdateBillingAddressSucceeded\n    | UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    | ContinueAsGuestRequested\n    | ContinueAsGuestSucceeded\n    | ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(\n    object: any,\n    predicate: (value: any, key: string) => boolean,\n): any {\n    if (Array.isArray(object)) {\n        return object.map((value) => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(\n            omitBy(object, predicate),\n            (result, value, key) => {\n                result[key] = omitDeep(value, predicate);\n            },\n            {} as { [key: string]: any },\n        );\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<\n    TState extends { [key: string]: any },\n    TAction extends Action,\n>(state: TState, action: TAction): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, (value) => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if (objectA instanceof Date && objectB instanceof Date) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof Date || objectB instanceof Date) {\n            return false;\n        }\n\n        if (objectA instanceof RegExp && objectB instanceof RegExp) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if (objectA instanceof RegExp || objectB instanceof RegExp) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions,\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!Object.prototype.hasOwnProperty.call(objectB, key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K],\n): T {\n    if (\n        object &&\n        Object.prototype.hasOwnProperty.call(object, key) &&\n        isEqual(object[key], value)\n    ) {\n        return object;\n    }\n\n    return {\n        ...(object as any),\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, {\n    BillingAddressErrorsState,\n    BillingAddressStatusesState,\n    DEFAULT_STATE,\n} from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action,\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction,\n): BillingAddress | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return replace(data, action.payload && action.payload.billingAddress);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(errors, 'continueAsGuestError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n            return objectSet(errors, 'continueAsGuestError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\n): BillingAddressStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case BillingAddressActionType.UpdateBillingAddressRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case BillingAddressActionType.UpdateBillingAddressFailed:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case BillingAddressActionType.ContinueAsGuestRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isContinuingAsGuest', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case BillingAddressActionType.ContinueAsGuestFailed:\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n            return objectSet(statuses, 'isContinuingAsGuest', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(\n    currentArray: T[] | undefined,\n    newArray: T[],\n    options?: ArrayReplaceOptions,\n): T[];\nfunction arrayReplace<T>(\n    currentArray: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): undefined;\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined;\n\nfunction arrayReplace<T>(\n    currentArray?: T[],\n    newArray?: T[],\n    options?: ArrayReplaceOptions,\n): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(objectMerge(currentItem, newItem), currentItem, newItem);\n            }\n\n            return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(arrayReplace(currentItem, newItem), currentItem, newItem);\n        }\n\n        return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (\n        sameAsCurrentCount === newArray.length &&\n        currentArray &&\n        currentArray.length === newArray.length\n    ) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(\n    currentObject: T | undefined,\n    newObject: Partial<T>,\n): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\n\nfunction objectMerge<T extends object>(\n    currentObject?: T,\n    newObject?: Partial<T>,\n): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>).reduce((result, key) => {\n        const currentValue = result[key];\n        const newValue = newObject[key];\n\n        if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n            return objectSet(result, key, objectMerge(currentValue, newValue));\n        }\n\n        if (isArray(currentValue) && isArray(newValue)) {\n            return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n        }\n\n        return objectSet(result, key, newValue as any);\n    }, currentObject);\n}\n\nexport default objectMerge;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction = ApplyCouponAction | RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    | ApplyCouponRequestedAction\n    | ApplyCouponSucceededAction\n    | ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    | RemoveCouponRequestedAction\n    | RemoveCouponSucceededAction\n    | RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction = ApplyGiftCertificateAction | RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    | ApplyGiftCertificateRequestedAction\n    | ApplyGiftCertificateSucceededAction\n    | ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    | RemoveGiftCertificateRequestedAction\n    | RemoveGiftCertificateSucceededAction\n    | RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    | CreateConsignmentsAction\n    | UpdateConsignmentAction\n    | DeleteConsignmentAction\n    | UpdateShippingOptionAction\n    | LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    | CreateConsignmentsRequestedAction\n    | CreateConsignmentsSucceededAction\n    | CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    | UpdateConsignmentRequestedAction\n    | UpdateConsignmentSucceededAction\n    | UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    | DeleteConsignmentRequestedAction\n    | DeleteConsignmentSucceededAction\n    | DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    | UpdateShippingOptionRequestedAction\n    | UpdateShippingOptionSucceededAction\n    | UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    | LoadShippingOptionsRequestedAction\n    | LoadShippingOptionsSucceededAction\n    | LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    | InitializeButtonRequestedAction\n    | InitializeButtonSucceededAction\n    | InitializeButtonFailedAction\n    | LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    | DeinitializeButtonRequestedAction\n    | DeinitializeButtonSucceededAction\n    | DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction\n    extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction\n    extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(state: CartState = DEFAULT_STATE, action: Action): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action:\n        | BillingAddressAction\n        | CheckoutAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction,\n): Cart | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectMerge(data, action.payload && action.payload.cart);\n\n        default:\n            return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction,\n): CartStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction,\n): CartErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined;\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined;\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined;\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    | LoadConfigRequestedAction\n    | LoadConfigSucceededAction\n    | LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, {\n    CheckoutButtonDataState,\n    CheckoutButtonErrorsState,\n    CheckoutButtonStatusesState,\n    DEFAULT_STATE,\n} from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonDataState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            if (!action.meta || !action.meta.containerId) {\n                return data;\n            }\n\n            return objectMerge(data, {\n                initializedContainers: {\n                    [action.meta.containerId]: true,\n                },\n            });\n\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(errors, 'initializeError', undefined);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n            return objectSet(errors, 'initializeError', action.payload);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(errors, 'deinitializeError', undefined);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n            return objectSet(errors, 'deinitializeError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction,\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n        case CheckoutButtonActionType.InitializeButtonRequested:\n            return objectSet(statuses, 'isInitializing', true);\n\n        case CheckoutButtonActionType.InitializeButtonFailed:\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\n            return objectSet(statuses, 'isInitializing', false);\n\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\n            return objectSet(statuses, 'isDeinitializing', true);\n\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n            return objectSet(statuses, 'isDeinitializing', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n    host?: string;\n    locale?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action,\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Config | undefined, action: LoadConfigAction): Config | undefined {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction,\n): ConfigErrorsState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction,\n): ConfigStatusesState {\n    switch (action.type) {\n        case ConfigActionType.LoadConfigRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConfigActionType.LoadConfigSucceeded:\n        case ConfigActionType.LoadConfigFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action,\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction,\n): Coupon[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case OrderActionType.LoadOrderSucceeded:\n            return arrayReplace(data, action.payload && action.payload.coupons);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: CouponErrorsState = {}, action: CouponAction): CouponErrorsState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n        case CouponActionType.ApplyCouponSucceeded:\n            return objectSet(errors, 'applyCouponError', undefined);\n\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(errors, 'applyCouponError', action.payload);\n\n        case CouponActionType.RemoveCouponRequested:\n        case CouponActionType.RemoveCouponSucceeded:\n            return objectSet(errors, 'removeCouponError', undefined);\n\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(errors, 'removeCouponError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction,\n): CouponStatusesState {\n    switch (action.type) {\n        case CouponActionType.ApplyCouponRequested:\n            return objectSet(statuses, 'isApplyingCoupon', true);\n\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.ApplyCouponFailed:\n            return objectSet(statuses, 'isApplyingCoupon', false);\n\n        case CouponActionType.RemoveCouponRequested:\n            return objectSet(statuses, 'isRemovingCoupon', true);\n\n        case CouponActionType.RemoveCouponSucceeded:\n        case CouponActionType.RemoveCouponFailed:\n            return objectSet(statuses, 'isRemovingCoupon', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\nimport { SpamProtectionAction } from '../spam-protection';\n\nimport Customer from './customer';\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n\n    CreateCustomerRequested = 'CREATE_CUSTOMER_REQUESTED',\n    CreateCustomerSucceeded = 'CREATE_CUSTOMER_SUCCEEDED',\n    CreateCustomerFailed = 'CREATE_CUSTOMER_FAILED',\n\n    CreateCustomerAddressRequested = 'CREATE_CUSTOMER_ADDRESS_REQUESTED',\n    CreateCustomerAddressSucceeded = 'CREATE_CUSTOMER_ADDRESS_SUCCEEDED',\n    CreateCustomerAddressFailed = 'CREATE_CUSTOMER_ADDRESS_FAILED',\n\n    StripeLinkAuthenticated = 'STRIPE_LINK_AUTHENTICATED',\n}\n\nexport type CustomerAction =\n    | SignInCustomerAction\n    | SignOutCustomerAction\n    | CreateCustomerAddressAction\n    | CreateCustomerAction;\n\nexport type CreateCustomerAction =\n    | CreateCustomerRequestedAction\n    | CreateCustomerSucceededAction\n    | CreateCustomerFailedAction\n    | SpamProtectionAction\n    | LoadCheckoutAction;\n\nexport type CreateCustomerAddressAction =\n    | CreateCustomerAddressRequestedAction\n    | CreateCustomerAddressSucceededAction\n    | CreateCustomerAddressFailedAction\n    | LoadCheckoutAction;\n\nexport type SignInCustomerAction =\n    | SignInCustomerRequestedAction\n    | SignInCustomerSucceededAction\n    | SignInCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    | SignOutCustomerRequestedAction\n    | SignOutCustomerSucceededAction\n    | SignOutCustomerFailedAction\n    | LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface StripeLinkAuthenticatedAction extends Action {\n    type: CustomerActionType.StripeLinkAuthenticated;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n\nexport interface CreateCustomerRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerRequested;\n}\n\nexport interface CreateCustomerSucceededAction extends Action {\n    type: CustomerActionType.CreateCustomerSucceeded;\n}\n\nexport interface CreateCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerFailed;\n}\n\nexport interface CreateCustomerAddressRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerAddressRequested;\n}\n\nexport interface CreateCustomerAddressSucceededAction extends Action<Customer> {\n    type: CustomerActionType.CreateCustomerAddressSucceeded;\n}\n\nexport interface CreateCustomerAddressFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerAddressFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, {\n    DEFAULT_STATE,\n    GiftCertificateErrorsState,\n    GiftCertificateStatusesState,\n} from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action,\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction,\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction,\n): GiftCertificateErrorsState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n            return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n            return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction,\n): GiftCertificateStatusesState {\n    switch (action.type) {\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\n            return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\n            return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\n            return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\n            return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n    statuses: CustomerStatusesState;\n    errors: CustomerErrorsState;\n}\n\nexport interface CustomerErrorsState {\n    createError?: Error;\n    createAddressError?: Error;\n}\n\nexport interface CustomerStatusesState {\n    isCreating?: boolean;\n    isCreatingAddress?: boolean;\n}\n\nexport const DEFAULT_STATE: CustomerState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    ExecutePaymentMethodCheckoutFailed = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_FAILED',\n    ExecutePaymentMethodCheckoutRequested = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_REQUESTED',\n    ExecutePaymentMethodCheckoutSucceeded = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    | CustomerStrategySignInAction\n    | CustomerStrategySignOutAction\n    | CustomerStrategyExecutePaymentMethodCheckoutAction\n    | CustomerStrategyInitializeAction\n    | CustomerStrategyDeinitializeAction\n    | CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    | SignInRequestedAction\n    | SignInSucceededAction\n    | SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    | SignOutRequestedAction\n    | SignOutSucceededAction\n    | SignOutFailedAction;\n\nexport type CustomerStrategyExecutePaymentMethodCheckoutAction =\n    | ExecutePaymentMethodCheckoutRequestedAction\n    | ExecutePaymentMethodCheckoutSucceededAction\n    | ExecutePaymentMethodCheckoutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface ExecutePaymentMethodCheckoutRequestedAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested;\n}\n\nexport interface ExecutePaymentMethodCheckoutSucceededAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded;\n}\n\nexport interface ExecutePaymentMethodCheckoutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Customer from './customer';\nimport {\n    CustomerAction,\n    CustomerActionType,\n    StripeLinkAuthenticatedAction,\n} from './customer-actions';\nimport CustomerState, {\n    CustomerErrorsState,\n    CustomerStatusesState,\n    DEFAULT_STATE,\n} from './customer-state';\n\ntype ReducerActionType =\n    | CheckoutAction\n    | ContinueAsGuestAction\n    | CustomerAction\n    | StripeLinkAuthenticatedAction;\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: ReducerActionType,\n): CustomerState {\n    const reducer = combineReducers<CustomerState, ReducerActionType>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Customer | undefined, action: ReducerActionType): Customer | undefined {\n    switch (action.type) {\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectMerge(data, action.payload && action.payload.customer);\n\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectMerge(data, action.payload);\n\n        case CustomerActionType.StripeLinkAuthenticated:\n            return objectSet(data, 'isStripeLinkAuthenticated', action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CustomerErrorsState = DEFAULT_STATE.errors,\n    action: ReducerActionType,\n): CustomerErrorsState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case CustomerActionType.CreateCustomerFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(errors, 'createAddressError', undefined);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n            return objectSet(errors, 'createAddressError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStatusesState = DEFAULT_STATE.statuses,\n    action: ReducerActionType,\n): CustomerStatusesState {\n    switch (action.type) {\n        case CustomerActionType.CreateCustomerRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case CustomerActionType.CreateCustomerFailed:\n        case CustomerActionType.CreateCustomerSucceeded:\n            return objectSet(statuses, 'isCreating', false);\n\n        case CustomerActionType.CreateCustomerAddressRequested:\n            return objectSet(statuses, 'isCreatingAddress', true);\n\n        case CustomerActionType.CreateCustomerAddressFailed:\n        case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectSet(statuses, 'isCreatingAddress', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    executePaymentMethodCheckoutError?: Error;\n    executePaymentMethodCheckoutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isExecutingPaymentMethodCheckout?: boolean;\n    executePaymentMethodCheckoutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { FormFields } from './form-field';\n\nexport enum FormFieldsActionType {\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\n}\n\nexport type LoadFormFieldsAction =\n    | LoadFormFieldsRequestedAction\n    | LoadFormFieldsSucceededAction\n    | LoadFormFieldsFailedAction;\n\nexport interface LoadFormFieldsRequestedAction extends Action {\n    type: FormFieldsActionType.LoadFormFieldsRequested;\n}\n\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\n}\n\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\n    type: FormFieldsActionType.LoadFormFieldsFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, {\n    CustomerStrategyDataState,\n    CustomerStrategyErrorsState,\n    CustomerStrategyStatusesState,\n    DEFAULT_STATE,\n} from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action,\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction,\n): CustomerStrategyDataState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction,\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(errors, {\n                signInError: undefined,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n            return objectMerge(errors, {\n                signInError: action.payload,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(errors, {\n                signOutError: undefined,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n            return objectMerge(errors, {\n                signOutError: action.payload,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: undefined,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n            return objectMerge(errors, {\n                executePaymentMethodCheckoutError: action.payload,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction,\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n        case CustomerStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.InitializeFailed:\n        case CustomerStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.DeinitializeFailed:\n        case CustomerStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignInRequested:\n            return objectMerge(statuses, {\n                isSigningIn: true,\n                signInMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignInFailed:\n        case CustomerStrategyActionType.SignInSucceeded:\n            return objectMerge(statuses, {\n                isSigningIn: false,\n                signInMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.SignOutRequested:\n            return objectMerge(statuses, {\n                isSigningOut: true,\n                signOutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.SignOutFailed:\n        case CustomerStrategyActionType.SignOutSucceeded:\n            return objectMerge(statuses, {\n                isSigningOut: false,\n                signOutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: true,\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n            return objectMerge(statuses, {\n                isExecutingPaymentMethodCheckout: false,\n                executePaymentMethodCheckoutMethodId: undefined,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case CustomerStrategyActionType.WidgetInteractionFinished:\n        case CustomerStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { FormFields } from './form-field';\n\nexport default interface FormFieldsState {\n    data?: FormFields;\n    errors: FormFieldsErrorState;\n    statuses: FormFieldsStatusesState;\n}\n\nexport interface FormFieldsErrorState {\n    loadError?: Error;\n}\n\nexport interface FormFieldsStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: FormFieldsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    | LoadCountriesRequestedAction\n    | LoadCountriesSucceededAction\n    | LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { FormFields } from './form-field';\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsState, {\n    DEFAULT_STATE,\n    FormFieldsErrorState,\n    FormFieldsStatusesState,\n} from './form-fields-state';\n\nexport default function formFieldsReducer(\n    state: FormFieldsState = DEFAULT_STATE,\n    action: Action,\n): FormFieldsState {\n    const reducer = combineReducers<FormFieldsState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: FormFields | undefined,\n    action: LoadFormFieldsAction,\n): FormFields | undefined {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\n    action: LoadFormFieldsAction,\n): FormFieldsErrorState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\n    action: LoadFormFieldsAction,\n): FormFieldsStatusesState {\n    switch (action.type) {\n        case FormFieldsActionType.LoadFormFieldsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\n        case FormFieldsActionType.LoadFormFieldsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, {\n    CountryErrorsState,\n    CountryStatusesState,\n    DEFAULT_STATE,\n} from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action,\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction,\n): CountryErrorsState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n        case CountryActionType.LoadCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction,\n): CountryStatusesState {\n    switch (action.type) {\n        case CountryActionType.LoadCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CountryActionType.LoadCountriesSucceeded:\n        case CountryActionType.LoadCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction | InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    | SubmitPaymentRequestedAction\n    | SubmitPaymentSucceededAction\n    | SubmitPaymentFailedAction\n    | LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    | InitializeOffsitePaymentRequestedAction\n    | InitializeOffsitePaymentSucceededAction\n    | InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    | LoadPaymentMethodRequestedAction\n    | LoadPaymentMethodSucceededAction\n    | LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    | LoadPaymentMethodsRequestedAction\n    | LoadPaymentMethodsSucceededAction\n    | LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction\n    extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, {\n    DEFAULT_STATE,\n    OrderDataState,\n    OrderErrorsState,\n    OrderMetaState,\n    OrderStatusesState,\n} from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action,\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction,\n): OrderDataState | undefined {\n    switch (action.type) {\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, ['billingAddress', 'coupons']),\n            ) as OrderDataState;\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction,\n): OrderMetaState | undefined {\n    switch (action.type) {\n        case OrderActionType.FinalizeOrderSucceeded:\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectMerge(meta, {\n                ...action.meta,\n                callbackUrl: action.payload && action.payload.order.callbackUrl,\n                orderToken: action.payload && action.payload.order.token,\n                payment: action.payload && action.payload.order && action.payload.order.payment,\n            });\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction,\n): OrderErrorsState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction,\n): OrderStatusesState {\n    switch (action.type) {\n        case OrderActionType.LoadOrderRequested:\n        case OrderActionType.LoadOrderPaymentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case OrderActionType.LoadOrderSucceeded:\n        case OrderActionType.LoadOrderFailed:\n        case OrderActionType.LoadOrderPaymentsSucceeded:\n        case OrderActionType.LoadOrderPaymentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(\n    state: PaymentState = {},\n    action: PaymentAction,\n): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentResponseBody | undefined,\n    action: PaymentAction,\n): PaymentResponseBody | undefined {\n    switch (action.type) {\n        case PaymentActionType.SubmitPaymentSucceeded:\n            return action.payload;\n\n        default:\n            return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    | PaymentStrategyExecuteAction\n    | PaymentStrategyFinalizeAction\n    | PaymentStrategyInitializeAction\n    | PaymentStrategyDeinitializeAction\n    | PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    | FinalizeRequestedAction\n    | FinalizeSucceededAction\n    | FinalizeFailedAction\n    | LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, {\n    DEFAULT_STATE,\n    PaymentMethodErrorsState,\n    PaymentMethodStatusesState,\n} from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action,\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction,\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return mergeOrPush(\n                data || [],\n                action.payload,\n                action.payload && {\n                    id: action.payload.id,\n                    gateway: action.payload.gateway,\n                },\n            );\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return arrayReplace(data, action.payload, {\n                matchObject: (methodA, methodB) =>\n                    methodA.id === methodB.id && methodA.gateway === methodB.gateway,\n            });\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction,\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction,\n): PaymentMethodErrorsState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n            return objectMerge(errors, {\n                loadMethodId: undefined,\n                loadMethodError: undefined,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(errors, {\n                loadMethodId: action.meta.methodId,\n                loadMethodError: action.payload,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction,\n): PaymentMethodStatusesState {\n    switch (action.type) {\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\n            return objectMerge(statuses, {\n                isLoadingMethod: true,\n                loadMethodId: action.meta.methodId,\n            });\n\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\n            return objectMerge(statuses, {\n                isLoadingMethod: false,\n                loadMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(array: T[], item?: T, predicate?: ValueKeyIteratee<T>): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(\n        array,\n        typeof predicate === 'object' ? pickBy(predicate) : predicate || defaultPredicate,\n    );\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] =\n            isPlainObject(existingItem) && isPlainObject(item)\n                ? objectMerge(existingItem, item)\n                : item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction = LoadInstrumentsAction | DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    | LoadInstrumentsRequestedAction\n    | LoadInstrumentsSucceededAction\n    | LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    | DeleteInstrumentRequestedAction\n    | DeleteInstrumentSucceededAction\n    | DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction\n    extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, {\n    DEFAULT_STATE,\n    PaymentStrategyDataState,\n    PaymentStrategyErrorsState,\n    PaymentStrategyStatusesState,\n} from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action,\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction,\n): PaymentStrategyDataState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction,\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.DeinitializeRequested:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.ExecuteRequested:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(errors, {\n                executeError: undefined,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n            return objectMerge(errors, {\n                executeError: action.payload,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(errors, {\n                finalizeError: undefined,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n            return objectMerge(errors, {\n                finalizeError: action.payload,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction,\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n        case PaymentStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.InitializeFailed:\n        case PaymentStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.DeinitializeFailed:\n        case PaymentStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.ExecuteRequested:\n            return objectMerge(statuses, {\n                isExecuting: true,\n                executeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.ExecuteFailed:\n        case PaymentStrategyActionType.ExecuteSucceeded:\n            return objectMerge(statuses, {\n                isExecuting: false,\n                executeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.FinalizeRequested:\n            return objectMerge(statuses, {\n                isFinalizing: true,\n                finalizeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.FinalizeFailed:\n        case PaymentStrategyActionType.FinalizeSucceeded:\n            return objectMerge(statuses, {\n                isFinalizing: false,\n                finalizeMethodId: undefined,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta.methodId,\n            });\n\n        case PaymentStrategyActionType.WidgetInteractionFinished:\n        case PaymentStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    ForgetCheckoutRemoteCustomerRequested = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_REQUESTED',\n    ForgetCheckoutRemoteCustomerSucceeded = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_SUCCEEDED',\n    ForgetCheckoutRemoteCustomerFailed = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_FAILED',\n\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction =\n    | ForgetCheckoutRemoteCustomerAction\n    | InitializeRemoteBillingAction\n    | InitializeRemoteShippingAction\n    | InitializeRemotePaymentAction\n    | SignOutRemoteCustomerAction\n    | LoadRemoteSettingsAction\n    | UpdateRemoteCheckoutAction;\n\nexport type ForgetCheckoutRemoteCustomerAction =\n    | ForgetCheckoutRemoteCustomerRequestedAction\n    | ForgetCheckoutRemoteCustomerSucceededAction\n    | ForgetCheckoutRemoteCustomerFailedAction;\n\nexport interface ForgetCheckoutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested;\n}\n\nexport interface ForgetCheckoutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded;\n}\n\nexport interface ForgetCheckoutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed;\n}\n\nexport type InitializeRemoteBillingAction =\n    | InitializeRemoteBillingSucceededAction\n    | InitializeRemoteBillingFailedAction\n    | InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction =\n    | InitializeRemoteShippingSucceededAction\n    | InitializeRemoteShippingFailedAction\n    | InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction =\n    | InitializeRemotePaymentSucceededAction\n    | InitializeRemotePaymentFailedAction\n    | InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction =\n    | SignOutRemoteCustomerSucceededAction\n    | SignOutRemoteCustomerFailedAction\n    | SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction =\n    | LoadRemoteSettingsSucceededAction\n    | LoadRemoteSettingsRequestedAction\n    | LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, {\n    DEFAULT_STATE,\n    InstrumentErrorState,\n    InstrumentMeta,\n    InstrumentStatusState,\n} from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action,\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction,\n): PaymentInstrument[] {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return arrayReplace(data, (action.payload && action.payload.vaultedInstruments) || []);\n\n        default:\n            return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction,\n): InstrumentMeta | undefined {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(meta, action.meta);\n\n        default:\n            return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction,\n): InstrumentErrorState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n            return objectMerge(errors, {\n                deleteError: undefined,\n                failedInstrument: undefined,\n            });\n\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(errors, {\n                deleteError: action.payload,\n                failedInstrument: action.meta.instrumentId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction,\n): InstrumentStatusState {\n    switch (action.type) {\n        case InstrumentActionType.LoadInstrumentsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case InstrumentActionType.DeleteInstrumentRequested:\n            return objectMerge(statuses, {\n                isDeleting: true,\n                deletingInstrument: action.meta.instrumentId,\n            });\n\n        case InstrumentActionType.LoadInstrumentsSucceeded:\n        case InstrumentActionType.LoadInstrumentsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case InstrumentActionType.DeleteInstrumentSucceeded:\n        case InstrumentActionType.DeleteInstrumentFailed:\n            return objectMerge(statuses, {\n                isDeleting: false,\n                deletingInstrument: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction,\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: RemoteCheckout, action: RemoteCheckoutAction): RemoteCheckout {\n    switch (action.type) {\n        case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n            return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n        case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n            return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n        case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n            return objectSet(data, 'settings', action.payload);\n\n        case RemoteCheckoutActionType.UpdateRemoteCheckout:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { PickupOptionMeta, PickupOptionResult } from './pickup-option';\n\nexport enum PickupOptionActionType {\n    LoadPickupOptionsRequested = 'LOAD_PICKUP_OPTIONS_REQUESTED',\n    LoadPickupOptionsSucceeded = 'LOAD_PICKUP_OPTIONS_SUCCEEDED',\n    LoadPickupOptionsFailed = 'LOAD_PICKUP_OPTIONS_FAILED',\n}\n\nexport type LoadPickupOptionsAction =\n    | PickupOptionRequestedAction\n    | LoadPickupOptionsSucceededAction\n    | LoadPickupOptionsFailedAction;\n\nexport interface PickupOptionRequestedAction extends Action {\n    type: PickupOptionActionType.LoadPickupOptionsRequested;\n}\n\nexport interface LoadPickupOptionsSucceededAction\n    extends Action<PickupOptionResult[], PickupOptionMeta> {\n    type: PickupOptionActionType.LoadPickupOptionsSucceeded;\n}\n\nexport interface LoadPickupOptionsFailedAction extends Action<Error> {\n    type: PickupOptionActionType.LoadPickupOptionsFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, {\n    ConsignmentErrorsState,\n    ConsignmentStatusesState,\n    DEFAULT_STATE,\n} from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action,\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction,\n): Consignment[] | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n            return arrayReplace(data, action.payload && action.payload.consignments);\n\n        case CustomerActionType.SignOutCustomerSucceeded:\n            return arrayReplace(data, []);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n            return objectSet(errors, 'createError', undefined);\n\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(errors, 'createError', action.payload);\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    deleteError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: undefined,\n                    },\n                });\n            }\n\n            return errors;\n\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(errors, {\n                    updateShippingOptionError: {\n                        [action.meta.id]: action.payload,\n                    },\n                });\n            }\n\n            return errors;\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction,\n): ConsignmentStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ConsignmentActionType.LoadShippingOptionsRequested:\n            return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsFailed:\n            return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n        case ConsignmentActionType.CreateConsignmentsRequested:\n            return objectSet(statuses, 'isCreating', true);\n\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.CreateConsignmentsFailed:\n            return objectSet(statuses, 'isCreating', false);\n\n        case ConsignmentActionType.UpdateConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.UpdateConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdating: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isDeleting: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionRequested:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: true,\n                    },\n                });\n            }\n\n            return statuses;\n\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionFailed:\n            if (action.meta) {\n                return objectMerge(statuses, {\n                    isUpdatingShippingOption: {\n                        [action.meta.id]: false,\n                    },\n                });\n            }\n\n            return statuses;\n\n        default:\n            return statuses;\n    }\n}\n","/**\n * Takes a nested object and flattens it.\n */\nexport default function objectFlatten(\n    object: { [key: string]: any },\n    parent?: string,\n): { [key: string]: any } {\n    const flattened: { [key: string]: any } = {};\n\n    Object.keys(object).forEach((key: string) => {\n        const value = object[key];\n        const keyString = parent ? `${parent}.${key}` : key;\n\n        if (typeof value === 'object') {\n            Object.assign(flattened, objectFlatten(value, keyString));\n        } else {\n            flattened[keyString] = value;\n        }\n    });\n\n    return flattened;\n}\n","export default function objectWithSortedKeys(object: { [key: string]: any }) {\n    const keys = Object.keys(object);\n    const sortedKeys = keys.sort();\n\n    const sortedArray = sortedKeys.reduce(\n        (previous, current) => ({\n            ...previous,\n            [current]: object[current],\n        }),\n        {},\n    );\n\n    return sortedArray;\n}\n","import { PickupOptionQueryMap } from './pickup-option';\n\nexport default interface PickupOptionState {\n    data?: PickupOptionQueryMap;\n    errors: PickupOptionErrorsState;\n    statuses: PickupOptionStatusesState;\n}\n\nexport interface PickupOptionErrorsState {\n    loadError?: Error;\n}\n\nexport interface PickupOptionStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: PickupOptionState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction =\n    | LoadShippingCountriesRequestedAction\n    | LoadShippingCountriesSucceededAction\n    | LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectFlatten, objectSet, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionQueryMap } from './pickup-option';\nimport { LoadPickupOptionsAction, PickupOptionActionType } from './pickup-option-actions';\nimport PickupOptionState, {\n    DEFAULT_STATE,\n    PickupOptionErrorsState,\n    PickupOptionStatusesState,\n} from './pickup-option-state';\n\nexport default function pickupOptionReducer(\n    state: PickupOptionState = DEFAULT_STATE,\n    action: Action,\n): PickupOptionState {\n    const reducer = combineReducers<PickupOptionState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PickupOptionQueryMap | undefined,\n    action: LoadPickupOptionsAction,\n): PickupOptionQueryMap | undefined {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            if (action.meta) {\n                const optionQuery = {\n                    consignmentId: action.meta.consignmentId,\n                    searchArea: action.meta.searchArea,\n                };\n                const flattenedMeta = objectFlatten(optionQuery);\n                const sortedflattenedMeta = objectWithSortedKeys(flattenedMeta);\n                const keyString = btoa(`${JSON.stringify(sortedflattenedMeta)}`);\n\n                return objectSet(data, keyString, action.payload);\n            }\n\n            break;\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(errors: PickupOptionErrorsState = DEFAULT_STATE.errors, action: Action) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PickupOptionStatusesState = DEFAULT_STATE.statuses,\n    action: Action,\n) {\n    switch (action.type) {\n        case PickupOptionActionType.LoadPickupOptionsRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\n        case PickupOptionActionType.LoadPickupOptionsFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    | ShippingStrategyUpdateAddressAction\n    | ShippingStrategySelectOptionAction\n    | ShippingStrategyInitializeAction\n    | ShippingStrategyDeinitializeAction\n    | ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    | UpdateAddressRequestedAction\n    | UpdateAddressSucceededAction\n    | UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    | SelectOptionRequestedAction\n    | SelectOptionSucceededAction\n    | SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    | DeinitializeRequestedAction\n    | DeinitializeSucceededAction\n    | DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    | WidgetInteractionStartedAction\n    | WidgetInteractionFinishedAction\n    | WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, {\n    DEFAULT_STATE,\n    ShippingCountryErrorsState,\n    ShippingCountryStatusesState,\n} from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action,\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction,\n): Country[] | undefined {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return arrayReplace(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction,\n): ShippingCountryErrorsState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction,\n): ShippingCountryStatusesState {\n    switch (action.type) {\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\n            return objectSet(statuses, 'isLoading', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    | SendSignInEmailRequestedAction\n    | SendSignInEmailSucceededAction\n    | SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, {\n    DEFAULT_STATE,\n    ShippingStrategyDataState,\n    ShippingStrategyErrorsState,\n    ShippingStrategyStatusesState,\n} from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action,\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction,\n): ShippingStrategyDataState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: true,\n                },\n            });\n\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(data, {\n                [action.meta && action.meta.methodId]: {\n                    isInitialized: false,\n                },\n            });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction,\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(errors, {\n                initializeError: undefined,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n            return objectMerge(errors, {\n                initializeError: action.payload,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(errors, {\n                deinitializeError: undefined,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n            return objectMerge(errors, {\n                deinitializeError: action.payload,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(errors, {\n                updateAddressError: undefined,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n            return objectMerge(errors, {\n                updateAddressError: action.payload,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(errors, {\n                selectOptionError: undefined,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n            return objectMerge(errors, {\n                selectOptionError: action.payload,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n            return objectMerge(errors, {\n                widgetInteractionError: undefined,\n                widgetInteractionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(errors, {\n                widgetInteractionError: action.payload,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction,\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n        case ShippingStrategyActionType.InitializeRequested:\n            return objectMerge(statuses, {\n                isInitializing: true,\n                initializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.InitializeFailed:\n        case ShippingStrategyActionType.InitializeSucceeded:\n            return objectMerge(statuses, {\n                isInitializing: false,\n                initializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.DeinitializeRequested:\n            return objectMerge(statuses, {\n                isDeinitializing: true,\n                deinitializeMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.DeinitializeFailed:\n        case ShippingStrategyActionType.DeinitializeSucceeded:\n            return objectMerge(statuses, {\n                isDeinitializing: false,\n                deinitializeMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressRequested:\n            return objectMerge(statuses, {\n                isUpdatingAddress: true,\n                updateAddressMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.UpdateAddressFailed:\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\n            return objectMerge(statuses, {\n                isUpdatingAddress: false,\n                updateAddressMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.SelectOptionRequested:\n            return objectMerge(statuses, {\n                isSelectingOption: true,\n                selectOptionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.SelectOptionFailed:\n        case ShippingStrategyActionType.SelectOptionSucceeded:\n            return objectMerge(statuses, {\n                isSelectingOption: false,\n                selectOptionMethodId: undefined,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionStarted:\n            return objectMerge(statuses, {\n                isWidgetInteracting: true,\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\n            });\n\n        case ShippingStrategyActionType.WidgetInteractionFinished:\n        case ShippingStrategyActionType.WidgetInteractionFailed:\n            return objectMerge(statuses, {\n                isWidgetInteracting: false,\n                widgetInteractionMethodId: undefined,\n            });\n\n        default:\n            return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction = ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    | ApplyStoreCreditRequestedAction\n    | ApplyStoreCreditSucceededAction\n    | ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, {\n    DEFAULT_STATE,\n    SignInEmailErrorsState,\n    SignInEmailStatusesState,\n} from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action,\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction,\n): SignInEmail | undefined {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectMerge(data, action.payload);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction,\n): SignInEmailErrorsState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(errors, 'sendError', undefined);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n            return objectSet(errors, 'sendError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction,\n): SignInEmailStatusesState {\n    switch (action.type) {\n        case SignInEmailActionType.SendSignInEmailRequested:\n            return objectSet(statuses, 'isSending', true);\n\n        case SignInEmailActionType.SendSignInEmailFailed:\n        case SignInEmailActionType.SendSignInEmailSucceeded:\n            return objectSet(statuses, 'isSending', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, {\n    StoreCreditErrorsState,\n    StoreCreditStatusesState,\n} from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action,\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction,\n): StoreCreditErrorsState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n            return objectSet(errors, 'applyError', undefined);\n\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(errors, 'applyError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction,\n): StoreCreditStatusesState {\n    switch (action.type) {\n        case StoreCreditActionType.ApplyStoreCreditRequested:\n            return objectSet(statuses, 'isApplying', true);\n\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditFailed:\n            return objectSet(statuses, 'isApplying', false);\n\n        default:\n            return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    VerifyCheckoutRequested = 'SPAM_PROTECTION_CHECKOUT_VERIFY_REQUESTED',\n    VerifyCheckoutSucceeded = 'SPAM_PROTECTION_CHECKOUT_VERIFY_SUCCEEDED',\n    VerifyCheckoutFailed = 'SPAM_PROTECTION_CHECKOUT_VERIFY_FAILED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    | InitializeRequestedAction\n    | InitializeSucceededAction\n    | InitializeFailedAction\n    | ExecuteRequestedAction\n    | ExecuteSucceededAction\n    | ExecuteFailedAction\n    | CheckoutVerifyRequestedAction\n    | CheckoutVerifyFailedAction\n    | CheckoutVerifySucceededAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<{ token: string }> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n\nexport interface CheckoutVerifyRequestedAction extends Action {\n    type: SpamProtectionActionType.VerifyCheckoutRequested;\n}\n\nexport interface CheckoutVerifyFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.VerifyCheckoutFailed;\n}\n\nexport interface CheckoutVerifySucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.VerifyCheckoutSucceeded;\n}\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, {\n    DEFAULT_STATE,\n    SubscriptionsErrorsState,\n    SubscriptionsStatusesState,\n} from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action,\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsErrorsState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction,\n): SubscriptionsStatusesState {\n    switch (action.type) {\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        default:\n            return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<\n    Checkout,\n    'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'\n>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport {\n    CouponAction,\n    CouponActionType,\n    GiftCertificateAction,\n    GiftCertificateActionType,\n} from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, {\n    CheckoutDataState,\n    CheckoutErrorsState,\n    CheckoutStatusesState,\n    DEFAULT_STATE,\n} from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action,\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action:\n        | CheckoutAction\n        | BillingAddressAction\n        | ConsignmentAction\n        | CouponAction\n        | GiftCertificateAction\n        | OrderAction\n        | SpamProtectionAction\n        | StoreCreditAction,\n): CheckoutDataState | undefined {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutSucceeded:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        case CouponActionType.ApplyCouponSucceeded:\n        case CouponActionType.RemoveCouponSucceeded:\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        case SpamProtectionActionType.VerifyCheckoutSucceeded:\n            return objectMerge(\n                data,\n                omit(action.payload, [\n                    'billingAddress',\n                    'cart',\n                    'consignments',\n                    'customer',\n                    'coupons',\n                    'giftCertificates',\n                ]),\n            ) as CheckoutDataState;\n\n        case OrderActionType.SubmitOrderSucceeded:\n            return objectSet(data, 'orderId', action.payload && action.payload.order.orderId);\n\n        default:\n            return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction,\n): CheckoutErrorsState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(errors, 'loadError', undefined);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n            return objectSet(errors, 'loadError', action.payload);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(errors, 'updateError', undefined);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n            return objectSet(errors, 'updateError', action.payload);\n\n        default:\n            return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction,\n): CheckoutStatusesState {\n    switch (action.type) {\n        case CheckoutActionType.LoadCheckoutRequested:\n            return objectSet(statuses, 'isLoading', true);\n\n        case CheckoutActionType.LoadCheckoutFailed:\n        case CheckoutActionType.LoadCheckoutSucceeded:\n            return objectSet(statuses, 'isLoading', false);\n\n        case CheckoutActionType.UpdateCheckoutRequested:\n            return objectSet(statuses, 'isUpdating', true);\n\n        case CheckoutActionType.UpdateCheckoutFailed:\n        case CheckoutActionType.UpdateCheckoutSucceeded:\n            return objectSet(statuses, 'isUpdating', false);\n\n        case SpamProtectionActionType.ExecuteRequested:\n            return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n        case SpamProtectionActionType.ExecuteFailed:\n        case SpamProtectionActionType.ExecuteSucceeded:\n            return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n        default:\n            return statuses;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/memoize\");","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"reselect\");","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T,\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(\n        target,\n        (target, name) =>\n            (...args: any[]) =>\n                deepFreeze(target[name].call(target, ...args)),\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(\n    map: TMap,\n): TMap {\n    return Object.keys(map).reduce((result, key) => {\n        result[key] = createFreezeProxy(map[key]);\n\n        return result;\n    }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(\n    target: T,\n    trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any,\n): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, (prototype) => {\n        Object.getOwnPropertyNames(prototype).forEach((name) => {\n            if (\n                name === 'constructor' ||\n                typeof proxy[name] !== 'function' ||\n                name.charAt(0) === '_'\n            ) {\n                return;\n            }\n\n            proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n        });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'mollie.credit_card': {\n        provider: 'mollie',\n        method: 'credit_card',\n    },\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv3.scheme': {\n        provider: 'adyenv3',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    barclays: {\n        provider: 'barclays',\n        method: 'credit_card',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.credit_card': {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.card': {\n        provider: 'checkoutcom',\n        method: 'card',\n    },\n    sagepay: {\n        provider: 'sagepay',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    'stripeupe.card': {\n        provider: 'stripeupe',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    cybersourcev2: {\n        provider: 'cybersourcev2',\n        method: 'credit_card',\n    },\n    bnz: {\n        provider: 'bnz',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n    digitalriver: {\n        provider: 'digitalriver',\n        method: 'credit_card',\n    },\n    moneris: {\n        provider: 'moneris',\n        method: 'credit_card',\n    },\n    cba_mpgs: {\n        provider: 'cba_mpgs',\n        method: 'credit_card',\n    },\n    worldpayaccess: {\n        provider: 'worldpayaccess',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(\n    addressA: Partial<Address>,\n    addressB: Partial<Address>,\n): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy(\n        {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            company: address.company,\n            address1: address.address1,\n            address2: address.address2,\n            city: address.city,\n            stateOrProvince: address.stateOrProvince,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n            phone: address.phone,\n            customFields: address.customFields,\n        },\n        identity,\n    );\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport {\n    createPaymentMethodSelectorFactory,\n    createPaymentSelectorFactory,\n    createPaymentStrategySelectorFactory,\n} from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport {\n    createConsignmentSelectorFactory,\n    createPickupOptionSelectorFactory,\n    createShippingAddressSelectorFactory,\n    createShippingCountrySelectorFactory,\n    createShippingStrategySelectorFactory,\n} from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createPickupOptionSelector = createPickupOptionSelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.formFields);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const pickupOptions = createPickupOptionSelector(state.pickupOptions);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(\n            state.checkout,\n            billingAddress,\n            cart,\n            consignments,\n            coupons,\n            customer,\n            giftCertificates,\n        );\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n        const config = createConfigSelector(state.config, state.formFields);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            pickupOptions,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions,\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        (data) => () => data,\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        (getBillingAddress) => () => {\n            return guard(\n                getBillingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingBillingAddress),\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        (error) => () => error,\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        (status) => () => status,\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: BillingAddressState = DEFAULT_STATE): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        (state) => () => state,\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isInitializing) === true;\n                }\n\n                return some(statuses, { isInitializing: true });\n            }),\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        (data) =>\n            memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n                const method = data[methodId];\n\n                if (!method) {\n                    return false;\n                }\n\n                if (!containerId) {\n                    return some(\n                        method.initializedContainers,\n                        (isInitialized) => isInitialized === true,\n                    );\n                }\n\n                return method.initializedContainers[containerId] === true;\n            }),\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        (statuses) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                if (methodId) {\n                    const method = statuses[methodId];\n\n                    return (method && method.isDeinitializing) === true;\n                }\n\n                return some(statuses, { isDeinitializing: true });\n            }),\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.initializeError));\n\n                return method && method.initializeError;\n            }),\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        (errors) =>\n            memoize((methodId?: CheckoutButtonMethodType) => {\n                const method = methodId\n                    ? errors[methodId]\n                    : find(values(errors), (method) => !!(method && method.deinitializeError));\n\n                return method && method.deinitializeError;\n            }),\n    );\n\n    return memoizeOne((state: CheckoutButtonState = DEFAULT_STATE): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CouponState = DEFAULT_STATE): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n    getCustomerOrThrow(): Customer;\n    getCreateAccountError(): Error | undefined;\n    isCreatingCustomerAccount(): boolean;\n    getCreateAddressError(): Error | undefined;\n    isCreatingCustomerAddress(): boolean;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        (customer) => () => customer,\n    );\n\n    const getCustomerOrThrow = createSelector(getCustomer, (getCustomer) => () => {\n        return guard(\n            getCustomer(),\n            () => new MissingDataError(MissingDataErrorType.MissingCustomer),\n        );\n    });\n\n    const getCreateAccountError = createSelector(\n        (state: CustomerState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAccount = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreating,\n        (status) => () => status,\n    );\n\n    const getCreateAddressError = createSelector(\n        (state: CustomerState) => state.errors.createAddressError,\n        (error) => () => error,\n    );\n\n    const isCreatingCustomerAddress = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreatingAddress,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CustomerState = DEFAULT_STATE): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n            getCustomerOrThrow: getCustomerOrThrow(state),\n            getCreateAccountError: getCreateAccountError(state),\n            isCreatingCustomerAccount: isCreatingCustomerAccount(state),\n            getCreateAddressError: getCreateAddressError(state),\n            isCreatingCustomerAddress: isCreatingCustomerAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, {\n    DEFAULT_STATE,\n    RemoteCheckoutStateData,\n} from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId,\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        (data) =>\n            <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n                return data[methodId];\n            },\n    );\n\n    return memoizeOne((state: RemoteCheckoutState = DEFAULT_STATE): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n    getShippingAddressOrThrow(): Address;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            const shippingConsignment = consignments?.find(\n                (consignment) => !consignment.selectedPickupOption,\n            );\n\n            return shippingConsignment?.shippingAddress;\n        },\n    );\n\n    const getShippingAddressOrThrow = createSelector(\n        getShippingAddress,\n        (getShippingAddress) => () => {\n            return guard(\n                getShippingAddress(),\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\n            );\n        },\n    );\n\n    return memoizeOne((state: ConsignmentState = DEFAULT_STATE): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n            getShippingAddressOrThrow: getShippingAddressOrThrow(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentIdOrThrow(): { providerId: string; gatewayId?: string };\n    getPaymentStatus(): string | undefined;\n    getPaymentStatusOrThrow(): string;\n    getPaymentToken(): string | undefined;\n    getPaymentTokenOrThrow(): string;\n    getPaymentRedirectUrl(): string | undefined;\n    getPaymentRedirectUrlOrThrow(): string;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector,\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        },\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        (getOrder) => () => {\n            const order = getOrder();\n\n            return find(\n                order && order.payments,\n                ({ providerId }) =>\n                    providerId !== 'giftcertificate' && providerId !== 'storecredit',\n            ) as GatewayOrderPayment;\n        },\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        (getCheckout) => () => {\n            const checkout = getCheckout();\n\n            return find(\n                checkout && checkout.payments,\n                ({ providerType }) => providerType === HOSTED,\n            );\n        },\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        },\n    );\n\n    const getPaymentIdOrThrow = createSelector(getPaymentId, (getPaymentId) => () => {\n        return guard(\n            getPaymentId(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentId),\n        );\n    });\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        },\n    );\n\n    const getPaymentStatusOrThrow = createSelector(getPaymentStatus, (getPaymentStatus) => () => {\n        return guard(\n            getPaymentStatus(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentStatus),\n        );\n    });\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        (getOrderMeta) => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        },\n    );\n\n    const getPaymentTokenOrThrow = createSelector(getPaymentToken, (getPaymentToken) => () => {\n        return guard(\n            getPaymentToken(),\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentToken),\n        );\n    });\n\n    const getPaymentRedirectUrl = createSelector(getInternalPayment, (getInternalPayment) => () => {\n        const payment = getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    });\n\n    const getPaymentRedirectUrlOrThrow = createSelector(\n        getPaymentRedirectUrl,\n        (getPaymentRedirectUrl) => () => {\n            return guard(\n                getPaymentRedirectUrl(),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentRedirectUrl),\n            );\n        },\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        (getOutstandingBalance) =>\n            (useStoreCredit = false) => {\n                const grandTotal = getOutstandingBalance(useStoreCredit);\n\n                return grandTotal ? grandTotal > 0 : false;\n            },\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        (getPaymentStatus) => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        },\n    );\n\n    return memoizeOne((checkout: CheckoutSelector, order: OrderSelector): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentIdOrThrow: getPaymentIdOrThrow({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentStatusOrThrow: getPaymentStatusOrThrow({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentTokenOrThrow: getPaymentTokenOrThrow({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            getPaymentRedirectUrlOrThrow: getPaymentRedirectUrlOrThrow({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        (signInEmail) => () => signInEmail,\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        (error) => () => error,\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SignInEmailState = DEFAULT_STATE): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        (cart) => () => cart,\n    );\n\n    const getCartOrThrow = createSelector(getCart, (getCart) => () => {\n        return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n    });\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CartState = DEFAULT_STATE): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { FormFieldsState } from '../form';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getHost(): string | undefined;\n    getLocale(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (\n    state: ConfigState,\n    formState: FormFieldsState,\n) => ConfigSelector;\n\ninterface ConfigSelectorDependencies {\n    formState: FormFieldsState;\n}\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => () => data,\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        (data) => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined\n                ? flashMessages.filter(({ type }) => filterType === type)\n                : flashMessages;\n        },\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\n        (data, formFields) => () =>\n            data && formFields\n                ? {\n                      ...data.storeConfig,\n                      formFields,\n                  }\n                : undefined,\n    );\n\n    const getStoreConfigOrThrow = createSelector(getStoreConfig, (getStoreConfig) => () => {\n        return guard(\n            getStoreConfig(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig),\n        );\n    });\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        (data) => () => data,\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        (data) => () => data,\n    );\n\n    const getHost = createSelector(\n        (state: ConfigState) => state.meta?.host,\n        (data) => () => data,\n    );\n\n    const getLocale = createSelector(\n        (state: ConfigState) => state.meta?.locale,\n        (data) => () => data,\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (state: ConfigState = DEFAULT_STATE, formState: FormFieldsState): ConfigSelector => {\n            return {\n                getConfig: getConfig(state),\n                getFlashMessages: getFlashMessages(state),\n                getStoreConfig: getStoreConfig(state, { formState }),\n                getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\n                getContextConfig: getContextConfig(state),\n                getExternalSource: getExternalSource(state),\n                getHost: getHost(state),\n                getLocale: getLocale(state),\n                getVariantIdentificationToken: getVariantIdentificationToken(state),\n                getLoadError: getLoadError(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        (countries) => () => countries,\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: CountryState = DEFAULT_STATE): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getExecutePaymentMethodCheckoutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (\n    state: CustomerStrategyState,\n) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        },\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        },\n    );\n\n    const getExecutePaymentMethodCheckoutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutError,\n        (executePaymentMethodCheckoutMethodId, executePaymentMethodCheckoutError) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return;\n                }\n\n                return executePaymentMethodCheckoutError;\n            },\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        },\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        },\n    );\n\n    const isExecutingPaymentMethodCheckout = createSelector(\n        (state: CustomerStrategyState) => state.statuses.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isExecutingPaymentMethodCheckout,\n        (executePaymentMethodCheckoutMethodId, isExecutingPaymentMethodCheckout) =>\n            (methodId?: string) => {\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                    return false;\n                }\n\n                return !!isExecutingPaymentMethodCheckout;\n            },\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: CustomerStrategyState = DEFAULT_STATE): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getExecutePaymentMethodCheckoutError: getExecutePaymentMethodCheckoutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (\n    state: GiftCertificateState,\n) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        (data) => () => data,\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        (status) => () => status,\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: GiftCertificateState = DEFAULT_STATE): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\nimport { createSelector } from '../../common/selector';\nimport { guard } from '../../common/utility';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getCardInstrumentOrThrow(instrumentId: string): CardInstrument;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway\n                ? `${paymentMethod.gateway}.${paymentMethod.id}`\n                : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        },\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) =>\n            (instrumentId: string) => {\n                const cards = values(supportedInstruments);\n\n                return instruments.find(\n                    (instrument): instrument is CardInstrument =>\n                        instrument.bigpayToken === instrumentId &&\n                        instrument.type === 'card' &&\n                        cards.some((card) => isMatch(instrument, card)),\n                );\n            },\n    );\n\n    const getCardInstrumentOrThrow = createSelector(\n        getCardInstrument,\n        (getCardInstrument) => (instrumentId: string) => {\n            return guard(\n                getCardInstrument(instrumentId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentInstrument),\n            );\n        },\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments) => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, (supportedProvider) =>\n                filter(\n                    instruments,\n                    (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                        return isMatch(instrument, supportedProvider);\n                    },\n                ),\n            );\n\n            return allSupportedInstruments;\n        },\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        },\n    );\n\n    return memoizeOne((state: InstrumentState = DEFAULT_STATE): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getCardInstrumentOrThrow: getCardInstrumentOrThrow(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getCustomerAccountFields(): FormField[];\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.shippingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) =>\n            (countries: Country[] = [], countryCode: string) => {\n                const selectedCountry = find(countries, { code: countryCode });\n                const fields = formFields ? formFields.billingAddress : [];\n\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\n            },\n    );\n\n    const getCustomerAccountFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        (formFields) => () => formFields ? formFields.customerAccount : [],\n    );\n\n    const getLoadError = createSelector(\n        (state: FormFieldsState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: FormFieldsState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    function processField(\n        field: FormField,\n        countries: Country[],\n        selectedCountry?: Country,\n    ): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(\n        field: FormField,\n        countries: Country[] = [],\n        country?: Country,\n    ): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((state: FormFieldsState = DEFAULT_STATE): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => () => paymentMethods,\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        (paymentMethods) => (methodId: string, gatewayId?: string) => {\n            return gatewayId\n                ? find(paymentMethods, { id: methodId, gateway: gatewayId })\n                : find(paymentMethods, { id: methodId });\n        },\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        (getPaymentMethod) => (methodId: string, gatewayId?: string) => {\n            return guard(\n                getPaymentMethod(methodId, gatewayId),\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod),\n            );\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        (loadError) => () => loadError,\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        (isLoading) => () => !!isLoading,\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        },\n    );\n\n    return memoizeOne((state: PaymentMethodState = DEFAULT_STATE): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (\n    state: PaymentStrategyState,\n) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        },\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        },\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        },\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: PaymentStrategyState = DEFAULT_STATE): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { objectFlatten, objectWithSortedKeys } from '../common/utility';\n\nimport { PickupOptionResult, SearchArea } from './pickup-option';\nimport PickupOptionState, { DEFAULT_STATE } from './pickup-option-state';\n\nexport default interface PickupOptionSelector {\n    getPickupOptions(\n        consignmentId: string,\n        searchArea: SearchArea,\n    ): PickupOptionResult[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type PickupOptionSelectorFactory = (state: PickupOptionState) => PickupOptionSelector;\n\nexport function createPickupOptionSelectorFactory(): PickupOptionSelectorFactory {\n    const getPickupOptions = createSelector(\n        (state: PickupOptionState) => state.data,\n        (pickupOptions) => (consignmentId: string, searchArea: SearchArea) => {\n            if (!pickupOptions) {\n                return;\n            }\n\n            const flattenedParams = objectFlatten({ consignmentId, searchArea });\n            const sortedFlattenedParams = objectWithSortedKeys(flattenedParams);\n            const keyString = btoa(`${JSON.stringify(sortedFlattenedParams)}`);\n\n            return pickupOptions[keyString];\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: PickupOptionState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: PickupOptionState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: PickupOptionState = DEFAULT_STATE): PickupOptionSelector => {\n        return {\n            getPickupOptions: getPickupOptions(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (\n    state: ShippingCountryState,\n) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        (data) => () => data,\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        (status) => () => !!status,\n    );\n\n    return memoizeOne((state: ShippingCountryState = DEFAULT_STATE): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (\n    state: ShippingStrategyState,\n) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        },\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        },\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        },\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        },\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        },\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        },\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        },\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        (data) => (methodId: string) => {\n            return !!(data[methodId] && data[methodId].isInitialized);\n        },\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        },\n    );\n\n    return memoizeOne((state: ShippingStrategyState = DEFAULT_STATE): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { AddressRequestBody, isAddressEqual } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentsOrThrow(): Consignment[];\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector,\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => consignments,\n    );\n\n    const getConsignmentsOrThrow = createSelector(getConsignments, (getConsignments) => () => {\n        return guard(\n            getConsignments(),\n            () => new MissingDataError(MissingDataErrorType.MissingConsignments),\n        );\n    });\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        },\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, (consignment) =>\n                isAddressEqual(consignment.shippingAddress, address),\n            );\n        },\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        (consignments) => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        (error) => () => error,\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        (error) => () => error,\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[],\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                (item) => assignedLineItemIds.indexOf(item.id as string) < 0,\n            );\n        },\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        (updateError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        },\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        (deleteError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        },\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) =>\n            (address: AddressRequestBody) => {\n                const consignment = getConsignmentByAddress(address);\n\n                return consignment ? getUpdateError(consignment.id) : getCreateError();\n            },\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        (updateShippingOptionError) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        },\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        (isLoadingShippingOptions) => () => isLoadingShippingOptions === true,\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        (isCreating) => () => isCreating === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        (isUpdating) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        },\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        (isDeleting) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        },\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        },\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        (isUpdatingShippingOption) => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        },\n    );\n\n    return memoizeOne(\n        (state: ConsignmentState = DEFAULT_STATE, cart: CartSelector): ConsignmentSelector => {\n            return {\n                getConsignments: getConsignments(state),\n                getConsignmentsOrThrow: getConsignmentsOrThrow(state),\n                getConsignmentById: getConsignmentById(state),\n                getConsignmentByAddress: getConsignmentByAddress(state),\n                getShippingOption: getShippingOption(state),\n                getLoadError: getLoadError(state),\n                getCreateError: getCreateError(state),\n                getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n                getUnassignedItems: getUnassignedItems(state, { cart }),\n                getUpdateError: getUpdateError(state),\n                getDeleteError: getDeleteError(state),\n                getItemAssignmentError: getItemAssignmentError(state),\n                getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n                isLoading: isLoading(state),\n                isLoadingShippingOptions: isLoadingShippingOptions(state),\n                isCreating: isCreating(state),\n                isUpdating: isUpdating(state),\n                isDeleting: isDeleting(state),\n                isAssigningItems: isAssigningItems(state),\n                isUpdatingShippingOption: isUpdatingShippingOption(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector,\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) =>\n            billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) =>\n            consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) =>\n            giftCertificates.getGiftCertificates,\n        (\n                data,\n                getBillingAddress,\n                getCart,\n                getCustomer,\n                getConsignments,\n                getCoupons,\n                getGiftCertificates,\n            ) =>\n            () => {\n                const billingAddress = getBillingAddress();\n                const cart = getCart();\n                const customer = getCustomer();\n                const consignments = getConsignments() || [];\n                const coupons = getCoupons() || [];\n                const giftCertificates = getGiftCertificates() || [];\n\n                if (!data || !cart || !customer) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    cart,\n                    customer,\n                    consignments,\n                    coupons,\n                    giftCertificates,\n                };\n            },\n    );\n\n    const getCheckoutOrThrow = createSelector(getCheckout, (getCheckout) => () => {\n        return guard(\n            getCheckout(),\n            () => new MissingDataError(MissingDataErrorType.MissingCheckout),\n        );\n    });\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        (getCheckout) => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit\n                ? Math.max(grandTotal - storeCredit, 0)\n                : checkout.outstandingBalance;\n        },\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        (isExecutingSpamCheck) => () => isExecutingSpamCheck === true,\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        (isLoading) => () => isLoading === true,\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        (isUpdating) => () => isUpdating === true,\n    );\n\n    return memoizeOne(\n        (\n            state: CheckoutState = DEFAULT_STATE,\n            billingAddress: BillingAddressSelector,\n            cart: CartSelector,\n            consignments: ConsignmentSelector,\n            coupons: CouponSelector,\n            customer: CustomerSelector,\n            giftCertificates: GiftCertificateSelector,\n        ): CheckoutSelector => {\n            return {\n                getCheckout: getCheckout(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getOutstandingBalance: getOutstandingBalance(state, {\n                    billingAddress,\n                    cart,\n                    consignments,\n                    coupons,\n                    customer,\n                    giftCertificates,\n                }),\n                getLoadError: getLoadError(state),\n                getUpdateError: getUpdateError(state),\n                isExecutingSpamCheck: isExecutingSpamCheck(state),\n                isLoading: isLoading(state),\n                isUpdating: isUpdating(state),\n            };\n        },\n    );\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    getPaymentId(methodId: string): string | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector,\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) =>\n            billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) =>\n            () => {\n                if (!data || !billingAddress) {\n                    return;\n                }\n\n                return {\n                    ...data,\n                    billingAddress,\n                    coupons,\n                };\n            },\n    );\n\n    const getOrderOrThrow = createSelector(getOrder, (getOrder) => () => {\n        return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n    });\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        (meta) => () => meta,\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        (error) => () => error,\n    );\n\n    const getPaymentId = createSelector(\n        (state: OrderState) => state.data?.payments,\n        (payments = []) =>\n            (methodId: string) => {\n                const currentPayment = payments.find(({ providerId }) => providerId === methodId);\n\n                return currentPayment?.paymentId;\n            },\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        (status) => () => status,\n    );\n\n    return memoizeOne(\n        (\n            state: OrderState = DEFAULT_STATE,\n            billingAddress: BillingAddressSelector,\n            coupons: CouponSelector,\n        ): OrderSelector => {\n            return {\n                getOrder: getOrder(state, { billingAddress, coupons }),\n                getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n                getOrderMeta: getOrderMeta(state),\n                getLoadError: getLoadError(state),\n                getPaymentId: getPaymentId(state),\n                isLoading: isLoading(state),\n            };\n        },\n    );\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        (error) => () => error,\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: StoreCreditState = DEFAULT_STATE): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        (error) => () => error,\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        (status) => () => status,\n    );\n\n    return memoizeOne((state: SubscriptionsState = DEFAULT_STATE): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions,\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(createCheckoutStoreReducer(), initialState, {\n        actionTransformer,\n        stateTransformer,\n        ...options,\n    });\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach((type) => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register(\n        'invalid_payment_provider',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n    factory.register(\n        'payment_config_not_found',\n        (response) => new PaymentMethodInvalidError(response),\n    );\n\n    return factory;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory,\n): (action: Subscribable<Action>) => Observable<Action> {\n    return (action$) =>\n        from(action$).pipe(\n            catchError<Action, never>((action) => {\n                if (action instanceof Error || action.payload instanceof Error) {\n                    throw action;\n                }\n\n                if (isResponse(action.payload)) {\n                    const message = action.payload.body && action.payload.body.detail;\n\n                    throw {\n                        ...action,\n                        payload: requestErrorFactory.createError(action.payload, message),\n                    };\n                }\n\n                throw action;\n            }),\n        );\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every((key) =>\n        Object.prototype.hasOwnProperty.call(object, key),\n    );\n}\n","import { Action, combineReducers, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { formFieldsReducer } from '../form';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport {\n    consignmentReducer,\n    pickupOptionReducer,\n    shippingCountryReducer,\n    shippingStrategyReducer,\n} from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        formFields: formFieldsReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        pickupOptions: pickupOptionReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/bigpay-client\");","// / <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        (state) => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        (state) => state.config.getStoreConfig(),\n    );\n\n    return paymentClient;\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(fn: TFunction): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize((store) => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>,\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","export interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nexport default function isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { filter } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    LoadPaymentMethodAction,\n    LoadPaymentMethodsAction,\n    PaymentMethodActionType,\n} from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport { isApplePayWindow } from './strategies/apple-pay';\n\nimport { PaymentMethod } from '.';\n\nconst APPLEPAYID = 'applepay';\n\nexport default class PaymentMethodActionCreator {\n    constructor(private _requestSender: PaymentMethodRequestSender) {}\n\n    loadPaymentMethods(\n        options?: RequestOptions,\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n                const state = store.getState();\n                const cart = state.cart.getCartOrThrow();\n\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n                this._requestSender\n                    .loadPaymentMethods({\n                        ...options,\n                        params: { ...options?.params, cartId: cart.id },\n                    })\n                    .then((response) => {\n                        const meta = {\n                            deviceSessionId: response.headers['x-device-session-id'],\n                            sessionHash: response.headers['x-session-hash'],\n                        };\n                        const methods = response.body;\n                        const filteredMethods = Array.isArray(methods)\n                            ? this._filterApplePay(methods)\n                            : methods;\n\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\n                                filteredMethods,\n                                meta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    @cachableAction\n    loadPaymentMethod(\n        methodId: string,\n        options?: RequestOptions & ActionOptions,\n    ): ThunkAction<LoadPaymentMethodAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n                const state = store.getState();\n                const cartId = state.cart.getCart()?.id;\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\n\n                observer.next(\n                    createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, {\n                        methodId,\n                    }),\n                );\n\n                this._requestSender\n                    .loadPaymentMethod(methodId, { ...options, params })\n                    .then((response) => {\n                        observer.next(\n                            createAction(\n                                PaymentMethodActionType.LoadPaymentMethodSucceeded,\n                                response.body,\n                                { methodId },\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                PaymentMethodActionType.LoadPaymentMethodFailed,\n                                response,\n                                { methodId },\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _filterApplePay(methods: PaymentMethod[]): PaymentMethod[] {\n        return filter(methods, (method) => {\n            if (method.id === APPLEPAYID && !isApplePayWindow(window)) {\n                return false;\n            }\n\n            return true;\n        });\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadPaymentMethods({ timeout, params }: RequestOptions = {}): Promise<\n        Response<PaymentMethod[]>\n    > {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n\n    loadPaymentMethod(\n        methodId: string,\n        { timeout, params }: RequestOptions = {},\n    ): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            params,\n        });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/script-loader\");","import { Action, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, Observable, of, throwError } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta,\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message || 'Unable to continue as a guest because the customer is already signed in.',\n        );\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport {\n    BillingAddressActionType,\n    ContinueAsGuestAction,\n    UpdateBillingAddressAction,\n} from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nimport { BillingAddressRequestSender } from '.';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator,\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions,\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options,\n                        );\n\n                        return createAction(\n                            BillingAddressActionType.ContinueAsGuestSucceeded,\n                            body,\n                        );\n                    }),\n                ).pipe(\n                    catchError((error) =>\n                        throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error),\n                    ),\n                ),\n                this._updateCustomerConsent(credentials, options),\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n                const billingAddress = state.billingAddress.getBillingAddress();\n\n                // If email is not present in the address provided by the client, then\n                // fall back to the stored email as it could have been set separately\n                // using a convenience method. We can't rely on billingAddress having\n                // an ID to consider that there's a preexisting email, as billingAddress\n                // object from Order doesn't have an ID.\n                const billingAddressRequestBody = {\n                    ...address,\n                    email:\n                        typeof address.email === 'undefined' && billingAddress\n                            ? billingAddress.email\n                            : address.email,\n                };\n\n                if (billingAddress && billingAddress.id) {\n                    billingAddressRequestBody.id = billingAddress.id;\n                }\n\n                this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                BillingAddressActionType.UpdateBillingAddressSucceeded,\n                                body,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                BillingAddressActionType.UpdateBillingAddressFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _updateCustomerConsent(\n        { email, acceptsAbandonedCartEmails, acceptsMarketingNewsletter }: GuestCredentials,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        if (\n            (acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)\n        ) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions(\n            {\n                email,\n                acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n                acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n            },\n            options,\n        );\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions,\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createAddress(\n        checkoutId: string,\n        address: Partial<AddressRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: address,\n            params: DEFAULT_PARAMS,\n            headers,\n            timeout,\n        });\n    }\n\n    updateAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { FormFieldsActionCreator } from '../form';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator,\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({\n                    ...options,\n                    useCache: true,\n                    params: { ...options?.params, checkoutId: id },\n                }),\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                defer(() =>\n                    this._checkoutRequestSender\n                        .loadCheckout(id, options)\n                        .then(({ body }) =>\n                            createAction(CheckoutActionType.LoadCheckoutSucceeded, body),\n                        ),\n                ),\n            ),\n        ).pipe(\n            catchError((error) => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error)),\n        );\n    }\n\n    loadDefaultCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n                merge(\n                    this._configActionCreator.loadConfig(),\n                    this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                ),\n                defer(async () => {\n                    const state = store.getState();\n                    const context = state.config.getContextConfig();\n\n                    if (!context || !context.checkoutId) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                    }\n\n                    const { body } = await this._checkoutRequestSender.loadCheckout(\n                        context.checkoutId,\n                        options,\n                    );\n\n                    return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n                }),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\n                ),\n            );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return (store) =>\n            new Observable((observer) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n                this._checkoutRequestSender\n                    .updateCheckout(checkout.id, body, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(CheckoutActionType.UpdateCheckoutSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response),\n                        );\n                    });\n            });\n    }\n\n    loadCurrentCheckout(\n        options?: RequestOptions,\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = [],\n): string {\n    return Array.isArray(includeDictionaryOrList)\n        ? joinIncludes([...baseIncludes, ...includeDictionaryOrList])\n        : mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean },\n): string {\n    const deletions = keys(pickBy(includesDictionary, (on) => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([...difference(baseIncludes, deletions), ...additions]);\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadCheckout(\n        id: string,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender\n            .get<Checkout>(url, {\n                params: {\n                    include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n                },\n                headers,\n                timeout,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    updateCheckout(\n        id: string,\n        body: CheckoutRequestBody,\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(this._normalize(cartA), this._normalize(cartB));\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map((item) => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\n                            `${itemB.productId}${itemB.variantId}`,\n                        ),\n                    )\n                    .map((item) => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { ComparableCheckout } from '../../checkout';\nimport { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    /**\n     * @alpha\n     * Please note that this option is currently in an early stage of\n     * development. Therefore the API is unstable and not ready for public\n     * consumption.\n     */\n    data: { previous: ComparableCheckout; updated: ComparableCheckout };\n\n    constructor(previous: ComparableCheckout, updated: ComparableCheckout) {\n        super(\n            'An update to your shopping cart has been detected and your available shipping costs have been updated.',\n        );\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n        this.data = {\n            previous,\n            updated,\n        };\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { Cart, CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport type ComparableCheckout = Pick<\n    Checkout,\n    'outstandingBalance' | 'coupons' | 'giftCertificates'\n> & {\n    cart: Partial<Cart>;\n};\n\nexport default class CheckoutValidator {\n    constructor(private _checkoutRequestSender: CheckoutRequestSender) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options).then((response) => {\n            const comparator = new CartComparator();\n\n            if (\n                checkout.outstandingBalance === response.body.outstandingBalance &&\n                this._compareCoupons(checkout.coupons, response.body.coupons) &&\n                this._compareGiftCertificates(\n                    checkout.giftCertificates,\n                    response.body.giftCertificates,\n                ) &&\n                comparator.isEqual(checkout.cart, response.body.cart)\n            ) {\n                return;\n            }\n\n            throw new CartChangedError(\n                this._getComparableCheckout(checkout),\n                this._getComparableCheckout(response.body),\n            );\n        });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(\n        giftCertificatesA: GiftCertificate[],\n        giftCertificatesB: GiftCertificate[],\n    ): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n\n    private _getComparableCheckout(checkout: Checkout): ComparableCheckout {\n        const { cart, coupons, giftCertificates, outstandingBalance } = checkout;\n\n        return {\n            cart: {\n                cartAmount: cart.cartAmount,\n                currency: cart.currency,\n                lineItems: cart.lineItems,\n            },\n            coupons,\n            giftCertificates,\n            outstandingBalance,\n        };\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nimport { ConfigRequestSender } from '.';\n\nexport default class ConfigActionCreator {\n    constructor(private _configRequestSender: ConfigRequestSender) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender\n                .loadConfig(options)\n                .then((response) => {\n                    observer.next(\n                        createAction(ConfigActionType.LoadConfigSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutNotAvailableError } from '../checkout/errors';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadConfig({ timeout, params }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender\n            .get<Config>(url, {\n                timeout,\n                headers: {\n                    Accept: ContentType.JsonV1,\n                    'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    ...SDK_VERSION_HEADERS,\n                },\n                params,\n            })\n            .catch((error) => {\n                if (error.status >= 400 && error.status < 500) {\n                    throw new CheckoutNotAvailableError(error);\n                }\n\n                throw error;\n            });\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { ActionOptions, cachableAction } from '../common/data-store';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsRequestSender from './form-fields-request-sender';\n\nexport default class FormFieldsActionCreator {\n    constructor(private _formFieldsRequestSender: FormFieldsRequestSender) {}\n\n    @cachableAction\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\n        return concat(\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\n            defer(async () => {\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\n\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((response) =>\n                throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { FormFields } from './form-field';\n\nexport default class FormFieldsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\n        const url = '/api/storefront/form-fields';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { StandardError } from '../../error/errors';\n\nexport default class UnexpectedDetachmentError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the required element is unexpectedly detached from the page.',\n        );\n\n        this.name = 'UnexpectedDetachmentError';\n        this.type = 'unexpected_detachment';\n    }\n}\n","import { CancellablePromise } from '../utility';\n\nimport { UnexpectedDetachmentError } from './errors';\nimport { MutationObserverFactory } from './mutation-observer';\n\nexport default class DetachmentObserver {\n    constructor(private _mutationObserver: MutationObserverFactory) {}\n\n    async ensurePresence<T>(targets: Node[], promise: Promise<T>): Promise<T> {\n        const cancellable = new CancellablePromise(promise);\n\n        const observer = this._mutationObserver.create((mutationsList) => {\n            mutationsList.forEach((mutation) => {\n                const removedTargets = Array.from(mutation.removedNodes).filter((node) =>\n                    targets.some((target) => node === target || node.contains(target)),\n                );\n\n                if (removedTargets.length === 0) {\n                    return;\n                }\n\n                cancellable.cancel(new UnexpectedDetachmentError());\n            });\n        });\n\n        observer.observe(document.body, { childList: true, subtree: true });\n\n        try {\n            const output = await cancellable.promise;\n\n            observer.disconnect();\n\n            return output;\n        } catch (error) {\n            observer.disconnect();\n\n            throw error;\n        }\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new (callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(private _window: MutationObserverWindow = window as MutationObserverWindow) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port =\n        anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ? anchor.port : '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? `:${port}` : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType,\n): object is TEvent {\n    return object.type === type;\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<\n    TSuccessEvent extends IframeEvent,\n    TErrorEvent extends IframeEvent,\n> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(targetOrigin: string, private _targetWindow?: Window) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent>;\n    post<\n        TSuccessEvent extends IframeEvent = IframeEvent,\n        TErrorEvent extends IframeEvent = IframeEvent,\n    >(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\n    ): Promise<TSuccessEvent> | void {\n        const targetWindow = this._targetWindow;\n\n        if (window === targetWindow) {\n            return;\n        }\n\n        if (!targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result =\n            options &&\n            fromEvent<MessageEvent>(window, 'message')\n                .pipe(\n                    filter(\n                        (event) =>\n                            event.origin === this._targetOrigin &&\n                            isIframeEvent(event.data, event.data.type) &&\n                            [options.successType, options.errorType].indexOf(event.data.type) !==\n                                -1,\n                    ),\n                    map((event) => {\n                        if (options.errorType === event.data.type) {\n                            throw event.data;\n                        }\n\n                        return event.data;\n                    }),\n                    take(1),\n                )\n                .toPromise();\n\n        targetWindow.postMessage(event, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { appendWww, parseUrl } from '../url';\nimport { bindDecorator as bind } from '../utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigins: string[];\n\n    constructor(sourceOrigin: string) {\n        this._sourceOrigins = [\n            parseUrl(sourceOrigin).origin,\n            appendWww(parseUrl(sourceOrigin)).origin,\n        ];\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType]) => void,\n    ): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(\n        type: TType,\n        listener: (event: TEventMap[TType]) => void,\n    ): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach((listener) => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if (\n            this._sourceOrigins.indexOf(event.origin) === -1 ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","import parseUrl from './parse-url';\nimport Url from './url';\n\nexport default function appendWww(url: Url): Url {\n    return parseUrl(\n        url.hostname.indexOf('www') === 0\n            ? url.href\n            : url.href.replace(url.hostname, `www.${url.hostname}`),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam protection challenge. Please try again.\");\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class CardingProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('Please complete our human verification challenge and try again.');\n\n        this.name = 'CardingProtectionChallengeNotCompletedError';\n        this.type = 'carding_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class CardingProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to verify that you are not a robot. Please try again.');\n\n        this.name = 'CardingProtectionFailedError';\n        this.type = 'carding_protection_failed';\n    }\n}\n","import { switchMap, take } from 'rxjs/operators';\n\nimport { RequestError } from '../common/error/errors';\nimport { PaymentAdditionalAction } from '../payment';\n\nimport {\n    CardingProtectionChallengeNotCompletedError,\n    CardingProtectionFailedError,\n    SpamProtectionChallengeNotCompletedError,\n} from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\n\nexport default class PaymentHumanVerificationHandler {\n    constructor(private _googleRecaptcha: GoogleRecaptcha) {}\n\n    handle(error: Error): Promise<PaymentAdditionalAction>;\n    handle(id: string, key: string): Promise<PaymentAdditionalAction>;\n    async handle(errorOrId: Error | string, key?: string): Promise<PaymentAdditionalAction> {\n        if (typeof errorOrId === 'string') {\n            return this.handleWithRecaptchaSitekey(errorOrId, key);\n        }\n\n        return this.handleWithPaymentHumanVerificationRequestError(errorOrId);\n    }\n\n    private async handleWithPaymentHumanVerificationRequestError(\n        error: Error,\n    ): Promise<PaymentAdditionalAction> {\n        if (!this._isPaymentHumanVerificationRequest(error)) {\n            throw error;\n        }\n\n        await this._initialize(error.body.additional_action_required.data.key);\n\n        return this._performRecaptcha();\n    }\n\n    private async handleWithRecaptchaSitekey(\n        id: string,\n        key?: string,\n    ): Promise<PaymentAdditionalAction> {\n        if (id !== 'recaptcha_v2') {\n            throw Error('Human verification method is not supported.');\n        }\n\n        if (!key) {\n            throw Error('Recaptcha site key is missing.');\n        }\n\n        await this._initialize(key);\n\n        return this._performRecaptcha();\n    }\n\n    private _performRecaptcha(): Promise<PaymentAdditionalAction> {\n        return this._googleRecaptcha\n            .execute()\n            .pipe(take(1))\n            .pipe(\n                switchMap(async ({ error, token }) => {\n                    if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                        throw new CardingProtectionChallengeNotCompletedError();\n                    }\n\n                    if (error || !token) {\n                        throw new CardingProtectionFailedError();\n                    }\n\n                    return {\n                        type: 'recaptcha_v2_verification',\n                        data: {\n                            human_verification_token: token,\n                        },\n                    };\n                }),\n            )\n            .toPromise();\n    }\n\n    private _initialize(recaptchaSitekey: string): Promise<void> {\n        const cardingProtectionElementId = 'cardingProtectionContainer';\n\n        let cardingProtectionElement = document.getElementById(cardingProtectionElementId);\n\n        if (cardingProtectionElement && cardingProtectionElement.parentNode) {\n            cardingProtectionElement.parentNode.removeChild(cardingProtectionElement);\n        }\n\n        cardingProtectionElement = document.createElement('div');\n        cardingProtectionElement.setAttribute('id', cardingProtectionElementId);\n        document.body.appendChild(cardingProtectionElement);\n\n        return this._googleRecaptcha.load(cardingProtectionElementId, recaptchaSitekey);\n    }\n\n    private _isPaymentHumanVerificationRequest(error: Error): error is RequestError {\n        const { additional_action_required, status } = (error as RequestError).body || {};\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'recaptcha_v2_verification'\n        );\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport {\n    SpamProtectionChallengeNotCompletedError,\n    SpamProtectionFailedError,\n    SpamProtectionNotLoadedError,\n} from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nconst TIMEOUT = 7000;\nconst RETRY_INTERVAL = 250;\nconst MAX_RETRIES = TIMEOUT / RETRY_INTERVAL;\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (\n        recaptcha: ReCaptchaV2.ReCaptcha,\n        sitekey: string,\n        container: HTMLElement | null,\n    ) => Subject<RecaptchaResult>;\n    private _widgetId?: number;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory,\n    ) {\n        this._memoized = memoize(\n            (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n                const event$ = new Subject<RecaptchaResult>();\n\n                if (!container) {\n                    throw new Error();\n                }\n\n                this._widgetId = recaptcha.render(container.id, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(this._widgetId),\n                        });\n                        recaptcha.reset(this._widgetId);\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                return event$;\n            },\n            { isEqual: (a, b) => a === b },\n        );\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader.load().then((recaptcha) => {\n            if (recaptcha) {\n                this._event$ = this._memoized(\n                    recaptcha,\n                    sitekey,\n                    document.getElementById(containerId),\n                );\n                this._recaptcha = recaptcha;\n            }\n        });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        return defer(() => {\n            const event$ = this._event$;\n            const recaptcha = this._recaptcha;\n\n            if (!event$ || !recaptcha) {\n                throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n            }\n\n            return defer(() => {\n                const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n                return element ? of(element) : throwError(new SpamProtectionNotLoadedError());\n            }).pipe(\n                retryWhen((errors) =>\n                    errors.pipe(\n                        delay(RETRY_INTERVAL),\n                        switchMap((error, index) =>\n                            index < MAX_RETRIES ? of(error) : throwError(error),\n                        ),\n                    ),\n                ),\n                switchMap((element) => {\n                    this._watchRecaptchaChallengeWindow(event$, element);\n                    recaptcha.execute(this._widgetId);\n\n                    return event$;\n                }),\n                catchError((error) => of({ error })),\n            );\n        });\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory\n            .create(() => {\n                // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n                if (container.style.visibility === 'hidden') {\n                    event.next({\n                        error: new SpamProtectionChallengeNotCompletedError(),\n                    });\n                }\n            })\n            .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha | undefined>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window,\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\n        const callbackName = 'initRecaptcha';\n        const params = [`onload=${callbackName}`, 'render=explicit'].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader\n                .loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch((error) => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader): GoogleRecaptcha {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory(),\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed due to invalid configuration provided for the hosted payment form.',\n        );\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\n\n        this.name = 'InvalidHostedFormError';\n        this.type = 'invalid_hosted_form';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(public errors: HostedInputValidateErrorDataMap) {\n        super(\n            [\n                'Unable to proceed due to invalid user input values',\n                ...flatMap(values(errors), (fieldErrors) =>\n                    map(fieldErrors, ({ message }) => message),\n                ),\n            ].join('. '),\n        );\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n}\n\nexport type HostedFieldEvent =\n    | HostedFieldAttachEvent\n    | HostedFieldSubmitRequestEvent\n    | HostedFieldValidateRequestEvent;\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        origin?: string;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorData, PaymentErrorResponseBody } from '../../common/error';\nimport HostedFieldType from '../hosted-field-type';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n}\n\n// Events\nexport type HostedInputEvent =\n    | HostedInputAttachSuccessEvent\n    | HostedInputAttachErrorEvent\n    | HostedInputBinChangeEvent\n    | HostedInputBlurEvent\n    | HostedInputChangeEvent\n    | HostedInputCardTypeChangeEvent\n    | HostedInputEnterEvent\n    | HostedInputFocusEvent\n    | HostedInputSubmitSuccessEvent\n    | HostedInputSubmitErrorEvent\n    | HostedInputValidateEvent;\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n    payload: {\n        response: Response<unknown>;\n    };\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import { values } from 'lodash';\nimport { fromEvent } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { DetachmentObserver } from '../common/dom';\nimport { mapFromPaymentErrorResponse } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { parseUrl } from '../common/url';\nimport { CardInstrument } from '../payment/instrument';\n\nimport {\n    InvalidHostedFormConfigError,\n    InvalidHostedFormError,\n    InvalidHostedFormValueError,\n} from './errors';\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport {\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputSubmitErrorEvent,\n    HostedInputSubmitSuccessEvent,\n    HostedInputValidateEvent,\n} from './iframe-content';\n\nexport const RETRY_INTERVAL = 60 * 1000;\nexport const LAST_RETRY_KEY = 'lastRetry';\n\nexport default class HostedField {\n    private _iframe: HTMLIFrameElement;\n\n    constructor(\n        private _type: HostedFieldType,\n        private _containerId: string,\n        private _placeholder: string,\n        private _accessibilityLabel: string,\n        private _styles: HostedFieldStylesMap,\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _detachmentObserver: DetachmentObserver,\n        private _cardInstrument?: CardInstrument,\n    ) {\n        this._iframe = document.createElement('iframe');\n\n        this._iframe.src = `/checkout/payment/hosted-field?version=${LIBRARY_VERSION}`;\n        this._iframe.style.border = 'none';\n        this._iframe.style.height = '100%';\n        this._iframe.style.overflow = 'hidden';\n        this._iframe.style.width = '100%';\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    async attach(): Promise<void> {\n        const container = document.getElementById(this._containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the provided container ID is not valid.',\n            );\n        }\n\n        container.appendChild(this._iframe);\n        this._eventListener.listen();\n\n        const promise = fromEvent(this._iframe, 'load')\n            .pipe(\n                switchMap(async ({ target }) => {\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\n\n                    if (!contentWindow) {\n                        throw new Error('The content window of the iframe cannot be accessed.');\n                    }\n\n                    this._eventPoster.setTarget(contentWindow);\n\n                    await this._eventPoster.post(\n                        {\n                            type: HostedFieldEventType.AttachRequested,\n                            payload: {\n                                accessibilityLabel: this._accessibilityLabel,\n                                cardInstrument: this._cardInstrument,\n                                fontUrls: this._getFontUrls(),\n                                placeholder: this._placeholder,\n                                styles: this._styles,\n                                origin: document.location.origin,\n                                type: this._type,\n                            },\n                        },\n                        {\n                            successType: HostedInputEventType.AttachSucceeded,\n                            errorType: HostedInputEventType.AttachFailed,\n                        },\n                    );\n                }),\n                take(1),\n            )\n            .toPromise();\n\n        await this._detachmentObserver.ensurePresence([this._iframe], promise);\n    }\n\n    detach(): void {\n        if (!this._iframe.parentElement) {\n            return;\n        }\n\n        this._iframe.parentElement.removeChild(this._iframe);\n        this._eventListener.stopListen();\n    }\n\n    async submitForm(\n        fields: HostedFieldType[],\n        data: HostedFormOrderData,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            const promise = this._eventPoster.post<HostedInputSubmitSuccessEvent>(\n                {\n                    type: HostedFieldEventType.SubmitRequested,\n                    payload: { fields, data },\n                },\n                {\n                    successType: HostedInputEventType.SubmitSucceeded,\n                    errorType: HostedInputEventType.SubmitFailed,\n                },\n            );\n\n            return await this._detachmentObserver.ensurePresence([this._iframe], promise);\n        } catch (event) {\n            if (this._isSubmitErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.response) {\n                    throw mapFromPaymentErrorResponse(event.payload.response);\n                }\n\n                throw new Error(event.payload.error.message);\n            }\n\n            throw event;\n        }\n    }\n\n    async validateForm(): Promise<void> {\n        const promise = this._eventPoster.post<HostedInputValidateEvent>(\n            {\n                type: HostedFieldEventType.ValidateRequested,\n            },\n            {\n                successType: HostedInputEventType.Validated,\n            },\n        );\n\n        const { payload } = await this._detachmentObserver.ensurePresence([this._iframe], promise);\n\n        if (!payload.isValid) {\n            throw new InvalidHostedFormValueError(payload.errors);\n        }\n    }\n\n    private _getFontUrls(): string[] {\n        const hostname = 'fonts.googleapis.com';\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\n\n        return Array.prototype.slice\n            .call(links)\n            .filter((link) => parseUrl(link.href).hostname === hostname)\n            .filter((link) =>\n                values(this._styles)\n                    .map((style) => style && style.fontFamily)\n                    .filter((family): family is string => typeof family === 'string')\n                    .some((family) =>\n                        family\n                            .split(/,\\s/)\n                            .some((name) => link.href.indexOf(name.replace(' ', '+')) !== -1),\n                    ),\n            )\n            .map((link) => link.href);\n    }\n\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\n        return event.type === HostedInputEventType.SubmitFailed;\n    }\n}\n","import { noop, without } from 'lodash';\n\nimport { HostedForm as HostedFormInterface } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { IframeEventListener } from '../common/iframe';\nimport { OrderPaymentRequestBody } from '../order';\nimport { PaymentAdditionalAction } from '../payment';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport { InvalidHostedFormConfigError } from './errors';\nimport HostedField from './hosted-field';\nimport HostedFormOptions from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\nimport {\n    HostedInputEnterEvent,\n    HostedInputEventMap,\n    HostedInputEventType,\n    HostedInputSubmitSuccessEvent,\n} from './iframe-content';\n\ntype HostedFormEventCallbacks = Pick<\n    HostedFormOptions,\n    'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onEnter' | 'onValidate'\n>;\n\nexport default class HostedForm implements HostedFormInterface {\n    private _bin?: string;\n    private _cardType?: string;\n\n    constructor(\n        private _fields: HostedField[],\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _payloadTransformer: HostedFormOrderDataTransformer,\n        private _eventCallbacks: HostedFormEventCallbacks,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {\n        const {\n            onBlur = noop,\n            onCardTypeChange = noop,\n            onFocus = noop,\n            onValidate = noop,\n        } = this._eventCallbacks;\n\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) =>\n            onBlur(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) =>\n            onCardTypeChange(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) =>\n            onFocus(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) =>\n            onValidate(payload),\n        );\n        this._eventListener.addListener(HostedInputEventType.Entered, this._handleEnter);\n\n        this._eventListener.addListener(\n            HostedInputEventType.CardTypeChanged,\n            ({ payload }) => (this._cardType = payload.cardType),\n        );\n        this._eventListener.addListener(\n            HostedInputEventType.BinChanged,\n            ({ payload }) => (this._bin = payload.bin),\n        );\n    }\n\n    getBin(): string | undefined {\n        return this._bin;\n    }\n\n    getCardType(): string | undefined {\n        return this._cardType;\n    }\n\n    async attach(): Promise<void> {\n        this._eventListener.listen();\n\n        const field = this._getFirstField();\n        const otherFields = without(this._fields, field);\n\n        await field.attach();\n        await Promise.all(otherFields.map((otherField) => otherField.attach()));\n    }\n\n    detach(): void {\n        this._eventListener.stopListen();\n\n        this._fields.forEach((field) => {\n            field.detach();\n        });\n    }\n\n    async submit(\n        payload: OrderPaymentRequestBody,\n        additionalActionData?: PaymentAdditionalAction,\n    ): Promise<HostedInputSubmitSuccessEvent> {\n        try {\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalActionData),\n            );\n        } catch (error) {\n            const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n            return await this._getFirstField().submitForm(\n                this._fields.map((field) => field.getType()),\n                this._payloadTransformer.transform(payload, additionalAction),\n            );\n        }\n    }\n\n    async validate(): Promise<void> {\n        return this._getFirstField().validateForm();\n    }\n\n    private _getFirstField(): HostedField {\n        const field = this._fields[0];\n\n        if (!field) {\n            throw new InvalidHostedFormConfigError(\n                'Unable to proceed because the payment form has no field defined.',\n            );\n        }\n\n        return field;\n    }\n\n    private _handleEnter: (event: HostedInputEnterEvent) => Promise<void> = async ({ payload }) => {\n        try {\n            await this.validate();\n        } catch (error) {\n            // Catch form validation error because we want to trigger `onEnter`\n            // irrespective of the validation result.\n            if (error.name !== 'InvalidHostedFormValueError') {\n                throw error;\n            }\n        }\n\n        const { onEnter = noop } = this._eventCallbacks;\n\n        onEnter(payload);\n    };\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrument,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import { omit } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { OrderPaymentRequestBody } from '../order';\nimport {\n    HostedCreditCardInstrument,\n    isVaultedInstrument,\n    PaymentAdditionalAction,\n} from '../payment';\n\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport default class HostedFormOrderDataTransformer {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    transform(\n        payload: OrderPaymentRequestBody,\n        additionalAction?: PaymentAdditionalAction,\n    ): HostedFormOrderData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const order = state.order.getOrder();\n        const orderMeta = state.order.getOrderMeta();\n        const payment = omit(\n            payload.paymentData,\n            'ccExpiry',\n            'ccName',\n            'ccNumber',\n            'ccCvv',\n        ) as HostedCreditCardInstrument;\n        const paymentMethod = state.paymentMethods.getPaymentMethod(\n            payload.methodId,\n            payload.gatewayId,\n        );\n        const paymentMethodMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const authToken =\n            instrumentMeta && payment && isVaultedInstrument(payment)\n                ? `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment,\n            paymentMethod,\n            paymentMethodMeta,\n        };\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\nimport { pick } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { DetachmentObserver, MutationObserverFactory } from '../common/dom';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { CardInstrument } from '../payment/instrument';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport HostedField from './hosted-field';\nimport HostedFieldType from './hosted-field-type';\nimport HostedForm from './hosted-form';\nimport HostedFormOptions, {\n    HostedCardFieldOptionsMap,\n    HostedStoredCardFieldOptionsMap,\n} from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\n\nexport default class HostedFormFactory {\n    constructor(private _store: ReadableCheckoutStore) {}\n\n    create(host: string, options: HostedFormOptions): HostedForm {\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\n            const fields = options.fields as HostedStoredCardFieldOptionsMap &\n                HostedCardFieldOptionsMap;\n            const fieldOptions = fields[type];\n\n            if (!fieldOptions) {\n                return result;\n            }\n\n            return [\n                ...result,\n                new HostedField(\n                    type,\n                    fieldOptions.containerId,\n                    fieldOptions.placeholder || '',\n                    fieldOptions.accessibilityLabel || '',\n                    options.styles || {},\n                    new IframeEventPoster(host),\n                    new IframeEventListener(host),\n                    new DetachmentObserver(new MutationObserverFactory()),\n                    'instrumentId' in fieldOptions\n                        ? this._getCardInstrument(fieldOptions.instrumentId)\n                        : undefined,\n                ),\n            ];\n        }, []);\n\n        return new HostedForm(\n            fields,\n            new IframeEventListener(host),\n            new HostedFormOrderDataTransformer(this._store),\n            pick(options, 'onBlur', 'onEnter', 'onFocus', 'onCardTypeChange', 'onValidate'),\n            new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n        );\n    }\n\n    private _getCardInstrument(instrumentId: string): CardInstrument {\n        const {\n            instruments: { getCardInstrument },\n        } = this._store.getState();\n        const instrument = getCardInstrument(instrumentId);\n\n        if (!instrument) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentInstrument);\n        }\n\n        return instrument;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super(\"You haven't complete our spam check. Please try again.\");\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, Observable, Observer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport {\n    FinalizeOrderAction,\n    LoadOrderAction,\n    LoadOrderPaymentsAction,\n    OrderActionType,\n    SubmitOrderAction,\n} from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender\n                .loadOrder(orderId, options)\n                .then((response) => {\n                    observer.next(\n                        createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response),\n                    );\n                });\n        });\n    }\n\n    loadCurrentOrder(\n        options?: RequestOptions,\n    ): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            defer(() => {\n                const orderId = this._getCurrentOrderId(store.getState());\n\n                if (!orderId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n                }\n\n                return this.loadOrder(orderId, options);\n            });\n    }\n\n    submitOrder(\n        payload?: OrderRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(OrderActionType.SubmitOrderRequested)),\n                defer(() => {\n                    const state = store.getState();\n                    const externalSource = state.config.getExternalSource();\n                    const variantIdentificationToken = state.config.getVariantIdentificationToken();\n                    const checkout = state.checkout.getCheckout();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    if (checkout.shouldExecuteSpamCheck) {\n                        throw new SpamProtectionNotCompletedError();\n                    }\n\n                    return from(\n                        this._checkoutValidator.validate(checkout, options).then(() =>\n                            this._orderRequestSender.submitOrder(\n                                this._mapToOrderRequestBody(\n                                    payload ?? {},\n                                    checkout.id,\n                                    checkout.customerMessage,\n                                    externalSource,\n                                ),\n                                {\n                                    ...options,\n                                    headers: {\n                                        checkoutVariant: variantIdentificationToken,\n                                    },\n                                },\n                            ),\n                        ),\n                    ).pipe(\n                        switchMap((response) =>\n                            concat(\n                                // TODO: Remove once we can submit orders using storefront API\n                                this.loadOrder(response.body.data.order.orderId, options),\n                                of(\n                                    createAction(\n                                        OrderActionType.SubmitOrderSucceeded,\n                                        response.body.data,\n                                        { ...response.body.meta, token: response.headers.token },\n                                    ),\n                                ),\n                            ),\n                        ),\n                    );\n                }).pipe(\n                    catchError((error) =>\n                        throwErrorAction(OrderActionType.SubmitOrderFailed, error),\n                    ),\n                ),\n            );\n    }\n\n    finalizeOrder(\n        orderId: number,\n        options?: RequestOptions,\n    ): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options)).pipe(\n                switchMap((response) =>\n                    concat(\n                        this.loadOrder(orderId, options),\n                        of(\n                            createAction(\n                                OrderActionType.FinalizeOrderSucceeded,\n                                response.body.data,\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ).pipe(catchError((error) => throwErrorAction(OrderActionType.FinalizeOrderFailed, error)));\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        cartId: string,\n        customerMessage: string,\n        externalSource?: string,\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                cartId,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            cartId,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Checkout prevents consumers from placing their orders when a merchant wishes\n * to be able to block transactions if the automated tax provider cannot be reached.\n */\nexport default class OrderTaxProviderUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The tax provider is unavailable.');\n\n        this.name = 'OrderTaxProviderUnavailableError';\n        this.type = 'tax_provider_unavailable';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    ContentType,\n    joinIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { OrderTaxProviderUnavailableError } from './errors';\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport interface SubmitOrderRequestOptions extends RequestOptions {\n    headers?: {\n        checkoutVariant?: string;\n    };\n}\n\nexport default class OrderRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    loadOrder(\n        orderId: number,\n        { timeout, params }: RequestOptions<OrderParams> = {},\n    ): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([...include, ...((params && params.include) || [])]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(\n        body?: InternalOrderRequestBody,\n        { headers, timeout }: SubmitOrderRequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender\n            .post<InternalOrderResponseBody>(url, {\n                body,\n                headers: omitBy(\n                    {\n                        'X-Checkout-Variant': headers && headers.checkoutVariant,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                    isNil,\n                ),\n                timeout,\n            })\n            .catch((error) => {\n                if (error.body.type === 'tax_provider_unavailable') {\n                    throw new OrderTaxProviderUnavailableError();\n                }\n\n                throw error;\n            });\n    }\n\n    finalizeOrder(\n        orderId: number,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport Payment, {\n    FormattedHostedInstrument,\n    FormattedPayload,\n    FormattedVaultedInstrument,\n} from './payment';\nimport {\n    InitializeOffsitePaymentAction,\n    PaymentActionType,\n    SubmitPaymentAction,\n} from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\ninterface InitializeOffsitePaymentSettings {\n    methodId: string;\n    gatewayId?: string;\n    instrumentId?: string;\n    target?: string;\n    promise?: Promise<undefined>;\n    shouldSaveInstrument?: boolean;\n    shouldSetAsDefaultInstrument?: boolean;\n}\n\ntype InitializeOffsitePayment = (\n    settings: InitializeOffsitePaymentSettings,\n) => ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors>;\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            concat(\n                of(createAction(PaymentActionType.SubmitPaymentRequested)),\n                defer(async () => {\n                    try {\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(payment, store.getState()),\n                        );\n                    } catch (error) {\n                        const additionalAction = await this._paymentHumanVerificationHandler.handle(\n                            error,\n                        );\n\n                        return await this._paymentRequestSender.submitPayment(\n                            this._paymentRequestTransformer.transform(\n                                { ...payment, additionalAction },\n                                store.getState(),\n                            ),\n                        );\n                    }\n                }).pipe(\n                    switchMap(({ body }) =>\n                        concat(\n                            this._orderActionCreator.loadCurrentOrder()(store),\n                            of(createAction(PaymentActionType.SubmitPaymentSucceeded, body)),\n                        ),\n                    ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.SubmitPaymentFailed, error),\n                ),\n            );\n    }\n\n    initializeOffsitePayment: InitializeOffsitePayment = ({\n        methodId,\n        gatewayId,\n        instrumentId,\n        target,\n        promise,\n        shouldSaveInstrument,\n        shouldSetAsDefaultInstrument,\n    }) => {\n        return (store) => {\n            let paymentData:\n                | FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument>\n                | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = {\n                    formattedPayload: {\n                        vault_payment_instrument: shouldSaveInstrument,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                };\n            }\n\n            const payload = this._paymentRequestTransformer.transform(\n                { gatewayId, methodId, paymentData },\n                store.getState(),\n            );\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                Promise.race(\n                    [\n                        this._paymentRequestSender.initializeOffsitePayment(payload, target),\n                        promise,\n                    ].filter(Boolean),\n                ).then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded)),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error),\n                ),\n            );\n        };\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @class\n     * @param {BigpayClient} client\n     */\n    constructor(private _client: any) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response<any> {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { BillingAddress, isBillingAddressLike } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[],\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","enum CheckoutButtonMethodType {\n    APPLEPAY = \"applepay\",\n    AMAZON_PAY_V2 = \"amazonpay\",\n    BRAINTREE_PAYPAL = \"braintreepaypal\",\n    BRAINTREE_VENMO = \"braintreevenmo\",\n    BRAINTREE_PAYPAL_CREDIT = \"braintreepaypalcredit\",\n    GOOGLEPAY_ADYENV2 = \"googlepayadyenv2\",\n    GOOGLEPAY_ADYENV3 = \"googlepayadyenv3\",\n    GOOGLEPAY_AUTHORIZENET = \"googlepayauthorizenet\",\n    GOOGLEPAY_BNZ = \"googlepaybnz\",\n    GOOGLEPAY_BRAINTREE = \"googlepaybraintree\",\n    GOOGLEPAY_CHECKOUTCOM = \"googlepaycheckoutcom\",\n    GOOGLEPAY_CYBERSOURCEV2 = \"googlepaycybersourcev2\",\n    GOOGLEPAY_ORBITAL = \"googlepayorbital\",\n    GOOGLEPAY_STRIPE = \"googlepaystripe\",\n    GOOGLEPAY_STRIPEUPE = \"googlepaystripeupe\",\n    MASTERPASS = \"masterpass\",\n    PAYPALEXPRESS = \"paypalexpress\",\n    PAYPALCOMMERCE = \"paypalcommerce\",\n    PAYPALCOMMERCE_CREDIT = \"paypalcommercecredit\",\n    PAYPALCOMMERCE_APMS = \"paypalcommercealternativemethods\",\n    PAYPALCOMMERCE_INLINE = \"paypalcommerceinline\",\n    PAYPALCOMMERCE_VENMO = \"paypalcommercevenmo\"\n}\nexport default CheckoutButtonMethodType;\n\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(\n    giftCertificate: GiftCertificate,\n): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>).reduce(\n        (result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey,\n                );\n            }),\n        ],\n        [] as InternalLineItem[],\n    );\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number,\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id',\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item[idKey] as string | number,\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map((option) => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(\n                checkout.cart.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(\n                checkout.giftCertificates,\n                (sum, certificate) => {\n                    return sum + certificate.used;\n                },\n                0,\n            ),\n            appliedGiftCertificates: keyBy(\n                checkout.giftCertificates.map(mapToInternalGiftCertificate),\n                'code',\n            ),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                checkout.shippingCostBeforeDiscount,\n            ),\n            required: some(\n                checkout.cart.lineItems.physicalItems,\n                (lineItem) => lineItem.isShippingRequired,\n            ),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(\n    promotions?: Promotion[],\n): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach((promotion) => {\n        (promotion.banners || []).forEach((banner) => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport InternalCustomer from './internal-customer';\n\nimport { Customer } from '.';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(\n    customer: Customer,\n    billingAddress: BillingAddress,\n): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map((address) => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear =\n            year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"card-validator\");","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter((gapIndex) => unformattedValue.length > gapIndex)\n            .reduce(\n                (output, gapIndex, index) =>\n                    [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(\n                        NUMBER_SEPARATOR,\n                    ),\n                unformattedValue,\n            );\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { LineItem, mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, {\n    InternalGiftCertificateList,\n    InternalIncompleteOrder,\n    InternalOrderPayment,\n    InternalSocialDataList,\n} from './internal-order';\nimport Order, {\n    GatewayOrderPayment,\n    GiftCertificateOrderPayment,\n    OrderPayment,\n    OrderPayments,\n} from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(\n    order: Order,\n    orderMeta: OrderMetaState = {},\n): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(\n                order.coupons,\n                (sum, coupon) => {\n                    return sum + coupon.discountedAmount;\n                },\n                0,\n            ),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\n                order.shippingCostBeforeDiscount,\n            ),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment\n            ? {}\n            : {\n                  id: payment.providerId,\n                  gateway: payment.gatewayId,\n                  status: mapToInternalPaymentStatus(payment.detail.step),\n              },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, {\n        providerId: 'giftcertificate',\n    }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(\n            items.map((item) => ({\n                code: item.detail.code,\n                discountedAmount: item.amount,\n                remainingBalance: item.detail.remaining,\n                giftCertificate: {\n                    balance: item.amount + item.detail.remaining,\n                    code: item.detail.code,\n                    purchaseDate: '',\n                },\n            })),\n            'code',\n        ),\n    };\n}\n\nfunction mapToInternalOrderPayment(\n    payments?: OrderPayments,\n    payment: InternalOrderPayment = {},\n): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(\n    order: Order,\n): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [...order.lineItems.physicalItems, ...order.lineItems.digitalItems];\n\n    items.forEach((item) => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item =\n            lineItem.socialMedia && find(lineItem.socialMedia, (item) => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(\n    option: ShippingOption,\n    isSelected: boolean,\n): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { pick } from 'lodash';\n\nimport { Address, mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { CheckoutButtonMethodType } from '../checkout-buttons/strategies';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport {\n    CardExpiryFormatter,\n    CardNumberFormatter,\n    HostedInputValues,\n} from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, {\n    HostedCreditCardInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrument,\n} from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(\n            payment.methodId,\n            payment.gatewayId,\n        );\n        const shippingAddress = this._mapShippingAddress(checkoutState, paymentMethod);\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer =\n            customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken =\n            instrumentMeta &&\n            payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) ||\n                isFormattedVaultedInstrument(payment.paymentData))\n                ? `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\n                : checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(\n        values: HostedInputValues,\n        data: HostedFormOrderData,\n        nonce: string,\n    ): PaymentRequestBody {\n        const {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment = {},\n            paymentMethod,\n            paymentMethodMeta,\n        } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            additionalAction,\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer:\n                order &&\n                order.billingAddress &&\n                checkout &&\n                mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress:\n                order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress:\n                shippingAddress &&\n                checkout &&\n                mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment, nonce),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store:\n                config &&\n                pick(config.storeConfig.storeProfile, [\n                    'storeHash',\n                    'storeId',\n                    'storeLanguage',\n                    'storeName',\n                ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        if (paymentMethod.id === CheckoutButtonMethodType.BRAINTREE_VENMO) {\n            return { ...paymentMethod, id: CheckoutButtonMethodType.BRAINTREE_PAYPAL };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(\n        values: HostedInputValues,\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\n        nonce: string,\n    ): PaymentInstrument {\n        return 'instrumentId' in payment\n            ? {\n                  ...payment,\n                  ccCvv: values.cardCodeVerification,\n                  ccNumber:\n                      values.cardNumberVerification &&\n                      this._cardNumberFormatter.unformat(values.cardNumberVerification),\n                  hostedFormNonce: nonce,\n              }\n            : {\n                  ...payment,\n                  ccCvv: values.cardCode,\n                  ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                  ccName: values.cardName || '',\n                  ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n                  hostedFormNonce: nonce,\n              };\n    }\n\n    private _mapShippingAddress(\n        checkoutState: InternalCheckoutSelectors,\n        paymentMethod?: PaymentMethod,\n    ): Address | undefined {\n        if (paymentMethod) {\n            const isBopisEnabled = paymentMethod.initializationData?.bopis?.enabled;\n            const requiredAddress = paymentMethod.initializationData?.bopis?.requiredAddress;\n            const consignments = checkoutState.consignments.getConsignments();\n            const isPickup = consignments?.every((consignment) => consignment.selectedPickupOption);\n\n            if (isBopisEnabled && isPickup && requiredAddress === 'none') {\n                return undefined;\n            }\n        }\n\n        return checkoutState.shippingAddress.getShippingAddress();\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport {\n    CheckoutIncludes,\n    CheckoutParams,\n    CheckoutRequestSender,\n    InternalCheckoutSelectors,\n    ReadableCheckoutStore,\n} from '../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentAssignmentBaseRequestBodyWithAddress,\n    ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentsRequestBody,\n    ConsignmentUpdateRequestBody,\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender,\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart(),\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment(\n                {\n                    id: existingConsignment.id,\n                    address,\n                    lineItems,\n                },\n                options,\n            )(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const state = store.getState();\n            const address = this._consignmentHasAddress(consignment)\n                ? consignment.address\n                : consignment.shippingAddress;\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\n\n            return this._createOrUpdateConsignment(\n                {\n                    id: existingConsignment && existingConsignment.id,\n                    address,\n                    lineItems: this._addLineItems(\n                        consignment.lineItems,\n                        existingConsignment,\n                        state.cart.getCart(),\n                    ),\n                },\n                options,\n            )(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n                const consignments = state.consignments.getConsignments();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!consignments || !consignments.length) {\n                    throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n                }\n\n                const consignmentUpdateBody = {\n                    id: consignments[0].id,\n                    shippingOptionId: id,\n                };\n\n                const consignmentMeta = {\n                    id: consignments[0].id,\n                };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignmentUpdateBody, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    loadShippingOptions(\n        options?: RequestOptions,\n    ): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n                this._checkoutRequestSender\n                    .loadCheckout(checkout.id, {\n                        ...options,\n                        params: {\n                            include: [CheckoutIncludes.AvailableShippingOptions],\n                        },\n                    })\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.LoadShippingOptionsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n                this._consignmentRequestSender\n                    .createConsignments(checkout.id, consignments, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.CreateConsignmentsFailed,\n                                response,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions,\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n                const consignmentMeta = { id: consignmentId };\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.DeleteConsignmentRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .deleteConsignment(checkout.id, consignmentId, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.DeleteConsignmentSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.DeleteConsignmentFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions,\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return (store) =>\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n                const checkout = store.getState().checkout.getCheckout();\n\n                if (!checkout || !checkout.id) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const consignmentMeta = { id: consignment.id };\n\n                observer.next(\n                    createAction(\n                        ConsignmentActionType.UpdateShippingOptionRequested,\n                        undefined,\n                        consignmentMeta,\n                    ),\n                );\n\n                this._consignmentRequestSender\n                    .updateConsignment(checkout.id, consignment, options)\n                    .then(({ body }) => {\n                        observer.next(\n                            createAction(\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\n                                body,\n                                consignmentMeta,\n                            ),\n                        );\n                        observer.complete();\n                    })\n                    .catch((response) => {\n                        observer.error(\n                            createErrorAction(\n                                ConsignmentActionType.UpdateShippingOptionFailed,\n                                response,\n                                consignmentMeta,\n                            ),\n                        );\n                    });\n            });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>,\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        address: AddressRequestBody,\n        store: ReadableCheckoutStore,\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            address,\n            lineItems: [...physicalItems, ...customItems].map((item) => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart)\n            .map((existingItem) => {\n                const sharedItem = find(\n                    lineItems,\n                    (lineItem) => lineItem.itemId === existingItem.itemId,\n                );\n\n                return {\n                    ...existingItem,\n                    quantity: sharedItem\n                        ? existingItem.quantity - sharedItem.quantity\n                        : existingItem.quantity,\n                };\n            })\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart,\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter((lineItem) => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map((itemId) => {\n            const item = find(cart.lineItems.physicalItems, (lineItem) => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody,\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n\n    private _consignmentHasAddress(\n        consignment:\n            | ConsignmentAssignmentBaseRequestBodyWithAddress\n            | ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\n    ): consignment is ConsignmentAssignmentBaseRequestBodyWithAddress {\n        return typeof consignment === 'object' && 'address' in consignment;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport {\n    ContentType,\n    joinIncludes,\n    joinOrMergeIncludes,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n    'consignments.availableShippingOptions',\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'promotions.banners',\n];\n\nexport default class ConsignmentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport {\n    Subscriptions,\n    SubscriptionsActionType,\n    SubscriptionsRequestSender,\n    UpdateSubscriptionsAction,\n} from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(private _subscriptionsRequestSender: SubscriptionsRequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions,\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(\n                    subscriptions,\n                    options,\n                );\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    SubscriptionsActionType.UpdateSubscriptionsFailed,\n                    new UpdateSubscriptionsError(error),\n                ),\n            ),\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        // Fixed in later versions of typescript https://github.com/microsoft/TypeScript/issues/36390\n        return (input as any[]).map((value: T[keyof T]) => cloneDeepSafe(value)) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>).reduce(\n            (result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }),\n            {},\n        ) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ? cloneDeep(input) : input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { cloneResult as clone } from '../common/utility';\n\nexport default function createPaymentIntegrationSelectors({\n    billingAddress: { getBillingAddress, getBillingAddressOrThrow },\n    cart: { getCart, getCartOrThrow },\n    checkout: { getCheckout, getCheckoutOrThrow },\n    config: { getHost, getLocale, getStoreConfig, getStoreConfigOrThrow },\n    consignments: { getConsignments, getConsignmentsOrThrow },\n    customer: { getCustomer, getCustomerOrThrow },\n    instruments: { getCardInstrument, getCardInstrumentOrThrow },\n    order: { getOrder, getOrderOrThrow },\n    payment: {\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        isPaymentDataRequired,\n    },\n    paymentMethods: { getPaymentMethod, getPaymentMethodOrThrow },\n    paymentStrategies: { isInitialized: isPaymentMethodInitialized },\n    shippingAddress: { getShippingAddress, getShippingAddressOrThrow },\n}: InternalCheckoutSelectors): PaymentIntegrationSelectors {\n    return {\n        getHost: clone(getHost),\n        getLocale: clone(getLocale),\n        getBillingAddress: clone(getBillingAddress),\n        getBillingAddressOrThrow: clone(getBillingAddressOrThrow),\n        getCart: clone(getCart),\n        getCartOrThrow: clone(getCartOrThrow),\n        getCheckout: clone(getCheckout),\n        getCheckoutOrThrow: clone(getCheckoutOrThrow),\n        getStoreConfig: clone(getStoreConfig),\n        getStoreConfigOrThrow: clone(getStoreConfigOrThrow),\n        getConsignments: clone(getConsignments),\n        getConsignmentsOrThrow: clone(getConsignmentsOrThrow),\n        getCustomer: clone(getCustomer),\n        getCustomerOrThrow: clone(getCustomerOrThrow),\n        getCardInstrument: clone(getCardInstrument),\n        getCardInstrumentOrThrow: clone(getCardInstrumentOrThrow),\n        getOrder: clone(getOrder),\n        getOrderOrThrow: clone(getOrderOrThrow),\n        getPaymentToken,\n        getPaymentTokenOrThrow,\n        getPaymentId,\n        getPaymentIdOrThrow,\n        getPaymentStatus,\n        getPaymentStatusOrThrow,\n        getPaymentRedirectUrl,\n        getPaymentRedirectUrlOrThrow,\n        getPaymentMethod: clone(getPaymentMethod),\n        getPaymentMethodOrThrow: clone(getPaymentMethodOrThrow),\n        getShippingAddress: clone(getShippingAddress),\n        getShippingAddressOrThrow: clone(getShippingAddressOrThrow),\n        isPaymentDataRequired,\n        isPaymentMethodInitialized,\n    };\n}\n","import {\n    BillingAddressRequestBody,\n    HostedForm,\n    HostedFormOptions,\n    OrderRequestBody,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    RequestOptions,\n    ShippingAddressRequestBody,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator } from '../billing';\nimport { CheckoutActionCreator, CheckoutStore } from '../checkout';\nimport { DataStoreProjection } from '../common/data-store';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator } from '../order';\nimport PaymentActionCreator from '../payment/payment-action-creator';\nimport PaymentMethodActionCreator from '../payment/payment-method-action-creator';\nimport { ConsignmentActionCreator } from '../shipping';\n\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default class DefaultPaymentIntegrationService implements PaymentIntegrationService {\n    private _storeProjection: DataStoreProjection<PaymentIntegrationSelectors>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _storeProjectionFactory: PaymentIntegrationStoreProjectionFactory,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _hostedFormFactory: HostedFormFactory,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n    ) {\n        this._storeProjection = this._storeProjectionFactory.create(this._store);\n    }\n\n    createHostedForm(host: string, options: HostedFormOptions): HostedForm {\n        return this._hostedFormFactory.create(host, options);\n    }\n\n    subscribe(\n        subscriber: (state: PaymentIntegrationSelectors) => void,\n        ...filters: Array<(state: PaymentIntegrationSelectors) => unknown>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    getState(): PaymentIntegrationSelectors {\n        return this._storeProjection.getState();\n    }\n\n    async loadCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout());\n\n        return this._storeProjection.getState();\n    }\n\n    async loadDefaultCheckout(): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        return this._storeProjection.getState();\n    }\n\n    async loadPaymentMethod(methodId: string): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitOrder(payload?: OrderRequestBody): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._orderActionCreator.submitOrder(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async submitPayment(payment: Payment): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n\n        return this._storeProjection.getState();\n    }\n\n    async finalizeOrder(): Promise<PaymentIntegrationSelectors> {\n        const {\n            order: { getOrderOrThrow },\n        } = this._store.getState();\n\n        await this._store.dispatch(\n            this._orderActionCreator.finalizeOrder(getOrderOrThrow().orderId),\n        );\n\n        return this._storeProjection.getState();\n    }\n\n    async updateBillingAddress(\n        payload: BillingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async updateShippingAddress(\n        payload: ShippingAddressRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(payload));\n\n        return this._storeProjection.getState();\n    }\n\n    async selectShippingOption(\n        id: string,\n        options?: RequestOptions,\n    ): Promise<PaymentIntegrationSelectors> {\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(id, options),\n        );\n\n        return this._storeProjection.getState();\n    }\n}\n","import { Action, createAction, createDataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState>\n    extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: ReadableDataStore<TState>,\n    stateTransformer: (state: TState) => TTransformedState,\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<\n        TState | undefined,\n        SynchronizeAction<TState>,\n        TTransformedState\n    >(\n        (state, action) =>\n            action.type === ProjectionActionType.Synchronize ? action.payload : state,\n        store.getState(),\n        { stateTransformer },\n    );\n\n    store.subscribe(\n        (state) => {\n            projection.dispatch(\n                createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>,\n            );\n        },\n        { initial: false },\n    );\n\n    return projection;\n}\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\n\nexport default class PaymentIntegrationStoreProjectionFactory {\n    constructor(\n        private _transformSelectors: (\n            selectors: InternalCheckoutSelectors,\n        ) => PaymentIntegrationSelectors,\n    ) {}\n\n    create(store: ReadableCheckoutStore): DataStoreProjection<PaymentIntegrationSelectors> {\n        return createDataStoreProjection(store, this._transformSelectors);\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"shallowequal\");","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return Object.prototype.hasOwnProperty.call(map, 'parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport {\n    ChildCacheKeyMap,\n    IntermediateCacheKeyMap,\n    isRootCacheKeyMap,\n    isTerminalCacheKeyMap,\n    RootCacheKeyMap,\n    TerminalCacheKeyMap,\n} from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if (\n                    (args.length === 0 || index === args.length - 1) &&\n                    isTerminalCacheKeyMap(map)\n                ) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(\n        parent: RootCacheKeyMap | IntermediateCacheKeyMap,\n        args: any[],\n    ): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(index === -1 ? 0 : index, index === -1 ? 0 : 1, recentlyUsedMap);\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, CacheKeyResolver, isEqual, isPrivate } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            selectorMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: (key) => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(\n    selectors: InternalCheckoutSelectors,\n): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator,\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe((state) => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            (state) => state.checkoutButton.getState(),\n            ...filters.map(\n                (filter) => (state: InternalCheckoutSelectors) =>\n                    filter(createCheckoutButtonSelectors(state)),\n            ),\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId)\n            ? [options.containerId]\n            : setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map((containerId) => {\n                const action = this._buttonStrategyActionCreator.initialize({\n                    ...options,\n                    containerId,\n                });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            }),\n        ).then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId }).then(() => this.getState());\n    }\n}\n","/* eslint-disable no-useless-escape */\nexport default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(\n            `Unable to find any element with the specified selector: ${selector}`,\n        );\n    }\n\n    return Array.prototype.slice.call(containers).map((container: HTMLElement) => {\n        if (!container.id) {\n            container.id = uniqueId(idPrefix);\n        }\n\n        return container.id;\n    });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutButtonStrategy as CheckoutButtonStrategyV2 } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport {\n    CheckoutButtonActionType,\n    DeinitializeButtonAction,\n    InitializeButtonAction,\n} from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonRegistryV2 from './checkout-button-strategy-registry-v2';\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _registryV2: CheckoutButtonRegistryV2,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n    ) {}\n\n    initialize(\n        options: CheckoutButtonInitializeOptions,\n    ): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = {\n                methodId: options.methodId,\n                containerId: options.containerId,\n            };\n\n            if (\n                store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)\n            ) {\n                return empty();\n            }\n\n            const paymentMethodRequestParams = options.currencyCode\n                ? { params: { currencyCode: options.currencyCode } }\n                : {};\n\n            const paymentMethodRequestOptions = {\n                ...paymentMethodRequestParams,\n                timeout: options.timeout,\n                useCache: true,\n            };\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.InitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                this._paymentMethodActionCreator.loadPaymentMethod(\n                    options.methodId,\n                    paymentMethodRequestOptions,\n                )(store),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .initialize(options)\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.InitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta),\n                ),\n            );\n        };\n    }\n\n    deinitialize(\n        options: CheckoutButtonOptions,\n    ): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return (store) => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(\n                    createAction(\n                        CheckoutButtonActionType.DeinitializeButtonRequested,\n                        undefined,\n                        meta,\n                    ),\n                ),\n                defer(() =>\n                    this._getStrategy(options.methodId)\n                        .deinitialize()\n                        .then(() =>\n                            createAction(\n                                CheckoutButtonActionType.DeinitializeButtonSucceeded,\n                                undefined,\n                                meta,\n                            ),\n                        ),\n                ),\n            ).pipe(\n                catchError((error) =>\n                    throwErrorAction(\n                        CheckoutButtonActionType.DeinitializeButtonFailed,\n                        error,\n                        meta,\n                    ),\n                ),\n            );\n        };\n    }\n\n    private _getStrategy(\n        methodId: CheckoutButtonMethodType,\n    ): CheckoutButtonStrategy | CheckoutButtonStrategyV2 {\n        let strategy: CheckoutButtonStrategy | CheckoutButtonStrategyV2;\n\n        try {\n            strategy = this._registryV2.get({ id: methodId });\n        } catch {\n            strategy = this._registry.get(methodId);\n        }\n\n        return strategy;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport BuyNowCartRequestBody from './buy-now-cart-request-body';\nimport Cart from './cart';\n\nexport default class CartRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createBuyNowCart(\n        body: BuyNowCartRequestBody,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<Cart>> {\n        const url = '/api/storefront/carts';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Factory from './factory';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _defaultToken: string;\n    private _useFallback: string | boolean;\n    private _tokenResolver: (token: string, registeredTokens: string[]) => string | undefined;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._defaultToken = options?.defaultToken ?? 'default';\n        this._useFallback = options?.useFallback ?? true;\n        this._tokenResolver = options?.tokenResolver ?? ((token) => token);\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._defaultToken,\n                cacheToken || token || this._defaultToken,\n            );\n        } catch (error) {\n            if (!this._useFallback) {\n                throw error;\n            }\n\n            return this._getInstance(this._defaultToken, cacheToken || this._defaultToken);\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const resolvedToken = this._tokenResolver(token, Object.keys(this._factories));\n            const factory = resolvedToken && this._factories[resolvedToken];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport interface RegistryOptions {\n    defaultToken?: string;\n    useFallback?: boolean;\n    tokenResolver?(token: string, registeredTokens: string[]): string | undefined;\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\n}\n","import { InternalCheckoutSelectors } from '../../../../../core/src/checkout';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    Pay: AmazonPayV2Client;\n}\n\nexport interface AmazonPayV2Button {\n    /**\n     * Allows you to define custom actions.\n     */\n    onClick: (callback: () => void) => void;\n\n    /**\n     * Initiates the Amazon Pay checkout.\n     */\n    initCheckout(requestConfig: {\n        createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\n    }): void;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\ninterface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * It does not have to match the final order amount if the buyer updates\n     * their order after starting checkout. Amazon Pay will use this value to\n     * assess transaction risk and prevent buyers from selecting payment methods\n     * that can't be used to process the order.\n     */\n    estimatedOrderAmount?: AmazonPayV2Price;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport interface AmazonPayV2Price {\n    /**\n     * Transaction amount.\n     */\n    amount: string;\n\n    /**\n     * Transaction currency code in ISO 4217 format. Example: USD.\n     */\n    currencyCode: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport enum AmazonPayV2Regions {\n    de = 'eu',\n    jp = 'fe',\n    uk = 'eu',\n    us = 'na',\n}\n\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n\nexport interface AmazonPayV2ButtonRenderingOptions {\n    checkoutState: InternalCheckoutSelectors;\n    containerId: string;\n    decoupleCheckoutInitiation?: boolean;\n    methodId: string;\n    options?: AmazonPayV2ButtonParameters;\n    placement: AmazonPayV2Placement;\n}\n","import { PaymentMethod } from '../..';\nimport { InternalCheckoutSelectors } from '../../../../../core/src/checkout';\nimport { getShippableItemsCount } from '../../../../../core/src/shipping';\nimport { guard } from '../../../../src/common/utility';\nimport { StoreProfile } from '../../../../src/config';\nimport { CheckoutSettings } from '../../../../src/config/config';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\n\nimport {\n    AmazonPayV2Button,\n    AmazonPayV2ButtonColor,\n    AmazonPayV2ButtonParameters,\n    AmazonPayV2ButtonRenderingOptions,\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2NewButtonParams,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n    AmazonPayV2SDK,\n} from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private _amazonPayV2SDK?: AmazonPayV2SDK;\n    private _buttonParentContainer?: HTMLDivElement;\n    private _amazonPayV2Button?: AmazonPayV2Button;\n\n    constructor(private _amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader) {}\n\n    async initialize(paymentMethod: PaymentMethod): Promise<void> {\n        this._amazonPayV2SDK = await this._amazonPayV2ScriptLoader.load(paymentMethod);\n        this._buttonParentContainer =\n            this._buttonParentContainer || this._createAmazonPayButtonParentContainer();\n    }\n\n    deinitialize(): Promise<void> {\n        this._amazonPayV2Button = undefined;\n        this._buttonParentContainer?.remove();\n        this._buttonParentContainer = undefined;\n        this._amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n    ): void {\n        this._getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\n        this._amazonPayV2Button = this._getAmazonPayV2SDK().Pay.renderButton(\n            `#${containerId}`,\n            options,\n        );\n    }\n\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>): void {\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\n\n        const requestConfig = {\n            createCheckoutSessionConfig: this._isEnvironmentSpecific(publicKeyId)\n                ? signedPayload\n                : createCheckoutSessionConfig,\n        };\n\n        this._getAmazonPayV2Button().onClick(() =>\n            this._getAmazonPayV2Button().initCheckout(requestConfig),\n        );\n    }\n\n    async signout(): Promise<void> {\n        if (this._amazonPayV2SDK) {\n            this._amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton({\n        checkoutState,\n        containerId,\n        decoupleCheckoutInitiation = false,\n        methodId,\n        options,\n        placement,\n    }: AmazonPayV2ButtonRenderingOptions): HTMLDivElement {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render the Amazon Pay button to an invalid HTML container element.',\n            );\n        }\n\n        const { id: parentContainerId } = container.appendChild(this._getButtonParentContainer());\n\n        const amazonPayV2ButtonOptions =\n            options ??\n            this._getAmazonPayV2ButtonOptions(\n                checkoutState,\n                methodId,\n                placement,\n                decoupleCheckoutInitiation,\n            );\n\n        this.createButton(parentContainerId, amazonPayV2ButtonOptions);\n\n        return this._getButtonParentContainer();\n    }\n\n    /**\n     * @internal\n     */\n    isPh4Enabled(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        const isPh4Enabled = !!features['PROJECT-3483.amazon_pay_ph4'];\n        const isPh4UsOnly = !!features['INT-6885.amazon_pay_ph4_us_only'];\n\n        if (isPh4Enabled && isPh4UsOnly) {\n            return storeCountryCode === 'US';\n        }\n\n        return isPh4Enabled;\n    }\n\n    private _createAmazonPayButtonParentContainer(): HTMLDivElement {\n        const uid = Math.random().toString(16).substr(-4);\n        const parentContainer = document.createElement('div');\n\n        parentContainer.id = `amazonpay_button_parent_container_${uid}`;\n\n        return parentContainer;\n    }\n\n    private _getAmazonPayV2ButtonOptions(\n        {\n            cart: { getCart },\n            checkout: { getCheckout },\n            config: { getStoreConfigOrThrow },\n            paymentMethods: { getPaymentMethodOrThrow },\n        }: InternalCheckoutSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        decoupleCheckoutInitiation = false,\n    ): AmazonPayV2ButtonParameters {\n        const {\n            config: { merchantId, testMode },\n            initializationData: {\n                checkoutLanguage,\n                checkoutSessionMethod,\n                createCheckoutSessionConfig,\n                extractAmazonCheckoutSessionId,\n                ledgerCurrency,\n                publicKeyId,\n            },\n        } = getPaymentMethodOrThrow(methodId);\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath, storeCountryCode },\n        } = getStoreConfigOrThrow();\n\n        const cart = getCart();\n\n        if (!merchantId || !ledgerCurrency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            productType:\n                cart && getShippableItemsCount(cart) === 0\n                    ? AmazonPayV2PayOptions.PayOnly\n                    : AmazonPayV2PayOptions.PayAndShip,\n            placement,\n            buttonColor: AmazonPayV2ButtonColor.Gold,\n        };\n\n        if (this.isPh4Enabled(features, storeCountryCode)) {\n            const amount = getCheckout()?.outstandingBalance.toString();\n            const currencyCode = cart?.currency.code;\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\n\n            if (this._isEnvironmentSpecific(publicKeyId)) {\n                buttonOptions.publicKeyId = publicKeyId;\n                tmpConfig = createCheckoutSessionConfig;\n            } else {\n                buttonOptions.sandbox = !!testMode;\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\n            }\n\n            if (!decoupleCheckoutInitiation) {\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\n            }\n\n            if (amount && currencyCode) {\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\n            }\n\n            return buttonOptions;\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: features['INT-5826.amazon_relative_url']\n                ? `/remote-checkout/${methodId}/payment-session`\n                : `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private _isEnvironmentSpecific(publicKeyId: string): boolean {\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\n    }\n\n    private _getAmazonPayV2SDK(): AmazonPayV2SDK {\n        return this._getOrThrow(this._amazonPayV2SDK);\n    }\n\n    private _getButtonParentContainer(): HTMLDivElement {\n        return this._getOrThrow(this._buttonParentContainer);\n    }\n\n    private _getAmazonPayV2Button(): AmazonPayV2Button {\n        return this._getOrThrow(this._amazonPayV2Button);\n    }\n\n    private _getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { AmazonPayV2HostWindow, AmazonPayV2Regions, AmazonPayV2SDK } from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AmazonPayV2HostWindow = window,\n    ) {}\n\n    async load(method: PaymentMethod): Promise<AmazonPayV2SDK> {\n        const { initializationData: { region = 'us' } = {} } = method;\n\n        const amazonPayV2Region = (AmazonPayV2Regions as any)[region];\n\n        await this._scriptLoader.loadScript(\n            `https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`,\n        );\n\n        if (!this._window.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.amazon;\n    }\n}\n","import { assertApplePayWindow } from './is-apple-pay-window';\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import {\n    GooglePayBraintreeDataRequest,\n    GooglePayBraintreePaymentDataRequestV1,\n    GooglePayCreator,\n    GooglePaymentData,\n    TokenizePayload,\n} from '../googlepay';\nimport { PaypalAuthorizeData, PaypalButtonOptions, PaypalButtonRender, PaypalSDK } from '../paypal';\n\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\n/**\n *\n * Common\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string;\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\nexport interface BraintreeSDK {\n    client?: BraintreeClientCreator;\n    dataCollector?: BraintreeDataCollectorCreator;\n    googlePayment?: GooglePayCreator;\n    hostedFields?: BraintreeHostedFieldsCreator;\n    paypal?: BraintreePaypalCreator;\n    paypalCheckout?: BraintreePaypalCheckoutCreator;\n    threeDSecure?: BraintreeThreeDSecureCreator;\n    venmo?: BraintreeVenmoCheckoutCreator;\n    visaCheckout?: BraintreeVisaCheckoutCreator;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport interface BraintreeDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\nexport interface BraintreeError extends Error {\n    type: 'CUSTOMER' | 'MERCHANT' | 'NETWORK' | 'INTERNAL' | 'UNKNOWN';\n    code: string;\n    details?: unknown;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeRequestData): Promise<BraintreeTokenizeResponse>;\n    getVersion(): string | void;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeTokenizeResponse {\n    creditCards: Array<{ nonce: string }>;\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean;\n    paypal?: boolean;\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n/**\n *\n * Braintree Google Pay\n *\n */\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface GooglePayBraintreeSDK extends BraintreeModule {\n    createPaymentDataRequest(\n        request?: GooglePayBraintreeDataRequest,\n    ): GooglePayBraintreePaymentDataRequestV1;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(options: BraintreeThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    challengeRequested: boolean;\n    showLoader?: boolean;\n    addFrame(error: Error | undefined, iframe: HTMLIFrameElement): void;\n    removeFrame(): void;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\ninterface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => void): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop: boolean;\n    paymentMethodUsage: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends Window {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { PaypalHostWindow } from '../paypal';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeError,\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n    PAYPAL_COMPONENTS,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _venmoCheckout?: Promise<BraintreeVenmoCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n    private _window: PaypalHostWindow;\n\n    constructor(private _braintreeScriptLoader: BraintreeScriptLoader) {\n        this._window = window;\n    }\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader\n                .loadClient()\n                .then((client) => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    async getPaypalCheckout(\n        config: { currency: string },\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this._braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (\n            error: BraintreeError,\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n            const paypalSdkLoadConfig = {\n                currency: config.currency,\n                components: PAYPAL_COMPONENTS.toString(),\n            };\n\n            if (!this._window.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this._paypalCheckout = paypalCheckout.create(paypalCheckoutConfig, paypalCheckoutCallback);\n\n        return this._paypalCheckout;\n    }\n\n    async getVenmoCheckout(\n        onSuccess: (braintreeVenmoCheckout: BraintreeVenmoCheckout) => void,\n        onError: (error: BraintreeError | UnsupportedBrowserError) => void,\n    ): Promise<BraintreeVenmoCheckout> {\n        if (!this._venmoCheckout) {\n            const client = await this.getClient();\n\n            const venmoCheckout = await this._braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const venmoCheckoutCallback = (\n                error: BraintreeError,\n                braintreeVenmoCheckout: BraintreeVenmoCheckout,\n            ): void => {\n                if (error) {\n                    return onError(error);\n                }\n\n                if (!braintreeVenmoCheckout.isBrowserSupported()) {\n                    return onError(new UnsupportedBrowserError());\n                }\n\n                onSuccess(braintreeVenmoCheckout);\n            };\n\n            this._venmoCheckout = venmoCheckout.create(venmoCheckoutConfig, venmoCheckoutCallback);\n        }\n\n        return this._venmoCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([this.getClient(), this._braintreeScriptLoader.load3DS()]).then(\n                ([client, threeDSecure]) => threeDSecure.create({ client, version: 2 }),\n            );\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n                .then(([client, dataCollector]) =>\n                    dataCollector.create({ client, kount: true, ...options }),\n                )\n                .catch((error) => {\n                    if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                        return { deviceData: undefined, teardown: () => Promise.resolve() };\n                    }\n\n                    throw error;\n                });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ]).then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>,\n    ): Promise<BraintreeHostedFields> {\n        const [client, hostedFields] = await Promise.all([\n            this.getClient(),\n            this._braintreeScriptLoader.loadHostedFields(),\n        ]);\n\n        return hostedFields.create({ ...options, client });\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._googlePay),\n            this._teardown(this._paypalCheckout),\n            this._teardown(this._venmoCheckout),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n            this._paypalCheckout = undefined;\n            this._venmoCheckout = undefined;\n            this._visaCheckout = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ? module.then((mod) => mod.teardown()) : Promise.resolve();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nconst version = '3.81.0';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window,\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/client.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/three-d-secure.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/data-collector.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/visa-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/venmo.min.js`)\n            .then(() => {\n                if (!this._window.braintree?.venmo) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.venmo;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/google-payment.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        await this._scriptLoader.loadScript(\n            `//js.braintreegateway.com/web/${version}/js/hosted-fields.min.js`,\n        );\n\n        if (!this._window.braintree || !this._window.braintree.hostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.braintree.hostedFields;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(public error?: Error) {\n        super(\n            'Unable to synchronize your checkout details with a third party provider. Please try again later.',\n        );\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { PaymentInitializeOptions } from '../..';\nimport { Checkout, InternalCheckoutSelectors } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport {\n    BraintreeModuleCreator,\n    BraintreeVerifyPayload,\n    GooglePayBraintreeSDK,\n} from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\n\nexport interface GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n        publishableKey?: string,\n    ): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayProviderProcessor {\n    initialize(options: PaymentInitializeOptions): Promise<void>;\n    processAdditionalAction(error: unknown): Promise<InternalCheckoutSelectors>;\n}\n\nexport type GooglePayCreator = BraintreeModuleCreator<GooglePayBraintreeSDK>;\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport type GooglePayVerifyPayload = BraintreeVerifyPayload | undefined;\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new (options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    tokenFormat?: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: TokenizeType;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport enum BillingAddressFormat {\n    /*\n     * Name, country code, and postal code (default).\n     */\n    Min = 'MIN',\n    /*\n     * Name, street address, locality, region, country code, and postal code.\n     */\n    Full = 'FULL',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [\n        {\n            type: string;\n            parameters: {\n                allowedAuthMethods: string[];\n                allowedCardNetworks: string[];\n                allowPrepaidCards?: boolean;\n                billingAddressRequired?: boolean;\n                billingAddressParameters?: {\n                    format?: BillingAddressFormat;\n                    phoneNumberRequired?: boolean;\n                };\n            };\n            tokenizationSpecification?: TokenizationSpecification;\n        },\n    ];\n    transactionInfo: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","export function getFirstAndLastName(fullName: string): [string, string] {\n    const nameParts = fullName.split(' ');\n\n    if (nameParts.length === 1) {\n        return [fullName, ''];\n    }\n\n    const firstName = nameParts.slice(0, -1).join(' ');\n    const lastName = nameParts[nameParts.length - 1];\n\n    return [firstName, lastName];\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload,\n} from './googlepay';\nimport { getFirstAndLastName } from './googlepay-get-first-and-last-name';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender,\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default,\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._googlePayInitializer\n            .parseResponse(paymentData)\n            .then((tokenizePayload) => this._postForm(tokenizePayload))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(\n                this._mapGooglePayAddressToShippingAddress(shippingAddress),\n            ),\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const features = this._store.getState().config.getStoreConfig()?.checkoutSettings.features;\n        const options =\n            features && features['INT-5826.google_hostname_alias']\n                ? { params: { origin: window.location.hostname } }\n                : undefined;\n        const methodId = this._getMethodId();\n\n        return this._store\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId, options))\n            .then((state) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(\n                        checkout,\n                        paymentMethod,\n                        hasShippingAddress,\n                    ),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient\n                        .isReadyToPay({\n                            allowedPaymentMethods: [\n                                {\n                                    type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                    parameters: {\n                                        allowedAuthMethods:\n                                            paymentDataRequest.allowedPaymentMethods[0].parameters\n                                                .allowedAuthMethods,\n                                        allowedCardNetworks:\n                                            paymentDataRequest.allowedPaymentMethods[0].parameters\n                                                .allowedCardNetworks,\n                                    },\n                                },\n                            ],\n                            apiVersion: paymentDataRequest.apiVersion,\n                            apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                        })\n                        .then((response) => {\n                            if (response.result) {\n                                return;\n                            }\n\n                            throw new PaymentMethodInvalidError();\n                        });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(\n        paymentData: GooglePaymentData,\n        id: string,\n        customerEmail?: string,\n    ): BillingAddressUpdateRequestBody {\n        const fullName = paymentData.paymentMethodData.info.billingAddress.name;\n        const [firstName, lastName] = getFirstAndLastName(fullName);\n        const address1 = paymentData.paymentMethodData.info.billingAddress.address1;\n        const city = paymentData.paymentMethodData.info.billingAddress.locality;\n        const postalCode = paymentData.paymentMethodData.info.billingAddress.postalCode;\n        const countryCode = paymentData.paymentMethodData.info.billingAddress.countryCode;\n\n        if (!firstName || !address1 || !city || !postalCode || !countryCode) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        return {\n            id,\n            firstName,\n            lastName,\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1,\n            address2:\n                paymentData.paymentMethodData.info.billingAddress.address2 +\n                paymentData.paymentMethodData.info.billingAddress.address3,\n            city,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode:\n                paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode,\n            countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: customerEmail || paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        const [firstName, lastName] = getFirstAndLastName(address.name);\n\n        return {\n            firstName,\n            lastName,\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                tokenFormat: postPaymentData.tokenFormat,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(\n        paymentData: GooglePaymentData,\n    ): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(\n            paymentData,\n            remoteBillingAddress.id,\n            remoteBillingAddress.email,\n        );\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped),\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window,\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader.loadScript('https://pay.google.com/gp/p/js/pay.js').then(() => {\n            if (!this._window.google) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.google;\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(\n    store: CheckoutStore,\n    initializer: GooglePayInitializer,\n): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender),\n        ),\n        requestSender,\n    );\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayAdyenV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'adyen',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayAdyenV3Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'adyen',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizationSpecification,\n    TokenizePayload,\n} from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(\n            paymentGatewaySpecification,\n            supportedCards,\n        );\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n                currencyCode,\n                countryCode,\n            },\n            merchantInfo: {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(\n        tokenizationSpecification: TokenizationSpecification,\n        supportedCards: string[],\n    ) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: supportedCards.map((card) =>\n                    card === 'MC' ? 'MASTERCARD' : card,\n                ),\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: BillingAddressFormat.Full,\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayBNZInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'cybersource',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\nimport {\n    GooglePayBraintreeDataRequest,\n    GooglePayBraintreePaymentDataRequestV1,\n} from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(private _braintreeSDKCreator: BraintreeSDKCreator) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator\n            .getGooglePaymentComponent()\n            .then((googleBraintreePaymentInstance) => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress,\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token)\n            .androidPayCards[0];\n\n        return Promise.resolve({\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        });\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(\n                googlePayBraintreePaymentDataRequest,\n            ),\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n        googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1,\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks:\n                            googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'braintree',\n                            'braintree:apiVersion': 'v1',\n                            'braintree:authorizationFingerprint':\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\n                                    .parameters['braintree:authorizationFingerprint'],\n                            'braintree:merchantId':\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\n                                    .parameters['braintree:merchantId'],\n                            'braintree:sdkVersion':\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\n                                    .parameters['braintree:sdkVersion'],\n                        },\n                    },\n                },\n            ],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { ContentType } from '../../../common/http-request';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\nimport { CheckoutcomGooglePayToken, CheckoutcomToken } from '../checkoutcom';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayCheckoutcomInitializer implements GooglePayInitializer {\n    private _publishableKey = '';\n    private _testMode = true;\n    private _errorMessage = 'Unable to parse response from GooglePay.';\n\n    constructor(private _requestSender: RequestSender) {}\n\n    async initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        this._publishableKey = paymentMethod.initializationData.checkoutcomkey;\n        this._testMode = !!paymentMethod.config.testMode;\n\n        return this._mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress,\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let token;\n\n        try {\n            token = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError(this._errorMessage);\n        }\n\n        if (!token.signature || !token.protocolVersion || !token.signedMessage) {\n            throw new PaymentMethodFailedError(this._errorMessage);\n        }\n\n        const finalToken = await this._convertToken(this._testMode, this._publishableKey, token);\n\n        const payload: TokenizePayload = {\n            nonce: finalToken.token,\n            type: 'CreditCard',\n            description: paymentData.paymentMethodData.description,\n            details: {\n                cardType: paymentData.paymentMethodData.info.cardNetwork,\n                lastFour: paymentData.paymentMethodData.info.cardDetails,\n            },\n        };\n\n        if (finalToken.token_format) {\n            payload.tokenFormat = finalToken.token_format;\n        }\n\n        return payload;\n    }\n\n    private async _convertToken(\n        testMode: boolean,\n        checkoutcomkey: string,\n        token: CheckoutcomGooglePayToken,\n    ): Promise<CheckoutcomToken> {\n        const checkoutcomToken: CheckoutcomToken = await this._requestCheckoutcomTokenize(\n            testMode,\n            checkoutcomkey,\n            {\n                type: 'googlepay',\n                token_data: token,\n            },\n        );\n\n        if (!checkoutcomToken || !checkoutcomToken.token) {\n            throw new PaymentMethodFailedError('Unable to parse response from Checkout.com');\n        }\n\n        return checkoutcomToken;\n    }\n\n    private async _requestCheckoutcomTokenize(\n        testMode: boolean,\n        checkoutcomKey: string,\n        data = {},\n    ): Promise<CheckoutcomToken> {\n        const TEST_URL = 'https://api.sandbox.checkout.com/tokens';\n        const LIVE_URL = 'https://api.checkout.com/tokens';\n\n        const url = testMode ? TEST_URL : LIVE_URL;\n\n        const response = await this._requestSender.post(url, {\n            credentials: false,\n            body: data,\n            headers: {\n                'Content-Type': ContentType.Json,\n                Authorization: checkoutcomKey,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return response.body as CheckoutcomToken;\n    }\n\n    private _mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'checkoutltd',\n                            gatewayMerchantId: initializationData.checkoutcomkey,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayCybersourceV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'cybersource',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayOrbitalInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: { cardNetwork: cardType, cardDetails: lastFour },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'chase',\n                            gatewayMerchantId,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return Promise.resolve({\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            });\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n            consignments,\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n                bopis,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const isPickup = consignments.every((consignment) => consignment.selectedPickupOption);\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'stripe',\n                            'stripe:version': stripeVersion,\n                            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired:\n                bopis?.enabled && isPickup && bopis?.requiredAddress === 'none'\n                    ? false\n                    : !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    BillingAddressFormat,\n    GooglePayInitializer,\n    GooglePaymentData,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload,\n} from './googlepay';\n\nexport default class GooglePayStripeUPEInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let payload;\n\n        try {\n            payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        if (\n            !payload.id ||\n            !payload.type ||\n            !payload.card ||\n            !payload.card.brand ||\n            !payload.card.last4\n        ) {\n            throw new PaymentMethodFailedError('Unable to parse response from Google Pay.');\n        }\n\n        return Promise.resolve({\n            nonce: payload.id,\n            type: payload.type,\n            details: {\n                cardType: payload.card.brand,\n                lastFour: payload.card.last4,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean,\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode, decimalPlaces },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [\n                {\n                    type: 'CARD',\n                    parameters: {\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                        allowedCardNetworks: supportedCards.map((card) =>\n                            card === 'MC' ? 'MASTERCARD' : card,\n                        ),\n                        billingAddressRequired: true,\n                        billingAddressParameters: {\n                            format: BillingAddressFormat.Full,\n                            phoneNumberRequired: true,\n                        },\n                    },\n                    tokenizationSpecification: {\n                        type: 'PAYMENT_GATEWAY',\n                        parameters: {\n                            gateway: 'stripe',\n                            'stripe:version': stripeVersion,\n                            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                        },\n                    },\n                },\n            ],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, decimalPlaces).toFixed(decimalPlaces),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\ninterface MasterpassScriptLoaderParams {\n    useMasterpassSrc: boolean;\n    language: string;\n    testMode?: boolean;\n    checkoutId?: string;\n}\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window,\n    ) {}\n\n    async load({\n        useMasterpassSrc,\n        language,\n        testMode,\n        checkoutId,\n    }: MasterpassScriptLoaderParams): Promise<Masterpass> {\n        if (useMasterpassSrc) {\n            const subdomain = testMode ? 'sandbox.' : '';\n            const params = [`locale=${language}`, `checkoutid=${checkoutId}`];\n\n            const sourceUrl = [\n                `https://${subdomain}src.mastercard.com/srci/integration/merchant.js`,\n                params.join('&'),\n            ].join('?');\n\n            await this._scriptLoader.loadScript(sourceUrl);\n\n            if (!this._window.masterpass) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.masterpass;\n        }\n\n        await this._scriptLoader.loadScript(\n            `//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`,\n        );\n\n        if (!this._window.masterpass) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.masterpass;\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(private _scriptLoader: ScriptLoader) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = {\n            async: true,\n            attributes: { 'data-merchant-id': merchantId },\n        };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport {\n    FundingType,\n    PaypalCommerceHostWindow,\n    PaypalCommerceInitializationData,\n    PaypalCommerceScriptParams,\n    PaypalCommerceSDK,\n} from './paypal-commerce-sdk';\n\nexport default class PaypalCommerceScriptLoader {\n    private _window: PaypalCommerceHostWindow;\n    private _paypalSdk?: Promise<PaypalCommerceSDK>;\n\n    constructor(private _scriptLoader: ScriptLoader) {\n        this._window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PaypalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n    ): Promise<PaypalCommerceSDK> {\n        if (!this._paypalSdk) {\n            this._paypalSdk = this.loadPayPalSDK(\n                this._getPayPalSdkScriptConfigOrThrow(\n                    paymentMethod,\n                    currencyCode,\n                    initializesOnCheckoutPage,\n                ),\n            );\n        }\n\n        return this._paypalSdk;\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PaypalCommerceScriptParams,\n    ): Promise<PaypalCommerceSDK> {\n        if (!this._window.paypalLoadScript) {\n            const PAYPAL_SDK_VERSION = '5.0.5';\n            const scriptSrc = `https://unpkg.com/@paypal/paypal-js@${PAYPAL_SDK_VERSION}/dist/iife/paypal-js.min.js`;\n\n            await this._scriptLoader.loadScript(scriptSrc, { async: true, attributes: {} });\n\n            if (!this._window.paypalLoadScript) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        await this._window.paypalLoadScript(paypalSdkScriptConfig);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n\n    private _getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PaypalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PaypalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isInlineCheckoutEnabled,\n            isPayPalCreditAvailable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const shouldShowInlineCheckout = !initializesOnCheckoutPage && isInlineCheckoutEnabled;\n\n        const commit =\n            shouldShowInlineCheckout || isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = shouldShowInlineCheckout || id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = !shouldShowInlineCheckout && !isHostedCheckoutEnabled; // should disable APMs if Inline Checkout or Shipping Options feature enabled\n        const enableVenmoFunding = shouldEnableAPMs && isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !shouldEnableAPMs || !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            'client-id': clientId,\n            'data-partner-attribution-id': attributionId,\n            'data-client-token': clientToken,\n            'merchant-id': merchantId,\n            'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n            'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n            commit,\n            components: ['buttons', 'hosted-fields', 'messages', 'payment-fields'],\n            currency: currencyCode,\n            intent,\n        };\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\n\nimport { OrderData, OrderStatus, UpdateOrderPayload } from './paypal-commerce-sdk';\n\nexport interface ParamsForProvider {\n    isCredit?: boolean;\n    isCheckout?: boolean;\n    isCreditCard?: boolean;\n    isAPM?: boolean;\n    isVenmo?: boolean;\n}\n\nexport default class PaypalCommerceRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    // TODO: this method should be removed when provider will be passed as an argument\n    // (to prevent containing unnecessary provider detecting logic inside)\n    async setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<OrderData> {\n        const { isCredit, isCheckout, isCreditCard, isAPM, isVenmo } = params;\n        let provider = 'paypalcommerce';\n\n        if (isCreditCard) {\n            provider = 'paypalcommercecreditcardscheckout';\n        } else if (isCheckout) {\n            provider = isCredit ? 'paypalcommercecreditcheckout' : 'paypalcommercecheckout';\n        } else if (isCredit) {\n            provider = 'paypalcommercecredit';\n        }\n\n        if (isVenmo && !isAPM) {\n            provider = isCheckout ? 'paypalcommercevenmocheckout' : 'paypalcommercevenmo';\n        }\n\n        if (isAPM) {\n            provider = isCheckout\n                ? 'paypalcommercealternativemethodscheckout'\n                : 'paypalcommercealternativemethod';\n        }\n\n        return this.createOrder(cartId, provider);\n    }\n\n    async createOrder(cartId: string, providerId: string): Promise<OrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.post<OrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus() {\n        const url = '/api/storefront/initialization/paypalcommerce';\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.get<OrderStatus>(url, { headers });\n\n        return res.body;\n    }\n\n    async updateOrder(payload: UpdateOrderPayload) {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = payload;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.put(url, { headers, body });\n\n        return res.body;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    initializeBilling(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializeShipping(\n        methodName: string,\n        params?: { referenceId: string },\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    initializePayment(\n        methodName: string,\n        params?: InitializePaymentOptions,\n        { timeout }: RequestOptions = {},\n    ): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url =\n            '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n\n    forgetCheckout({ timeout }: RequestOptions = {}): Promise<Response<any>> {\n        const url = `/remote-checkout/forget-checkout`;\n\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { Action, createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { concat, defer, Observable, Observer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CheckoutActionCreator } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, {\n    InitializePaymentOptions,\n} from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator,\n    ) {}\n\n    initializeBilling(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteBillingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializeShipping(\n        methodId: string,\n        params?: { referenceId: string },\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(\n                    RemoteCheckoutActionType.InitializeRemoteShippingRequested,\n                    undefined,\n                    { methodId },\n                ),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemoteShippingFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    initializePayment(\n        methodId: string,\n        params?: InitializePaymentOptions,\n        options?: RequestOptions,\n    ): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentSucceeded,\n                            body,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.InitializeRemotePaymentFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(\n                        createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, {\n                            methodId,\n                        }),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.LoadRemoteSettingsFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(\n                createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, {\n                    methodId,\n                }),\n            );\n\n            this._remoteCheckoutRequestSender\n                .signOut(methodId, options)\n                .then(() => {\n                    observer.next(\n                        createAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded,\n                            undefined,\n                            { methodId },\n                        ),\n                    );\n                    observer.complete();\n                })\n                .catch((response) => {\n                    observer.error(\n                        createErrorAction(\n                            RemoteCheckoutActionType.SignOutRemoteCustomerFailed,\n                            response,\n                            { methodId },\n                        ),\n                    );\n                });\n        });\n    }\n\n    forgetCheckout(methodId: string, options?: RequestOptions): Observable<Action> {\n        return concat(\n            of(\n                createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested,\n                    undefined,\n                    { methodId },\n                ),\n            ),\n            defer(async () => {\n                await this._remoteCheckoutRequestSender.forgetCheckout(options);\n                await this._checkoutActionCreator.loadCurrentCheckout();\n\n                return createAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded,\n                    undefined,\n                    { methodId },\n                );\n            }),\n        ).pipe(\n            catchError((error) =>\n                throwErrorAction(\n                    RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed,\n                    error,\n                    { methodId },\n                ),\n            ),\n        );\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(\n        methodId: K,\n        data: Partial<RemoteCheckoutStateData[K]>,\n    ): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport {\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2Placement,\n} from '../../../payment/strategies/amazon-pay-v2';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { methodId, containerId, amazonpay } = options;\n\n        if (!methodId || !containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        const {\n            paymentMethods: { getPaymentMethodOrThrow },\n        } = this._store.getState();\n\n        await this._amazonPayV2PaymentProcessor.initialize(getPaymentMethodOrThrow(methodId));\n\n        if (!amazonpay) {\n            await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        }\n\n        this._amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this._store.getState(),\n            containerId,\n            methodId,\n            options: amazonpay,\n            placement: AmazonPayV2Placement.Cart,\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        return this._amazonPayV2PaymentProcessor.deinitialize();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { Cart } from '../../../cart';\nimport { Checkout, CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { StoreConfig } from '../../../config';\nimport { OrderActionCreator } from '../../../order';\nimport {\n    Payment,\n    PaymentActionCreator,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n} from '../../../payment';\nimport { PaymentMethodCancelledError } from '../../../payment/errors';\nimport {\n    ApplePaySessionFactory,\n    assertApplePayWindow,\n} from '../../../payment/strategies/apple-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _requestSender: RequestSender,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _sessionFactory: ApplePaySessionFactory,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { buttonClassName, onPaymentAuthorize } = applepay;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        this._applePayButton = this._createButton(containerId, buttonClassName);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick);\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(\n        containerId: string,\n        buttonClassName = 'apple-pay-checkout-button',\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        document.body.classList.add('apple-pay-supported');\n\n        const button = document.createElement('div');\n\n        button.classList.add(buttonClassName);\n        button.setAttribute('role', 'button');\n        button.setAttribute('aria-label', 'Apple Pay button');\n        container.appendChild(button);\n\n        return button;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const config = state.config.getStoreConfigOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({ label: tax.name, amount: `${tax.amount.toFixed(decimalPlaces)}` }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            try {\n                await this._store.dispatch(\n                    this._remoteCheckoutActionCreator.signOut(paymentMethod.id),\n                );\n\n                return await this._store.dispatch(\n                    this._checkoutActionCreator.loadCurrentCheckout(),\n                );\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._store.dispatch(\n                this._consignmentActionCreator.updateAddress(shippingAddress),\n            );\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._store.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.cart.getCartOrThrow();\n        let checkout = state.checkout.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        unselectedOptions?.forEach((option) =>\n            shippingOptions.push({\n                label: option.description,\n                amount: `${option.cost.toFixed(decimalPlaces)}`,\n                detail: option.additionalDescription,\n                identifier: option.id,\n            }),\n        );\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._store.getState();\n        checkout = state.checkout.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._store.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.cart.getCartOrThrow();\n        const checkout = state.checkout.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            { label: this._subTotalLabel, amount: `${checkout.subtotal.toFixed(decimalPlaces)}` },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({ label: tax.name, amount: `${tax.amount.toFixed(decimalPlaces)}` }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._store.dispatch(this._consignmentActionCreator.selectShippingOption(optionId));\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber;\n\n        try {\n            await this._store.dispatch(\n                this._billingAddressActionCreator.updateAddress({\n                    ...transformedBillingAddress,\n                    email: emailAddress,\n                    phone,\n                }),\n            );\n\n            if (requiresShipping) {\n                await this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(transformedShippingAddress),\n                );\n            }\n\n            await this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    useStoreCredit: false,\n                }),\n            );\n            await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { Address } from '../../../address';\n\nimport { BraintreeShippingAddressOverride } from './braintree';\n\nexport default function mapToBraintreeShippingAddressOverride(\n    address: Address,\n): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { PaypalButtonStyleOptions } from '../../../payment/strategies/paypal';\n\nexport default function getValidButtonStyle(\n    style: PaypalButtonStyleOptions,\n): PaypalButtonStyleOptions {\n    const { color, fundingicons, height, layout, shape, size, tagline } = style;\n\n    const validStyles = {\n        color,\n        fundingicons,\n        height: getValidHeight(height),\n        layout,\n        shape: shape || 'rect',\n        size,\n        tagline,\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidHeight(height?: number): number {\n    const minHeight = 25;\n    const maxHeight = 55;\n\n    if (typeof height !== 'number' || height > maxHeight) {\n        return maxHeight;\n    }\n\n    if (height < minHeight) {\n        return minHeight;\n    }\n\n    return height;\n}\n","import { LegacyAddress } from '../../../address';\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyBillingAddress(\n    details: BraintreeDetails,\n): Partial<LegacyAddress> {\n    const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n","import { LegacyAddress } from '../../../address';\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\n\nexport default function mapToLegacyShippingAddress(\n    details: BraintreeDetails,\n): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalHostWindow } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalButtonInitializeOptions } from './braintree-paypal-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<\n    BraintreePaypalButtonInitializeOptions,\n    'buyNowInitializeOptions'\n>;\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypal, containerId, methodId } = options;\n        const { messagingContainerId, onError } = braintreepaypal || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypal.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypal.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypal.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypal.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow().currency.code;\n        }\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions = { currency: currencyCode };\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this._renderPayPalComponents(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, messagingContainerId, onError);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalComponents(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { messagingContainerId } = braintreepaypal;\n\n        this._renderPayPalMessages(messagingContainerId);\n        this._renderPayPalButton(\n            braintreePaypalCheckout,\n            braintreepaypal,\n            containerId,\n            methodId,\n            testMode,\n        );\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypal;\n\n        const { paypal } = this._window;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            const validButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                commit: false,\n                fundingSource,\n                style: validButtonStyle,\n                createOrder: () => this._setupPayment(braintreePaypalCheckout, braintreepaypal),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this._tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        shouldProcessPayment,\n                        onAuthorizeError,\n                    ),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            }\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private _renderPayPalMessages(messagingContainerId?: string): void {\n        const isMessageContainerAvailable =\n            messagingContainerId && Boolean(document.getElementById(messagingContainerId));\n        const { paypal } = this._window;\n\n        if (paypal && isMessageContainerAvailable) {\n            const state = this._store.getState();\n            const cart = state.cart.getCartOrThrow();\n\n            const paypalMessagesRender = paypal.Messages({\n                amount: cart.cartAmount,\n                placement: 'cart',\n            });\n\n            paypalMessagesRender.render(`#${messagingContainerId}`);\n        } else {\n            this._removeElement(messagingContainerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n    ): Promise<string> {\n        const { buyNowInitializeOptions, shippingAddress, onPaymentError } = braintreepaypal;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(\n                    this._checkoutActionCreator.loadDefaultCheckout(),\n                );\n            }\n\n            const customer = state.customer.getCustomer();\n\n            const amount = this._buyNowCart\n                ? this._buyNowCart.cartAmount\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode =\n                braintreepaypal.currencyCode ?? state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return cart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        buttonContainerId: string,\n        messagingContainerId?: string,\n        onErrorCallback?: (error: BraintreeError) => void,\n    ): void {\n        this._removeElement(buttonContainerId);\n        this._removeElement(messagingContainerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","export interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Messages(options: MessagingOptions): MessagingRender;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalButtonStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\nexport interface PaypalButtonStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number;\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<PaypalPaymentPayload>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n\nexport interface PaypalTransaction {\n    amount?: PaypalAmount;\n    payee?: PaypalPayee;\n    description?: string;\n    note_to_payee?: string;\n    item_list?: PaypalItemList;\n}\n\nexport interface PaypalItemList {\n    items?: PaypalItem[];\n    shipping_address?: PaypalAddress;\n}\n\nexport interface PaypalItem {\n    sku?: string;\n    name?: string;\n    description?: string;\n    quantity: string;\n    price: string;\n    currency: string;\n    tax?: string;\n}\n\nexport interface PaypalAmount {\n    currency: string;\n    total: string;\n}\n\nexport interface PaypalPayer {\n    payer_info: object;\n}\n\nexport interface PaypalPayee {\n    email?: string;\n    merchant_id?: string;\n}\n\nexport interface PaypalAddress {\n    line1: string;\n    line2?: string;\n    city?: string;\n    country_code: string;\n    postal_code?: string;\n    state?: string;\n    phone?: string;\n    type?: string;\n}\n\nexport interface PaypalPaymentPayload {\n    payment: PaypalPaymentPayload;\n    payer: PaypalPayer;\n    transactions?: PaypalTransaction[];\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    // the PayPal side of things uses uppercase ID instead of camel case Id\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface PaypalHostWindow extends Window {\n    paypal?: PaypalSDK;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport PaymentMethod from '../../../payment/payment-method';\nimport {\n    BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    mapToBraintreeShippingAddressOverride,\n} from '../../../payment/strategies/braintree';\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonStyleLabelOption,\n    PaypalHostWindow,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalCreditButtonInitializeOptions } from './braintree-paypal-credit-button-options';\nimport getValidButtonStyle from './get-valid-button-style';\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\ntype BuyNowInitializeOptions = Pick<\n    BraintreePaypalCreditButtonInitializeOptions,\n    'buyNowInitializeOptions'\n>;\n\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCart?: Cart;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _window: PaypalHostWindow,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreepaypalcredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        let state: InternalCheckoutSelectors;\n        let paymentMethod: PaymentMethod;\n        let currencyCode: string;\n\n        if (braintreepaypalcredit.buyNowInitializeOptions) {\n            state = this._store.getState();\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!braintreepaypalcredit.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypalcredit.currencyCode;\n        } else {\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n            currencyCode = state.cart.getCartOrThrow().currency.code;\n        }\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions = { currency: currencyCode };\n        const paypalCheckoutCallback = (braintreePaypalCheckout: BraintreePaypalCheckout) =>\n            this._renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                containerId,\n                methodId,\n                Boolean(paymentMethod.config.testMode),\n            );\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this._handleError(error, containerId, braintreepaypalcredit.onError);\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypalcredit;\n        const { paypal } = this._window;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n            const commonButtonStyle = style ? getValidButtonStyle(style) : {};\n\n            fundingSources.forEach((fundingSource) => {\n                const buttonStyle =\n                    fundingSource === paypal.FUNDING.CREDIT\n                        ? { label: PaypalButtonStyleLabelOption.CREDIT, ...commonButtonStyle }\n                        : commonButtonStyle;\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        commit: false,\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () =>\n                            this._setupPayment(braintreePaypalCheckout, braintreepaypalcredit),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this._tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                shouldProcessPayment,\n                                onAuthorizeError,\n                            ),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${containerId}`);\n                        hasRenderedSmartButton = true;\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n    ): Promise<string> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypalcredit;\n        let state: InternalCheckoutSelectors;\n\n        try {\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\n\n            if (this._buyNowCart) {\n                state = this._store.getState();\n            } else {\n                state = await this._store.dispatch(\n                    this._checkoutActionCreator.loadDefaultCheckout(),\n                );\n            }\n\n            const customer = state.customer.getCustomer();\n\n            const amount = this._buyNowCart\n                ? this._buyNowCart.cartAmount\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode =\n                braintreepaypalcredit.currencyCode ??\n                state.config.getStoreConfigOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: true,\n            });\n        } catch (error) {\n            if (onPaymentError) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const buyNowCartId = this._buyNowCart?.id;\n\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private _handleError(\n        error: BraintreeError,\n        containerId: string,\n        onErrorCallback?: (error: BraintreeError) => void,\n    ): void {\n        this._removeElement(containerId);\n\n        if (onErrorCallback) {\n            onErrorCallback(error);\n        }\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport { BuyNowCartRequestBody, CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { PaymentMethodActionCreator } from '../../../payment';\nimport {\n    BraintreeError,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n} from '../../../payment/strategies/braintree';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\nimport { CheckoutButtonMethodType } from '../index';\n\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\n\nconst venmoButtonStyle = {\n    backgroundColor: '#3D95CE',\n    backgroundPosition: '50% 50%',\n    backgroundSize: '80px auto',\n    backgroundImage: 'url(\"/app/assets/img/payment-providers/venmo-logo-white.svg\")',\n    backgroundRepeat: 'no-repeat',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    transition: '0.2s ease',\n    minHeight: '40px',\n    minWidth: '150px',\n    height: '100%',\n    width: '100%',\n};\n\nconst venmoButtonStyleHover = {\n    backgroundColor: '#0a7fc2',\n};\n\ninterface BuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n}\n\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private _onError = noop;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { braintreevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\n        );\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        this._onError = braintreevenmo?.onError || this._handleError;\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        await this._braintreeSDKCreator.getVenmoCheckout(\n            (braintreeVenmoCheckout) =>\n                this._handleInitializationVenmoSuccess(\n                    braintreeVenmoCheckout,\n                    containerId,\n                    braintreevenmo?.buyNowInitializeOptions,\n                ),\n            (error) => this._handleInitializationVenmoError(error, containerId),\n        );\n    }\n\n    deinitialize(): Promise<void> {\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _handleError(error: BraintreeError) {\n        throw new Error(error.message);\n    }\n\n    private _handleInitializationVenmoSuccess(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        parentContainerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): void {\n        return this._renderVenmoButton(\n            braintreeVenmoCheckout,\n            parentContainerId,\n            buyNowInitializeOptions,\n        );\n    }\n\n    private _handleInitializationVenmoError(\n        error: BraintreeError | UnsupportedBrowserError,\n        containerId: string,\n    ): void {\n        this._removeVenmoContainer(containerId);\n\n        return this._onError(error);\n    }\n\n    private _removeVenmoContainer(containerId: string): void {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (buttonContainer) {\n            buttonContainer.remove();\n        }\n    }\n\n    private _renderVenmoButton(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        containerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): void {\n        const venmoButton = document.getElementById(containerId);\n\n        if (!venmoButton) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        venmoButton.setAttribute('aria-label', 'Venmo');\n        Object.assign(venmoButton.style, venmoButtonStyle);\n\n        venmoButton.addEventListener('click', async () => {\n            venmoButton.setAttribute('disabled', 'true');\n\n            const buyBowCart = await this._createBuyNowCart(buyNowInitializeOptions);\n\n            if (braintreeVenmoCheckout.tokenize) {\n                braintreeVenmoCheckout.tokenize(\n                    async (error: BraintreeError, payload: BraintreeTokenizePayload) => {\n                        venmoButton.removeAttribute('disabled');\n\n                        if (error) {\n                            return this._onError(error);\n                        }\n\n                        await this._handlePostForm(payload, buyBowCart?.id);\n                    },\n                );\n            }\n        });\n\n        venmoButton.addEventListener('mouseenter', () => {\n            venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\n        });\n\n        venmoButton.addEventListener('mouseleave', () => {\n            venmoButton.style.backgroundColor = venmoButtonStyle.backgroundColor;\n        });\n    }\n\n    private async _createBuyNowCart(buyNowInitializeOptions?: BuyNowInitializeOptions) {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _handlePostForm(\n        payload: BraintreeTokenizePayload,\n        buyNowCartId?: string,\n    ): Promise<void> {\n        const { deviceData } = await this._braintreeSDKCreator.getDataCollector();\n        const { nonce, details } = payload;\n\n        this._formPoster.postForm('/checkout.php', {\n            nonce,\n            provider: CheckoutButtonMethodType.BRAINTREE_VENMO,\n            payment_type: 'paypal',\n            device_data: deviceData,\n            action: 'set_external_checkout',\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            ...(buyNowCartId && { cart_id: buyNowCartId }),\n        });\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutButtonMethodType } from '../';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { GooglePayButtonInitializeOptions } from './googlepay-button-options';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        this._methodId = methodId;\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        await this._googlePayPaymentProcessor.initialize(this._getMethodId());\n\n        this._walletButton = this._createSignInButton(containerId, googlePayOptions);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(\n        containerId: string,\n        buttonOptions: GooglePayButtonInitializeOptions,\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n        const { buttonType, buttonColor } = buttonOptions;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(\n            this._handleWalletButtonClick,\n            buttonType,\n            buttonColor,\n        );\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _getGooglePayOptions(\n        options: CheckoutButtonInitializeOptions,\n    ): GooglePayButtonInitializeOptions {\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV2 &&\n            options.googlepayadyenv2\n        ) {\n            return options.googlepayadyenv2;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV3 &&\n            options.googlepayadyenv3\n        ) {\n            return options.googlepayadyenv3;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET &&\n            options.googlepayauthorizenet\n        ) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_BNZ && options.googlepaybnz) {\n            return options.googlepaybnz;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE &&\n            options.googlepaybraintree\n        ) {\n            return options.googlepaybraintree;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM &&\n            options.googlepaycheckoutcom\n        ) {\n            return options.googlepaycheckoutcom;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2 &&\n            options.googlepaycybersourcev2\n        ) {\n            return options.googlepaycybersourcev2;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ORBITAL &&\n            options.googlepayorbital\n        ) {\n            return options.googlepayorbital;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPE &&\n            options.googlepaystripe\n        ) {\n            return options.googlepaystripe;\n        }\n\n        if (\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE &&\n            options.googlepaystripeupe\n        ) {\n            return options.googlepaystripeupe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    @bind\n    private async _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        const cart = this._store.getState().cart.getCartOrThrow();\n        const hasPhysicalItems = getShippableItemsCount(cart) > 0;\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n\n            if (hasPhysicalItems && paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(\n                    paymentData.shippingAddress,\n                );\n            }\n\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","export const supportedLocales: { [language: string]: string[] } = {\n    es: ['es_es', 'es_mx', 'es_pe', 'es_co', 'es_ar', 'es_cl'],\n    en: [\n        'en_us',\n        'en_gb',\n        'en_ca',\n        'en_es',\n        'en_fr',\n        'en_ie',\n        'en_sg',\n        'en_au',\n        'en_nz',\n        'en_my',\n        'en_hk',\n        'en_th',\n        'en_ae',\n        'en_sa',\n        'en_qa',\n        'en_kw',\n        'en_za',\n    ],\n    pt: ['pt_br'],\n    zu: ['zu_za'],\n    ar: ['ar_sa', 'ar_ae', 'ar_qa', 'ar_kw'],\n    zh: ['zh_sg', 'zh_hk'],\n    ms: ['ms_my'],\n    uk: ['uk_ua'],\n    sv: ['sv_se'],\n    hr: ['hr_hr'],\n    pl: ['pl_pl'],\n    nl: ['nl_be'],\n    it: ['it_it'],\n    de: ['de_de'],\n    fr: ['fr_fr', 'fr_ca'],\n};\n","import { supportedLocales } from './masterpass-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace('-', '_').toLowerCase().split('_');\n    const formattedLocale = `${language}_${country}`;\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'en_us';\n    }\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport {\n    formatLocale,\n    getCallbackUrl,\n    Masterpass,\n    MasterpassCheckoutOptions,\n    MasterpassScriptLoader,\n} from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string,\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        this._methodId = methodId;\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: paymentMethod.config.testMode,\n                    checkoutId: paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader.load(masterpassScriptLoaderParams);\n            })\n            .then((masterpass) => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n        const state = this._store.getState();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new InvalidArgumentError('Unable to retrieve store configuration');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src =\n                'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\n            : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n} from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport {\n    PaypalActions,\n    PaypalAuthorizeData,\n    PaypalButtonStyleShapeOption,\n    PaypalButtonStyleSizeOption,\n    PaypalClientToken,\n    PaypalScriptLoader,\n} from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = '',\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = (this._paymentMethod = state.paymentMethods.getPaymentMethod(\n            options.methodId,\n        ));\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader\n            .loadPaypal(paymentMethod.config.merchantId)\n            .then((paypal) => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const fundingCreditOption = paypal.FUNDING.CREDIT || 'credit';\n                const allowedSources = paypalOptions.allowCredit ? [fundingCreditOption] : [];\n                const disallowedSources = !paypalOptions.allowCredit ? [fundingCreditOption] : [];\n\n                return paypal.Button.render(\n                    {\n                        env,\n                        client: clientToken,\n                        commit: paypalOptions.shouldProcessPayment,\n                        funding: {\n                            allowed: allowedSources,\n                            disallowed: disallowedSources,\n                        },\n                        style: {\n                            shape: PaypalButtonStyleShapeOption.RECT,\n                            ...pick(\n                                paypalOptions.style,\n                                'layout',\n                                'color',\n                                'label',\n                                'shape',\n                                'tagline',\n                                'fundingicons',\n                            ),\n                            size:\n                                paymentMethod.id === 'paypalexpress' &&\n                                paypalOptions.style?.size === 'small'\n                                    ? PaypalButtonStyleSizeOption.RESPONSIVE\n                                    : paypalOptions.style?.size,\n                        },\n                        payment: (_, actions) =>\n                            this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                        onAuthorize: (data, actions) =>\n                            this._tokenizePayment(\n                                data,\n                                actions,\n                                paypalOptions.shouldProcessPayment,\n                                paypalOptions.onAuthorizeError,\n                            ),\n                    },\n                    options.containerId,\n                );\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        merchantId: string,\n        actions?: PaypalActions,\n        onError?: (error: StandardError) => void,\n    ): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then((state) => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(\n                    `${this._host}/api/storefront/payment/paypalexpress`,\n                    { merchantId, cartId },\n                    {\n                        headers: {\n                            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                            ...SDK_VERSION_HEADERS,\n                        },\n                    },\n                );\n            })\n            .then((res) => res.id)\n            .catch((error) => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void, // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then((payload) => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { ShippingOption } from '../../../shipping';\n\nexport interface ClickDataOptions {\n    fundingSource: string;\n}\n\nexport interface ClickActions {\n    reject(): Promise<void>;\n    resolve(): Promise<void>;\n}\n\nexport interface OrderData {\n    orderId: string;\n    approveUrl: string;\n}\n\nexport interface OrderStatus {\n    status: 'APPROVED' | 'CREATED' | string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonLayout {\n    vertical = 'vertical',\n    horizontal = 'horizontal',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PaypalButtonStyleOptions {\n    layout?: StyleButtonLayout;\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n    tagline?: boolean;\n    custom?: {\n        label?: string;\n        css?: {\n            background?: string;\n            color?: string;\n            width?: string;\n        };\n    };\n}\n\nexport interface PayPalAddress {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => PayPalOrderDetails;\n    };\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\n// TODO: this type should be merged with PayPalCheckoutButtonOptions in the future\nexport interface ButtonsOptions {\n    style?: PaypalButtonStyleOptions;\n    fundingSource?: string;\n    createOrder?(): Promise<string | void>; // TODO: this method should return only Promise<void>\n    onApprove?(data: ApproveCallbackPayload, actions?: ApproveCallbackActions): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): void;\n    onClick?(data: ClickDataOptions, actions: ClickActions): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalCheckoutButtonOptions {\n    experience: string;\n    style?: PaypalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onError(error: Error): void;\n    onShippingAddressChange(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n    onApprove(data: ApproveCallbackPayload, actions: ApproveCallbackActions): Promise<boolean>;\n    onComplete(data: CompleteCallbackDataPayload): void;\n}\n\nexport interface PaypalFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\nexport interface FieldsOptions {\n    style?: PaypalFieldsStyleOptions;\n    fundingSource: string;\n    fields: { name?: { value?: string }; email?: { value?: string } };\n}\n\nexport interface MessagesOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n    fundingSource?: string;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: string;\n}\n\nexport interface PaypalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PaypalCommerceHostedFieldOption;\n        cvv?: PaypalCommerceHostedFieldOption;\n        expirationDate?: PaypalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PaypalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PaypalCommerceHostedFields {\n    submit(options?: PaypalCommerceHostedFieldsSubmitOptions): PaypalCommerceHostedFieldsApprove;\n    getState(): PaypalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PaypalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PaypalCommerceHostedFieldsState {\n    cards: PaypalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PaypalCommerceHostedFieldsFieldData;\n        expirationDate?: PaypalCommerceHostedFieldsFieldData;\n        expirationMonth?: PaypalCommerceHostedFieldsFieldData;\n        expirationYear?: PaypalCommerceHostedFieldsFieldData;\n        cvv?: PaypalCommerceHostedFieldsFieldData;\n        postalCode?: PaypalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PaypalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface PaypalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface PaypalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PaypalCommerceFields {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceMessages {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    BANCONTACT: string;\n    GIROPAY: string;\n    P24: string;\n    EPS: string;\n    IDEAL: string;\n    MYBANK: string;\n    OXXO: string;\n    SOFORT: string;\n    SEPA: string;\n    BLIK: string;\n    TRUSTLY: string;\n    VERKKOPANKKI: string;\n    VENMO: string;\n}\n\nexport const NON_INSTANT_PAYMENT_METHODS = ['oxxo'];\n\nexport interface PaypalCommerceSDK {\n    FUNDING: PaypalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PaypalCommerceHostedFieldsRenderOptions): Promise<PaypalCommerceHostedFields>;\n    };\n    Buttons(params: ButtonsOptions | PaypalCheckoutButtonOptions): PaypalCommerceButtons;\n    PaymentFields(params: FieldsOptions): PaypalCommerceFields;\n    Messages(params: MessagesOptions): PaypalCommerceMessages;\n}\n\nexport interface PaypalCommerceHostWindow extends Window {\n    paypal?: PaypalCommerceSDK;\n    paypalLoadScript?(options: PaypalCommerceScriptParams): Promise<{ paypal: PaypalCommerceSDK }>;\n}\n\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\nexport enum PayPalCommerceIntent {\n    authorize = 'authorize',\n    capture = 'capture',\n}\n\nexport interface PaypalCommerceInitializationData {\n    clientId: string;\n    merchantId?: string;\n    buyerCountry?: string;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isInlineCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    availableAlternativePaymentMethods: FundingType;\n    enabledAlternativePaymentMethods: FundingType;\n    clientToken?: string;\n    attributionId?: string;\n    isVenmoEnabled?: boolean;\n}\n\nexport type ComponentsScriptType = Array<\n    'buttons' | 'funding-eligibility' | 'hosted-fields' | 'messages' | 'payment-fields'\n>;\n\nexport interface PaypalCommerceScriptParams {\n    'client-id'?: string;\n    'merchant-id'?: string;\n    'buyer-country'?: string;\n    'disable-funding'?: FundingType;\n    'enable-funding'?: EnableFundingType;\n    'data-client-token'?: string;\n    'data-partner-attribution-id'?: string;\n    currency?: string;\n    commit?: boolean;\n    intent?: PayPalCommerceIntent;\n    components?: ComponentsScriptType;\n}\n\nexport interface UpdateOrderPayload {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport {\n    PaypalButtonStyleOptions,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonLayout,\n    StyleButtonShape,\n} from '../../../payment/strategies/paypal-commerce';\n\nexport default function getValidButtonStyle(\n    style: PaypalButtonStyleOptions,\n): PaypalButtonStyleOptions {\n    const { label, color, layout, shape, height, tagline } = style;\n\n    const validStyles = {\n        color: getValidColor(color),\n        height: getValidHeight(height),\n        label: getValidLabel(label),\n        layout: getValidLayout(layout),\n        shape: getValidShape(shape),\n        tagline: getValidTagline(tagline, layout),\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidColor(color?: StyleButtonColor): StyleButtonColor | undefined {\n    return color && StyleButtonColor[color] ? color : undefined;\n}\n\nfunction getValidLabel(label?: StyleButtonLabel): StyleButtonLabel | undefined {\n    return label && StyleButtonLabel[label] ? label : undefined;\n}\n\nfunction getValidLayout(layout?: StyleButtonLayout): StyleButtonLayout | undefined {\n    return layout && StyleButtonLayout[layout] ? layout : undefined;\n}\n\nfunction getValidShape(shape?: StyleButtonShape): StyleButtonShape | undefined {\n    return shape && StyleButtonShape[shape] ? shape : undefined;\n}\n\nfunction getValidTagline(tagline?: boolean, layout?: string): boolean | undefined {\n    if (\n        tagline &&\n        typeof tagline === 'boolean' &&\n        layout === StyleButtonLayout[StyleButtonLayout.horizontal]\n    ) {\n        return tagline;\n    }\n\n    return undefined;\n}\n\nfunction getValidHeight(height?: number): number {\n    const defaultHeight = 40;\n    const minHeight = 25;\n    const maxHeight = 55;\n\n    if (!height || typeof height !== 'number') {\n        return defaultHeight;\n    }\n\n    if (height > maxHeight) {\n        return maxHeight;\n    }\n\n    if (height < minHeight) {\n        return minHeight;\n    }\n\n    return height;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../../../billing';\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator } from '../../../order';\nimport { PaymentActionCreator } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalButtonStyleOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../../../payment/strategies/paypal-commerce';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceButtonInitializeOptions } from './paypal-commerce-button-options';\n\nexport default class PaypalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n    private _buyNowCartId?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommerce, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        if (paypalcommerce.buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!paypalcommerce.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                paypalcommerce.currencyCode,\n                paypalcommerce.initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const currencyCode = state.cart.getCartOrThrow().currency.code;\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                paypalcommerce.initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(containerId, methodId, paypalcommerce);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommerce: PaypalCommerceButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, initializesOnCheckoutPage, style, onComplete } =\n            paypalcommerce;\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData;\n\n        if (isHostedCheckoutEnabled && (!onComplete || typeof onComplete !== 'function')) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.onComplete\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this._onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this._onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this._onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const regularCallbacks = {\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalCallbacks = isHostedCheckoutEnabled\n            ? hostedCheckoutCallbacks\n            : regularCallbacks;\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource: paypalCommerceSdk.FUNDING.PAYPAL,\n            style: style ? this._getButtonStyle(style) : {},\n            onClick: () => this._handleClick(buyNowInitializeOptions),\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            ...paypalCallbacks,\n        };\n\n        const paypalButton = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceButtonInitializeOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n                await this._store.dispatch(this._checkoutActionCreator.loadCheckout(cart.id));\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const orderDetails = await this._getOrderDetailsOrThrow(actions);\n\n        try {\n            if (cart.lineItems.physicalItems.length > 0) {\n                const { payer, purchase_units } = orderDetails;\n                const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n                const address = this._getAddress({\n                    firstName: payer.name.given_name,\n                    lastName: payer.name.surname,\n                    email: payer.email_address,\n                    address1: shippingAddress.address_line_1,\n                    city: shippingAddress.admin_area_2,\n                    countryCode: shippingAddress.country_code,\n                    postalCode: shippingAddress.postal_code,\n                    stateOrProvinceCode: shippingAddress.admin_area_1,\n                });\n\n                await this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(address),\n                );\n                await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n                await this._updateOrder();\n            } else {\n                const { payer } = orderDetails;\n\n                const address = this._getAddress({\n                    firstName: payer.name.given_name,\n                    lastName: payer.name.surname,\n                    email: payer.email_address,\n                    address1: payer.address.address_line_1,\n                    city: payer.address.admin_area_2,\n                    countryCode: payer.address.country_code,\n                    postalCode: payer.address.postal_code,\n                    stateOrProvinceCode: payer.address.admin_area_1,\n                });\n\n                await this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(address),\n                );\n            }\n\n            await this._store.dispatch(\n                this._orderActionCreator.submitOrder({}, { params: { methodId } }),\n            );\n            await this._submitPayment(methodId, data.orderID);\n\n            if (onComplete) {\n                onComplete();\n            }\n\n            return true;\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async _getOrderDetailsOrThrow(actions: ApproveCallbackActions) {\n        try {\n            return actions.order.get();\n        } catch (error) {\n            throw new RequestError();\n        }\n    }\n\n    private async _onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this._getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and consignment addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n            await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n\n            const shippingOption = this._getShippingOptionOrThrow();\n\n            await this._store.dispatch(\n                this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n            );\n            await this._updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async _onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this._getShippingOptionOrThrow(data.selectedShippingOption.id);\n\n        try {\n            await this._store.dispatch(\n                this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n            );\n            await this._updateOrder();\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    private async _submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this._store.dispatch(\n            this._paymentActionCreator.submitPayment({ methodId, paymentData }),\n        );\n    }\n\n    private async _updateOrder(): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        try {\n            await this._paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    private _getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private _getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this._store.getState();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage ? 'paypalcommercecheckout' : 'paypalcommerce';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(cartId, providerId);\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { color, height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { color, height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../../../billing';\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator } from '../../../order';\nimport { PaymentActionCreator } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalButtonStyleOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../../../payment/strategies/paypal-commerce';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceCreditButtonInitializeOptions } from './paypal-commerce-credit-button-options';\n\nexport default class PaypalCommerceCreditButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCartId?: string;\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercecredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.`,\n            );\n        }\n\n        const {\n            buyNowInitializeOptions,\n            currencyCode,\n            initializesOnCheckoutPage,\n            messagingContainerId,\n        } = paypalcommercecredit;\n\n        if (buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const cart = state.cart.getCartOrThrow();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                cart.currency.code,\n                initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(containerId, methodId, paypalcommercecredit);\n        this._renderMessages(messagingContainerId);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercecredit: PaypalCommerceCreditButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, initializesOnCheckoutPage, style, onComplete } =\n            paypalcommercecredit;\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData;\n\n        if (isHostedCheckoutEnabled && (!onComplete || typeof onComplete !== 'function')) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.onComplete\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this._onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this._onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this._onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const regularCallbacks = {\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalCallbacks = isHostedCheckoutEnabled\n            ? hostedCheckoutCallbacks\n            : regularCallbacks;\n\n        const fundingSources = [\n            paypalCommerceSdk.FUNDING.PAYLATER,\n            paypalCommerceSdk.FUNDING.CREDIT,\n        ];\n\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: ButtonsOptions = {\n                    fundingSource,\n                    style: style ? this._getButtonStyle(style) : {},\n                    onClick: () => this._handleClick(buyNowInitializeOptions),\n                    createOrder: () => this._createOrder(initializesOnCheckoutPage),\n                    ...paypalCallbacks,\n                };\n\n                const paypalButton = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const orderDetails = await this._getOrderDetailsOrThrow(actions);\n\n        if (cart.lineItems.physicalItems.length > 0) {\n            const { payer, purchase_units } = orderDetails;\n            const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n            const address = this._getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: shippingAddress.address_line_1,\n                city: shippingAddress.admin_area_2,\n                countryCode: shippingAddress.country_code,\n                postalCode: shippingAddress.postal_code,\n                stateOrProvinceCode: shippingAddress.admin_area_1,\n            });\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n            await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n            await this._updateOrder();\n        } else {\n            const { payer } = orderDetails;\n\n            const address = this._getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: payer.address.address_line_1,\n                city: payer.address.admin_area_2,\n                countryCode: payer.address.country_code,\n                postalCode: payer.address.postal_code,\n                stateOrProvinceCode: payer.address.admin_area_1,\n            });\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        }\n\n        await this._store.dispatch(\n            this._orderActionCreator.submitOrder({}, { params: { methodId } }),\n        );\n        await this._submitPayment(methodId, data.orderID);\n\n        if (onComplete) {\n            onComplete();\n        }\n\n        return true;\n    }\n\n    private async _getOrderDetailsOrThrow(actions: ApproveCallbackActions) {\n        try {\n            return actions.order.get();\n        } catch (error) {\n            throw new RequestError();\n        }\n    }\n\n    private async _onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this._getShippingOptionOrThrow(data.selectedShippingOption.id);\n\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n        );\n        await this._updateOrder();\n    }\n\n    private async _submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this._store.dispatch(\n            this._paymentActionCreator.submitPayment({ methodId, paymentData }),\n        );\n    }\n\n    private async _onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this._getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        // Info: we use the same address to fill billing and consignment addresses to have valid quota on BE for order updating process\n        // on this stage we don't have access to valid customer's address accept shipping data\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n\n        const shippingOption = this._getShippingOptionOrThrow();\n\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n        );\n        await this._updateOrder();\n    }\n\n    private async _updateOrder(): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        try {\n            await this._paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    private _getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this._store.getState();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private _getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private _renderMessages(messagingContainerId?: string): void {\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const isMessagesAvailable = Boolean(\n            messagingContainerId && document.getElementById(messagingContainerId),\n        );\n\n        if (isMessagesAvailable) {\n            const state = this._store.getState();\n            const cart = state.cart.getCartOrThrow();\n\n            const paypalMessagesOptions = {\n                amount: cart.cartAmount,\n                placement: 'cart',\n                style: {\n                    layout: 'text',\n                },\n            };\n\n            const paypalMessages = paypalCommerceSdk.Messages(paypalMessagesOptions);\n\n            paypalMessages.render(`#${messagingContainerId}`);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceCreditButtonInitializeOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n                await this._store.dispatch(this._checkoutActionCreator.loadCheckout(cart.id));\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage\n            ? 'paypalcommercecreditcheckout'\n            : 'paypalcommercecredit';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(cartId, providerId);\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { color, height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { color, height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalButtonStyleOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n} from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceAlternativeMethodsButtonOptions } from './paypal-commerce-alternative-methods-button-options';\n\nexport default class PaypalCommerceAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    private _buyNowCartId?: string;\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercealternativemethods, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods.apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.`,\n            );\n        }\n\n        const { buyNowInitializeOptions, currencyCode, initializesOnCheckoutPage } =\n            paypalcommercealternativemethods;\n\n        if (buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const cart = state.cart.getCartOrThrow();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                cart.currency.code,\n                initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(methodId, containerId, paypalcommercealternativemethods);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        methodId: string,\n        containerId: string,\n        paypalcommercealternativemethods: PaypalCommerceAlternativeMethodsButtonOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, initializesOnCheckoutPage, style } =\n            paypalcommercealternativemethods;\n\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalCommerceSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const validButtonStyle = style ? this._getButtonStyle(style) : {};\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource: apm,\n            style: validButtonStyle,\n            onClick: () => this._handleClick(buyNowInitializeOptions),\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalButtonRender = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceAlternativeMethodsButtonOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage\n            ? 'paypalcommercealternativemethodscheckout'\n            : 'paypalcommercealternativemethod';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(cartId, providerId);\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import { BillingAddressActionCreator, BillingAddressRequestBody } from '../../../billing';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { OrderActionCreator } from '../../../order';\nimport { PaymentActionCreator } from '../../../payment';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    CompleteCallbackDataPayload,\n    PaypalCheckoutButtonOptions,\n    PayPalCommerceIntent,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../../../payment/strategies/paypal-commerce';\nimport { ConsignmentActionCreator, ShippingOption } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { PaypalCommerceInlineCheckoutButtonInitializeOptions } from './paypal-commerce-inline-checkout-button-options';\n\nexport default class PaypalCommerceInlineCheckoutButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId, paypalcommerceinline } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.containerId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerceinline) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerceinline\" argument is not provided.',\n            );\n        }\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n\n        const state = this._store.getState();\n        const currencyCode = state.cart.getCartOrThrow().currency.code;\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            false,\n        );\n\n        if (!paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        this._renderButton(methodId, containerId, paypalCommerceSdk, paypalcommerceinline);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        methodId: string,\n        containerId: string,\n        paypalCommerceSdk: PaypalCommerceSDK,\n        paypalcommerceinline: PaypalCommerceInlineCheckoutButtonInitializeOptions,\n    ): void {\n        const { buttonContainerClassName, style, onComplete, onError } = paypalcommerceinline;\n\n        if (!onComplete || typeof onComplete !== 'function') {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerceinline.onComplete\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        const fundingSource = paypalCommerceSdk.FUNDING.CARD;\n\n        const buttonRenderOptions: PaypalCheckoutButtonOptions = {\n            experience: 'accelerated',\n            fundingSource,\n            style,\n            createOrder: () => this._createOrder(methodId),\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this._onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this._onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this._onApprove(data, actions, methodId),\n            onComplete: (data: CompleteCallbackDataPayload) =>\n                this._onComplete(data, methodId, onComplete),\n            onError: (error: Error) => this._onError(error, onError),\n        };\n\n        const paypalButtonRender = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            const buttonContainerId = `${containerId}-paypal-accelerated-checkout-button`;\n\n            this._createPayPalButtonContainer(\n                containerId,\n                buttonContainerId,\n                buttonContainerClassName,\n            );\n            paypalButtonRender.render(`#${buttonContainerId}`);\n        }\n    }\n\n    private async _createOrder(methodId: string): Promise<string> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(cart.id, methodId);\n\n        return orderId;\n    }\n\n    private async _onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this._getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.country_code,\n            postalCode: data.shippingAddress.postal_code,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        // Info: we use the same address to fill billing and consignment addresses to have valid quota on BE for order updating process\n        // on this stage we don't have access to valid customer's address accept shipping data\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n\n        const shippingOption = this._getShippingOptionOrThrow();\n\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n        );\n        await this._updateOrder();\n    }\n\n    private async _onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this._getShippingOptionOrThrow(data.selectedShippingOption.id);\n\n        await this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(shippingOption.id),\n        );\n        await this._updateOrder();\n    }\n\n    private async _onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n    ): Promise<boolean> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        if (cart.lineItems.physicalItems.length > 0) {\n            const { payer, purchase_units } = orderDetails;\n            const shippingAddress = purchase_units[0]?.shipping?.address || {};\n\n            const address = this._getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: shippingAddress.address_line_1,\n                city: shippingAddress.admin_area_2,\n                countryCode: shippingAddress.country_code,\n                postalCode: shippingAddress.postal_code,\n                stateOrProvinceCode: shippingAddress.admin_area_1,\n            });\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n            await this._store.dispatch(this._consignmentActionCreator.updateAddress(address));\n            await this._updateOrder();\n        } else {\n            const { payer } = orderDetails;\n\n            const address = this._getAddress({\n                firstName: payer.name.given_name,\n                lastName: payer.name.surname,\n                email: payer.email_address,\n                address1: payer.address.address_line_1,\n                city: payer.address.admin_area_2,\n                countryCode: payer.address.country_code,\n                postalCode: payer.address.postal_code,\n                stateOrProvinceCode: payer.address.admin_area_1,\n            });\n\n            await this._store.dispatch(this._billingAddressActionCreator.updateAddress(address));\n        }\n\n        await this._store.dispatch(\n            this._orderActionCreator.submitOrder({}, { params: { methodId } }),\n        );\n        await this._submitPayment(methodId, data.orderID);\n\n        return true;\n    }\n\n    private async _onComplete(\n        data: CompleteCallbackDataPayload,\n        methodId: string,\n        callback?: () => void,\n    ): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n        const { intent } = paymentMethod.initializationData;\n\n        if (intent === PayPalCommerceIntent.capture) {\n            await this._submitPayment(methodId, data.orderID);\n        }\n\n        if (callback) {\n            callback();\n        }\n    }\n\n    private _onError(error: Error, onError?: () => void): void {\n        if (onError && typeof onError === 'function') {\n            onError();\n        }\n\n        throw new Error(error.message);\n    }\n\n    private async _updateOrder(): Promise<void> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        await this._paypalCommerceRequestSender.updateOrder({\n            availableShippingOptions: consignment.availableShippingOptions,\n            cartId: cart.id,\n            selectedShippingOption: consignment.selectedShippingOption,\n        });\n    }\n\n    private async _submitPayment(methodId: string, orderId: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this._store.dispatch(\n            this._paymentActionCreator.submitPayment({ methodId, paymentData }),\n        );\n    }\n\n    private _getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this._store.getState();\n        const consignment = state.consignments.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect = selectedShippingOption || recommendedShippingOption;\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    private _getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    private _createPayPalButtonContainer(\n        containerId: string,\n        buttonContainerId: string,\n        buttonContainerClassName = 'PaypalCommerceInlineButton',\n    ): void {\n        const paypalButtonContainer = document.createElement('div');\n\n        paypalButtonContainer.setAttribute('class', buttonContainerClassName);\n        paypalButtonContainer.setAttribute('id', buttonContainerId);\n\n        const container = document.getElementById(containerId);\n\n        if (container) {\n            container.innerHTML = '';\n            container.append(paypalButtonContainer);\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CartRequestSender } from '../../../cart';\nimport { BuyNowCartCreationError } from '../../../cart/errors';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n} from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../../payment/errors';\nimport {\n    ApproveCallbackPayload,\n    ButtonsOptions,\n    PaypalButtonStyleOptions,\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n    PaypalCommerceSDK,\n} from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport getValidButtonStyle from './get-valid-button-style';\nimport { PaypalCommerceButtonInitializeOptions } from './paypal-commerce-button-options';\nimport { PaypalCommerceVenmoButtonInitializeOptions } from './paypal-commerce-venmo-button-options';\n\nexport default class PaypalCommerceVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowCartId?: string;\n    private _paypalCommerceSdk?: PaypalCommerceSDK;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _cartRequestSender: CartRequestSender,\n        private _formPoster: FormPoster,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { paypalcommercevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        const { buyNowInitializeOptions, currencyCode, initializesOnCheckoutPage } =\n            paypalcommercevenmo;\n\n        if (buyNowInitializeOptions) {\n            const state = this._store.getState();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n        } else {\n            const state = await this._store.dispatch(\n                this._checkoutActionCreator.loadDefaultCheckout(),\n            );\n            const cart = state.cart.getCartOrThrow();\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            this._paypalCommerceSdk = await this._paypalScriptLoader.getPayPalSDK(\n                paymentMethod,\n                cart.currency.code,\n                initializesOnCheckoutPage,\n            );\n        }\n\n        this._renderButton(containerId, methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercevenmo: PaypalCommerceVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, initializesOnCheckoutPage, style } = paypalcommercevenmo;\n\n        const paypalCommerceSdk = this._getPayPalCommerceSdkOrThrow();\n        const fundingSource = paypalCommerceSdk.FUNDING.VENMO;\n\n        const validButtonStyle = style ? this._getVenmoButtonStyle(style) : {};\n\n        const buttonRenderOptions: ButtonsOptions = {\n            fundingSource,\n            style: validButtonStyle,\n            onClick: () => this._handleClick(buyNowInitializeOptions),\n            createOrder: () => this._createOrder(initializesOnCheckoutPage),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this._tokenizePayment(methodId, orderID),\n        };\n\n        const paypalButtonRender = paypalCommerceSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else {\n            this._removeElement(containerId);\n        }\n    }\n\n    private async _handleClick(\n        buyNowInitializeOptions: PaypalCommerceButtonInitializeOptions['buyNowInitializeOptions'],\n    ): Promise<void> {\n        if (\n            buyNowInitializeOptions &&\n            typeof buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                this._buyNowCartId = cart.id;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n    }\n\n    private async _createOrder(initializesOnCheckoutPage?: boolean): Promise<string> {\n        const cartId = this._buyNowCartId || this._store.getState().cart.getCartOrThrow().id;\n\n        const providerId = initializesOnCheckoutPage\n            ? 'paypalcommercevenmocheckout'\n            : 'paypalcommercevenmo';\n\n        const { orderId } = await this._paypalCommerceRequestSender.createOrder(cartId, providerId);\n\n        return orderId;\n    }\n\n    private _tokenizePayment(methodId: string, orderId?: string): void {\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(this._buyNowCartId && { cart_id: this._buyNowCartId }),\n        });\n    }\n\n    private _getPayPalCommerceSdkOrThrow(): PaypalCommerceSDK {\n        if (!this._paypalCommerceSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._paypalCommerceSdk;\n    }\n\n    private _getVenmoButtonStyle(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const { height, label, layout, shape } = getValidButtonStyle(style);\n\n        return { height, label, layout, shape };\n    }\n\n    private _removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n}\n","import Factory from './factory';\nimport Registry from './registry';\n\nexport default class ResolveIdRegistry<TType, TToken extends { [key: string]: unknown }> {\n    private _registry: Registry<TType>;\n\n    constructor() {\n        this._registry = new Registry({\n            tokenResolver: this._resolveToken.bind(this),\n            useFallback: false,\n        });\n    }\n\n    get(resolveId: TToken): TType {\n        return this._registry.get(this._encodeToken(resolveId));\n    }\n\n    register(resolveId: TToken, factory: Factory<TType>): void {\n        this._registry.register(this._encodeToken(resolveId), factory);\n    }\n\n    private _encodeToken(resolveId: TToken): string {\n        return btoa(JSON.stringify(resolveId));\n    }\n\n    private _decodeToken(token: string): TToken {\n        return JSON.parse(atob(token));\n    }\n\n    private _resolveToken(token: string, registeredTokens: string[]): string | undefined {\n        const query = this._decodeToken(token);\n        const results: Array<{ token: string; matches: number }> = [];\n\n        registeredTokens.forEach((registeredToken) => {\n            const resolverId = this._decodeToken(registeredToken);\n            const result = { token: registeredToken, matches: 0 };\n\n            for (const [key, value] of Object.entries(resolverId)) {\n                if (key in query && query[key] === value) {\n                    result.matches++;\n                }\n            }\n\n            results.push(result);\n        });\n\n        const matched = results\n            .sort((a, b) => b.matches - a.matches)\n            .filter((result) => result.matches > 0)[0];\n\n        if (matched.token) {\n            return matched.token;\n        }\n\n        throw new Error('Unable to resolve to a registered token with the provided token.');\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport {\n    AddressRequestBody,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithApplePayButtonInitializeOptions } from './apple-pay-button-initialize-options';\nimport ApplePaySessionFactory, { assertApplePayWindow } from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithApplePayButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        assertApplePayWindow(window);\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { buttonClassName, onPaymentAuthorize } = applepay;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        await this._paymentIntegrationService.loadDefaultCheckout();\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        this._applePayButton = this._createButton(containerId, buttonClassName);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(\n        containerId: string,\n        buttonClassName = 'apple-pay-checkout-button',\n    ): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        document.body.classList.add('apple-pay-supported');\n\n        const button = document.createElement('div');\n\n        button.classList.add(buttonClassName);\n        button.setAttribute('role', 'button');\n        button.setAttribute('aria-label', 'Apple Pay button');\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        unselectedOptions?.forEach((option) =>\n            shippingOptions.push({\n                label: option.description,\n                amount: `${option.cost.toFixed(decimalPlaces)}`,\n                detail: option.additionalDescription,\n                identifier: option.id,\n            }),\n        );\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayButtonStrategy from './apple-pay-button-strategy';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<ApplePayButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [{ id: 'applepay' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport {\n    createPaymentClient,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n} from '../payment';\nimport { createPaymentIntegrationService } from '../payment-integration';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\nimport createCheckoutButtonRegistryV2 from './create-checkout-button-registry-v2';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions,\n): CheckoutButtonInitializer {\n    const { host, locale = 'en' } = options ?? {};\n    const store = createCheckoutStore();\n    const paymentClient = createPaymentClient(store);\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n    const paymentIntegrationService = createPaymentIntegrationService(store);\n    const registryV2 = createCheckoutButtonRegistryV2(paymentIntegrationService);\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(\n                store,\n                paymentClient,\n                requestSender,\n                formPoster,\n                locale,\n                host,\n            ),\n            registryV2,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        ),\n    );\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    createPaymentClient,\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from '../payment';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../shipping';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport createPaymentIntegrationSelectors from './create-payment-integration-selectors';\nimport DefaultPaymentIntegrationService from './default-payment-integration-service';\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\n\nexport default function createPaymentIntegrationService(\n    store: CheckoutStore,\n): PaymentIntegrationService {\n    const {\n        config: { getHost },\n    } = store.getState();\n\n    const requestSender = createRequestSender({ host: getHost() });\n\n    const storeProjectionFactory = new PaymentIntegrationStoreProjectionFactory(\n        createPaymentIntegrationSelectors,\n    );\n\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n\n    const hostedFormFactory = new HostedFormFactory(store);\n\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        new CheckoutValidator(new CheckoutRequestSender(requestSender)),\n    );\n\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\n    );\n\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        new ConsignmentRequestSender(requestSender),\n        new CheckoutRequestSender(requestSender),\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(createPaymentClient(store)),\n        orderActionCreator,\n        new PaymentRequestTransformer(),\n        new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\n    );\n\n    return new DefaultPaymentIntegrationService(\n        store,\n        storeProjectionFactory,\n        checkoutActionCreator,\n        hostedFormFactory,\n        orderActionCreator,\n        billingAddressActionCreator,\n        consignmentActionCreator,\n        paymentMethodActionCreator,\n        paymentActionCreator,\n    );\n}\n","import {\n    CheckoutButtonStrategy,\n    CheckoutButtonStrategyFactory,\n    CheckoutButtonStrategyResolveId,\n    isResolvableModule,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ResolveIdRegistry } from '../common/registry';\nimport * as defaultCheckoutButtonStrategyFactories from '../generated/checkout-button-strategies';\n\nexport interface CheckoutButtonStrategyFactories {\n    [key: string]: CheckoutButtonStrategyFactory<CheckoutButtonStrategy>;\n}\n\nexport default function createCheckoutButtonStrategyRegistry(\n    paymentIntegrationService: PaymentIntegrationService,\n    checkoutButtonStrategyFactories: CheckoutButtonStrategyFactories = defaultCheckoutButtonStrategyFactories,\n): ResolveIdRegistry<CheckoutButtonStrategy, CheckoutButtonStrategyResolveId> {\n    const registry = new ResolveIdRegistry<\n        CheckoutButtonStrategy,\n        CheckoutButtonStrategyResolveId\n    >();\n\n    for (const [, createCheckoutButtonStrategy] of Object.entries(\n        checkoutButtonStrategyFactories,\n    )) {\n        if (\n            !isResolvableModule<\n                CheckoutButtonStrategyFactory<CheckoutButtonStrategy>,\n                CheckoutButtonStrategyResolveId\n            >(createCheckoutButtonStrategy)\n        ) {\n            continue;\n        }\n\n        for (const resolverId of createCheckoutButtonStrategy.resolveIds) {\n            registry.register(resolverId, () =>\n                createCheckoutButtonStrategy(paymentIntegrationService),\n            );\n        }\n    }\n\n    return registry;\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function isResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n): module is ResolvableModule<TModule, TIdentifier> {\n    return 'resolveIds' in module;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader, getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CartRequestSender } from '../cart';\nimport {\n    CheckoutActionCreator,\n    CheckoutRequestSender,\n    CheckoutStore,\n    CheckoutValidator,\n} from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport {\n    PaymentActionCreator,\n    PaymentMethodActionCreator,\n    PaymentMethodRequestSender,\n    PaymentRequestSender,\n    PaymentRequestTransformer,\n} from '../payment';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { ApplePaySessionFactory } from '../payment/strategies/apple-pay';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayAdyenV2Initializer,\n    GooglePayAdyenV3Initializer,\n    GooglePayAuthorizeNetInitializer,\n    GooglePayBNZInitializer,\n    GooglePayBraintreeInitializer,\n    GooglePayCheckoutcomInitializer,\n    GooglePayCybersourceV2Initializer,\n    GooglePayOrbitalInitializer,\n    GooglePayStripeInitializer,\n    GooglePayStripeUPEInitializer,\n} from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\nimport {\n    PaypalCommerceRequestSender,\n    PaypalCommerceScriptLoader,\n} from '../payment/strategies/paypal-commerce';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../shipping';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { AmazonPayV2ButtonStrategy } from './strategies/amazon-pay-v2';\nimport { ApplePayButtonStrategy } from './strategies/apple-pay';\nimport {\n    BraintreePaypalButtonStrategy,\n    BraintreePaypalCreditButtonStrategy,\n    BraintreeVenmoButtonStrategy,\n} from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\nimport {\n    PaypalCommerceAlternativeMethodsButtonStrategy,\n    PaypalCommerceButtonStrategy,\n    PaypalCommerceCreditButtonStrategy,\n    PaypalCommerceInlineCheckoutButtonStrategy,\n    PaypalCommerceVenmoButtonStrategy,\n} from './strategies/paypal-commerce';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    locale: string,\n    host?: string,\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\n        new PaymentMethodRequestSender(requestSender),\n    );\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        remoteCheckoutRequestSender,\n        checkoutActionCreator,\n    );\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator,\n    );\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentHumanVerificationHandler = new PaymentHumanVerificationHandler(\n        createSpamProtection(createScriptLoader()),\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        paymentRequestSender,\n        orderActionCreator,\n        paymentRequestTransformer,\n        paymentHumanVerificationHandler,\n    );\n    const braintreeSdkCreator = new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader));\n    const paypalScriptLoader = new PaypalCommerceScriptLoader(scriptLoader);\n    const paypalCommerceRequestSender = new PaypalCommerceRequestSender(requestSender);\n    const subscriptionsRequestSender = new SubscriptionsRequestSender(requestSender);\n    const subscriptionsActionCreator = new SubscriptionsActionCreator(subscriptionsRequestSender);\n    const billingAddressRequestSender = new BillingAddressRequestSender(requestSender);\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        billingAddressRequestSender,\n        subscriptionsActionCreator,\n    );\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(\n        consignmentRequestSender,\n        checkoutRequestSender,\n    );\n    const cartRequestSender = new CartRequestSender(requestSender);\n\n    registry.register(\n        CheckoutButtonMethodType.APPLEPAY,\n        () =>\n            new ApplePayButtonStrategy(\n                store,\n                checkoutActionCreator,\n                requestSender,\n                paymentMethodActionCreator,\n                consignmentActionCreator,\n                billingAddressActionCreator,\n                paymentActionCreator,\n                remoteCheckoutActionCreator,\n                orderActionCreator,\n                new ApplePaySessionFactory(),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.AMAZON_PAY_V2,\n        () =>\n            new AmazonPayV2ButtonStrategy(\n                store,\n                checkoutActionCreator,\n                createAmazonPayV2PaymentProcessor(),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL,\n        () =>\n            new BraintreePaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT,\n        () =>\n            new BraintreePaypalCreditButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n                window,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.BRAINTREE_VENMO,\n        () =>\n            new BraintreeVenmoButtonStrategy(\n                store,\n                paymentMethodActionCreator,\n                cartRequestSender,\n                braintreeSdkCreator,\n                formPoster,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_ADYENV2,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV2Initializer()),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_ADYENV3,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV3Initializer()),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayAuthorizeNetInitializer()),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_BNZ,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayBNZInitializer()),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayBraintreeInitializer(braintreeSdkCreator),\n                ),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(\n                    store,\n                    new GooglePayCheckoutcomInitializer(requestSender),\n                ),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayCybersourceV2Initializer()),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_ORBITAL,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayOrbitalInitializer()),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_STRIPE,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeInitializer()),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE,\n        () =>\n            new GooglePayButtonStrategy(\n                store,\n                formPoster,\n                checkoutActionCreator,\n                createGooglePayPaymentProcessor(store, new GooglePayStripeUPEInitializer()),\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.MASTERPASS,\n        () =>\n            new MasterpassButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new MasterpassScriptLoader(scriptLoader),\n                locale,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALEXPRESS,\n        () =>\n            new PaypalButtonStrategy(\n                store,\n                checkoutActionCreator,\n                new PaypalScriptLoader(scriptLoader),\n                formPoster,\n                host,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE,\n        () =>\n            new PaypalCommerceButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n                consignmentActionCreator,\n                billingAddressActionCreator,\n                paymentActionCreator,\n                orderActionCreator,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE_CREDIT,\n        () =>\n            new PaypalCommerceCreditButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n                orderActionCreator,\n                consignmentActionCreator,\n                billingAddressActionCreator,\n                paymentActionCreator,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE_APMS,\n        () =>\n            new PaypalCommerceAlternativeMethodsButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE_INLINE,\n        () =>\n            new PaypalCommerceInlineCheckoutButtonStrategy(\n                store,\n                checkoutActionCreator,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n                orderActionCreator,\n                consignmentActionCreator,\n                billingAddressActionCreator,\n                paymentActionCreator,\n            ),\n    );\n\n    registry.register(\n        CheckoutButtonMethodType.PAYPALCOMMERCE_VENMO,\n        () =>\n            new PaypalCommerceVenmoButtonStrategy(\n                store,\n                checkoutActionCreator,\n                cartRequestSender,\n                formPoster,\n                paypalScriptLoader,\n                paypalCommerceRequestSender,\n            ),\n    );\n\n    return registry;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(new AmazonPayV2ScriptLoader(getScriptLoader()));\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","message","object","name","type","setPrototypeOf","__proto__","Error","captureStackTrace","stack","DEFAULT_RESPONSE","body","headers","status","response","errors","joinErrors","reduce","result","error","join","mapFromPaymentErrorResponse","Array","isArray","_factoryMethods","this","register","detail","title","length","map","code","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","default","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","last","split","errorResponse","storefrontErrorResponse","internalErrorResponse","CheckoutActionType","ErrorActionType","OrderActionType","SubscriptionsActionType","BillingAddressActionType","omitDeep","predicate","isPlainObject","transform","omitBy","clearErrorReducer","state","action","ClearError","isClearErrorAction","payload","isEqual","objectA","objectB","options","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","replace","currentValue","newValue","undefined","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","combineReducers","data","dataReducer","composeReducers","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadCheckoutSucceeded","LoadOrderSucceeded","billingAddress","LoadCheckoutRequested","LoadCheckoutFailed","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","b","id","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","CouponActionType","GiftCertificateActionType","ConsignmentActionType","CheckoutButtonActionType","cartReducer","CreateConsignmentsSucceeded","DeleteConsignmentSucceeded","UpdateConsignmentSucceeded","UpdateShippingOptionSucceeded","LoadShippingOptionsSucceeded","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","cart","ConfigActionType","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","meta","methodId","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","CustomerActionType","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","CustomerStrategyActionType","customerReducer","customer","CreateCustomerAddressSucceeded","StripeLinkAuthenticated","CreateCustomerRequested","CreateCustomerSucceeded","CreateCustomerFailed","CreateCustomerAddressRequested","CreateCustomerAddressFailed","FormFieldsActionType","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","ExecutePaymentMethodCheckoutRequested","ExecutePaymentMethodCheckoutSucceeded","executePaymentMethodCheckoutError","executePaymentMethodCheckoutMethodId","ExecutePaymentMethodCheckoutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isExecutingPaymentMethodCheckout","isWidgetInteracting","CountryActionType","formFieldsReducer","LoadFormFieldsSucceeded","LoadFormFieldsFailed","LoadFormFieldsRequested","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","PaymentActionType","PaymentMethodActionType","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","omit","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","SubmitPaymentSucceeded","PaymentStrategyActionType","paymentMethodReducer","LoadPaymentMethodSucceeded","array","item","defaultPredicate","pick","findIndex","pickBy","push","existingItem","mergeOrPush","gateway","LoadPaymentMethodsSucceeded","methodA","methodB","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","loadMethodId","loadMethodError","LoadPaymentMethodFailed","isLoadingMethod","InstrumentActionType","paymentStrategyReducer","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","RemoteCheckoutActionType","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","PickupOptionActionType","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignments","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","objectFlatten","parent","flattened","forEach","keyString","assign","objectWithSortedKeys","sort","previous","current","ShippingCountryActionType","pickupOptionReducer","LoadPickupOptionsSucceeded","sortedflattenedMeta","consignmentId","searchArea","btoa","JSON","stringify","LoadPickupOptionsRequested","LoadPickupOptionsFailed","ShippingStrategyActionType","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","SignInEmailActionType","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","StoreCreditActionType","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","SpamProtectionActionType","subscriptionsReducer","checkoutReducer","UpdateCheckoutSucceeded","VerifyCheckoutSucceeded","orderId","UpdateCheckoutRequested","UpdateCheckoutFailed","MissingDataErrorType","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","creator","combiner","args","pop","combinerArgs","memoize","guard","errorFactory","createFreezeProxy","target","trap","proxy","create","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","charAt","deepFreeze","createProxy","provider","method","barclays","braintree","braintreepaypal","authorizenet","elavon","checkoutcom","sagepay","stripe","cybersource","cybersourcev2","bnz","converge","bluesnapv2","orbital","paymetric","bolt","digitalriver","moneris","cba_mpgs","worldpayaccess","normalize","address","firstName","lastName","company","address1","address2","city","stateOrProvince","countryCode","postalCode","phone","customFields","identity","createInternalCheckoutSelectorsFactory","getBillingAddress","getBillingAddressOrThrow","getUpdateError","getContinueAsGuestError","getLoadError","isContinuingAsGuest","isLoading","getState","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getCustomerOrThrow","getCreateAccountError","isCreatingCustomerAccount","getCreateAddressError","isCreatingCustomerAddress","getCheckout","getShippingAddress","getShippingAddressOrThrow","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentIdOrThrow","getPaymentStatus","getPaymentStatusOrThrow","getPaymentToken","getPaymentTokenOrThrow","getPaymentRedirectUrl","getPaymentRedirectUrlOrThrow","isPaymentDataRequired","isPaymentDataSubmitted","getEmail","getSendError","isSending","createBillingAddressSelector","continueAsGuestError","loadError","memoizeOne","createCartSelector","getCart","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","some","find","values","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","context","getStoreConfig","_","formState","formFields","storeConfig","getStoreConfigOrThrow","getContextConfig","getExternalSource","externalSource","getHost","host","getLocale","locale","getVariantIdentificationToken","variantIdentificationToken","createConfigSelectorFactory","createCountrySelector","getCountries","countries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","isCreating","createAddressError","isCreatingAddress","createCustomerStrategySelector","getSignInError","getSignOutError","getExecutePaymentMethodCheckoutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","instrument","bigpayToken","card","isMatch","getCardInstrumentOrThrow","MissingPaymentInstrument","getInstruments","flatMap","supportedProvider","getInstrumentsMeta","getDeleteError","createInstrumentSelectorFactory","createFormSelector","getShippingAddressFields","selectedCountry","shippingAddress","field","processField","getBillingAddressFields","getCustomerAccountFields","customerAccount","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createPickupOptionSelector","getPickupOptions","pickupOptions","sortedFlattenedParams","createPickupOptionSelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","shippingConsignment","consignment","selectedPickupOption","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","getConsignments","getConsignmentsOrThrow","getConsignmentById","getConsignmentByAddress","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","concat","lineItemIds","lineItems","physicalItems","indexOf","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","checkout","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderOrThrow","getOrderMeta","payments","currentPayment","paymentId","createOrderSelectorFactory","createPaymentSelector","providerId","internalPayment","MissingPaymentId","step","MissingPaymentStatus","redirectUrl","MissingPaymentRedirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","signInEmail","sendError","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","config","shouldWarnMutation","createCheckoutStore","initialState","factory","requestErrorFactory","actionTransformer","action$","from","pipe","catchError","every","createInternalCheckoutSelectors","createDataStore","stateTransformer","createPaymentClient","store","paymentClient","subscribe","setHost","paymentSettings","bigpayBaseUrl","cacheAction","fn","Observable","shareReplay","isActionOptions","param","useCache","cachableActionDecorator","descriptor","memoizedMethods","WeakMap","decorateMethod","lastArg","instanceMethods","set","isApplePayWindow","window","assertApplePayWindow","_requestSender","loadPaymentMethods","observer","next","createAction","params","cartId","then","deviceSessionId","sessionHash","methods","filteredMethods","_filterApplePay","complete","catch","createErrorAction","loadPaymentMethod","ContentType","INTERNAL_USE_ONLY","SDK_VERSION_HEADERS","timeout","Accept","url","throwErrorAction","of","throwError","_subscriptionActionCreator","continueAsGuest","credentials","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","merge","defer","_createOrUpdateBillingAddress","_updateCustomerConsent","updateAddress","email","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","empty","updateSubscriptions","checkoutId","createAddress","DEFAULT_PARAMS","include","post","put","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","loadCheckout","loadConfig","loadFormFields","loadDefaultCheckout","updateCheckout","loadCurrentCheckout","joinIncludes","includes","uniq","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","difference","mergeIncludes","cartA","cartB","_normalize","cartAmount","currency","digitalItems","slice","itemA","itemB","productId","variantId","localeCompare","extendedSalePrice","quantity","amount","recipient","giftWrapping","updated","validate","comparator","_compareCoupons","_compareGiftCertificates","_getComparableCheckout","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_configRequestSender","_formFieldsRequestSender","loadFields","promise","cancellable","Promise","reject","cancel","race","_mutationObserver","ensurePresence","targets","mutationsList","mutation","removedNodes","node","contains","observe","document","childList","subtree","output","disconnect","_window","callback","MutationObserver","parseUrl","test","anchor","createElement","href","port","hostname","hash","origin","protocol","pathname","search","isIframeEvent","targetOrigin","_targetWindow","_targetOrigin","event","targetWindow","fromEvent","successType","errorType","take","toPromise","postMessage","setTarget","bindMethodDecorator","decoratedTarget","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","bind","sourceOrigin","_sourceOrigins","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","removeListener","splice","trigger","_googleRecaptcha","handle","errorOrId","handleWithRecaptchaSitekey","handleWithPaymentHumanVerificationRequestError","_isPaymentHumanVerificationRequest","_initialize","additional_action_required","_performRecaptcha","execute","switchMap","human_verification_token","recaptchaSitekey","cardingProtectionElementId","cardingProtectionElement","getElementById","parentNode","removeChild","setAttribute","appendChild","load","NotInitializedErrorType","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","container","event$","Subject","_widgetId","render","size","getResponse","reset","_event$","_recaptcha","element","querySelector","retryWhen","delay","TIMEOUT","_watchRecaptchaChallengeWindow","iframeContainer","parentElement","style","visibility","attributes","attributeFilter","_scriptLoader","_loadPromise","_loadScript","resolve","grecaptcha","loadScript","createSpamProtection","scriptLoader","MutationObserverFactory","fieldErrors","HostedFieldEventType","HostedInputEventType","_type","_containerId","_placeholder","_accessibilityLabel","_styles","_eventPoster","_eventListener","_detachmentObserver","_cardInstrument","_iframe","src","border","height","overflow","width","getType","attach","contentWindow","AttachRequested","accessibilityLabel","cardInstrument","fontUrls","_getFontUrls","placeholder","styles","location","AttachSucceeded","AttachFailed","detach","submitForm","fields","SubmitRequested","SubmitSucceeded","SubmitFailed","_isSubmitErrorEvent","validateForm","ValidateRequested","Validated","isValid","links","querySelectorAll","link","fontFamily","family","_fields","_payloadTransformer","_eventCallbacks","_paymentHumanVerificationHandler","_handleEnter","noop","onBlur","onCardTypeChange","onFocus","onValidate","Blurred","CardTypeChanged","Focused","Entered","_cardType","cardType","BinChanged","_bin","bin","getBin","getCardType","_getFirstField","otherFields","without","all","otherField","submit","additionalActionData","additionalAction","isVaultedInstrument","_store","instrumentMeta","orderMeta","paymentData","paymentMethodMeta","authToken","vaultAccessToken","fieldOptions","_getCardInstrument","createScriptLoader","_orderRequestSender","_checkoutValidator","loadOrder","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","submitOrder","SubmitOrderRequested","shouldExecuteSpamCheck","_mapToOrderRequestBody","customerMessage","checkoutVariant","SubmitOrderFailed","finalizeOrder","FinalizeOrderRequested","FinalizeOrderFailed","isNil","_paymentRequestSender","_orderActionCreator","_paymentRequestTransformer","initializeOffsitePayment","shouldSaveInstrument","shouldSetAsDefaultInstrument","formattedPayload","bigpay_token","vault_payment_instrument","set_as_default_stored_instrument","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","_client","_transformResponse","statusText","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","_decimalPlaces","toInteger","round","pow","CheckoutButtonMethodType","couponTypes","mapToInternalCoupon","coupon","discount","displayName","discountType","couponType","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalLineItems","itemMap","decimalPlaces","idKey","amountTransformer","imageUrl","amountAfterDiscount","integerAmount","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","sender","mapGiftCertificateToInternalLineItem","extendedListPrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","option","addedByPromotion","mapToInternalLineItem","mapToInternalLineItemType","mapToInternalCart","promotions","notifications","sum","discountNotifications","promotion","banners","banner","placeholders","messageHtml","text","totalDiscountedAmount","certificate","appliedGiftCertificates","keyBy","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","lineItem","isShippingRequired","subtotal","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","mapToInternalCustomer","addresses","customerId","fullName","customerGroupName","customerGroup","format","month","year","trimmedMonth","trimmedYear","toObject","number","maxLength","creditCardType","info","lengths","unformattedValue","unformat","gaps","gapIndex","mapToInternalOrder","customerCanBeCreated","mapToInternalOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","socialMedia","description","image","shareText","sharingLink","channelName","channel","channelCode","mapToInternalShippingOption","isSelected","price","cost","selected","isRecommended","transitTime","_cardExpiryFormatter","_cardNumberFormatter","checkoutState","formattedInstrument","_mapShippingAddress","shippingOption","contextConfig","paymentMeta","internalCustomer","_transformPaymentMethod","quoteMeta","request","geoCountryCode","source","storeProfile","transformWithHostedFormData","_transformHostedInputValues","initializationData","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","hostedFormNonce","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","isBopisEnabled","bopis","enabled","requiredAddress","isPickup","CheckoutIncludes","_consignmentRequestSender","unassignItemsByAddress","_consignmentHasAddress","existingConsignment","_removeLineItems","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","consignmentUpdateBody","shippingOptionId","consignmentMeta","loadShippingOptions","AvailableShippingOptions","_getUpdateAddressRequestBody","createConsignments","updateShippingOption","_isUpdateConsignmentRequest","customItems","itemId","_hydrateLineItems","sharedItem","DEFAULT_INCLUDES","delete","_subscriptionsRequestSender","cloneDeep","input","cloneDeepSafe","cache","cloneResult","createPaymentIntegrationSelectors","isPaymentMethodInitialized","_storeProjectionFactory","_checkoutActionCreator","_hostedFormFactory","_billingAddressActionCreator","_consignmentActionCreator","_paymentMethodActionCreator","_paymentActionCreator","_storeProjection","createHostedForm","subscriber","filters","dispatch","updateBillingAddress","updateShippingAddress","ProjectionActionType","_transformSelectors","projection","Synchronize","initial","createDataStoreProjection","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","getKey","_resolveMap","parentMap","cacheKey","usedCount","_generateMap","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","isPrivate","selectorDecorator","resolver","memoizedMethod","cachedValue","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","_buttonStrategyActionCreator","_state","initializeButton","containerIds","selector","idPrefix","containers","uniqueId","setUniqueElementId","initialize","queueId","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_registryV2","paymentMethodRequestParams","currencyCode","paymentMethodRequestOptions","_getStrategy","strategy","createBuyNowCart","_factories","_instances","_defaultToken","defaultToken","_useFallback","useFallback","_tokenResolver","tokenResolver","cacheToken","_getInstance","_hasFactory","_hasInstance","resolvedToken","getShippableItemsCount","total","AmazonPayV2Regions","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","_amazonPayV2ScriptLoader","_amazonPayV2SDK","_buttonParentContainer","_createAmazonPayButtonParentContainer","_amazonPayV2Button","remove","bindButton","buttonId","sessionId","changeAction","_getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","renderButton","prepareCheckout","createCheckoutSessionConfig","publicKeyId","signedPayload","requestConfig","_isEnvironmentSpecific","_getAmazonPayV2Button","onClick","initCheckout","signout","renderAmazonPayButton","decoupleCheckoutInitiation","placement","parentContainerId","_getButtonParentContainer","amazonPayV2ButtonOptions","_getAmazonPayV2ButtonOptions","isPh4Enabled","features","storeCountryCode","isPh4UsOnly","uid","random","substr","parentContainer","merchantId","testMode","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","shopPath","buttonBaseConfig","productType","PayOnly","PayAndShip","buttonColor","Gold","buttonOptions","tmpConfig","sandbox","estimatedOrderAmount","createCheckoutSession","_getOrThrow","region","amazonPayV2Region","amazon","ApplePaySession","PAYPAL_COMPONENTS","_braintreeScriptLoader","_dataCollectors","clientToken","_clientToken","getClient","loadClient","client","authorization","getPaypal","_paypal","loadPaypal","getPaypalCheckout","onSuccess","onError","loadPaypalCheckout","paypalCheckout","paypalCheckoutConfig","paypalCheckoutCallback","braintreePaypalCheckout","paypalSdkLoadConfig","components","paypal","loadPayPalSDK","_paypalCheckout","getVenmoCheckout","_venmoCheckout","loadVenmoCheckout","venmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","venmoCheckoutCallback","braintreeVenmoCheckout","isBrowserSupported","get3DS","_3ds","load3DS","version","getDataCollector","cached","loadDataCollector","kount","deviceData","teardown","getVisaCheckout","_visaCheckout","loadVisaCheckout","getGooglePaymentComponent","_googlePay","loadGooglePayment","createHostedFields","loadHostedFields","_teardown","mod","threeDSecure","dataCollector","visaCheckout","venmo","googlePayment","hostedFields","ButtonType","ButtonColor","BillingAddressFormat","getFirstAndLastName","nameParts","_googlePayScriptLoader","_googlePayInitializer","_methodId","_configureWallet","buttonType","Short","Default","_googlePayClient","displayWallet","loadPaymentData","_getPaymentDataRequest","handleSuccess","parseResponse","tokenizePayload","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","checkoutSettings","_getMethodId","hasShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","apiVersion","apiVersionMinor","_getCardInformation","cardInformation","lastFour","google","environment","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","customerEmail","paymentMethodData","locality","companyName","address3","administrativeArea","phoneNumber","postPaymentData","details","payment_type","tokenFormat","card_information","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","requestSender","createRequestSender","getScriptLoader","_getGooglePayPaymentDataRequest","gatewayMerchantId","merchantName","merchantInfo","authJwt","billingAddressRequired","billingAddressParameters","Full","phoneNumberRequired","tokenizationSpecification","transactionInfo","totalPriceStatus","totalPrice","toFixed","emailRequired","shippingAddressRequired","shippingAddressParameters","baseRequest","_getGooglePaymentDataRequest","supportedCards","paymentGatewaySpecification","_getPaymentGatewaySpecification","cardPaymentMethod","_getCardPaymentMethod","_braintreeSDKCreator","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parse","tokenizationData","androidPayCards","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","googleMerchantName","googleMerchantId","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_publishableKey","_testMode","_errorMessage","checkoutcomkey","_mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2","err","signature","protocolVersion","signedMessage","_convertToken","finalToken","cardNetwork","cardDetails","token_format","_requestCheckoutcomTokenize","token_data","checkoutcomToken","checkoutcomKey","Authorization","last4","stripeVersion","stripePublishableKey","stripeConnectedAccount","useMasterpassSrc","language","sourceUrl","masterpass","scriptSrc","async","getPayPalSDK","initializesOnCheckoutPage","_paypalSdk","_getPayPalSdkScriptConfigOrThrow","paypalSdkScriptConfig","paypalLoadScript","clientId","intent","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isInlineCheckoutEnabled","isPayPalCreditAvailable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","shouldShowInlineCheckout","commit","shouldEnableCard","enableCardFunding","disableCardFunding","enableCreditFunding","disableCreditFunding","shouldEnableAPMs","enableVenmoFunding","disableVenmoFunding","enableAPMsFunding","disableAPMsFunding","apm","disableFunding","enableFunding","setupPayment","isCredit","isCheckout","isCreditCard","isAPM","isVenmo","createOrder","getOrderStatus","updateOrder","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","signOut","generateToken","trackAuthorizationEvent","forgetCheckout","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","ForgetCheckoutRemoteCustomerRequested","ForgetCheckoutRemoteCustomerSucceeded","ForgetCheckoutRemoteCustomerFailed","_amazonPayV2PaymentProcessor","amazonpay","Cart","DefaultLabels","_remoteCheckoutActionCreator","_sessionFactory","_onAuthorizeCallback","_subTotalLabel","Subtotal","_shippingLabel","Shipping","applepay","buttonClassName","onPaymentAuthorize","_paymentMethod","_applePayButton","_createButton","_handleWalletButtonClick","classList","add","button","preventDefault","_getBaseRequest","applePaySession","_handleApplePayEvents","begin","storeName","merchantCapabilities","supportedNetworks","requiresShipping","requiredBillingContactFields","requiredShippingContactFields","tax","onvalidatemerchant","_onValidateMerchant","merchantSession","completeMerchantValidation","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","oncancel","onpaymentauthorized","_onPaymentAuthorized","_transformContactToAddress","shippingContact","abort","selectionShippingOptionId","availableOptions","availableShippingOptions","selectedOption","unselectedOptions","shippingOptions","additionalDescription","identifier","completeShippingContactSelection","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","optionId","selectedOptionId","_updateShippingOption","newShippingMethods","newTotal","newLineItems","_getUpdatedLineItems","completeShippingMethodSelection","validationURL","bigPayEndpoint","paymentsUrl","billingContact","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","transformedBillingAddress","transformedShippingAddress","emailAddress","completePayment","STATUS_SUCCESS","STATUS_FAILURE","contact","givenName","familyName","addressLines","mapToBraintreeShippingAddressOverride","recipientName","line1","line2","getValidButtonStyle","color","fundingicons","layout","shape","tagline","validStyles","getValidHeight","mapToLegacyBillingAddress","first_name","last_name","phone_number","address_line_1","address_line_2","country_code","postal_code","mapToLegacyShippingAddress","_cartRequestSender","_formPoster","messagingContainerId","buyNowInitializeOptions","paypalCheckoutOptions","paypalCheckoutSuccessCallback","_renderPayPalComponents","paypalCheckoutErrorCallback","_handleError","_renderPayPalMessages","_renderPayPalButton","shouldProcessPayment","onAuthorizeError","fundingSource","FUNDING","PAYPAL","validButtonStyle","paypalButtonRender","Buttons","env","_setupPayment","onApprove","authorizeData","_tokenizePayment","isEligible","_removeElement","isMessageContainerAvailable","Messages","onPaymentError","_createBuyNowCart","_buyNowCart","shippingAddressOverride","createPayment","flow","enableShippingAddress","shippingAddressEditable","offerCredit","getBuyNowCartRequestBody","cartRequestBody","tokenizePayment","buyNowCartId","postForm","device_data","billing_address","shipping_address","cart_id","buttonContainerId","onErrorCallback","elementId","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","braintreepaypalcredit","hasRenderedSmartButton","fundingSources","PAYLATER","CREDIT","buttonStyle","venmoButtonStyle","backgroundColor","backgroundPosition","backgroundSize","backgroundImage","backgroundRepeat","borderRadius","cursor","transition","minHeight","minWidth","_onError","braintreevenmo","_handleInitializationVenmoSuccess","_handleInitializationVenmoError","_renderVenmoButton","_removeVenmoContainer","buttonContainer","venmoButton","buyBowCart","tokenize","removeAttribute","_handlePostForm","_googlePayPaymentProcessor","googlePayOptions","_getGooglePayOptions","_walletButton","_createSignInButton","googlePayButton","googlepayadyenv2","googlepayadyenv3","googlepayauthorizenet","googlepaybnz","googlepaybraintree","googlepaycheckoutcom","googlepaycybersourcev2","googlepayorbital","googlepaystripe","googlepaystripeupe","hasPhysicalItems","_onPaymentSelectComplete","supportedLocales","es","en","pt","zu","ar","zh","ms","uk","sv","hr","pl","nl","it","de","fr","formatLocale","localeLanguage","toLowerCase","formattedLocale","countryLocales","_masterpassScriptLoader","_locale","masterpassScriptLoaderParams","isMasterpassSrcEnabled","_masterpassClient","_signInButton","subdomain","_createMasterpassPayload","allowedCardTypes","CheckoutButtonNotInitialized","_paypalScriptLoader","_host","paypalOptions","fundingCreditOption","allowedSources","allowCredit","disallowedSources","Button","funding","allowed","disallowed","RECT","RESPONSIVE","actions","onAuthorize","res","paymentID","payerID","payerId","payerInfo","payer","payer_info","StyleButtonLabel","StyleButtonLayout","StyleButtonColor","StyleButtonShape","PayPalCommerceIntent","getValidColor","getValidLabel","getValidLayout","getValidShape","getValidTagline","horizontal","_paypalCommerceRequestSender","paypalcommerce","_paypalCommerceSdk","_renderButton","onComplete","paypalCommerceSdk","_getPayPalCommerceSdkOrThrow","paypalCallbacks","onShippingAddressChange","_onShippingAddressChange","onShippingOptionsChange","_onShippingOptionsChange","_onHostedCheckoutApprove","orderID","buttonRenderOptions","_getButtonStyle","_handleClick","_createOrder","paypalButton","_buyNowCartId","_getOrderDetailsOrThrow","orderDetails","purchase_units","_getAddress","given_name","surname","email_address","admin_area_2","admin_area_1","_updateOrder","_submitPayment","_getShippingOptionOrThrow","device_info","method_id","paypal_account","order_id","selectedShippingOptionId","recommendedShippingOption","shippingOptionToSelect","paypalcommercecredit","_renderMessages","paypalMessagesOptions","paypalcommercealternativemethods","paypalcommerceinline","buttonContainerClassName","experience","CARD","_onApprove","_onComplete","_createPayPalButtonContainer","capture","paypalButtonContainer","innerHTML","append","paypalcommercevenmo","VENMO","_getVenmoButtonStyle","_resolveToken","resolveId","_encodeToken","_decodeToken","atob","registeredTokens","query","results","registeredToken","resolverId","matches","entries","matched","_paymentIntegrationService","paymentIntegrationService","resolveIds","createCheckoutButtonInitializer","formPoster","createFormPoster","storeProjectionFactory","checkoutActionCreator","hostedFormFactory","orderActionCreator","billingAddressActionCreator","consignmentActionCreator","paymentMethodActionCreator","paymentActionCreator","createPaymentIntegrationService","registryV2","checkoutButtonStrategyFactories","registry","createCheckoutButtonStrategy","isResolvableModule","checkoutRequestSender","remoteCheckoutRequestSender","remoteCheckoutActionCreator","checkoutValidator","paymentRequestSender","paymentRequestTransformer","paymentHumanVerificationHandler","braintreeSdkCreator","paypalScriptLoader","paypalCommerceRequestSender","subscriptionsRequestSender","subscriptionsActionCreator","billingAddressRequestSender","consignmentRequestSender","cartRequestSender","createCheckoutButtonRegistry"],"sourceRoot":""}