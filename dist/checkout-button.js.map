{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"tslib\"","webpack:///external \"lodash\"","webpack:///external \"@bigcommerce/data-store\"","webpack:///external \"rxjs\"","webpack:///external \"@bigcommerce/memoize\"","webpack:///./src/shipping/consignment-actions.ts","webpack:///external \"rxjs/operators\"","webpack:///./src/customer/customer-strategy-actions.ts","webpack:///./src/payment/payment-strategy-type.ts","webpack:///./src/shipping/shipping-strategy-actions.ts","webpack:///./src/payment/payment-strategy-actions.ts","webpack:///./src/common/error/errors/missing-data-error.ts","webpack:///./src/checkout/checkout-actions.ts","webpack:///./src/order/order-actions.ts","webpack:///./src/payment/payment-method-actions.ts","webpack:///./src/billing/billing-address-actions.ts","webpack:///./src/checkout-buttons/checkout-button-actions.ts","webpack:///./src/coupon/coupon-actions.ts","webpack:///./src/common/error/errors/standard-error.ts","webpack:///./src/common/utility/set-prototype-of.ts","webpack:///./src/customer/customer-actions.ts","webpack:///./src/payment/instrument/instrument-actions.ts","webpack:///./src/coupon/gift-certificate-actions.ts","webpack:///./src/payment/strategies/googlepay/googlepay.ts","webpack:///./src/remote-checkout/remote-checkout-actions.ts","webpack:///./src/common/http-request/content-type.ts","webpack:///./src/common/http-request/sdk-version-headers.ts","webpack:///external \"@bigcommerce/script-loader\"","webpack:///./src/common/error/errors/request-error.ts","webpack:///./src/payment/payment-status-types.ts","webpack:///./src/payment/errors/payment-method-client-unavailable-error.ts","webpack:///./src/config/config-actions.ts","webpack:///./src/form/form-fields-actions.ts","webpack:///./src/common/utility/is-plain-object.ts","webpack:///./src/geography/country-actions.ts","webpack:///./src/shipping/shipping-country-actions.ts","webpack:///./src/signin-email/signin-email-actions.ts","webpack:///external \"@bigcommerce/request-sender\"","webpack:///./src/store-credit/store-credit-actions.ts","webpack:///./src/common/error/errors/invalid-argument-error.ts","webpack:///./src/payment/payment-method-types.ts","webpack:///./src/common/http-request/internal-api-headers.ts","webpack:///./src/payment/payment-actions.ts","webpack:///./src/common/http-request/join-includes.ts","webpack:///./src/spam-protection/spam-protection-actions.ts","webpack:///external \"shallowequal\"","webpack:///./src/common/utility/is-equal.ts","webpack:///external \"@bigcommerce/form-poster\"","webpack:///./src/common/http-request/join-or-merge-includes.ts","webpack:///./src/common/http-request/merge-includes.ts","webpack:///external \"reselect\"","webpack:///./src/common/selector/with-memoized-combiner.ts","webpack:///./src/common/error/error-actions.ts","webpack:///./src/payment/payment-method-action-creator.ts","webpack:///./src/payment/payment-method-request-sender.ts","webpack:///./src/checkout/checkout-default-includes.ts","webpack:///./src/common/error/throw-error-action.ts","webpack:///./src/payment/errors/payment-method-failed-error.ts","webpack:///./src/common/data-store/cache-action.ts","webpack:///./src/common/data-store/is-action-options.ts","webpack:///./src/common/data-store/cachable-action-decorator.ts","webpack:///./src/common/utility/bind-decorator.ts","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2.ts","webpack:///./src/payment/strategies/braintree/braintree-script-loader.ts","webpack:///./src/payment/strategies/braintree/braintree.ts","webpack:///./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack:///./src/payment/strategies/apple-pay/is-apple-pay-window.ts","webpack:///./src/checkout/errors/checkout-not-available-error.ts","webpack:///./src/common/utility/omit-deep.ts","webpack:///./src/checkout/checkout-request-sender.ts","webpack:///./src/checkout/checkout-action-creator.ts","webpack:///./src/shipping/consignment-action-creator.ts","webpack:///./src/shipping/consignment-request-sender.ts","webpack:///./src/payment/strategies/masterpass/get-callback-url.ts","webpack:///./src/common/utility/is-private.ts","webpack:///./src/common/error/errors/unrecoverable-error.ts","webpack:///./src/common/error/errors/map-from-internal-error-response.ts","webpack:///./src/common/error/request-error-factory.ts","webpack:///./src/common/error/errors/map-from-storefront-error-response.ts","webpack:///./src/common/error/clear-error-reducer.ts","webpack:///./src/common/utility/replace.ts","webpack:///./src/common/utility/object-set.ts","webpack:///./src/billing/billing-address-state.ts","webpack:///./src/billing/billing-address-reducer.ts","webpack:///./src/common/utility/array-replace.ts","webpack:///./src/common/utility/object-merge.ts","webpack:///./src/cart/cart-state.ts","webpack:///./src/cart/cart-reducer.ts","webpack:///./src/checkout-buttons/checkout-button-state.ts","webpack:///./src/checkout-buttons/checkout-button-reducer.ts","webpack:///./src/config/config-state.ts","webpack:///./src/config/config-reducer.ts","webpack:///./src/coupon/coupon-state.ts","webpack:///./src/coupon/coupon-reducer.ts","webpack:///./src/coupon/gift-certificate-state.ts","webpack:///./src/coupon/gift-certificate-reducer.ts","webpack:///./src/customer/customer-state.ts","webpack:///./src/customer/customer-reducer.ts","webpack:///./src/customer/customer-strategy-state.ts","webpack:///./src/customer/customer-strategy-reducer.ts","webpack:///./src/form/form-fields-state.ts","webpack:///./src/form/form-fields-reducer.ts","webpack:///./src/geography/country-state.ts","webpack:///./src/geography/country-reducer.ts","webpack:///./src/order/order-state.ts","webpack:///./src/order/order-reducer.ts","webpack:///./src/payment/payment-reducer.ts","webpack:///./src/payment/payment-method-state.ts","webpack:///./src/payment/payment-method-reducer.ts","webpack:///./src/common/utility/merge-or-push.ts","webpack:///./src/payment/payment-strategy-state.ts","webpack:///./src/payment/payment-strategy-reducer.ts","webpack:///./src/payment/instrument/instrument-state.ts","webpack:///./src/payment/instrument/instrument-reducer.ts","webpack:///./src/remote-checkout/remote-checkout-state.ts","webpack:///./src/remote-checkout/remote-checkout-reducer.ts","webpack:///./src/shipping/consignment-state.ts","webpack:///./src/shipping/consignment-reducer.ts","webpack:///./src/shipping/shipping-country-state.ts","webpack:///./src/shipping/shipping-country-reducer.ts","webpack:///./src/shipping/shipping-strategy-state.ts","webpack:///./src/shipping/shipping-strategy-reducer.ts","webpack:///./src/signin-email/signin-email-state.ts","webpack:///./src/signin-email/signin-email-reducer.ts","webpack:///./src/store-credit/store-credit-reducer.ts","webpack:///./src/subscription/subscriptions-state.ts","webpack:///./src/subscription/subscriptions-reducer.ts","webpack:///./src/checkout/checkout-state.ts","webpack:///./src/checkout/checkout-reducer.ts","webpack:///./src/common/utility/guard.ts","webpack:///./src/common/utility/create-freeze-proxy.ts","webpack:///./src/form/form-selector.ts","webpack:///./src/payment/instrument/supported-payment-instruments.ts","webpack:///./src/address/is-address-equal.ts","webpack:///./src/shipping/consignment-selector.ts","webpack:///./src/store-credit/store-credit-state.ts","webpack:///./src/checkout/create-internal-checkout-selectors.ts","webpack:///./src/billing/billing-address-selector.ts","webpack:///./src/checkout-buttons/checkout-button-selector.ts","webpack:///./src/coupon/coupon-selector.ts","webpack:///./src/customer/customer-selector.ts","webpack:///./src/remote-checkout/remote-checkout-selector.ts","webpack:///./src/shipping/shipping-address-selector.ts","webpack:///./src/payment/payment-selector.ts","webpack:///./src/signin-email/signin-email-selector.ts","webpack:///./src/cart/cart-selector.ts","webpack:///./src/config/config-selector.ts","webpack:///./src/geography/country-selector.ts","webpack:///./src/customer/customer-strategy-selector.ts","webpack:///./src/coupon/gift-certificate-selector.ts","webpack:///./src/payment/instrument/instrument-selector.ts","webpack:///./src/payment/payment-method-selector.ts","webpack:///./src/payment/payment-strategy-selector.ts","webpack:///./src/shipping/shipping-country-selector.ts","webpack:///./src/shipping/shipping-strategy-selector.ts","webpack:///./src/checkout/checkout-selector.ts","webpack:///./src/order/order-selector.ts","webpack:///./src/store-credit/store-credit-selector.ts","webpack:///./src/subscription/subscriptions-selector.ts","webpack:///./src/checkout/create-checkout-store.ts","webpack:///./src/checkout/create-action-transformer.ts","webpack:///./src/common/error/create-request-error-factory.ts","webpack:///./src/checkout/create-checkout-store-reducer.ts","webpack:///./src/payment/strategies/masterpass/masterpass-supported-locales.ts","webpack:///./src/payment/strategies/masterpass/format-locale.ts","webpack:///./src/checkout/checkout-params.ts","webpack:///./src/common/selector/selector-decorator.ts","webpack:///./src/checkout-buttons/checkout-button-error-selector.ts","webpack:///./src/checkout-buttons/checkout-button-status-selector.ts","webpack:///./src/checkout-buttons/create-checkout-button-selectors.ts","webpack:///./src/checkout-buttons/checkout-button-initializer.ts","webpack:///./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack:///./src/common/dom/is-element-id.ts","webpack:///./src/common/dom/set-unique-element-id.ts","webpack:///./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack:///./src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-button-strategy.ts","webpack:///./src/checkout-buttons/create-checkout-button-initializer.ts","webpack:///./src/checkout-buttons/create-checkout-button-registry.ts","webpack:///./src/common/utility/cache-key-maps.ts","webpack:///./src/common/utility/cache-key-resolver.ts","webpack:///./src/common/error/errors/map-from-payment-error-response.ts","webpack:///./src/common/error/errors/timeout-error.ts","webpack:///./src/payment/errors/payment-method-invalid-error.ts","webpack:///./src/common/selector/create-selector.ts","webpack:///./src/subscription/subscriptions-actions.ts","webpack:///./src/config/config-action-creator.ts","webpack:///./src/config/config-request-sender.ts","webpack:///./src/common/error/errors/not-initialized-error.ts","webpack:///./src/subscription/subscriptions-request-sender.ts","webpack:///./src/form/form-fields-action-creator.ts","webpack:///./src/form/form-fields-request-sender.ts","webpack:///./src/billing/billing-address-request-sender.ts","webpack:///./src/common/registry/registry.ts","webpack:///./src/common/error/errors/not-implemented-error.ts","webpack:///./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack:///./src/payment/strategies/googlepay/googlepay-adyenv2-initializer.ts","webpack:///./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack:///./src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-checkoutcom-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-cybersourcev2-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-orbital-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack:///./src/payment/strategies/paypal/paypal-script-loader.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-request-sender.ts","webpack:///./src/bundles/checkout-button.ts","webpack:///./src/payment/strategies/googlepay/googlepay-get-first-and-last-name.ts","webpack:///./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack:///./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack:///./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-sdk.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-script-loader.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-payment-processor.ts","webpack:///./src/payment/strategies/paypal-commerce/create-paypal-commerce-payment-processor.ts","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-processor.ts","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2-script-loader.ts","webpack:///./src/payment/strategies/amazon-pay-v2/create-amazon-pay-v2-payment-processor.ts","webpack:///./src/shipping/getShippableItemsCount.ts","webpack:///./src/shipping/getLineItemsCount.ts","webpack:///./src/subscription/errors/update-subscriptions-error.ts","webpack:///./src/subscription/subscriptions-action-creator.ts","webpack:///./src/billing/errors/unable-to-continue-as-guest-error.ts","webpack:///./src/billing/billing-address-action-creator.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyType","ShippingStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","subtype","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","CheckoutActionType","OrderActionType","PaymentMethodActionType","BillingAddressActionType","CheckoutButtonActionType","CouponActionType","message","setPrototypeOf","__proto__","Error","captureStackTrace","stack","CustomerActionType","InstrumentActionType","GiftCertificateActionType","ButtonType","ButtonColor","BillingAddressFormat","RemoteCheckoutActionType","ContentType","SDK_VERSION_HEADERS","DEFAULT_RESPONSE","body","headers","status","response","errors","ACKNOWLEDGE","FINALIZE","ConfigActionType","FormFieldsActionType","isPlainObject","CountryActionType","ShippingCountryActionType","SignInEmailActionType","StoreCreditActionType","HOSTED","OFFLINE","INTERNAL_USE_ONLY","PaymentActionType","joinIncludes","includes","join","SpamProtectionActionType","isEqual","objectA","objectB","options","Array","isArray","length","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","mergeIncludes","withMemoizedCombiner","creator","combiner","args","pop","result","combinerArgs","ErrorActionType","_requestSender","loadPaymentMethods","observer","next","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","_filterApplePay","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","methods","method","id","window","timeout","this","Accept","JsonV1","url","throwErrorAction","action","payload","cacheAction","fn","pipe","store","isActionOptions","param","useCache","cachableActionDecorator","_","descriptor","memoizedMethods","WeakMap","decorateMethod","lastArg","instanceMethods","set","bindMethodDecorator","boundMethod","target","decoratedTarget","getOwnPropertyNames","forEach","getOwnPropertyDescriptor","bindClassDecorator","AmazonPayV2Regions","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadVenmoCheckout","venmo","loadGooglePayment","googlePayment","loadHostedFields","hostedFields","PAYPAL_COMPONENTS","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","config","renderButtonCallback","_paypalCheckout","_paypalcheckoutInstance","_error","instance","loadPayPalSDK","currency","components","getVenmoCheckout","getVenmoInstance","storeCountry","resolve","_venmoCheckout","allowDesktop","paymentMethodUsage","venmoErr","venmoInstance","_venmoCheckoutInstance","isBrowserSupported","get3DS","_3ds","version","getDataCollector","cacheKey","cached","kount","code","deviceData","teardown","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","createHostedFields","_teardown","default","mod","isApplePayWindow","assertApplePayWindow","title","omitDeep","predicate","map","loadCheckout","params","include","updateCheckout","put","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","LoadCheckoutRequested","loadConfig","loadFormFields","LoadCheckoutSucceeded","LoadCheckoutFailed","loadDefaultCheckout","state","getState","context","getContextConfig","checkoutId","checkout","getCheckout","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","_consignmentRequestSender","unassignItemsByAddress","consignment","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getUpdateAddressRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","customItems","item","itemId","quantity","_hydrateLineItems","lineItemIds","existingItem","sharedItem","lineItem","concat","request","DEFAULT_INCLUDES","post","delete","getCallbackUrl","origin","location","isPrivate","indexOf","joinErrors","reduce","_factoryMethods","register","detail","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","ClearError","isClearErrorAction","replace","currentValue","newValue","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","data","dataReducer","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadOrderSucceeded","billingAddress","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","a","b","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cartReducer","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customerReducer","customer","CreateCustomerAddressSucceeded","CreateCustomerRequested","CreateCustomerSucceeded","CreateCustomerFailed","CreateCustomerAddressRequested","CreateCustomerAddressFailed","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","ExecutePaymentMethodCheckoutRequested","ExecutePaymentMethodCheckoutSucceeded","executePaymentMethodCheckoutError","executePaymentMethodCheckoutMethodId","ExecutePaymentMethodCheckoutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isExecutingPaymentMethodCheckout","isWidgetInteracting","formFieldsReducer","LoadFormFieldsSucceeded","LoadFormFieldsFailed","LoadFormFieldsRequested","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","SubmitPaymentSucceeded","paymentMethodReducer","array","defaultPredicate","push","mergeOrPush","gateway","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","paymentStrategyReducer","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","SignOutCustomerSucceeded","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","subscriptionsReducer","checkoutReducer","VerifyCheckoutSucceeded","orderId","guard","errorFactory","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","formFields","countries","countryCode","selectedCountry","field","processField","getBillingAddressFields","getCustomerAccountFields","customerAccount","getLoadError","loadError","isLoading","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","provider","barclays","braintreepaypal","authorizenet","elavon","checkoutcom","stripe","cybersource","cybersourcev2","converge","bluesnapv2","orbital","paymetric","bolt","digitalriver","moneris","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isCreating","isAssigningItems","createInternalCheckoutSelectorsFactory","getBillingAddress","getBillingAddressOrThrow","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getCustomerOrThrow","getCreateAccountError","isCreatingCustomerAccount","getCreateAddressError","isCreatingCustomerAddress","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","getEmail","getSendError","isSending","createBillingAddressSelector","continueAsGuestError","createCartSelector","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","getStoreConfig","formState","storeConfig","getStoreConfigOrThrow","getExternalSource","externalSource","getVariantIdentificationToken","variantIdentificationToken","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createAddressError","isCreatingAddress","createCustomerStrategySelector","getSignInError","getSignOutError","getExecutePaymentMethodCheckoutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","find","instrument","bigpayToken","some","card","getInstruments","supportedProvider","getInstrumentsMeta","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderOrThrow","getOrderMeta","payments","currentPayment","paymentId","createOrderSelectorFactory","createPaymentSelector","providerId","internalPayment","step","redirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","signInEmail","sendError","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","action$","every","createInternalCheckoutSelectors","stateTransformer","supportedLocales","es","en","pt","zu","ar","zh","ms","uk","sv","hr","pl","nl","it","de","fr","formatLocale","localeLanguage","toLowerCase","language","formattedLocale","countryLocales","CheckoutIncludes","selectorDecorator","resolver","memoizedMethod","cachedValue","getUsedCount","cache","getKey","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","CheckoutButtonMethodType","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","test","selector","idPrefix","containers","document","querySelectorAll","slice","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_paymentMethodActionCreator","_checkoutActionCreator","_amazonPayV2PaymentProcessor","amazonpay","_createSignInButton","_walletButton","parentNode","removeChild","getElementById","_getAmazonPayV2ButtonOptions","amazonButtonOptions","createButton","shopPath","merchantId","testMode","checkoutLanguage","ledgerCurrency","checkoutSessionMethod","extractAmazonCheckoutSessionId","createCheckoutSession","sandbox","productType","getShippableItemsCount","PayOnly","PayAndShip","placement","Cart","_braintreeSDKCreator","_formPoster","_offerCredit","_renderButtonsData","paypalOptions","braintreepaypalcredit","_paymentMethod","storeState","shopperCurrency","storeProfile","messagingContainerId","venmoParentContainer","paypalCheckoutInstance","_renderButtons","venmoCheckoutInstance","_renderVenmoButton","updatedPaypalOptions","isMessageContainerAvailable","ppsdkFeatureOn","checkoutSettings","features","FUNDING_SOURCES","fundingKey","FUNDING","skipCreditSource","allowCredit","_validateHeight","source","button","Buttons","env","fundingSource","commit","style","shape","createOrder","_setupPayment","onPaymentError","onApprove","_tokenizePayment","shouldProcessPayment","onAuthorizeError","isEligible","render","_renderMessages","cartAmount","venmoButton","createElement","buttonsContainer","appendChild","setAttribute","_displayVenmoButton","addEventListener","tokenize","tokenizeErr","removeAttribute","_handleVenmoError","_handleSuccess","postForm","payment_type","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","err","amount","Messages","height","onError","addresses","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","offerCredit","CheckoutButtonNotInitialized","tokenizePayment","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","stateOrProvinceCode","_googlePayPaymentProcessor","googlePayOptions","_getGooglePayOptions","_methodId","_getMethodId","buttonOptions","buttonType","buttonColor","googlePayButton","_handleWalletButtonClick","googlepayadyenv2","googlepayauthorizenet","googlepaybraintree","googlepaycheckoutcom","googlepaycybersourcev2","googlepayorbital","googlepaystripe","event","preventDefault","hasPhysicalItems","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_masterpassScriptLoader","_locale","initializationData","masterpassScriptLoaderParams","useMasterpassSrc","isMasterpassSrcEnabled","load","masterpass","_masterpassClient","_signInButton","removeEventListener","buttonContainer","subdomain","src","_createMasterpassPayload","allowedCardTypes","cartId","_paypalScriptLoader","_host","clientId","allowedSources","disallowedSources","CREDIT","Button","funding","allowed","disallowed","size","actions","onAuthorize","res","_onError","paymentID","payerID","payerId","payerInfo","payer","payer_info","_paypalCommercePaymentProcessor","buttonParams","onClick","_handleClickButtonProvider","paypalCommerce","messagingContainer","isMessagesAvailable","_getParamsScript","renderButtons","renderMessages","_isCredit","orderID","order_id","intent","isPayPalCreditAvailable","attributionId","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","disableFunding","enableFunding","apm","createCheckoutButtonInitializer","host","locale","requestSender","formPoster","registry","scriptLoader","checkoutActionCreator","paypalCommercePaymentProcessor","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","GOOGLEPAY_ADYENV2","GOOGLEPAY_AUTHORIZENET","GOOGLEPAY_BRAINTREE","GOOGLEPAY_CHECKOUTCOM","GOOGLEPAY_CYBERSOURCEV2","GOOGLEPAY_ORBITAL","GOOGLEPAY_STRIPE","PAYPALEXPRESS","PAYPALCOMMERCE","AMAZON_PAY_V2","createCheckoutButtonRegistry","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","splice","parent","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","mapFromPaymentErrorResponse","SubscriptionsActionType","_configRequestSender","NotInitializedErrorType","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","updateSubscriptions","_formFieldsRequestSender","loadFields","DEFAULT_PARAMS","createAddress","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_hasInstance","hasShippingAddress","_getGooglePayPaymentDataRequest","parseResponse","info","cardType","lastFour","currencyCode","gatewayMerchantId","merchantName","apiVersion","apiVersionMinor","merchantInfo","authJwt","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressRequired","billingAddressParameters","format","Full","phoneNumberRequired","tokenizationSpecification","transactionInfo","totalPriceStatus","totalPrice","toFixed","emailRequired","shippingAddressRequired","shippingAddressParameters","sourceUrl","baseRequest","_getGooglePaymentDataRequest","btoa","supportedCards","paymentGatewaySpecification","_getPaymentGatewaySpecification","cardPaymentMethod","_getCardPaymentMethod","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parse","paymentMethodData","tokenizationData","androidPayCards","description","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","googleMerchantName","googleMerchantId","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_publishableKey","_testMode","checkoutcomkey","_mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2","signature","protocolVersion","signedMessage","_convertToken","cardNetwork","cardDetails","_requestCheckoutcomTokenize","token_data","checkoutcomToken","checkoutcomKey","credentials","Json","Authorization","brand","last4","stripeVersion","stripePublishableKey","stripeConnectedAccount","scriptSrc","async","attributes","setupPayment","isCredit","isCheckout","isCreditCard","isAPM","getOrderStatus","getFirstAndLastName","fullName","nameParts","_googlePayScriptLoader","_googlePayInitializer","_billingAddressActionCreator","_consignmentActionCreator","_configureWallet","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","tokenizePayload","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","cardInformation","number","google","environment","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","customerEmail","locality","companyName","address3","administrativeArea","phoneNumber","postPaymentData","card_information","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","StyleButtonLabel","StyleButtonLayout","StyleButtonColor","StyleButtonShape","loadPaypalCommerce","isProgressiveOnboardingAvailable","_validateParams","paypalLoadScript","_paypalCommerceRequestSender","_validateStyleParams","updatedStyle","color","layout","tagline","horizontal","paramsScript","_gatewayId","optionalParams","paramsForProvider","onRenderButton","_fundingSource","_paypalButtons","_processNotEligible","renderFields","apmFieldsContainer","apmFieldsStyles","Fields","fieldsParams","fields","_paypalFields","fieldContainerElement","querySelector","innerHTML","getOrderId","_orderId","cartTotal","_paypalMessages","renderHostedFields","events","HostedFields","styles","paymentsSDK","_hostedFields","submitHostedFields","submit","getHostedFieldsValidationState","isValid","close","PAYPAL_COMMERCE_ALTERNATIVE_METHODS","toUpperCase","PAYLATER","createPaypalCommercePaymentProcessor","paypalScriptLoader","paypalCommerceRequestSender","_amazonPayV2ScriptLoader","_amazonPayV2SDK","bindButton","buttonId","sessionId","changeAction","_getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","renderButton","signout","region","amazonPayV2Region","amazon","createAmazonPayV2PaymentProcessor","addedByPromotion","total","_subscriptionsRequestSender","_subscriptionActionCreator","continueAsGuest","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress","_updateCustomerConsent","acceptsAbandonedCartEmails","acceptsMarketingNewsletter"],"mappings":"2BACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,K,gBClFrDhC,EAAOD,QAAUkC,QAAQ,U,cCAzBjC,EAAOD,QAAUkC,QAAQ,W,cCAzBjC,EAAOD,QAAUkC,QAAQ,4B,cCAzBjC,EAAOD,QAAUkC,QAAQ,S,eCAzBjC,EAAOD,QAAUkC,QAAQ,yB,8BCMzB,IAAYC,EAAZ,2CAAYA,GACR,8DACA,8DACA,wDAEA,4DACA,4DACA,sDAEA,4DACA,4DACA,sDAEA,mEACA,mEACA,6DAEA,iEACA,iEACA,2DAnBJ,CAAYA,MAAqB,M,cCNjClC,EAAOD,QAAUkC,QAAQ,mB,6BCEzB,IAAYE,EAAZ,2CAAYA,GACR,kDACA,wDACA,wDACA,oDACA,0DACA,0DACA,gGACA,sGACA,sGACA,yDACA,+DACA,+DACA,6DACA,mEACA,mEACA,0EACA,4EACA,wEAlBJ,CAAYA,MAA0B,M,6BCFtC,IAAKC,GAAL,SAAKA,GACD,oBACA,uCACA,kBACA,sBACA,kBACA,kDACA,0BACA,sBACA,sBACA,0BACA,cACA,4BACA,mCACA,uCACA,qCACA,uCACA,2BACA,gDACA,sBACA,sBACA,4BACA,gCACA,8BACA,oDACA,cACA,kBACA,sBACA,kBACA,kBACA,kBACA,oBACA,mDACA,oBACA,oBACA,YACA,wCACA,kBACA,iCACA,8CACA,mCACA,gDACA,0DACA,yEACA,2BACA,oBACA,qBACA,oBACA,sBACA,wBACA,qCACA,mCACA,kDACA,kDACA,4CACA,uBACA,iBACA,0BACA,sCACA,kBACA,YA5DJ,CAAKA,MAAmB,KA+DT,O,6BC7Df,IAAYC,EAAZ,2CAAYA,GACR,gEACA,sEACA,sEACA,8DACA,oEACA,oEACA,yDACA,+DACA,+DACA,6DACA,mEACA,mEACA,0EACA,4EACA,wEAfJ,CAAYA,MAA0B,M,6BCEtC,IAAYC,EAAZ,2CAAYA,GACR,kDACA,wDACA,wDACA,oDACA,0DACA,0DACA,wDACA,8DACA,8DACA,4DACA,kEACA,kEACA,yEACA,2EACA,uEAfJ,CAAYA,MAAyB,M,mECFzBC,E,gBAAZ,SAAYA,GACR,qDACA,iCACA,yCACA,iDACA,yCACA,qDACA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","file":"checkout-button.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 208);\n","module.exports = require(\"tslib\");","module.exports = require(\"lodash\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"rxjs\");","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    ExecutePaymentMethodCheckoutFailed = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_FAILED',\n    ExecutePaymentMethodCheckoutRequested = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_REQUESTED',\n    ExecutePaymentMethodCheckoutSucceeded = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyExecutePaymentMethodCheckoutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyExecutePaymentMethodCheckoutAction =\n    ExecutePaymentMethodCheckoutRequestedAction |\n    ExecutePaymentMethodCheckoutSucceededAction |\n    ExecutePaymentMethodCheckoutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface ExecutePaymentMethodCheckoutRequestedAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested;\n}\n\nexport interface ExecutePaymentMethodCheckoutSucceededAction extends Action {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded;\n}\n\nexport interface ExecutePaymentMethodCheckoutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    ADYENV2_GOOGLEPAY = 'googlepayadyenv2',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    AUTHORIZENET_GOOGLE_PAY = 'googlepayauthorizenet',\n    AMAZONPAYV2 = 'amazonpay',\n    APPLEPAY = 'applepay',\n    BARCLAYS = 'barclays',\n    BLUESNAPV2 = 'bluesnapv2',\n    BOLT = 'bolt',\n    CHECKOUTCOM = 'checkoutcom',\n    CHECKOUTCOM_APM = 'checkoutcomapm',\n    CHECKOUTCOM_FAWRY = 'checkoutcomfawry',\n    CHECKOUTCOM_SEPA = 'checkoutcomsepa',\n    CHECKOUTCOM_IDEAL = 'checkoutcomideal',\n    CREDIT_CARD = 'creditcard',\n    CHECKOUTCOM_GOOGLE_PAY = 'googlepaycheckoutcom',\n    CLEARPAY = 'clearpay',\n    CONVERGE = 'converge',\n    CYBERSOURCE = 'cybersource',\n    CYBERSOURCEV2 = 'cybersourcev2',\n    DIGITALRIVER = 'digitalriver',\n    CYBERSOURCEV2_GOOGLE_PAY = 'googlepaycybersourcev2',\n    HUMM = 'humm',\n    KLARNA = 'klarna',\n    KLARNAV2 = 'klarnav2',\n    LAYBUY = 'laybuy',\n    LEGACY = 'legacy',\n    MOLLIE = 'mollie',\n    MONERIS = 'moneris',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    OPY = 'opy',\n    ORBITAL_GOOGLE_PAY = 'googlepayorbital',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    PAYPAL_COMMERCE = 'paypalcommerce',\n    PAYPAL_COMMERCE_CREDIT = 'paypalcommercecredit',\n    PAYPAL_COMMERCE_CREDIT_CARD = 'paypalcommercecreditcards',\n    PAYPAL_COMMERCE_ALTERNATIVE_METHODS = 'paypalcommercealternativemethods',\n    PPSDK = 'PAYMENT_TYPE_SDK',\n    QUADPAY = 'quadpay',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_VENMO = 'braintreevenmo',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    SEZZLE = 'sezzle',\n    ZIP = 'zip',\n}\n\nexport default PaymentStrategyType;\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction |\n    ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCustomer:\n        return 'Unable to proceed because customer data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\nimport { LoadFormFieldsAction } from '../form';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadFormFieldsAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\nimport { SpamProtectionAction } from '../spam-protection';\n\nimport Customer from './customer';\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n\n    CreateCustomerRequested = 'CREATE_CUSTOMER_REQUESTED',\n    CreateCustomerSucceeded = 'CREATE_CUSTOMER_SUCCEEDED',\n    CreateCustomerFailed = 'CREATE_CUSTOMER_FAILED',\n\n    CreateCustomerAddressRequested = 'CREATE_CUSTOMER_ADDRESS_REQUESTED',\n    CreateCustomerAddressSucceeded = 'CREATE_CUSTOMER_ADDRESS_SUCCEEDED',\n    CreateCustomerAddressFailed = 'CREATE_CUSTOMER_ADDRESS_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction |\n    CreateCustomerAddressAction |\n    CreateCustomerAction;\n\nexport type CreateCustomerAction =\n    CreateCustomerRequestedAction |\n    CreateCustomerSucceededAction |\n    CreateCustomerFailedAction |\n    SpamProtectionAction |\n    LoadCheckoutAction;\n\nexport type CreateCustomerAddressAction =\n    CreateCustomerAddressRequestedAction |\n    CreateCustomerAddressSucceededAction |\n    CreateCustomerAddressFailedAction |\n    LoadCheckoutAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n\nexport interface CreateCustomerRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerRequested;\n}\n\nexport interface CreateCustomerSucceededAction extends Action {\n    type: CustomerActionType.CreateCustomerSucceeded;\n}\n\nexport interface CreateCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerFailed;\n}\n\nexport interface CreateCustomerAddressRequestedAction extends Action {\n    type: CustomerActionType.CreateCustomerAddressRequested;\n}\n\nexport interface CreateCustomerAddressSucceededAction extends Action<Customer> {\n    type: CustomerActionType.CreateCustomerAddressSucceeded;\n}\n\nexport interface CreateCustomerAddressFailedAction extends Action<Error> {\n    type: CustomerActionType.CreateCustomerAddressFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, BraintreeVerifyPayload, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport type GooglePayVerifyPayload = BraintreeVerifyPayload | undefined;\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: TokenizeType;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport enum BillingAddressFormat {\n    /*\n     * Name, country code, and postal code (default).\n     */\n    Min = 'MIN',\n    /*\n     * Name, street address, locality, region, country code, and postal code.\n     */\n    Full = 'FULL',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: BillingAddressFormat;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: TokenizationSpecification;\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    ForgetCheckoutRemoteCustomerRequested = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_REQUESTED',\n    ForgetCheckoutRemoteCustomerSucceeded = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_SUCCEEDED',\n    ForgetCheckoutRemoteCustomerFailed = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_FAILED',\n\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = ForgetCheckoutRemoteCustomerAction |\n    InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type ForgetCheckoutRemoteCustomerAction = ForgetCheckoutRemoteCustomerRequestedAction |\n    ForgetCheckoutRemoteCustomerSucceededAction |\n    ForgetCheckoutRemoteCustomerFailedAction;\n\nexport interface ForgetCheckoutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested;\n}\n\nexport interface ForgetCheckoutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded;\n}\n\nexport interface ForgetCheckoutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed;\n}\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","module.exports = require(\"@bigcommerce/script-loader\");","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { FormFields } from './form-field';\n\nexport enum FormFieldsActionType {\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\n}\n\nexport type LoadFormFieldsAction =\n    LoadFormFieldsRequestedAction |\n    LoadFormFieldsSucceededAction |\n    LoadFormFieldsFailedAction;\n\nexport interface LoadFormFieldsRequestedAction extends Action {\n    type: FormFieldsActionType.LoadFormFieldsRequested;\n}\n\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\n}\n\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\n    type: FormFieldsActionType.LoadFormFieldsFailed;\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    SendSignInEmailRequestedAction |\n    SendSignInEmailSucceededAction |\n    SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    VerifyCheckoutRequested = 'SPAM_PROTECTION_CHECKOUT_VERIFY_REQUESTED',\n    VerifyCheckoutSucceeded = 'SPAM_PROTECTION_CHECKOUT_VERIFY_SUCCEEDED',\n    VerifyCheckoutFailed = 'SPAM_PROTECTION_CHECKOUT_VERIFY_FAILED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    CheckoutVerifyRequestedAction |\n    CheckoutVerifyFailedAction |\n    CheckoutVerifySucceededAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<{ token: string }> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n\nexport interface CheckoutVerifyRequestedAction extends Action {\n    type: SpamProtectionActionType.VerifyCheckoutRequested;\n}\n\nexport interface CheckoutVerifyFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.VerifyCheckoutFailed;\n}\n\nexport interface CheckoutVerifySucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.VerifyCheckoutSucceeded;\n}\n","module.exports = require(\"shallowequal\");","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = []\n): string {\n    return Array.isArray(includeDictionaryOrList) ?\n        joinIncludes([\n            ...baseIncludes,\n            ...includeDictionaryOrList,\n        ]) :\n        mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean }\n): string {\n    const deletions = keys(pickBy(includesDictionary, on => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([\n            ...difference(baseIncludes, deletions),\n            ...additions,\n        ]);\n}\n","module.exports = require(\"reselect\");","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { PaymentMethod } from '.';\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport { isApplePayWindow } from './strategies/apple-pay';\n\nconst APPLEPAYID = 'applepay';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, this._filterApplePay(response.body), meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n\n    private _filterApplePay(methods: PaymentMethod[]): PaymentMethod[] {\n        return methods.filter(method => {\n            if (method.id === APPLEPAYID && !isApplePayWindow(window)) {\n                return false;\n            }\n\n            return true;\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    Pay: AmazonPayV2Client;\n}\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParams): HTMLElement;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonParams {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. Default is false.\n     */\n    sandbox?: boolean;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport enum AmazonPayV2Regions {\n    de = 'eu',\n    jp = 'fe',\n    uk = 'eu',\n    us = 'na',\n}\n\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport { BraintreeClientCreator, BraintreeDataCollectorCreator, BraintreeHostedFieldsCreator, BraintreeHostWindow, BraintreePaypalCheckoutCreator, BraintreePaypalCreator, BraintreeThreeDSecureCreator, BraintreeVisaCheckoutCreator } from './braintree';\n\nconst version = '3.81.0';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/client.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/three-d-secure.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/data-collector.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/visa-checkout.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadVenmoCheckout() {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/venmo.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.venmo) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.venmo;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/google-payment.min.js`)\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        await this._scriptLoader.loadScript(`//js.braintreegateway.com/web/${version}/js/hosted-fields.min.js`);\n\n        if (!this._window.braintree || !this._window.braintree.hostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.braintree.hostedFields;\n    }\n}\n","import { BraintreePaypalButtonInitializeOptions } from '../../../checkout-buttons/strategies/braintree';\nimport { PaymentMethod } from '../../index';\nimport { GooglePaymentData, GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1, GooglePayCreator, TokenizePayload } from '../googlepay';\nimport { PaypalAuthorizeData, PaypalButtonOptions, PaypalButtonRender, PaypalSDK } from '../paypal';\n\nimport { VisaCheckoutInitOptions, VisaCheckoutPaymentSuccessPayload, VisaCheckoutTokenizedPayload } from './visacheckout';\n\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\nexport interface BraintreeSDK {\n    client?: BraintreeClientCreator;\n    dataCollector?: BraintreeDataCollectorCreator;\n    hostedFields?: BraintreeHostedFieldsCreator;\n    paypal?: BraintreePaypalCreator;\n    paypalCheckout?: BraintreePaypalCheckoutCreator;\n    venmo?: VenmoInstance;\n    threeDSecure?: BraintreeThreeDSecureCreator;\n    visaCheckout?: BraintreeVisaCheckoutCreator;\n    googlePayment?: GooglePayCreator;\n}\n\nexport interface BraintreeModuleCreator<TInstance, TOptions = BraintreeModuleCreatorConfig> {\n    create(config: TOptions, callback?: (error: string, instance: any) => void): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string;\n}\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean;\n    paypal?: boolean;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeClientCreator extends BraintreeModuleCreator<BraintreeClient> { }\nexport interface BraintreeDataCollectorCreator extends BraintreeModuleCreator<BraintreeDataCollector, BraintreeDataCollectorCreatorConfig> {}\nexport interface BraintreeHostedFieldsCreator extends BraintreeModuleCreator<BraintreeHostedFields, BraintreeHostedFieldsCreatorConfig> {}\nexport interface BraintreeThreeDSecureCreator extends BraintreeModuleCreator<BraintreeThreeDSecure, BraintreeThreeDSecureCreatorConfig> {}\nexport interface BraintreePaypalCreator extends BraintreeModuleCreator<BraintreePaypal> {}\nexport interface BraintreePaypalCheckoutCreator extends BraintreeModuleCreator<BraintreePaypalCheckout> {}\nexport interface BraintreeVisaCheckoutCreator extends BraintreeModuleCreator<BraintreeVisaCheckout> {}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\nexport interface BraintreeClient {\n    request(payload: BraintreeRequestData): Promise<BraintreeTokenizeResponse>;\n    getVersion(): string | void;\n}\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(options: BraintreeThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    showLoader?: boolean;\n    addFrame(error: Error | undefined, iframe: HTMLIFrameElement): void;\n    removeFrame(): void;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\nexport interface BraintreeHostedFields {\n    teardown(): Promise<void>;\n    tokenize(options?: BraintreeHostedFieldsTokenizeOptions): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    authenticationInsight?: {\n        merchantAccountId: string;\n    };\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    authenticationInsight?: {\n        regulationEnvironment: string;\n    };\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\nexport interface BraintreePaypalCheckout {\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\nexport interface GooglePayBraintreeSDK extends BraintreeModule {\n    createPaymentDataRequest(request?: GooglePayBraintreeDataRequest): GooglePayBraintreePaymentDataRequestV1;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface BraintreeTokenizeReturn {\n    close(): void;\n    focus(): void;\n}\n\nexport interface BraintreeHostWindow extends Window {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n}\n\nexport interface BraintreeTokenizeResponse {\n    creditCards: Array<{ nonce: string }>;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\nexport interface VenmoError {\n    code: string;\n    details: string;\n    message: string;\n    type: string;\n    name: string;\n}\n\nexport interface VenmoInstance {\n    tokenize?(callback: Tokenize): void;\n    isBrowserSupported(): boolean;\n    create(arg0: VenmoConfig, arg1: VenmoCreateCallback ): void;\n}\n\nexport type VenmoCheckout = Promise<void>;\n\ninterface VenmoConfig {\n    client: BraintreeClient;\n    allowDesktop: boolean;\n    paymentMethodUsage: string;\n}\n\ntype VenmoCreateCallback = (venmoErr: string, venmoInstance: VenmoInstance) => void;\n\ntype Tokenize = (tokenizeError: VenmoError, payload: any) => void;\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount';\n    details: {\n        email: string;\n        payerId: string;\n        firstName: string;\n        lastName: string;\n        countryCode?: string;\n        phone?: string;\n        shippingAddress?: BraintreeShippingAddress;\n        billingAddress?: BraintreeAddress;\n    };\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\nexport interface BraintreeError extends Error {\n    type: 'CUSTOMER' | 'MERCHANT' | 'NETWORK' | 'INTERNAL' | 'UNKNOWN';\n    code: string;\n    message: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\ninterface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\nexport interface RenderButtonsData {\n    paymentMethod: PaymentMethod;\n    paypalOptions: BraintreePaypalButtonInitializeOptions;\n    container: string;\n    venmoParentContainer: string;\n    messagingContainerId?: string;\n}\n\nexport type RenderButtons = (instance: PaypalClientInstance) => void;\nexport type RenderVenmoButtons = (venmoInstance: VenmoInstance) => void;\n\nexport interface PaypalClientInstance {\n    loadPayPalSDK(config: Config, callback: RenderButtons): void;\n    tokenizePayment(data: PaypalAuthorizeData): BraintreeTokenizePayload;\n    createPayment(data: BraintreePaypalRequest): Promise<string>;\n}\n\nexport interface BraintreeComponents {\n    components?: string;\n}\n\nexport interface Config extends BraintreeComponents {\n    currency?: string;\n}\n\nexport interface GetVenmoConfig {\n    currency?: string;\n    storeCountry?: string;\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GetVenmoConfig,\n    GooglePayBraintreeSDK,\n    PaypalClientInstance,\n    PAYPAL_COMPONENTS,\n    RenderButtons,\n    RenderVenmoButtons,\n    VenmoCheckout,\n    VenmoInstance } from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n    private _paypalcheckoutInstance?: PaypalClientInstance;\n    private _venmoCheckoutInstance?: VenmoInstance;\n    private _venmoCheckout?: VenmoCheckout;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n                .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(config: GetVenmoConfig, renderButtonCallback: RenderButtons): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }, (_error: string, instance: PaypalClientInstance) =>  {\n                    this._paypalcheckoutInstance = instance;\n                    instance.loadPayPalSDK({\n                        currency: config.currency,\n                        components: PAYPAL_COMPONENTS.toString(),\n                    }, () => {\n                        renderButtonCallback(instance);\n                    });\n                }));\n        } else if (this._paypalcheckoutInstance) {\n            renderButtonCallback(this._paypalcheckoutInstance);\n        }\n\n        return this._paypalCheckout;\n    }\n\n    getVenmoCheckout(config: GetVenmoConfig, getVenmoInstance: RenderVenmoButtons) {\n        if (config.currency === 'USD' && config.storeCountry === 'UNITED STATES') {\n            return Promise.resolve();\n        }\n        this._venmoCheckout = Promise.all([\n            this.getClient(),\n            this._braintreeScriptLoader.loadVenmoCheckout(),\n        ])\n            .then(([client, venmoCheckout]) => venmoCheckout.create({\n                    client, allowDesktop: true,\n                    paymentMethodUsage: 'multi_use',\n                },\n                (venmoErr: string, venmoInstance: VenmoInstance) =>  {\n                    this._venmoCheckoutInstance = venmoInstance;\n                    getVenmoInstance(this._venmoCheckoutInstance);\n                    if (venmoErr) {\n\n                        return;\n                    }\n\n                    if (!venmoInstance.isBrowserSupported()) {\n\n                        return;\n                    }\n                }));\n\n        return this._venmoCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n                .then(([client, threeDSecure]) => threeDSecure.create({ client, version: 2}));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n                .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n                .catch(error => {\n                    if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                        return { deviceData: undefined, teardown: () => Promise.resolve() };\n                    }\n\n                    throw error;\n                });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n                .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>\n    ): Promise<BraintreeHostedFields> {\n        const [client, hostedFields] = await Promise.all([\n            this.getClient(),\n            this._braintreeScriptLoader.loadHostedFields(),\n        ]);\n\n        return hostedFields.create({ ...options, client });\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","export interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nexport default function isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinOrMergeIncludes, ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.get<Checkout>(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { FormFieldsActionCreator } from '../form';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator,\n        private _formFieldsActionCreator: FormFieldsActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig(),\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true })\n            ),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { CheckoutIncludes, CheckoutParams, CheckoutRequestSender, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, { ConsignmentsRequestBody, ConsignmentAssignmentRequestBody, ConsignmentCreateRequestBody, ConsignmentLineItem, ConsignmentRequestBody, ConsignmentShippingOptionRequestBody, ConsignmentUpdateRequestBody } from './consignment';\nimport { ConsignmentActionType, CreateConsignmentsAction, DeleteConsignmentAction, LoadShippingOptionsAction, UpdateConsignmentAction, UpdateShippingOptionAction } from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            shippingAddress,\n            lineItems: [ ...physicalItems, ...customItems ].map(item => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport { joinIncludes, joinOrMergeIncludes, ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ];\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, { InternalErrorResponseBody, StorefrontErrorResponseBody } from './error-response-body';\nimport { mapFromInternalErrorResponse, mapFromPaymentErrorResponse, mapFromStorefrontErrorResponse, RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nfunction arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n\nexport default objectMerge;\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n    statuses: CustomerStatusesState;\n    errors: CustomerErrorsState;\n}\n\nexport interface CustomerErrorsState {\n    createError?: Error;\n    createAddressError?: Error;\n}\n\nexport interface CustomerStatusesState {\n    isCreating?: boolean;\n    isCreatingAddress?: boolean;\n}\n\nexport const DEFAULT_STATE: CustomerState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Customer from './customer';\nimport { CustomerAction, CustomerActionType } from './customer-actions';\nimport CustomerState, { CustomerErrorsState, CustomerStatusesState, DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction | ContinueAsGuestAction | CustomerAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction | CustomerAction | ContinueAsGuestAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction | ContinueAsGuestAction | CustomerAction\n): Customer | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    case CustomerActionType.CreateCustomerAddressSucceeded:\n            return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CustomerErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | ContinueAsGuestAction | CustomerAction\n): CustomerErrorsState {\n    switch (action.type) {\n    case CustomerActionType.CreateCustomerRequested:\n    case CustomerActionType.CreateCustomerSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case CustomerActionType.CreateCustomerFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case CustomerActionType.CreateCustomerAddressRequested:\n    case CustomerActionType.CreateCustomerAddressSucceeded:\n        return objectSet(errors, 'createAddressError', undefined);\n\n    case CustomerActionType.CreateCustomerAddressFailed:\n        return objectSet(errors, 'createAddressError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | ContinueAsGuestAction | CustomerAction\n): CustomerStatusesState {\n    switch (action.type) {\n    case CustomerActionType.CreateCustomerRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case CustomerActionType.CreateCustomerFailed:\n    case CustomerActionType.CreateCustomerSucceeded:\n        return objectSet(statuses, 'isCreating', false);\n\n    case CustomerActionType.CreateCustomerAddressRequested:\n        return objectSet(statuses, 'isCreatingAddress', true);\n\n    case CustomerActionType.CreateCustomerAddressFailed:\n    case CustomerActionType.CreateCustomerAddressSucceeded:\n        return objectSet(statuses, 'isCreatingAddress', false);\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    executePaymentMethodCheckoutError?: Error;\n    executePaymentMethodCheckoutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isExecutingPaymentMethodCheckout?: boolean;\n    executePaymentMethodCheckoutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n        return objectMerge(errors, {\n            executePaymentMethodCheckoutError: undefined,\n            executePaymentMethodCheckoutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n        return objectMerge(errors, {\n            executePaymentMethodCheckoutError: action.payload,\n            executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\n        return objectMerge(statuses, {\n            isExecutingPaymentMethodCheckout: true,\n            executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\n    case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\n        return objectMerge(statuses, {\n            isExecutingPaymentMethodCheckout: false,\n            executePaymentMethodCheckoutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import { FormFields } from './form-field';\n\nexport default interface FormFieldsState {\n    data?: FormFields;\n    errors: FormFieldsErrorState;\n    statuses: FormFieldsStatusesState;\n}\n\nexport interface FormFieldsErrorState {\n    loadError?: Error;\n}\n\nexport interface FormFieldsStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: FormFieldsState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { FormFields } from './form-field';\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsState, { DEFAULT_STATE, FormFieldsErrorState, FormFieldsStatusesState } from './form-fields-state';\n\nexport default function formFieldsReducer(\n    state: FormFieldsState = DEFAULT_STATE,\n    action: Action\n): FormFieldsState {\n    const reducer = combineReducers<FormFieldsState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: FormFields | undefined,\n    action: LoadFormFieldsAction\n): FormFields | undefined {\n    switch (action.type) {\n    case FormFieldsActionType.LoadFormFieldsSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\n    action: LoadFormFieldsAction\n): FormFieldsErrorState {\n    switch (action.type) {\n    case FormFieldsActionType.LoadFormFieldsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case FormFieldsActionType.LoadFormFieldsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\n    action: LoadFormFieldsAction\n): FormFieldsStatusesState {\n    switch (action.type) {\n    case FormFieldsActionType.LoadFormFieldsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case FormFieldsActionType.LoadFormFieldsSucceeded:\n    case FormFieldsActionType.LoadFormFieldsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): PaymentInstrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionStarted:\n    case ShippingStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionFinished:\n    case ShippingStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, { DEFAULT_STATE, SignInEmailErrorsState, SignInEmailStatusesState } from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction\n): SignInEmail | undefined {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction\n): SignInEmailErrorsState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(errors, 'sendError', undefined);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n        return objectSet(errors, 'sendError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction\n): SignInEmailStatusesState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n        return objectSet(statuses, 'isSending', true);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(statuses, 'isSending', false);\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, { DEFAULT_STATE, SubscriptionsErrorsState, SubscriptionsStatusesState } from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction\n): SubscriptionsErrorsState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction\n): SubscriptionsStatusesState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | SpamProtectionAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case SpamProtectionActionType.VerifyCheckoutSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case SpamProtectionActionType.ExecuteRequested:\n        return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n    case SpamProtectionActionType.ExecuteFailed:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getCustomerAccountFields(): FormField[];\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        formFields => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = formFields ? formFields.shippingAddress : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        formFields => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = formFields ? formFields.billingAddress : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getCustomerAccountFields = createSelector(\n        (state: FormFieldsState) => state.data,\n        formFields => () => formFields ? formFields.customerAccount : []\n    );\n\n    const getLoadError = createSelector(\n        (state: FormFieldsState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: FormFieldsState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: FormFieldsState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getCustomerAccountFields: getCustomerAccountFields(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'mollie.credit_card': {\n        provider: 'mollie',\n        method: 'credit_card',\n    },\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    barclays: {\n        provider: 'barclays',\n        method: 'credit_card',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.credit_card': {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    'checkoutcom.card': {\n        provider: 'checkoutcom',\n        method: 'card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    cybersourcev2: {\n        provider: 'cybersourcev2',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n    digitalriver: {\n        provider: 'digitalriver',\n        method: 'credit_card',\n    },\n    moneris: {\n        provider: 'moneris',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.formFields);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n        const config = createConfigSelector(state.config, state.formFields);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        getBillingAddress => () => {\n            return guard(getBillingAddress(), () => new MissingDataError(MissingDataErrorType.MissingBillingAddress));\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n    getCustomerOrThrow(): Customer;\n    getCreateAccountError(): Error | undefined;\n    isCreatingCustomerAccount(): boolean;\n    getCreateAddressError(): Error | undefined;\n    isCreatingCustomerAddress(): boolean;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    const getCustomerOrThrow = createSelector(\n        getCustomer,\n        getCustomer => () => {\n            return guard(getCustomer(), () => new MissingDataError(MissingDataErrorType.MissingCustomer));\n        }\n    );\n\n    const getCreateAccountError = createSelector(\n        (state: CustomerState) => state.errors.createError,\n        error => () => error\n    );\n\n    const isCreatingCustomerAccount = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreating,\n        status => () => status\n    );\n\n    const getCreateAddressError = createSelector(\n        (state: CustomerState) => state.errors.createAddressError,\n        error => () => error\n    );\n\n    const isCreatingCustomerAddress = createSelector(\n        (state: CustomerState) => !!state.statuses.isCreatingAddress,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n            getCustomerOrThrow: getCustomerOrThrow(state),\n            getCreateAccountError: getCreateAccountError(state),\n            isCreatingCustomerAccount: isCreatingCustomerAccount(state),\n            getCreateAddressError: getCreateAddressError(state),\n            isCreatingCustomerAddress: isCreatingCustomerAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        signInEmail => () => signInEmail\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        error => () => error\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SignInEmailState = DEFAULT_STATE\n    ): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getCartOrThrow = createSelector(\n        getCart,\n        getCart => () => {\n          return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { FormFieldsState } from '../form';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (\n    state: ConfigState,\n    formState: FormFieldsState\n) => ConfigSelector;\n\ninterface ConfigSelectorDependencies {\n    formState: FormFieldsState;\n}\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        data => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined ?\n                flashMessages.filter(({ type }) => filterType === type) :\n                flashMessages;\n        }\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data,\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\n        (data, formFields) => () => data && formFields ? ({\n            ...data.storeConfig,\n            formFields,\n        }) : undefined\n    );\n\n    const getStoreConfigOrThrow = createSelector(\n        getStoreConfig,\n        getStoreConfig => () => {\n          return guard(getStoreConfig(), () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig));\n        }\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE,\n        formState: FormFieldsState\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getFlashMessages: getFlashMessages(state),\n            getStoreConfig: getStoreConfig(state, { formState }),\n            getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getVariantIdentificationToken: getVariantIdentificationToken(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getExecutePaymentMethodCheckoutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getExecutePaymentMethodCheckoutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutError,\n        (executePaymentMethodCheckoutMethodId, executePaymentMethodCheckoutError) => (methodId?: string) => {\n            if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                return;\n            }\n\n            return executePaymentMethodCheckoutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isExecutingPaymentMethodCheckout = createSelector(\n        (state: CustomerStrategyState) => state.statuses.executePaymentMethodCheckoutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isExecutingPaymentMethodCheckout,\n        (executePaymentMethodCheckoutMethodId, isExecutingPaymentMethodCheckout) => (methodId?: string) => {\n            if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecutingPaymentMethodCheckout;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getExecutePaymentMethodCheckoutError: getExecutePaymentMethodCheckoutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { createSelector } from '../../common/selector';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway ? `${paymentMethod.gateway}.${paymentMethod.id}` : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        }\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) => (instrumentId: string) => {\n            const cards = values(supportedInstruments);\n\n            return instruments.find((instrument): instrument is CardInstrument =>\n                instrument.bigpayToken === instrumentId &&\n                instrument.type === 'card' &&\n                cards.some(card => isMatch(instrument, card))\n            );\n        }\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, supportedProvider =>\n                filter(instruments, (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                    return isMatch(instrument, supportedProvider);\n                })\n            );\n\n            return allSupportedInstruments;\n        }\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId ?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        getPaymentMethod => (methodId: string, gatewayId?: string) => {\n            return guard(getPaymentMethod(methodId, gatewayId), () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getCheckoutOrThrow = createSelector(\n        getCheckout,\n        getCheckout => () => {\n            return guard(getCheckout(), () => new MissingDataError(MissingDataErrorType.MissingCheckout));\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        isExecutingSpamCheck => () => isExecutingSpamCheck === true\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isExecutingSpamCheck: isExecutingSpamCheck(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    getPaymentId(methodId: string): string | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderOrThrow = createSelector(\n        getOrder,\n        getOrder => () => {\n            return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getPaymentId = createSelector(\n        (state: OrderState) => state.data?.payments,\n        (payments = []) => (methodId: string) => {\n            const currentPayment = payments.find(({ providerId }) => providerId === methodId);\n\n            return currentPayment?.paymentId;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            getPaymentId: getPaymentId(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SubscriptionsState = DEFAULT_STATE\n    ): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { formFieldsReducer } from '../form';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        formFields: formFieldsReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","export const supportedLocales: {[language: string]: string[]} = {es: ['es_es', 'es_mx', 'es_pe', 'es_co', 'es_ar', 'es_cl'],\n    en: ['en_us', 'en_gb', 'en_ca', 'en_es', 'en_fr', 'en_ie', 'en_sg', 'en_au', 'en_nz', 'en_my', 'en_hk', 'en_th', 'en_ae', 'en_sa', 'en_qa', 'en_kw', 'en_za'],\n    pt: ['pt_br'],\n    zu: ['zu_za'],\n    ar: ['ar_sa', 'ar_ae', 'ar_qa', 'ar_kw'],\n    zh: ['zh_sg', 'zh_hk'],\n    ms: ['ms_my'],\n    uk: ['uk_ua'],\n    sv: ['sv_se'],\n    hr: ['hr_hr'],\n    pl: ['pl_pl'],\n    nl: ['nl_be'],\n    it: ['it_it'],\n    de: ['de_de'],\n    fr: ['fr_fr', 'fr_ca']};\n","import { supportedLocales } from './masterpass-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace('-', '_').toLowerCase().split('_');\n    const formattedLocale = `${language}_${country}`;\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'en_us';\n    }\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    AMAZON_PAY_V2 = 'amazonpay',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_ADYENV2 = 'googlepayadyenv2',\n    GOOGLEPAY_AUTHORIZENET = 'googlepayauthorizenet',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_CHECKOUTCOM = 'googlepaycheckoutcom',\n    GOOGLEPAY_CYBERSOURCEV2 = 'googlepaycybersourcev2',\n    GOOGLEPAY_ORBITAL = 'googlepayorbital',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n    PAYPALCOMMERCE = 'paypalcommerce',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { AmazonPayV2ButtonParams, AmazonPayV2PaymentProcessor, AmazonPayV2PayOptions, AmazonPayV2Placement } from '../../../payment/strategies/amazon-pay-v2';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { AmazonPayV2ButtonInitializeOptions } from './amazon-pay-v2-button-options';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor\n    ) { }\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId, amazonpay } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" or \"methodId\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        await this._amazonPayV2PaymentProcessor.initialize(paymentMethod);\n        this._walletButton = await this._createSignInButton(containerId, paymentMethod, amazonpay);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private async _createSignInButton(containerId: string, paymentMethod: PaymentMethod, options?: AmazonPayV2ButtonInitializeOptions): Promise<HTMLElement> {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const amazonButtonOptions = options ?? await this._getAmazonPayV2ButtonOptions(paymentMethod);\n\n        this._amazonPayV2PaymentProcessor.createButton(`#${containerId}`, amazonButtonOptions);\n\n        return container;\n    }\n\n    private async _getAmazonPayV2ButtonOptions(paymentMethod: PaymentMethod): Promise<AmazonPayV2ButtonParams> {\n        const state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const cart = state.cart.getCart();\n        const { storeProfile: { shopPath } } = state.config.getStoreConfigOrThrow();\n\n        const {\n            config: {\n                merchantId,\n                testMode,\n            },\n            initializationData: {\n                checkoutLanguage,\n                ledgerCurrency,\n                checkoutSessionMethod,\n                extractAmazonCheckoutSessionId,\n            },\n        } = paymentMethod;\n\n        if (!merchantId || !ledgerCurrency || !shopPath) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            merchantId,\n            createCheckoutSession: {\n                url: `${shopPath}/remote-checkout/${paymentMethod.id}/payment-session`,\n                method: checkoutSessionMethod,\n                extractAmazonCheckoutSessionId,\n            },\n            sandbox: !!testMode,\n            ledgerCurrency,\n            checkoutLanguage,\n            productType: cart && getShippableItemsCount(cart) === 0 ?\n                AmazonPayV2PayOptions.PayOnly :\n                AmazonPayV2PayOptions.PayAndShip,\n            placement: AmazonPayV2Placement.Cart,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeError,\n    BraintreePaypalCheckout,\n    BraintreeShippingAddressOverride,\n    BraintreeSDKCreator,\n    BraintreeTokenizePayload,\n    PaypalClientInstance,\n    RenderButtonsData,\n    VenmoError,\n    VenmoInstance } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalButtonStyleOptions, PaypalHostWindow } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { BraintreePaypalButtonInitializeOptions } from './braintree-paypal-button-options';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false,\n        private _window: PaypalHostWindow,\n        private _renderButtonsData?: RenderButtonsData\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        const storeState = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const currency = storeState.config.getStoreConfig()?.shopperCurrency;\n        // @ts-ignore\n        const { storeCountry } = storeState.config.getStoreConfig()?.storeProfile;\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n        const container = `#${options.containerId}`;\n        const messagingContainerId = options.braintreepaypal?.messagingContainerId;\n        const venmoParentContainer = options.containerId;\n\n        this._renderButtonsData = {\n            paymentMethod,\n            paypalOptions,\n            container,\n            messagingContainerId,\n            venmoParentContainer,\n        };\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout({currency: currency?.code}, (paypalCheckoutInstance: PaypalClientInstance) => this._renderButtons(paypalCheckoutInstance)),\n            this._braintreeSDKCreator.getVenmoCheckout({currency: currency?.code, storeCountry}, (venmoCheckoutInstance: VenmoInstance) => this._renderVenmoButton(venmoCheckoutInstance)),\n            this._braintreeSDKCreator.getPaypal(),\n        ])\n            .then(([paypalCheckout]) => {\n                if (!this._paypalCheckout) {\n                    this._paypalCheckout = paypalCheckout;\n                }\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n        this._paypalCheckout = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _renderButtons(paypalCheckoutInstance: PaypalClientInstance) {\n        const { paypalOptions, paymentMethod, container, messagingContainerId } = this._renderButtonsData as RenderButtonsData;\n        const { paypal } = this._window;\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const storeConfig = state.config.getStoreConfigOrThrow();\n        let updatedPaypalOptions: BraintreePaypalButtonInitializeOptions;\n        const isMessageContainerAvailable = Boolean(messagingContainerId && document.getElementById(messagingContainerId));\n        const ppsdkFeatureOn = storeConfig?.checkoutSettings.features['PAYPAL-1149.braintree-new-card-below-totals-banner-placement'];\n\n        if (paypal) {\n            const FUNDING_SOURCES = [];\n            for (const fundingKey in paypal.FUNDING) {\n                if (paypal.FUNDING.hasOwnProperty(fundingKey)) {\n                    const skipCreditSource = (fundingKey === 'CREDIT' || fundingKey === 'PAYLATER') && !paypalOptions.allowCredit;\n                    if (fundingKey === 'CARD' || skipCreditSource) {\n                        continue;\n                    }\n                    FUNDING_SOURCES.push(fundingKey.toLowerCase());\n                }\n            }\n\n            if (paypalOptions) {\n                updatedPaypalOptions = this._validateHeight(paypalOptions);\n            }\n\n            FUNDING_SOURCES.forEach(source => {\n                const button = paypal.Buttons({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    fundingSource: source,\n                    commit: false,\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(updatedPaypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons', 'height'),\n                    },\n                    createOrder: () => this._setupPayment(paypalCheckoutInstance, paypalOptions.shippingAddress, paypalOptions.onPaymentError),\n                    onApprove: (data: PaypalAuthorizeData) => this._tokenizePayment(data, paypalCheckoutInstance, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                });\n\n                if (button.isEligible()) {\n                    button.render(container);\n                }\n            });\n            if (isMessageContainerAvailable && ppsdkFeatureOn && messagingContainerId) {\n                this._renderMessages(cart.cartAmount, messagingContainerId);\n            }\n        }\n    }\n\n    private _renderVenmoButton( venmoInstance: VenmoInstance) {\n        const { venmoParentContainer } = this._renderButtonsData as RenderButtonsData;\n        const venmoButton = document.createElement('div');\n        const buttonsContainer = document.getElementById(venmoParentContainer);\n        buttonsContainer?.appendChild(venmoButton);\n        venmoButton.setAttribute('id', 'venmo-button');\n        this._displayVenmoButton(venmoInstance);\n    }\n\n    private _displayVenmoButton(venmoInstance: VenmoInstance) {\n        const venmoButton = document.getElementById('venmo-button');\n        if (venmoButton) {\n            venmoButton.addEventListener('click', () => {\n                venmoButton.setAttribute('disabled', 'true');\n                if (venmoInstance.tokenize) {\n                    venmoInstance.tokenize((tokenizeErr: VenmoError, payload: any) => {\n                        venmoButton.removeAttribute('disabled');\n                        if (tokenizeErr) {\n                            this._handleVenmoError(tokenizeErr);\n                        } else {\n                            this._handleSuccess(payload);\n                        }\n                    });\n                }\n            });\n        }\n    }\n\n    private _handleSuccess(payload: any) {\n        Promise.all([\n            this._braintreeSDKCreator.getDataCollector(),\n        ]).then(([{deviceData}]) => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: 'braintreevenmo',\n                action: true ? 'process_payment' : 'set_external_checkout',\n                nonce: payload.nonce,\n                device_data: deviceData,\n                shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n            });\n        });\n\n        return payload;\n    }\n\n    private _handleVenmoError(err: any) {\n        throw new Error(err.message);\n    }\n\n    private _renderMessages(amount: number, containerId: string) {\n        const { paypal } = this._window;\n        if (!paypal?.Messages) {\n            return;\n        }\n\n        return paypal.Messages({\n            amount,\n            placement: 'cart',\n        }).render(`#${containerId}`);\n    }\n\n    private _validateHeight(paypalOptions: BraintreePaypalButtonInitializeOptions): BraintreePaypalButtonInitializeOptions {\n        const updatedPaypalOptions = {...paypalOptions};\n        const { style } = updatedPaypalOptions;\n        const { height } = style as PaypalButtonStyleOptions;\n\n        if (updatedPaypalOptions.style) {\n            if (typeof height === 'number') {\n                updatedPaypalOptions.style.height = height < 25\n                    ? 25\n                    : (height > 55 ? 55 : height);\n            } else {\n                delete updatedPaypalOptions.style.height;\n            }\n        }\n\n        return updatedPaypalOptions;\n    }\n\n    private _setupPayment(\n        paypalCheckoutInstance: PaypalClientInstance,\n        address?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const shippingAddress = address === undefined ?\n                    customer && customer.addresses && customer.addresses[0] :\n                    address;\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return paypalCheckoutInstance.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: shippingAddress ? this._mapToBraintreeAddress(shippingAddress) : undefined,\n                    amount: checkout?.outstandingBalance,\n                    currency: config?.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        paypalCheckoutInstance: PaypalClientInstance,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paymentMethod || !paypalCheckoutInstance) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            paypalCheckoutInstance.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: payload.details.firstName,\n                last_name: payload.details.lastName,\n                phone_number: payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeShippingAddressOverride {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { GooglePayButtonInitializeOptions } from './googlepay-button-options';\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        await this._googlePayPaymentProcessor.initialize(this._getMethodId());\n\n        this._walletButton = this._createSignInButton(containerId, googlePayOptions);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string, buttonOptions: GooglePayButtonInitializeOptions): HTMLElement {\n        const container = document.getElementById(containerId);\n        const { buttonType, buttonColor } = buttonOptions;\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick, buttonType, buttonColor);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _getGooglePayOptions(options: CheckoutButtonInitializeOptions): GooglePayButtonInitializeOptions {\n\n        if (options.methodId === 'googlepayadyenv2' && options.googlepayadyenv2) {\n            return options.googlepayadyenv2;\n        }\n\n        if (options.methodId === 'googlepayauthorizenet' && options.googlepayauthorizenet) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaycheckoutcom' && options.googlepaycheckoutcom) {\n            return options.googlepaycheckoutcom;\n        }\n\n        if (options.methodId === 'googlepaycybersourcev2' && options.googlepaycybersourcev2) {\n            return options.googlepaycybersourcev2;\n        }\n\n        if (options.methodId === 'googlepayorbital' && options.googlepayorbital) {\n            return options.googlepayorbital;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    @bind\n    private async _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n        const cart = this._store.getState().cart.getCartOrThrow();\n        const hasPhysicalItems = getShippableItemsCount(cart) > 0;\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            if (hasPhysicalItems && paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n            }\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { formatLocale, getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader,\n        private _locale: string\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const masterpassScriptLoaderParams = {\n                    useMasterpassSrc: paymentMethod.initializationData.isMasterpassSrcEnabled,\n                    language: formatLocale(this._locale),\n                    testMode: paymentMethod.config.testMode,\n                    checkoutId: paymentMethod.initializationData.checkoutId,\n                };\n\n                return this._masterpassScriptLoader.load(masterpassScriptLoaderParams);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n        const state = this._store.getState();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new InvalidArgumentError('Unable to retrieve store configuration');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n\n        if (paymentMethod.initializationData.isMasterpassSrcEnabled) {\n            const subdomain = paymentMethod.config.testMode ? 'sandbox.' : '';\n            const { checkoutId } = paymentMethod.initializationData;\n\n            const params = [\n                `locale=${formatLocale(this._locale)}`,\n                `paymentmethod=master,visa,amex,discover`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            button.src = [\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\n                params.join('&'),\n            ].join('?');\n        } else {\n            button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        }\n\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader.loadPaypal(paymentMethod.config.merchantId)\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                        size: (paymentMethod.id === 'paypalexpress' && paypalOptions.style?.size === 'small') ? 'responsive' : paypalOptions.style?.size,\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                        ...SDK_VERSION_HEADERS,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { includes } from 'lodash';\n\nimport { Cart } from '../../../cart';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { ApproveDataOptions, ButtonsOptions, ClickDataOptions, FundingType, PaypalCommerceInitializationData, PaypalCommercePaymentProcessor, PaypalCommerceScriptParams } from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    private _isCredit?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _formPoster: FormPoster,\n        private _paypalCommercePaymentProcessor: PaypalCommercePaymentProcessor\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        let state = this._store.getState();\n        const { initializationData } = state.paymentMethods.getPaymentMethodOrThrow(options.methodId);\n\n        if (!initializationData.clientId) {\n            throw new InvalidArgumentError();\n        }\n\n        state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const cart = state.cart.getCartOrThrow();\n        const buttonParams: ButtonsOptions = {\n            onApprove: data => this._tokenizePayment(data),\n            onClick: data => this._handleClickButtonProvider(data),\n        };\n\n        if (options.paypalCommerce && options.paypalCommerce.style) {\n            buttonParams.style = options.paypalCommerce.style;\n        }\n\n        const messagingContainer = options.paypalCommerce?.messagingContainer;\n        const isMessagesAvailable = Boolean(messagingContainer && document.getElementById(messagingContainer));\n\n        await this._paypalCommercePaymentProcessor.initialize(this._getParamsScript(initializationData, cart));\n\n        this._paypalCommercePaymentProcessor.renderButtons(cart.id, `#${options.containerId}`, buttonParams);\n\n        if (isMessagesAvailable) {\n            this._paypalCommercePaymentProcessor.renderMessages(cart.cartAmount, `#${messagingContainer}`);\n        }\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._isCredit = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _handleClickButtonProvider({ fundingSource }: ClickDataOptions): void {\n        this._isCredit = fundingSource === 'credit' || fundingSource === 'paylater';\n    }\n\n    private _tokenizePayment({ orderID }: ApproveDataOptions) {\n        if (!orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: this._isCredit ? 'paypalcommercecredit' : 'paypalcommerce',\n            order_id: orderID,\n        });\n    }\n\n    private _getParamsScript(initializationData: PaypalCommerceInitializationData, cart: Cart): PaypalCommerceScriptParams {\n        const {\n            clientId,\n            intent,\n            isPayPalCreditAvailable,\n            merchantId,\n            attributionId,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const disableFunding: FundingType = [ 'card' ];\n        const enableFunding: FundingType = enabledAlternativePaymentMethods.slice();\n\n        /**\n         *  The default value is different depending on the countries,\n         *  therefore there's a need to add credit, paylater or APM name to enable/disable funding explicitly\n         */\n        availableAlternativePaymentMethods.forEach(apm => {\n            if (!includes(enabledAlternativePaymentMethods, apm)) {\n                disableFunding.push(apm);\n            }\n        });\n\n        if (isPayPalCreditAvailable) {\n            enableFunding.push('credit', 'paylater');\n        } else {\n            disableFunding.push('credit', 'paylater');\n        }\n\n        return {\n            'client-id': clientId,\n            'merchant-id': merchantId,\n            commit: false,\n            currency: cart.currency.code,\n            components: ['buttons', 'messages'],\n            'disable-funding': disableFunding,\n            ...(enableFunding.length && {'enable-funding': enableFunding}),\n            intent,\n            'data-partner-attribution-id': attributionId,\n        };\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const { host, locale = 'en' } = options ?? {};\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, locale, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayAdyenV2Initializer, GooglePayAuthorizeNetInitializer, GooglePayBraintreeInitializer, GooglePayCheckoutcomInitializer, GooglePayCybersourceV2Initializer, GooglePayOrbitalInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\nimport { createPaypalCommercePaymentProcessor } from '../payment/strategies/paypal-commerce';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { AmazonPayV2ButtonStrategy } from './strategies/amazon-pay-v2';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\nimport { PaypalCommerceButtonStrategy } from './strategies/paypal-commerce';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    locale: string,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender))\n    );\n    const paypalCommercePaymentProcessor = createPaypalCommercePaymentProcessor(scriptLoader, requestSender);\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            formPoster,\n            undefined,\n            window\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            formPoster,\n            true,\n            window\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader),\n            locale\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_ADYENV2, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAdyenV2Initializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayCheckoutcomInitializer(requestSender)\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayCybersourceV2Initializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_ORBITAL, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayOrbitalInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALCOMMERCE, () =>\n        new PaypalCommerceButtonStrategy(\n            store,\n            checkoutActionCreator,\n            formPoster,\n            paypalCommercePaymentProcessor\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.AMAZON_PAY_V2, () =>\n        new AmazonPayV2ButtonStrategy(\n            store,\n            checkoutActionCreator,\n            createAmazonPayV2PaymentProcessor()\n        )\n    );\n\n    return registry;\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    UpdateSubscriptionsRequestedAction |\n    UpdateSubscriptionsSucceededAction |\n    UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutNotAvailableError } from '../checkout/errors';\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get<Config>(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n            throw error;\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    updateSubscriptions(subscriptions: Subscriptions, { timeout }: RequestOptions = {}): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\nimport FormFieldsRequestSender from './form-fields-request-sender';\n\nexport default class FormFieldsActionCreator {\n    constructor(\n        private _formFieldsRequestSender: FormFieldsRequestSender\n    ) {}\n\n    @cachableAction\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\n        return concat(\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\n            defer(async () => {\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\n\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\n            })\n        ).pipe(\n            catchError(response => throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { FormFields } from './form-field';\n\nexport default class FormFieldsRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\n        const url = '/api/storefront/form-fields';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = {\n            Accept: ContentType.JsonV1,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayAdyenV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'adyen',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                countryCode,\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\ninterface MasterpassScriptLoaderParams {\n    useMasterpassSrc: boolean;\n    language: string;\n    testMode?: boolean;\n    checkoutId?: string;\n  }\nexport default class MasterpassScriptLoader {\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    async load({ useMasterpassSrc, language, testMode, checkoutId }: MasterpassScriptLoaderParams): Promise<Masterpass> {\n\n        if (useMasterpassSrc) {\n            const subdomain = testMode ? 'sandbox.' : '';\n            const params = [\n                `locale=${language}`,\n                `checkoutid=${checkoutId}`,\n            ];\n\n            const sourceUrl = [\n               `https://${subdomain}src.mastercard.com/srci/integration/merchant.js`,\n               params.join('&'),\n            ].join('?');\n\n            await this._scriptLoader.loadScript(sourceUrl);\n\n            if (!this._window.masterpass) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.masterpass;\n\n        }\n\n        await this._scriptLoader.loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`);\n\n        if (!this._window.masterpass) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.masterpass;\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizationSpecification, TokenizePayload } from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress)\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePaymentDataRequest(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(paymentGatewaySpecification, supportedCards);\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n                currencyCode,\n                countryCode,\n            },\n            merchantInfo : {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(tokenizationSpecification: TokenizationSpecification, supportedCards: string[]) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: BillingAddressFormat.Full,\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return Promise.resolve({\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        });\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { ContentType } from '../../../common/http-request';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\nimport { CheckoutcomGooglePayToken, CheckoutcomToken } from '../checkoutcom';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayCheckoutcomInitializer implements GooglePayInitializer {\n    private _publishableKey: string = '';\n    private _testMode: boolean = true;\n\n    constructor(\n       private _requestSender: RequestSender\n    ) {}\n\n    async initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        this._publishableKey = paymentMethod.initializationData.checkoutcomkey;\n        this._testMode = !!paymentMethod.config.testMode;\n\n        return this._mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let token;\n        try {\n            token = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        if (!token.signature || !token.protocolVersion || !token.signedMessage) {\n            throw new PaymentMethodFailedError('Unable to parse response from Google Pay.');\n        }\n        const finalToken = await this._convertToken(this._testMode, this._publishableKey, token);\n\n        return {\n            nonce: finalToken,\n            type: 'CreditCard',\n            description: paymentData.paymentMethodData.description,\n            details: {\n                cardType: paymentData.paymentMethodData.info.cardNetwork,\n                lastFour: paymentData.paymentMethodData.info.cardDetails,\n            },\n        };\n    }\n\n    private async _convertToken(testMode: boolean, checkoutcomkey: string, token: CheckoutcomGooglePayToken): Promise<string> {\n        if (!token || !token.protocolVersion) {\n            throw new PaymentMethodFailedError('Unable to parse response from GooglePay.');\n        }\n\n        const checkoutcomToken: CheckoutcomToken = await this._requestCheckoutcomTokenize(testMode, checkoutcomkey, {\n            type: 'googlepay',\n            token_data: token,\n        });\n\n        if (!checkoutcomToken || !checkoutcomToken.token) {\n            throw new PaymentMethodFailedError('Unable to parse response from Checkout.com');\n        }\n\n        return checkoutcomToken.token;\n    }\n\n    private async _requestCheckoutcomTokenize(testMode: boolean, checkoutcomKey: string, data = {}): Promise<CheckoutcomToken> {\n        const TEST_URL: string = 'https://api.sandbox.checkout.com/tokens';\n        const LIVE_URL: string = 'https://api.checkout.com/tokens';\n\n        const url = testMode ? TEST_URL : LIVE_URL;\n\n        const response = await this._requestSender.post(url, {\n            credentials: false,\n            body: data,\n            headers: {\n                'Content-Type': ContentType.Json,\n                Authorization: checkoutcomKey,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return response.body as CheckoutcomToken;\n    }\n\n    private _mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'checkoutltd',\n                        gatewayMerchantId: initializationData.checkoutcomkey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayCybersourceV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'cybersource',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayOrbitalInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            nonce: btoa(token),\n            type,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'chase',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return Promise.resolve({\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            });\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': stripeVersion,\n                        'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId: string = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = { async: true, attributes: { 'data-merchant-id': merchantId } };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\n\nimport { OrderData, OrderStatus } from './paypal-commerce-sdk';\n\nexport interface ParamsForProvider {\n    isCredit?: boolean;\n    isCheckout?: boolean;\n    isCreditCard?: boolean;\n    isAPM?: boolean;\n}\n\nexport default class PaypalCommerceRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    async setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<OrderData> {\n        const { isCredit, isCheckout, isCreditCard, isAPM } = params;\n        let provider = 'paypalcommerce';\n\n        if (isCreditCard) {\n            provider = 'paypalcommercecreditcardscheckout';\n        } else if (isCheckout) {\n            provider = isCredit ? 'paypalcommercecreditcheckout' : 'paypalcommercecheckout';\n        } else if (isCredit) {\n            provider = 'paypalcommercecredit';\n        }\n\n        if (isAPM) {\n            provider = 'paypalcommercealternativemethodscheckout';\n        }\n\n        const url = `/api/storefront/payment/${provider}`;\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.post(url, { headers, body });\n\n        return res.body as OrderData;\n    }\n\n    async getOrderStatus() {\n        const url = '/api/storefront/initialization/paypalcommerce';\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this._requestSender.get<OrderStatus>(url, {headers});\n\n        return res.body;\n    }\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutButtonInitializer } from '../checkout-buttons';\n","export function getFirstAndLastName(fullName: string): [string, string] {\n    const nameParts = fullName.split(' ');\n\n    if (nameParts.length === 1) {\n        return [fullName, ''];\n    }\n\n    const firstName = nameParts.slice(0, -1).join(' ');\n    const lastName = nameParts[nameParts.length - 1];\n\n    return [firstName, lastName];\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { ButtonColor, ButtonType, EnvironmentType, GooglePaymentData, GooglePayAddress, GooglePayClient, GooglePayInitializer, GooglePayPaymentDataRequestV2, GooglePaySDK, TokenizePayload } from './googlepay';\nimport { getFirstAndLastName } from './googlepay-get-first-and-last-name';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._googlePayInitializer.parseResponse(paymentData)\n            .then(tokenizePayload => this._postForm(tokenizePayload))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string, customerEmail?: string): BillingAddressUpdateRequestBody {\n        const fullName = paymentData.paymentMethodData.info.billingAddress.name;\n        const [firstName, lastName] = getFirstAndLastName(fullName);\n        const address1 =  paymentData.paymentMethodData.info.billingAddress.address1;\n        const city =  paymentData.paymentMethodData.info.billingAddress.locality;\n        const postalCode =  paymentData.paymentMethodData.info.billingAddress.postalCode;\n        const countryCode =  paymentData.paymentMethodData.info.billingAddress.countryCode;\n\n        if (!firstName || !address1 || !city || !postalCode || !countryCode) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        return {\n            id,\n            firstName,\n            lastName,\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode,\n            countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: customerEmail || paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        const [firstName, lastName] = getFirstAndLastName(address.name);\n\n        return {\n            firstName,\n            lastName,\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id, remoteBillingAddress.email);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new SubscriptionsActionCreator(\n                new SubscriptionsRequestSender(requestSender)\n            )\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","\nexport interface ApproveDataOptions {\n    orderID?: string;\n}\n\nexport interface ClickDataOptions {\n    fundingSource: string;\n}\n\nexport interface ClickActions {\n    reject(): Promise<void>;\n    resolve(): Promise<void>;\n}\n\nexport interface OrderData {\n    orderId: string;\n    approveUrl: string;\n}\n\nexport interface OrderStatus {\n    status: 'APPROVED' | 'CREATED' | string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonLayout {\n    vertical = 'vertical',\n    horizontal = 'horizontal',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect' ,\n}\n\nexport interface PaypalButtonStyleOptions {\n    layout?: StyleButtonLayout;\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55;\n    label?: StyleButtonLabel;\n    tagline?: boolean;\n}\n\nexport interface ButtonsOptions {\n    style?: PaypalButtonStyleOptions;\n    fundingSource?: string;\n    createOrder?(): Promise<string>;\n    onApprove?(data: ApproveDataOptions): void;\n    onClick?(data: ClickDataOptions, actions: ClickActions): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalFieldsStyleOptions {\n    base?: {\n        backgroundColor?: string;\n        color?: string;\n        fontSize?: string;\n        fontFamily?: string;\n        lineHeight?: string;\n        letterSpacing?: string;\n    };\n    input?: {\n        backgroundColor?: string;\n        fontSize?: string;\n        color?: string;\n        borderColor?: string;\n        borderRadius?: string;\n        borderWidth?: string;\n        padding?: string;\n    };\n    invalid?: {\n        color?: string;\n    };\n    active?: {\n        color?: string;\n    };\n}\n\nexport interface FieldsOptions {\n    style?: PaypalFieldsStyleOptions;\n    fundingSource: string;\n    fields: { name?: { value?: string }; email?: { value?: string } };\n}\n\nexport interface MessagesOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n    fundingSource?: string;\n}\n\nexport interface MessagesStyleOptions {\n    layout?: string;\n}\n\nexport interface PaypalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PaypalCommerceHostedFieldOption;\n        cvv?: PaypalCommerceHostedFieldOption;\n        expirationDate?: PaypalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PaypalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PaypalCommerceHostedFields {\n    submit(options?: PaypalCommerceHostedFieldsSubmitOptions): PaypalCommerceHostedFieldsApprove;\n    getState(): PaypalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PaypalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PaypalCommerceHostedFieldsState {\n    cards: PaypalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PaypalCommerceHostedFieldsFieldData;\n        expirationDate?: PaypalCommerceHostedFieldsFieldData;\n        expirationMonth?: PaypalCommerceHostedFieldsFieldData;\n        expirationYear?: PaypalCommerceHostedFieldsFieldData;\n        cvv?: PaypalCommerceHostedFieldsFieldData;\n        postalCode?: PaypalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PaypalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface PaypalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface PaypalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PaypalCommerceFields {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceMessages {\n    render(id: string): void;\n}\n\nexport interface PaypalCommerceSDKFunding {\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    BANCONTACT: string;\n    GIROPAY: string;\n    P24: string;\n    EPS: string;\n    IDEAL: string;\n    MYBANK: string;\n    SOFORT: string;\n    SEPA: string;\n    BLIK: string;\n    TRUSTLY: string;\n    VERKKOPANKKI: string;\n    VENMO: string;\n}\n\nexport interface PaypalCommerceSDK {\n    FUNDING: PaypalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PaypalCommerceHostedFieldsRenderOptions): Promise<PaypalCommerceHostedFields>;\n    };\n    Buttons(params: ButtonsOptions): PaypalCommerceButtons;\n    Fields(params: FieldsOptions): PaypalCommerceFields;\n    Messages(params: MessagesOptions): PaypalCommerceMessages;\n}\n\nexport interface PaypalCommerceHostWindow extends Window {\n    paypal?: PaypalCommerceSDK;\n    paypalLoadScript?(options: PaypalCommerceScriptParams): Promise<{ paypal: PaypalCommerceSDK }>;\n}\n\nexport type FundingType = string[];\nexport type EnableFundingType =  FundingType | string;\n\nexport interface PaypalCommerceInitializationData {\n    clientId: string;\n    merchantId?: string;\n    buyerCountry?: string;\n    isDeveloperModeApplicable?: boolean;\n    intent?: 'capture' | 'authorize';\n    isPayPalCreditAvailable?: boolean;\n    availableAlternativePaymentMethods: FundingType;\n    enabledAlternativePaymentMethods: FundingType;\n    isProgressiveOnboardingAvailable?: boolean;\n    clientToken?: string;\n    attributionId?: string;\n}\n\nexport type ComponentsScriptType = Array<'buttons' | 'messages' | 'hosted-fields' | 'fields'>;\n\nexport interface PaypalCommerceScriptParams  {\n    'client-id': string;\n    'merchant-id'?: string;\n    'buyer-country'?: string;\n    'disable-funding'?: FundingType;\n    'enable-funding'?: EnableFundingType;\n    'data-client-token'?: string;\n    'data-partner-attribution-id'?: string;\n    currency?: string;\n    commit?: boolean;\n    intent?: 'capture' | 'authorize';\n    components?: ComponentsScriptType;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalCommerceHostWindow, PaypalCommerceScriptParams, PaypalCommerceSDK } from './paypal-commerce-sdk';\n\nexport default class PaypalCommerceScriptLoader {\n    private _window: PaypalCommerceHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypalCommerce(params: PaypalCommerceScriptParams, isProgressiveOnboardingAvailable?: boolean): Promise<PaypalCommerceSDK> {\n        this._validateParams(params, isProgressiveOnboardingAvailable);\n\n        if (!this._window.paypalLoadScript) {\n            const scriptSrc = 'https://unpkg.com/@paypal/paypal-js@1.0.2/dist/paypal.browser.min.js';\n\n            await this._scriptLoader.loadScript(scriptSrc, {async: true, attributes: {}});\n\n            if (!this._window.paypalLoadScript) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        await this._window.paypalLoadScript(params);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n\n    _validateParams(options: PaypalCommerceScriptParams, isProgressiveOnboardingAvailable?: boolean): void {\n        const CLIENT_ID = 'client-id';\n        const MERCHANT_ID = 'merchant-id';\n        let param;\n\n        if (!options) {\n            param = 'options';\n        } else if (!options[CLIENT_ID]) {\n            param = CLIENT_ID;\n        } else if (!options[MERCHANT_ID] && !isProgressiveOnboardingAvailable) {\n            param = MERCHANT_ID;\n        }\n\n        if (param) {\n            throw new InvalidArgumentError(`Unable to proceed because \"${param}\" argument in PayPal script is not provided.`);\n        }\n    }\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport { NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentStrategyType from '../../payment-strategy-type';\n\nimport { ButtonsOptions, FieldsOptions, ParamsForProvider, PaypalButtonStyleOptions, PaypalCommerceButtons, PaypalCommerceFields, PaypalCommerceHostedFields, PaypalCommerceHostedFieldsApprove, PaypalCommerceHostedFieldsRenderOptions, PaypalCommerceHostedFieldsState, PaypalCommerceHostedFieldsSubmitOptions, PaypalCommerceMessages, PaypalCommerceRequestSender, PaypalCommerceScriptLoader, PaypalCommerceScriptParams, PaypalCommerceSDK, PaypalCommerceSDKFunding, PaypalFieldsStyleOptions, StyleButtonColor, StyleButtonLabel, StyleButtonLayout, StyleButtonShape } from './index';\n\nexport interface OptionalParamsRenderButtons {\n    paramsForProvider?: ParamsForProvider;\n    fundingKey?: keyof PaypalCommerceSDKFunding;\n    onRenderButton?(): void;\n}\n\nexport interface ParamsRenderHostedFields {\n    fields: PaypalCommerceHostedFieldsRenderOptions['fields'];\n    styles?: PaypalCommerceHostedFieldsRenderOptions['styles'];\n}\n\ninterface EventsHostedFields {\n    blur?(event: PaypalCommerceHostedFieldsState): void;\n    focus?(event: PaypalCommerceHostedFieldsState): void;\n    cardTypeChange?(event: PaypalCommerceHostedFieldsState): void;\n    validityChange?(event: PaypalCommerceHostedFieldsState): void;\n    inputSubmitRequest?(event: PaypalCommerceHostedFieldsState): void;\n}\n\nexport interface RenderApmFieldsParams {\n    apmFieldsContainer: string;\n    fundingKey: keyof PaypalCommerceSDKFunding;\n    apmFieldsStyles?: PaypalFieldsStyleOptions;\n    fullName?: string;\n    email?: string;\n}\n\nexport default class PaypalCommercePaymentProcessor {\n    private _paypal?: PaypalCommerceSDK;\n    private _paypalButtons?: PaypalCommerceButtons;\n    private _paypalFields?: PaypalCommerceFields;\n    private _paypalMessages?: PaypalCommerceMessages;\n    private _hostedFields?: PaypalCommerceHostedFields;\n    private _fundingSource?: string;\n    private _orderId?: string;\n    private _gatewayId?: string;\n\n    constructor(\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender\n    ) {}\n\n    async initialize(paramsScript: PaypalCommerceScriptParams, isProgressiveOnboardingAvailable?: boolean, gatewayId?: string): Promise<PaypalCommerceSDK> {\n        this._paypal = await this._paypalScriptLoader.loadPaypalCommerce(paramsScript, isProgressiveOnboardingAvailable);\n        this._gatewayId = gatewayId;\n\n        return this._paypal;\n    }\n\n    renderButtons(cartId: string, container: string, params: ButtonsOptions = {}, optionalParams: OptionalParamsRenderButtons = {}): PaypalCommerceButtons {\n        if (!this._paypal || !this._paypal.Buttons) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const { paramsForProvider, fundingKey, onRenderButton } = optionalParams;\n\n        const buttonParams: ButtonsOptions = {\n            ...params,\n            createOrder: () => this._setupPayment(cartId, paramsForProvider),\n\n            onClick: async (data, actions) => {\n                this._fundingSource = data.fundingSource;\n\n                return params.onClick?.(data, actions);\n            },\n        };\n\n        if (params.style) {\n            buttonParams.style = this._validateStyleParams(params.style);\n        }\n\n        if (fundingKey) {\n            this._fundingSource = this._paypal.FUNDING[fundingKey];\n            buttonParams.fundingSource = this._fundingSource;\n        }\n\n        this._paypalButtons = this._paypal.Buttons(buttonParams);\n\n        if (!this._paypalButtons.isEligible()) {\n            this._processNotEligible(buttonParams, fundingKey);\n        }\n\n        onRenderButton?.();\n\n        this._paypalButtons.render(container);\n\n        return this._paypalButtons;\n    }\n\n    renderFields({\n        apmFieldsContainer,\n        fundingKey,\n        apmFieldsStyles,\n        fullName,\n        email,\n    }: RenderApmFieldsParams): PaypalCommerceFields {\n        if (!this._paypal || !this._paypal.Fields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const fieldsParams: FieldsOptions = {\n            fundingSource: this._paypal.FUNDING[fundingKey],\n            style: apmFieldsStyles,\n            fields: {\n                name: {\n                    value: fullName,\n                },\n                email: {\n                    value: email,\n                },\n            },\n        };\n\n        this._paypalFields = this._paypal.Fields(fieldsParams);\n\n        const fieldContainerElement = document.querySelector(apmFieldsContainer);\n        if (fieldContainerElement) {\n            fieldContainerElement.innerHTML = '';\n        }\n\n        this._paypalFields.render(apmFieldsContainer);\n\n        return this._paypalFields;\n    }\n\n    getOrderId() {\n        return this._orderId;\n    }\n\n    renderMessages(cartTotal: number, container: string): PaypalCommerceMessages {\n        if (!this._paypal || !this._paypal.Messages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n        this._paypalMessages = this._paypal.Messages({\n            amount: cartTotal,\n            placement: 'cart',\n            style: {\n                layout: 'text',\n            },\n        });\n        this._paypalMessages.render(container);\n\n        return this._paypalMessages;\n    }\n\n    async renderHostedFields(cartId: string, params: ParamsRenderHostedFields, events?: EventsHostedFields): Promise<void> {\n        if (!this._paypal || !this._paypal.HostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const { fields, styles } = params;\n\n        if (!this._paypal.HostedFields.isEligible()) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._hostedFields = await this._paypal.HostedFields.render({\n            fields,\n            styles,\n            paymentsSDK: true,\n            createOrder: () => this._setupPayment(cartId, { isCreditCard: true }),\n        });\n\n        if (events) {\n            (Object.keys(events) as Array<keyof EventsHostedFields>).forEach(key => {\n                (this._hostedFields as PaypalCommerceHostedFields).on(key, events[key] as (event: PaypalCommerceHostedFieldsState) => void);\n            });\n        }\n    }\n\n    async submitHostedFields(options?: PaypalCommerceHostedFieldsSubmitOptions): Promise<PaypalCommerceHostedFieldsApprove> {\n        if (!this._hostedFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._hostedFields.submit(omitBy(options, isNil));\n    }\n\n    getHostedFieldsValidationState(): { isValid: boolean; fields: PaypalCommerceHostedFieldsState['fields'] } {\n        if (!this._hostedFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { fields } = this._hostedFields.getState();\n\n        const isValid = (Object.keys(fields) as Array<keyof PaypalCommerceHostedFieldsState['fields']>)\n            .every(key => fields[key]?.isValid);\n\n        return { isValid, fields };\n    }\n\n    deinitialize() {\n        this._paypalButtons?.close?.();\n        this._paypal = undefined;\n        this._paypalButtons = undefined;\n        this._fundingSource = undefined;\n        this._hostedFields = undefined;\n    }\n\n    private async _setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<string> {\n        const paramsForProvider = { ...params, isCredit: this._fundingSource === 'credit' || this._fundingSource === 'paylater' };\n        const isAPM = this._gatewayId === PaymentStrategyType.PAYPAL_COMMERCE_ALTERNATIVE_METHODS;\n        const { orderId } = await this._paypalCommerceRequestSender.setupPayment(cartId, {...paramsForProvider, isAPM});\n        this._orderId = orderId;\n\n        return orderId;\n    }\n\n    private _validateStyleParams = (style: PaypalButtonStyleOptions): PaypalButtonStyleOptions  => {\n        const updatedStyle: PaypalButtonStyleOptions = { ...style };\n        const { label, color, layout, shape, height, tagline } = style;\n\n        if (label && !StyleButtonLabel[label]) {\n            delete updatedStyle.label;\n        }\n\n        if (layout && !StyleButtonLayout[layout]) {\n            delete updatedStyle.layout;\n        }\n\n        if (color && !StyleButtonColor[color]) {\n            delete updatedStyle.color;\n        }\n\n        if (shape && !StyleButtonShape[shape]) {\n            delete updatedStyle.shape;\n        }\n\n        if (typeof height === 'number') {\n            updatedStyle.height = height < 25\n                ? 25\n                : (height > 55 ? 55 : height);\n        } else {\n            delete updatedStyle.height;\n        }\n\n        if (typeof tagline !== 'boolean' || (tagline && updatedStyle.layout !== StyleButtonLayout[StyleButtonLayout.horizontal])) {\n            delete updatedStyle.tagline;\n        }\n\n        return updatedStyle;\n    };\n\n    private _processNotEligible(buttonParams: ButtonsOptions, fundingKey?: keyof PaypalCommerceSDKFunding): void {\n        if (fundingKey?.toUpperCase() === this._paypal?.FUNDING.PAYLATER.toUpperCase()) {\n            buttonParams.fundingSource = this._paypal?.FUNDING.CREDIT;\n\n            this._paypalButtons = this._paypal?.Buttons(buttonParams);\n\n            if (this._paypalButtons?.isEligible()) {\n                return;\n            }\n        }\n\n        throw new NotImplementedError(`PayPal ${this._fundingSource || ''} is not available for your region. Please use PayPal Checkout instead.`);\n    }\n\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaypalCommercePaymentProcessor, PaypalCommerceRequestSender, PaypalCommerceScriptLoader } from './index';\n\nexport default function createPaypalCommercePaymentProcessor(scriptLoader: ScriptLoader, requestSender: RequestSender) {\n    const paypalScriptLoader = new PaypalCommerceScriptLoader(scriptLoader);\n    const paypalCommerceRequestSender = new PaypalCommerceRequestSender(requestSender);\n\n    return new PaypalCommercePaymentProcessor(paypalScriptLoader, paypalCommerceRequestSender);\n}\n","import { PaymentMethod } from '../..';\nimport { AmazonPayV2ButtonInitializeOptions } from '../../../checkout-buttons/strategies/amazon-pay-v2';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { AmazonPayV2ChangeActionType, AmazonPayV2SDK } from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private _amazonPayV2SDK?: AmazonPayV2SDK;\n\n    constructor(\n        private _amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader\n    ) { }\n\n    async initialize(paymentMethod: PaymentMethod): Promise<void> {\n        this._amazonPayV2SDK = await this._amazonPayV2ScriptLoader.load(paymentMethod);\n    }\n\n    deinitialize(): Promise<void> {\n        this._amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(buttonId: string, sessionId: string, changeAction: AmazonPayV2ChangeActionType): void {\n        this._getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonInitializeOptions): HTMLElement {\n        return this._getAmazonPayV2SDK().Pay.renderButton(containerId, options);\n    }\n\n    async signout(): Promise<void> {\n        if (this._amazonPayV2SDK) {\n            this._amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    private _getAmazonPayV2SDK(): AmazonPayV2SDK {\n        if (!this._amazonPayV2SDK) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._amazonPayV2SDK;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { AmazonPayV2HostWindow, AmazonPayV2Regions, AmazonPayV2SDK } from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AmazonPayV2HostWindow = window\n    ) {}\n\n    async load(method: PaymentMethod): Promise<AmazonPayV2SDK> {\n        const {\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const amazonPayV2Region  = (AmazonPayV2Regions as any)[region];\n\n        await this._scriptLoader.loadScript(`https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`);\n        if (!this._window.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.amazon;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(\n        new AmazonPayV2ScriptLoader(getScriptLoader())\n    );\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { Subscriptions, SubscriptionsActionType, SubscriptionsRequestSender, UpdateSubscriptionsAction } from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(\n        private _subscriptionsRequestSender: SubscriptionsRequestSender\n    ) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(subscriptions, options);\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(\n                SubscriptionsActionType.UpdateSubscriptionsFailed,\n                new UpdateSubscriptionsError(error)\n            ))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options\n                        );\n\n                        return createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body);\n                    })\n                ).pipe(\n                    catchError(error => throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error))\n                ),\n                this._updateCustomerConsent(credentials, options)\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _updateCustomerConsent(\n        {\n            email,\n            acceptsAbandonedCartEmails,\n            acceptsMarketingNewsletter,\n        }: GuestCredentials,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        if ((acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions({\n            email,\n            acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n            acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n        }, options);\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n"],"sourceRoot":""}