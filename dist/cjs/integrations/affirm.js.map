{"version":3,"file":"integrations/affirm.js","mappings":"mBACA,ICCYA,ECAAC,EFDRC,EAAsB,CGA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFV,EAAyBC,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,uDCExC,MAAeC,UAAsBC,MAIhD,WAAAC,CAAYC,GCXD,IAAqCT,EDY5CU,MAAMD,GAAW,qCAJrB,KAAAE,KAAO,gBACP,KAAAC,KAAO,WCTyCZ,aDcZA,UCbhCN,OAAOmB,eACPnB,OAAOmB,eDYQC,KCZed,GDYfc,KCVRC,UAAYf,EDYoB,mBAA5BO,MAAMS,kBACbT,MAAMS,kBAAkBF,iBAExBA,KAAKG,MAAQ,IAAIV,MAAMO,KAAKL,SAASQ,KAE7C,GLnBJ,SAAY9B,GACR,qDACA,iCACA,yCACA,iDACA,yCACA,qDACA,mCACA,+CACA,uCACA,uCACA,4CACA,4DACA,oDACA,8DACA,oDACA,kDACA,uDACH,CAlBD,CAAYA,IAAAA,EAAoB,KAyBjB,MAAM+B,UAAyBZ,EAC1C,WAAAE,CAAmBW,GACfT,MAOR,SAAyBE,GACrB,OAAQA,GACJ,KAAKzB,EAAqBiC,sBACtB,MAAO,iEAEX,KAAKjC,EAAqBkC,YACtB,MAAO,sDAEX,KAAKlC,EAAqBmC,oBACtB,MAAO,8DAEX,KAAKnC,EAAqBoC,gBACtB,MAAO,0DAEX,KAAKpC,EAAqBqC,gBACtB,MAAO,0DAEX,KAAKrC,EAAqBsC,sBAC1B,KAAKtC,EAAqBuC,mBACtB,MAAO,+DAEX,KAAKvC,EAAqBwC,aACtB,MAAO,uDAEX,KAAKxC,EAAqByC,eACtB,MAAO,0EAEX,KAAKzC,EAAqB0C,eACtB,MAAO,yDAEX,KAAK1C,EAAqB2C,oBACtB,MAAO,+EAEX,KAAK3C,EAAqB4C,qBACtB,MAAO,2FAEX,KAAK5C,EAAqB6C,uBACtB,MAAO,kEAEX,QACI,MAAO,8DAEnB,CAjDcC,CAAgBd,IADP,KAAAA,QAAAA,EAGfL,KAAKH,KAAO,mBACZG,KAAKF,KAAO,cAChB,GC/BJ,SAAYxB,GACR,mEACA,uDACA,qDACA,uDACA,kEACH,CAND,CAAYA,IAAAA,EAAuB,KAapB,MAAM8C,UAA4B5B,EAC7C,WAAAE,CAAmBW,GACfT,MAOR,SAAyBE,GACrB,OAAQA,GACJ,KAAKxB,EAAwB+C,uBACzB,MAAO,oFAEX,KAAK/C,EAAwBgD,sBACzB,MAAO,mFAEX,KAAKhD,EAAwBiD,uBACzB,MAAO,oFAEX,KAAKjD,EAAwBkD,6BACzB,MAAO,mFAEX,QACI,MAAO,6EAEnB,CAxBc,CAAgBnB,IADP,KAAAA,QAAAA,EAGfL,KAAKH,KAAO,sBACZG,KAAKF,KAAO,iBAChB,EMdW,MAAM2B,UAA6BjC,EAC9C,WAAAE,CAAYC,GACRC,MAAMD,GAAW,yCAEjBK,KAAKH,KAAO,uBACZG,KAAKF,KAAO,kBAChB,ECNW,MAAM4B,UAAoCD,EACrD,WAAA/B,CAAYiC,GACR,IAAIhC,EAAU,yEAEVgC,IACAhC,EAAU,GAAGA,4DAAkEgC,EAAcC,KACzF,UAIRhC,MAAMD,GAENK,KAAKH,KAAO,6BAChB,ECdW,MAAMgC,UAA0CrC,EAC3D,WAAAE,GACIE,MAAM,kEAENI,KAAKH,KAAO,oCACZG,KAAKF,KAAO,iCAChB,ECLW,MAAMgC,UAAoCtC,EACrD,WAAAE,CAAYC,GACRC,MAAMD,GAAW,kCAEjBK,KAAKH,KAAO,8BACZG,KAAKF,KAAO,mBAChB,ECTJ,MAAMiC,EAAmB,CACrBC,KAAM,CAAC,EACPC,QAAS,CAAC,EACVC,OAAQ,GAOG,MAAMC,UAAkC3C,EAMnD,WAAAE,CACI0C,GACA,QACIzC,EAAO,OACP0C,GAIA,CAAC,GAEL,MAAM,KAAEL,EAAI,QAAEC,EAAO,OAAEC,GAAWE,GAAYL,EAE9CnC,MAAMD,GAAW,qCAEjBK,KAAKH,KAAO,eACZG,KAAKF,KAAO,UACZE,KAAKgC,KAAOA,EACZhC,KAAKiC,QAAUA,EACfjC,KAAKkC,OAASA,EACdlC,KAAKqC,OAASA,GAAU,EAC5B,EC/BW,MAAMC,UAA2CH,EAC5D,WAAAzC,CAAY0C,GACRxC,MAAMwC,EAAU,CACZzC,QAAS,wEAGbK,KAAKH,KAAO,4BACZG,KAAKF,KAAO,wBAChB,ECjBW,MAAMyC,EACjB,WAAA7C,CAAoB8C,GAAA,KAAAA,eAAAA,CAAyB,CAE7C,SAAAC,CAAUC,GACN,OAAOC,KAAKC,MAAMF,EAAS,YAAM1C,KAAKwC,gBAC1C,E,IC0FQK,E,kSC/DG,MAAMC,EAGjB,WAAApD,CACYqD,EACAC,GADA,KAAAD,0BAAAA,EACA,KAAAC,mBAAAA,CACT,CAEG,UAAAC,CAAWC,G,8CACPlD,KAAK+C,0BAA0BI,kBAAkBD,EAAQE,UAE/D,MAAMC,EAAQrD,KAAK+C,0BAA0BO,YAEvC,YACFC,EACAC,QAAQ,SAAEC,IACVJ,EAAMK,wBAAwBR,EAAQE,UAE1C,IAAKG,EACD,MAAM,IAAInD,EAAiB/B,EAAqB4C,sBAGpDjB,KAAK2D,aAAe3D,KAAKgD,mBAAmBY,KAAKL,EAAaE,EAClE,E,CAEM,OAAAI,CAAQC,EAA2BZ,G,8CACrC,MAAME,EAA0B,QAAf,EAAAU,EAAQC,eAAO,eAAEX,UAC5B,eAAEY,GAAmBF,EAE3B,IAAK9D,KAAK2D,OACN,MAAM,IAAIvC,EAAoB9C,EAAwBgD,uBAG1D,IAAK8B,EACD,MAAM,IAAI1B,EAA4B,CAAC,2BAGrC1B,KAAK+C,0BAA0BkB,YAAY,CAAED,kBAAkBd,GAErE,MAEMgB,EAAiB,CACnBd,WACAe,YAAa,CAAEC,aAJUpE,KAAKqE,4BAIOC,uBAGnCtE,KAAK+C,0BAA0BwB,cAAcL,E,GAGvD,YAAAM,GAKI,OAJIxE,KAAK2D,SACL3D,KAAK2D,YAASc,GAGXC,QAAQC,SACnB,CAEA,QAAAC,GACI,OAAOF,QAAQG,OAAO,IAAIhD,EAC9B,CAEQ,wBAAAwC,G,MAGJ,OAFW,QAAX,EAAArE,KAAK2D,cAAM,SAAEmB,SAAS9E,KAAK+E,0BAEpB,IAAIL,QAAQ,CAACC,EAASE,K,QACd,QAAX,EAAA7E,KAAK2D,cAAM,SAAEmB,SAASE,KAAK,CACvBC,OAASC,IACqB,aAAtBA,EAAWC,OACXN,EAAO,IAAI/C,GAEX+C,EAAO,IAAIvC,IAGnB8C,UAAYC,IACRV,EAAQU,MAGL,QAAX,EAAArF,KAAK2D,cAAM,SAAE2B,GAAGC,MAAMC,GAAG,QAAS,KAC9BX,EAAO,IAAI/C,MAGvB,CAEQ,sBAAAiD,GACJ,MAAM1B,EAAQrD,KAAK+C,0BAA0BO,WACvCE,EAASH,EAAMoC,iBACfC,EAAerC,EAAMsC,kBACrBC,EAAQvC,EAAMwC,WACdC,EAAOzC,EAAM0C,UAEnB,IAAKvC,EACD,MAAM,IAAIpD,EAAiB/B,EAAqBsC,uBAGpD,IAAKiF,EACD,MAAM,IAAIxF,EAAiB/B,EAAqBoC,iBAGpD,MAAMuF,EAAoB,IAAIzD,EAAkBqD,EAAMK,SAASC,eACzDC,EAAiBnG,KAAKoG,oBAEtBC,EAA2BrG,KAAKsG,qBAChCC,ECnIe,EAACT,EAAatC,MAClCsC,MAIDA,EAAKU,UAAUC,cAAcC,KAAMC,GAAaA,EAASC,wBAIzDpD,IAAUsC,EAAKU,UAAUK,cAClBf,EAAKU,UAAUK,YAAYC,OAAS,GD0HvC,CAAqBhB,EAAMtC,IAAW6C,EAChCA,EACAF,EAEV,MAAO,CACHY,SAAU,CACNC,sBAAuBxD,EAAOyD,MAAMC,aACpCC,gBAAiB3D,EAAOyD,MAAMC,aAC9BE,6BAA8B,QAElCC,SAAUd,EACVe,QAASnB,EACToB,MAAOvH,KAAKwH,SAASxB,EAAmBJ,GACxC6B,SAAU,CACNC,cAAe1H,KAAK2H,gBAAgBjC,GACpCkC,KAAM,QACNC,cAAe,cACfC,iBAAkB,GAClBC,gBAAiB,IAErBC,UAAWhI,KAAKiI,aAAajC,EAAmBJ,GAChDsC,SAAUtC,EAAMuC,QAAUvC,EAAMuC,QAAQC,WAAa,GACrDC,gBAAiBrC,EAAkBvD,UAAUmD,EAAM0C,mBACnDC,WAAYvC,EAAkBvD,UAAUmD,EAAM4C,UAC9CC,MAAOzC,EAAkBvD,UAAUmD,EAAM8C,aAEjD,CAEQ,eAAAf,CAAgBjC,GACpB,IAAKA,EACD,MAAO,GAGX,MAAMiD,EAAcjD,EAAa,GAGjC,OAAOiD,aAAW,EAAXA,EAAaC,wBAAyBD,EAAYC,uBAAuB9I,KAAO,EAC3F,CAEQ,iBAAAsG,GACJ,MACMD,EADQnG,KAAK+C,0BAA0BO,WAChB8C,oBAE7B,IAAKD,EACD,MAAM,IAAI/F,EAAiB/B,EAAqBiC,uBAqBpD,MAlB2B,CACvBT,KAAM,CACFgJ,MAAO1C,EAAe2C,UACtBC,KAAM5C,EAAe6C,SACrBC,KAAM,GAAG9C,EAAe2C,aAAa3C,EAAe6C,YAExDE,QAAS,CACLC,MAAOhD,EAAeiD,SACtBC,MAAOlD,EAAemD,SACtBC,KAAMpD,EAAeoD,KACrBlG,MAAO8C,EAAeqD,oBACtBC,QAAStD,EAAeuD,WACxBC,QAASxD,EAAeyD,aAE5BC,aAAc1D,EAAe2D,MAC7BC,MAAO5D,EAAe4D,MAI9B,CAEQ,kBAAAzD,GACJ,MACMC,EADQvG,KAAK+C,0BAA0BO,WACfgD,qBAE9B,GAAKC,EAqBL,MAjB4B,CACxB1G,KAAM,CACFgJ,MAAOtC,EAAgBuC,UACvBC,KAAMxC,EAAgByC,SACtBC,KAAM,GAAG1C,EAAgBuC,aAAavC,EAAgByC,YAE1DE,QAAS,CACLC,MAAO5C,EAAgB6C,SACvBC,MAAO9C,EAAgB+C,SACvBC,KAAMhD,EAAgBgD,KACtBlG,MAAOkD,EAAgBiD,oBACvBC,QAASlD,EAAgBmD,WACzBC,QAASpD,EAAgBqD,aAE7BC,aAActD,EAAgBuD,MAItC,CAEQ,QAAAtC,CAASxB,EAAsCJ,GACnD,MAAM2B,EAAsB,GAkD5B,OAhDA3B,EAAMY,UAAUC,cAAcuD,QAASC,IACnC1C,EAAM2C,KAAK,CACPC,aAAcF,EAAKpK,KACnBuK,IAAKH,EAAKG,IACVC,WAAYrE,EAAkBvD,UAAUwH,EAAKK,WAC7CC,IAAKN,EAAKO,SACVC,eAAgBR,EAAKS,SACrBC,SAAUV,EAAKW,IACfC,WAAY7K,KAAK8K,cAAcb,EAAKY,gBAI5CjF,EAAMY,UAAUuE,aAAaf,QAASC,IAClC1C,EAAM2C,KAAK,CACPC,aAAcF,EAAKpK,KACnBuK,IAAKH,EAAKG,IACVC,WAAYrE,EAAkBvD,UAAUwH,EAAKK,WAC7CC,IAAKN,EAAKO,SACVC,eAAgBR,EAAKS,SACrBC,SAAUV,EAAKW,IACfC,WAAY7K,KAAK8K,cAAcb,EAAKY,gBAI5CjF,EAAMY,UAAUwE,iBAAiBhB,QAASC,IACtC1C,EAAM2C,KAAK,CACPC,aAAcF,EAAKpK,KACnBuK,IAAK,GACLC,WAAYrE,EAAkBvD,UAAUwH,EAAKvH,QAC7C6H,IAAK,EACLE,eAAgB,GAChBE,SAAU,OAId/E,EAAMY,UAAUK,aAChBjB,EAAMY,UAAUK,YAAYmD,QAASC,IACjC1C,EAAM2C,KAAK,CACPC,aAAcF,EAAKpK,KACnBuK,IAAKH,EAAKG,IACVC,WAAYrE,EAAkBvD,UAAUwH,EAAKgB,WAC7CV,IAAKN,EAAKO,SACVC,eAAgB,GAChBE,SAAU,OAKfpD,CACX,CAEQ,YAAAU,CAAajC,EAAsCJ,GACvD,MAAMoC,EAA4B,CAAC,EAkBnC,OAhBApC,EAAMsF,QAAQlB,QAASmB,IACfA,EAAKC,iBAAmB,IACxBpD,EAAUmD,EAAKE,MAAQ,CACnBC,gBAAiBtF,EAAkBvD,UAAU0I,EAAKC,kBAClDG,sBAAuBJ,EAAKK,gBAKpC5F,EAAM6F,eAAiB,IACvBzD,EAAU0D,kBAAoB,CAC1BJ,gBAAiBtF,EAAkBvD,UAAUmD,EAAM6F,gBACnDF,sBAAuB,aAIxBvD,CACX,CAEQ,aAAA8C,CAAcD,GAClB,OAAKA,EAIEA,EAAWc,IAAKC,GAAiBA,EAAaD,IAAKE,GAAaA,EAAShM,OAHrE,CAAC,GAIhB,EEnTW,MAAMiM,UAA4CtM,EAC7D,WAAAE,CAAYC,GACRC,MACID,GACI,uGAGRK,KAAKH,KAAO,sCACZG,KAAKF,KAAO,mCAChB,GHgFJ,SAAY+C,GACR,2CACA,qDACH,CAHD,CAAYA,IAAAA,EAAc,KI1FX,MAAMkJ,EACjB,WAAArM,CAAmBsM,EAAiCC,QAAjC,KAAAD,aAAAA,CAA0C,CAE7D,IAAApI,CAAKsI,EAAS,GAAIzI,GACd,MAAM0I,EAAY1I,EAAWZ,EAAeuJ,QAAUvJ,EAAewJ,KAIrE,GCeJ,SACIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAGA,MAAMC,EAAIP,EAAEE,IAAM,CAAC,EACbM,EAAIC,SAASC,cAAcL,GAC3BM,EAAIF,SAASG,qBAAqBP,GAAG,GACrCQ,EAAI,SAAaT,EAAiBG,EAAiBO,GACrD,OAAO,WACHV,EAAEG,GAAGQ,EAAEnD,KAAK,CAACkD,EAAGE,WACpB,CACJ,EAEAT,EAAEJ,GAAKU,EAAEN,EAAGJ,EAAG,OAEf,MAAMc,EAAIV,EAAEJ,GAEZI,EAAEH,GAAK,CAAC,EACRG,EAAEH,GAAGW,EAAI,GACTE,EAAEF,EAAI,GACNR,EAAEQ,EAAI,GACNR,EAAEH,GAAGE,GAAKO,EAAEN,EAAGH,EAAGE,GAElBC,EAAG,QAAI,WACHA,EAAEQ,EAAEnD,KAAK,CAAC0C,EAAGU,WACjB,EAEA,IAAIE,EAAK,EAET,IACI,MAAMC,EAAK,qEAAqEC,MAC5E,KAEJF,EAAKC,EAAG3G,OACR0G,IAEAD,EAAEE,EAAGD,IAAOL,EAAEN,EAAGJ,EAAGgB,EAAGD,IAG3B,IAAIG,EAAK,EAET,IAAK,MAAMC,EAAK,CAAC,MAAO,QAAS,MAAO,SAAUD,EAAKC,EAAG9G,OAAQ6G,IAC9DJ,EAAEK,EAAGD,IAAO,WAAmB,EAGnCb,EAAEe,OAAQ,EACVf,EAAEgB,IAAMvB,EAAEI,GAENM,EAAEc,YACFd,EAAEc,WAAWC,aAAalB,EAAGG,UAGzBV,EAA4BI,GACpCY,EAAEhB,GACFD,EAAEE,GAAKK,CACV,CA7DD,CA6DGZ,OAlEkC,CACjCgC,eDba/B,ECcbgC,ODdqB/B,GC8EE,SAAU,WAAY,KAAM,SAAU,UD5ExDnM,KAAKgM,aAAarI,OACnB,MAAM,IAAImI,EAGd,OAAOpH,QAAQC,QAAQ3E,KAAKgM,aAAarI,OAC7C,EEVJ,MAMA,ECRW/E,OAAOuP,ODGdpL,GAEO,IAAID,EAAsBC,EAA2B,IAAIgJ,GCLnC,CAAEqC,WDQ4B,CAAC,CAAEC,GAAI,a","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/webpack/runtime/make namespace object","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/affirm-integration/src/affirm.ts","webpack://@bigcommerce/checkout-sdk/./packages/affirm-integration/src/affirm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/items-require-shipping.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/affirm-integration/src/affirm-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/affirm-integration/src/affirmJs.ts","webpack://@bigcommerce/checkout-sdk/./packages/affirm-integration/src/create-affirm-payment-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * 10 ** this._decimalPlaces);\n    }\n}\n","export interface Affirm {\n    checkout: AffirmCheckout;\n    ui: {\n        error: {\n            on(event: string, callback: () => void): void;\n        };\n        ready(callback: () => void): void;\n    };\n}\n\nexport interface AffirmCheckout {\n    (options: AffirmRequestData): void;\n    open(modalOptions: AffirmCallback): void;\n    init(): void;\n}\n\ninterface AffirmCallback {\n    onFail(onFail: AffirmFailResponse): void;\n    onSuccess(success: AffirmSuccessResponse): void;\n}\n\nexport interface AffirmHostWindow extends Window {\n    affirm?: Affirm;\n}\n\nexport interface AffirmSuccessResponse {\n    checkout_token: string;\n    created: string;\n}\n\nexport interface AffirmFailResponse {\n    reason: string;\n}\n\nexport interface AffirmRequestData {\n    merchant: {\n        user_confirmation_url: string;\n        user_cancel_url: string;\n        user_confirmation_url_action?: string;\n        name?: string;\n    };\n    shipping: AffirmAddress;\n    billing?: AffirmAddress;\n    items: AffirmItem[];\n    discounts: AffirmDiscount;\n    metadata: {\n        shipping_type: string;\n        entity_name?: string;\n        webhook_session_id?: string;\n        mode?: string;\n        platform_type: string;\n        platform_version: string;\n        platform_affirm: string;\n    };\n    order_id?: string;\n    shipping_amount: number;\n    tax_amount: number;\n    total: number;\n}\n\nexport interface AffirmItem {\n    display_name: string;\n    sku: string;\n    unit_price: number;\n    qty: number;\n    item_image_url: string;\n    item_url: string;\n    categories?: string[][];\n}\n\nexport interface AffirmDiscount {\n    [key: string]: {\n        discount_amount: number;\n        discount_display_name: string;\n    };\n}\n\nexport interface AffirmAddress {\n    name: {\n        first: string;\n        last: string;\n        full?: string;\n    };\n    address: {\n        line1: string;\n        line2?: string;\n        city: string;\n        state: string;\n        zipcode: string;\n        country?: string;\n    };\n    phone_number?: string;\n    email?: string;\n}\n\nexport enum AFFIRM_SCRIPTS {\n    PROD = '//cdn1.affirm.com/js/v2/affirm.js',\n    SANDBOX = '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n}\n","import {\n    AmountTransformer,\n    Consignment,\n    itemsRequireShipping,\n    LineItemCategory,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Order,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    Affirm,\n    AffirmAddress,\n    AffirmDiscount,\n    AffirmFailResponse,\n    AffirmItem,\n    AffirmRequestData,\n    AffirmSuccessResponse,\n} from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private affirm?: Affirm;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private affirmScriptLoader: AffirmScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await this.paymentIntegrationService.loadPaymentMethod(options.methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const {\n            clientToken,\n            config: { testMode },\n        } = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.affirm = await this.affirmScriptLoader.load(clientToken, testMode);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const methodId = payload.payment?.methodId;\n        const { useStoreCredit } = payload;\n\n        if (!this.affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this.paymentIntegrationService.submitOrder({ useStoreCredit }, options);\n\n        const affirmCheckout = await this.initializeAffirmCheckout();\n\n        const paymentPayload = {\n            methodId,\n            paymentData: { nonce: affirmCheckout.checkout_token },\n        };\n\n        await this.paymentIntegrationService.submitPayment(paymentPayload);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.affirm) {\n            this.affirm = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private initializeAffirmCheckout(): Promise<AffirmSuccessResponse> {\n        this.affirm?.checkout(this.getCheckoutInformation());\n\n        return new Promise((resolve, reject) => {\n            this.affirm?.checkout.open({\n                onFail: (failObject: AffirmFailResponse) => {\n                    if (failObject.reason === 'canceled') {\n                        reject(new PaymentMethodCancelledError());\n                    } else {\n                        reject(new PaymentMethodInvalidError());\n                    }\n                },\n                onSuccess: (successObject) => {\n                    resolve(successObject);\n                },\n            });\n            this.affirm?.ui.error.on('close', () => {\n                reject(new PaymentMethodCancelledError());\n            });\n        });\n    }\n\n    private getCheckoutInformation(): AffirmRequestData {\n        const state = this.paymentIntegrationService.getState();\n        const config = state.getStoreConfig();\n        const consignments = state.getConsignments();\n        const order = state.getOrder();\n        const cart = state.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this.getBillingAddress();\n\n        const retrievedShippingAddress = this.getShippingAddress();\n        const shippingAddress =\n            itemsRequireShipping(cart, config) && retrievedShippingAddress\n                ? retrievedShippingAddress\n                : billingAddress;\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: shippingAddress,\n            billing: billingAddress,\n            items: this.getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this.getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this.getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        return consignment?.selectedShippingOption ? consignment.selectedShippingOption.type : '';\n    }\n\n    private getBillingAddress(): AffirmAddress {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private getShippingAddress(): AffirmAddress | undefined {\n        const state = this.paymentIntegrationService.getState();\n        const shippingAddress = state.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        order.lineItems.physicalItems.forEach((item) => {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this.getCategories(item.categories),\n            });\n        });\n\n        order.lineItems.digitalItems.forEach((item) => {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this.getCategories(item.categories),\n            });\n        });\n\n        order.lineItems.giftCertificates.forEach((item) => {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        });\n\n        if (order.lineItems.customItems) {\n            order.lineItems.customItems.forEach((item) => {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            });\n        }\n\n        return items;\n    }\n\n    private getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        order.coupons.forEach((line) => {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        });\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return [[]];\n        }\n\n        return categories.map((categoryTree) => categoryTree.map((category) => category.name));\n    }\n}\n","import { Cart } from '../cart';\nimport { StoreConfig } from '../config';\n\nconst itemsRequireShipping = (cart?: Cart, config?: StoreConfig) => {\n    if (!cart) {\n        return false;\n    }\n\n    if (cart.lineItems.physicalItems.some((lineItem) => lineItem.isShippingRequired)) {\n        return true;\n    }\n\n    if (config && cart.lineItems.customItems) {\n        return cart.lineItems.customItems.length > 0;\n    }\n\n    return false;\n};\n\nexport default itemsRequireShipping;\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Affirm, AFFIRM_SCRIPTS, AffirmHostWindow } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(public affirmWindow: AffirmHostWindow = window) {}\n\n    load(apikey = '', testMode?: boolean): Promise<Affirm> {\n        const scriptURI = testMode ? AFFIRM_SCRIPTS.SANDBOX : AFFIRM_SCRIPTS.PROD;\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this.affirmWindow.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this.affirmWindow.affirm);\n    }\n}\n","/* istanbul ignore file */\n\n/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable no-plusplus */\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-underscore-dangle */\n/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nimport { Affirm, AffirmHostWindow } from './affirm';\n\ninterface AffirmConfig {\n    public_api_key: string;\n    script: string;\n}\n\nexport default function loadAffirmJS(apiKey: string, scriptURL: string) {\n    const _AFFIRM_CONFIG: AffirmConfig = {\n        public_api_key: apiKey,\n        script: scriptURL,\n    };\n\n    (function foo(\n        m: AffirmHostWindow | any,\n        g: AffirmConfig,\n        n: 'affirm',\n        d: 'checkout',\n        a: 'ui',\n        e: 'script',\n        h: 'ready',\n        c: 'jsReady',\n    ) {\n        const b = m[n] || {};\n        const k = document.createElement(e);\n        const p = document.getElementsByTagName(e)[0];\n        const l = function bar(a: Affirm | any, b: keyof Affirm, c: string) {\n            return function baz() {\n                a[b]._.push([c, arguments]);\n            };\n        };\n\n        b[d] = l(b, d, 'set');\n\n        const f = b[d];\n\n        b[a] = {};\n        b[a]._ = [];\n        f._ = [];\n        b._ = [];\n        b[a][h] = l(b, a, h);\n\n        b[c] = function qux() {\n            b._.push([h, arguments]);\n        };\n\n        let a1 = 0;\n\n        for (\n            const c1 = 'set add save post open empty reset on off trigger ready setProduct'.split(\n                ' ',\n            );\n            a1 < c1.length;\n            a1++\n        ) {\n            f[c1[a1]] = l(b, d, c1[a1]);\n        }\n\n        let a2 = 0;\n\n        for (const c2 = ['get', 'token', 'url', 'items']; a2 < c2.length; a2++) {\n            f[c2[a2]] = function foobar() {};\n        }\n\n        k.async = !0;\n        k.src = g[e];\n\n        if (p.parentNode) {\n            p.parentNode.insertBefore(k, p);\n        }\n\n        delete (g as Partial<AffirmConfig>)[e];\n        f(g);\n        m[n] = b;\n    })(window, _AFFIRM_CONFIG, 'affirm', 'checkout', 'ui', 'script', 'ready', 'jsReady');\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AffirmPaymentStrategy from './affirm-payment-strategy';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nconst createAffirmPaymentStrategy: PaymentStrategyFactory<AffirmPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AffirmPaymentStrategy(paymentIntegrationService, new AffirmScriptLoader());\n};\n\nexport default toResolvableModule(createAffirmPaymentStrategy, [{ id: 'affirm' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n"],"names":["MissingDataErrorType","NotInitializedErrorType","__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","StandardError","Error","constructor","message","super","name","type","setPrototypeOf","this","__proto__","captureStackTrace","stack","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","OrderFinalizationNotRequiredError","PaymentMethodCancelledError","DEFAULT_RESPONSE","body","headers","status","RequestError","response","errors","PaymentMethodInvalidError","AmountTransformer","_decimalPlaces","toInteger","amount","Math","round","AFFIRM_SCRIPTS","AffirmPaymentStrategy","paymentIntegrationService","affirmScriptLoader","initialize","options","loadPaymentMethod","methodId","state","getState","clientToken","config","testMode","getPaymentMethodOrThrow","affirm","load","execute","payload","payment","useStoreCredit","submitOrder","paymentPayload","paymentData","nonce","initializeAffirmCheckout","checkout_token","submitPayment","deinitialize","undefined","Promise","resolve","finalize","reject","checkout","getCheckoutInformation","open","onFail","failObject","reason","onSuccess","successObject","ui","error","on","getStoreConfig","consignments","getConsignments","order","getOrder","cart","getCart","amountTransformer","currency","decimalPlaces","billingAddress","getBillingAddress","retrievedShippingAddress","getShippingAddress","shippingAddress","lineItems","physicalItems","some","lineItem","isShippingRequired","customItems","length","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","shipping","billing","items","getItems","metadata","shipping_type","getShippingType","mode","platform_type","platform_version","platform_affirm","discounts","getDiscounts","order_id","orderId","toString","shipping_amount","shippingCostTotal","tax_amount","taxTotal","total","orderAmount","consignment","selectedShippingOption","first","firstName","last","lastName","full","address","line1","address1","line2","address2","city","stateOrProvinceCode","zipcode","postalCode","country","countryCode","phone_number","phone","email","forEach","item","push","display_name","sku","unit_price","salePrice","qty","quantity","item_image_url","imageUrl","item_url","url","categories","getCategories","digitalItems","giftCertificates","listPrice","coupons","line","discountedAmount","code","discount_amount","discount_display_name","displayName","discountAmount","DISCOUNTED_AMOUNT","map","categoryTree","category","PaymentMethodClientUnavailableError","AffirmScriptLoader","affirmWindow","window","apikey","scriptURI","SANDBOX","PROD","m","g","n","d","a","e","h","b","k","document","createElement","p","getElementsByTagName","l","c","_","arguments","f","a1","c1","split","a2","c2","async","src","parentNode","insertBefore","public_api_key","script","assign","resolveIds","id"],"sourceRoot":""}